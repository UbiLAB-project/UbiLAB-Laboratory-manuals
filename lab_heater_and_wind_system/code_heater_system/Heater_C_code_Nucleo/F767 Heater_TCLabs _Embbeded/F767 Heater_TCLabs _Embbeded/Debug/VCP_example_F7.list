
VCP_example_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b294  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800b498  0800b498  0001b498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baec  0800baec  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800baec  0800baec  0001baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf4  0800baf4  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800bafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000021c  0800bd18  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800bd18  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014128  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9a  00000000  00000000  00034372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b043  00000000  00000000  00039020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138f5  00000000  00000000  00064063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c5de  00000000  00000000  00077958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  00183f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000021c 	.word	0x2000021c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b47c 	.word	0x0800b47c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000220 	.word	0x20000220
 800023c:	0800b47c 	.word	0x0800b47c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <Controller_real_time>:
float e_r[2] = {0.0, 0.0};
float y_r[2] = {0.0, 0.0};
float referenca = 30.0;
*/
void Controller_real_time()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d8:	4887      	ldr	r0, [pc, #540]	; (8000bf8 <Controller_real_time+0x228>)
 80009da:	f003 f92a 	bl	8003c32 <HAL_GPIO_TogglePin>
   //Read temperature
	temp1=readTemperature(pinT1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f001 f956 	bl	8001c90 <readTemperature>
 80009e4:	eef0 7a40 	vmov.f32	s15, s0
 80009e8:	4b84      	ldr	r3, [pc, #528]	; (8000bfc <Controller_real_time+0x22c>)
 80009ea:	edc3 7a00 	vstr	s15, [r3]
	temp2=readTemperature(pinT2);
 80009ee:	2002      	movs	r0, #2
 80009f0:	f001 f94e 	bl	8001c90 <readTemperature>
 80009f4:	eef0 7a40 	vmov.f32	s15, s0
 80009f8:	4b81      	ldr	r3, [pc, #516]	; (8000c00 <Controller_real_time+0x230>)
 80009fa:	edc3 7a00 	vstr	s15, [r3]

	sendFloatResponse1(temp1_ref, temp1,  u_k1, temp2_ref, temp2,  u_k2);
 80009fe:	4b81      	ldr	r3, [pc, #516]	; (8000c04 <Controller_real_time+0x234>)
 8000a00:	edd3 7a00 	vldr	s15, [r3]
 8000a04:	4b7d      	ldr	r3, [pc, #500]	; (8000bfc <Controller_real_time+0x22c>)
 8000a06:	ed93 7a00 	vldr	s14, [r3]
 8000a0a:	4b7f      	ldr	r3, [pc, #508]	; (8000c08 <Controller_real_time+0x238>)
 8000a0c:	edd3 6a00 	vldr	s13, [r3]
 8000a10:	4b7e      	ldr	r3, [pc, #504]	; (8000c0c <Controller_real_time+0x23c>)
 8000a12:	ed93 6a00 	vldr	s12, [r3]
 8000a16:	4b7a      	ldr	r3, [pc, #488]	; (8000c00 <Controller_real_time+0x230>)
 8000a18:	edd3 5a00 	vldr	s11, [r3]
 8000a1c:	4b7c      	ldr	r3, [pc, #496]	; (8000c10 <Controller_real_time+0x240>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	ee05 3a10 	vmov	s10, r3
 8000a24:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8000a28:	eef0 2a45 	vmov.f32	s5, s10
 8000a2c:	eeb0 2a65 	vmov.f32	s4, s11
 8000a30:	eef0 1a46 	vmov.f32	s3, s12
 8000a34:	eeb0 1a66 	vmov.f32	s2, s13
 8000a38:	eef0 0a47 	vmov.f32	s1, s14
 8000a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a40:	f000 fff6 	bl	8001a30 <sendFloatResponse1>


	//PID regulator1

	if(open_loop_enable1==0)
 8000a44:	4b73      	ldr	r3, [pc, #460]	; (8000c14 <Controller_real_time+0x244>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	f040 80c3 	bne.w	8000bdc <Controller_real_time+0x20c>
	{

		if(reg1==1)
 8000a56:	4b70      	ldr	r3, [pc, #448]	; (8000c18 <Controller_real_time+0x248>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a60:	eef4 7a47 	vcmp.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d174      	bne.n	8000b54 <Controller_real_time+0x184>
		{
		error1_k= temp1_ref - temp1;
 8000a6a:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <Controller_real_time+0x234>)
 8000a6c:	ed93 7a00 	vldr	s14, [r3]
 8000a70:	4b62      	ldr	r3, [pc, #392]	; (8000bfc <Controller_real_time+0x22c>)
 8000a72:	edd3 7a00 	vldr	s15, [r3]
 8000a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7a:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <Controller_real_time+0x24c>)
 8000a7c:	edc3 7a00 	vstr	s15, [r3]

		//P-proportional part
		  P_1 = Kp1 * error1_k;
 8000a80:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <Controller_real_time+0x250>)
 8000a82:	ed93 7a00 	vldr	s14, [r3]
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <Controller_real_time+0x24c>)
 8000a88:	edd3 7a00 	vldr	s15, [r3]
 8000a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a90:	4b64      	ldr	r3, [pc, #400]	; (8000c24 <Controller_real_time+0x254>)
 8000a92:	edc3 7a00 	vstr	s15, [r3]

		// I-integral part
		  I1 =  I1 + 1/(Ti1) *error1_k * Ts;
 8000a96:	4b64      	ldr	r3, [pc, #400]	; (8000c28 <Controller_real_time+0x258>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa2:	4b62      	ldr	r3, [pc, #392]	; (8000c2c <Controller_real_time+0x25c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <Controller_real_time+0x24c>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <Controller_real_time+0x260>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad0:	ee17 2a90 	vmov	r2, s15
 8000ad4:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <Controller_real_time+0x258>)
 8000ad6:	601a      	str	r2, [r3, #0]

	   // D-derivative part
		  D1 =  Td1/Ts * (error1_k - error1_k_1);
 8000ad8:	4b56      	ldr	r3, [pc, #344]	; (8000c34 <Controller_real_time+0x264>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ae4:	4b52      	ldr	r3, [pc, #328]	; (8000c30 <Controller_real_time+0x260>)
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000aee:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <Controller_real_time+0x24c>)
 8000af0:	edd3 6a00 	vldr	s13, [r3]
 8000af4:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <Controller_real_time+0x268>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
 8000afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b0c:	ee17 2a90 	vmov	r2, s15
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <Controller_real_time+0x26c>)
 8000b12:	601a      	str	r2, [r3, #0]
		  error1_k_1=error1_k;
 8000b14:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <Controller_real_time+0x24c>)
 8000b16:	edd3 7a00 	vldr	s15, [r3]
 8000b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b1e:	ee17 2a90 	vmov	r2, s15
 8000b22:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <Controller_real_time+0x268>)
 8000b24:	601a      	str	r2, [r3, #0]

		 //Output
		u_k1 = P_1  + I1 + D1;
 8000b26:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <Controller_real_time+0x258>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <Controller_real_time+0x254>)
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <Controller_real_time+0x26c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <Controller_real_time+0x238>)
 8000b4e:	edc3 7a00 	vstr	s15, [r3]
 8000b52:	e043      	b.n	8000bdc <Controller_real_time+0x20c>
		}
		else if(reg1==2)
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <Controller_real_time+0x248>)
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000b5e:	eef4 7a47 	vcmp.f32	s15, s14
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	d139      	bne.n	8000bdc <Controller_real_time+0x20c>
		{
		    //Prehitevalni kompenzator
			error1_k=temp1_ref - temp1;
 8000b68:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <Controller_real_time+0x234>)
 8000b6a:	ed93 7a00 	vldr	s14, [r3]
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <Controller_real_time+0x22c>)
 8000b70:	edd3 7a00 	vldr	s15, [r3]
 8000b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <Controller_real_time+0x24c>)
 8000b7a:	edc3 7a00 	vstr	s15, [r3]
			u_k1=a_pz1 * u_k1_1 + k_pz1*(error1_k - b_pz1*error1_k_1);
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <Controller_real_time+0x270>)
 8000b80:	ed93 7a00 	vldr	s14, [r3]
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <Controller_real_time+0x274>)
 8000b86:	edd3 7a00 	vldr	s15, [r3]
 8000b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <Controller_real_time+0x24c>)
 8000b90:	edd3 6a00 	vldr	s13, [r3]
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <Controller_real_time+0x268>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <Controller_real_time+0x278>)
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000baa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <Controller_real_time+0x27c>)
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <Controller_real_time+0x238>)
 8000bbe:	edc3 7a00 	vstr	s15, [r3]
			u_k1_1=u_k1;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <Controller_real_time+0x238>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <Controller_real_time+0x274>)
 8000bc8:	6013      	str	r3, [r2, #0]
			error1_k_1=error1_k;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <Controller_real_time+0x24c>)
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd4:	ee17 2a90 	vmov	r2, s15
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <Controller_real_time+0x268>)
 8000bda:	601a      	str	r2, [r3, #0]
		}
	}

	if(u_k1>255)
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <Controller_real_time+0x238>)
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c50 <Controller_real_time+0x280>
 8000be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	dd33      	ble.n	8000c58 <Controller_real_time+0x288>
		u_k1=255;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <Controller_real_time+0x238>)
 8000bf2:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <Controller_real_time+0x284>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e03b      	b.n	8000c70 <Controller_real_time+0x2a0>
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	200002d4 	.word	0x200002d4
 8000c00:	200002bc 	.word	0x200002bc
 8000c04:	20000010 	.word	0x20000010
 8000c08:	20000294 	.word	0x20000294
 8000c0c:	2000027c 	.word	0x2000027c
 8000c10:	20000298 	.word	0x20000298
 8000c14:	2000029c 	.word	0x2000029c
 8000c18:	20000034 	.word	0x20000034
 8000c1c:	20000258 	.word	0x20000258
 8000c20:	20000014 	.word	0x20000014
 8000c24:	20000240 	.word	0x20000240
 8000c28:	20000244 	.word	0x20000244
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000000 	.word	0x20000000
 8000c34:	2000001c 	.word	0x2000001c
 8000c38:	200002b8 	.word	0x200002b8
 8000c3c:	20000248 	.word	0x20000248
 8000c40:	20000284 	.word	0x20000284
 8000c44:	20000238 	.word	0x20000238
 8000c48:	20000288 	.word	0x20000288
 8000c4c:	2000002c 	.word	0x2000002c
 8000c50:	437f0000 	.word	0x437f0000
 8000c54:	437f0000 	.word	0x437f0000
	else if(u_k1<0)
 8000c58:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <Controller_real_time+0x494>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d503      	bpl.n	8000c70 <Controller_real_time+0x2a0>
		u_k1=0;
 8000c68:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <Controller_real_time+0x494>)
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]

	if(open_loop_enable2==0)
 8000c70:	4b7d      	ldr	r3, [pc, #500]	; (8000e68 <Controller_real_time+0x498>)
 8000c72:	edd3 7a00 	vldr	s15, [r3]
 8000c76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7e:	f040 80ce 	bne.w	8000e1e <Controller_real_time+0x44e>
	{

		if(reg2==1)
 8000c82:	4b7a      	ldr	r3, [pc, #488]	; (8000e6c <Controller_real_time+0x49c>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c8c:	eef4 7a47 	vcmp.f32	s15, s14
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	d177      	bne.n	8000d86 <Controller_real_time+0x3b6>
			{
			error2_k= temp2_ref - temp2;
 8000c96:	4b76      	ldr	r3, [pc, #472]	; (8000e70 <Controller_real_time+0x4a0>)
 8000c98:	ed93 7a00 	vldr	s14, [r3]
 8000c9c:	4b75      	ldr	r3, [pc, #468]	; (8000e74 <Controller_real_time+0x4a4>)
 8000c9e:	edd3 7a00 	vldr	s15, [r3]
 8000ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca6:	4b74      	ldr	r3, [pc, #464]	; (8000e78 <Controller_real_time+0x4a8>)
 8000ca8:	edc3 7a00 	vstr	s15, [r3]

			//P-proportional part
			  P_2 = Kp2 * error2_k;
 8000cac:	4b73      	ldr	r3, [pc, #460]	; (8000e7c <Controller_real_time+0x4ac>)
 8000cae:	ed93 7a00 	vldr	s14, [r3]
 8000cb2:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <Controller_real_time+0x4a8>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cbc:	4b70      	ldr	r3, [pc, #448]	; (8000e80 <Controller_real_time+0x4b0>)
 8000cbe:	edc3 7a00 	vstr	s15, [r3]

			// I-integral part
			  I2 =  I2 + 1/(Ti2) *error2_k * Ts;
 8000cc2:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <Controller_real_time+0x4b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <Controller_real_time+0x4b8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <Controller_real_time+0x4a8>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cea:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <Controller_real_time+0x4bc>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfc:	ee17 2a90 	vmov	r2, s15
 8000d00:	4b60      	ldr	r3, [pc, #384]	; (8000e84 <Controller_real_time+0x4b4>)
 8000d02:	601a      	str	r2, [r3, #0]

		   // D-derivative part
			  D2 =  Td2/Ts * (error2_k - error2_k_1);
 8000d04:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <Controller_real_time+0x4c0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d10:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <Controller_real_time+0x4bc>)
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d1a:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <Controller_real_time+0x4a8>)
 8000d1c:	edd3 6a00 	vldr	s13, [r3]
 8000d20:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <Controller_real_time+0x4c4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d38:	ee17 2a90 	vmov	r2, s15
 8000d3c:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <Controller_real_time+0x4c8>)
 8000d3e:	601a      	str	r2, [r3, #0]
			  error2_k_1=error2_k;
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <Controller_real_time+0x4a8>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	ee17 2a90 	vmov	r2, s15
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <Controller_real_time+0x4c4>)
 8000d50:	601a      	str	r2, [r3, #0]

			 //Output
			u_k2 = P_2  + I2 + D2;
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <Controller_real_time+0x4b4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <Controller_real_time+0x4b0>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <Controller_real_time+0x4c8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7c:	ee17 2a90 	vmov	r2, s15
 8000d80:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <Controller_real_time+0x4cc>)
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e04b      	b.n	8000e1e <Controller_real_time+0x44e>
			}
		else if(reg2==2)
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <Controller_real_time+0x49c>)
 8000d88:	edd3 7a00 	vldr	s15, [r3]
 8000d8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d90:	eef4 7a47 	vcmp.f32	s15, s14
 8000d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d98:	d141      	bne.n	8000e1e <Controller_real_time+0x44e>
		{
			//Prehitevalni kompenzator
			error2_k=temp2_ref - temp2;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <Controller_real_time+0x4a0>)
 8000d9c:	ed93 7a00 	vldr	s14, [r3]
 8000da0:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <Controller_real_time+0x4a4>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <Controller_real_time+0x4a8>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]
			u_k2=a_pz2 * u_k2_1 + k_pz2*(error2_k - b_pz2*error2_k_1);
 8000db0:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <Controller_real_time+0x4d0>)
 8000db2:	ed93 7a00 	vldr	s14, [r3]
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <Controller_real_time+0x4d4>)
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <Controller_real_time+0x4a8>)
 8000dc2:	edd3 6a00 	vldr	s13, [r3]
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <Controller_real_time+0x4c4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <Controller_real_time+0x4d8>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ddc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <Controller_real_time+0x4dc>)
 8000de2:	edd3 7a00 	vldr	s15, [r3]
 8000de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df2:	ee17 2a90 	vmov	r2, s15
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <Controller_real_time+0x4cc>)
 8000df8:	601a      	str	r2, [r3, #0]
			u_k2_1=u_k2;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <Controller_real_time+0x4cc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <Controller_real_time+0x4d4>)
 8000e08:	edc3 7a00 	vstr	s15, [r3]
			error2_k_1=error2_k;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <Controller_real_time+0x4a8>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e16:	ee17 2a90 	vmov	r2, s15
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <Controller_real_time+0x4c4>)
 8000e1c:	601a      	str	r2, [r3, #0]
		}
	}

	if(u_k2>255)
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <Controller_real_time+0x4cc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	dd03      	ble.n	8000e2e <Controller_real_time+0x45e>
		u_k2=255;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <Controller_real_time+0x4cc>)
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e006      	b.n	8000e3c <Controller_real_time+0x46c>
	else if(u_k2<0)
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <Controller_real_time+0x4cc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da02      	bge.n	8000e3c <Controller_real_time+0x46c>
		u_k2=0;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <Controller_real_time+0x4cc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	{
		y_r[1]=0;
	}
*/
   //Set output values
	setHeater1(u_k1); //Span [0-255]   y_r[1]
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <Controller_real_time+0x494>)
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	eeb0 0a67 	vmov.f32	s0, s15
 8000e46:	f000 ffe9 	bl	8001e1c <setHeater1>
	setHeater2(u_k2); //Span [0-255]
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <Controller_real_time+0x4cc>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e56:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5a:	f001 f825 	bl	8001ea8 <setHeater2>

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000294 	.word	0x20000294
 8000e68:	200002a0 	.word	0x200002a0
 8000e6c:	20000038 	.word	0x20000038
 8000e70:	2000027c 	.word	0x2000027c
 8000e74:	200002bc 	.word	0x200002bc
 8000e78:	2000025c 	.word	0x2000025c
 8000e7c:	20000020 	.word	0x20000020
 8000e80:	2000024c 	.word	0x2000024c
 8000e84:	20000250 	.word	0x20000250
 8000e88:	20000024 	.word	0x20000024
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000028 	.word	0x20000028
 8000e94:	200002b4 	.word	0x200002b4
 8000e98:	20000254 	.word	0x20000254
 8000e9c:	20000298 	.word	0x20000298
 8000ea0:	2000028c 	.word	0x2000028c
 8000ea4:	2000023c 	.word	0x2000023c
 8000ea8:	20000290 	.word	0x20000290
 8000eac:	20000030 	.word	0x20000030

08000eb0 <Serial_read_main_TCLab>:
float open_loop_enable;

/***************************************************************************************************/
/***************************************************************************************************/
/* Read with serial interrupt --------> called from 'void USART2_IRQHandler(void)' ---------------------------------*/
void Serial_read_main_TCLab(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0



	  ReceiveData();
 8000eb4:	f000 f81c 	bl	8000ef0 <ReceiveData>

	  if( newData == true)
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <Serial_read_main_TCLab+0x38>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d111      	bne.n	8000ee4 <Serial_read_main_TCLab+0x34>
	  	{

		  LD1(1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <Serial_read_main_TCLab+0x3c>)
 8000ec6:	f002 fe9b 	bl	8003c00 <HAL_GPIO_WritePin>
		  checkAlarm();
 8000eca:	f001 f82b 	bl	8001f24 <checkAlarm>
	      ParseData();
 8000ece:	f000 f849 	bl	8000f64 <ParseData>
	      dispatchCommand();
 8000ed2:	f000 f8e7 	bl	80010a4 <dispatchCommand>
	      CleanData();
 8000ed6:	f000 fd2f 	bl	8001938 <CleanData>
	      LD1(0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <Serial_read_main_TCLab+0x3c>)
 8000ee0:	f002 fe8e 	bl	8003c00 <HAL_GPIO_WritePin>
	  	}



}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000268 	.word	0x20000268
 8000eec:	40020400 	.word	0x40020400

08000ef0 <ReceiveData>:


/***************************************************************************************************/
/* Receive function */
void ReceiveData()
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	/*-- Receive single character -- */
	  RX_data=USART3->RDR;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <ReceiveData+0x60>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <ReceiveData+0x64>)
 8000efc:	701a      	strb	r2, [r3, #0]

    /*-- Receive data 13-CR  10-LF new line -- */
	  if ((RX_data != 13) && (RX_data != 10) && (RX_data != 38) && (buffer_index < 64)) {   // (RX_data != 13) && (RX_data != 10)&&(buffer_index < 64)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <ReceiveData+0x64>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b0d      	cmp	r3, #13
 8000f04:	d017      	beq.n	8000f36 <ReceiveData+0x46>
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <ReceiveData+0x64>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d013      	beq.n	8000f36 <ReceiveData+0x46>
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <ReceiveData+0x64>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b26      	cmp	r3, #38	; 0x26
 8000f14:	d00f      	beq.n	8000f36 <ReceiveData+0x46>
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <ReceiveData+0x68>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1c:	dc0b      	bgt.n	8000f36 <ReceiveData+0x46>
	      Buffer[buffer_index] = RX_data;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <ReceiveData+0x68>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <ReceiveData+0x64>)
 8000f24:	7811      	ldrb	r1, [r2, #0]
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <ReceiveData+0x6c>)
 8000f28:	54d1      	strb	r1, [r2, r3]
	      buffer_index++;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <ReceiveData+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <ReceiveData+0x68>)
 8000f32:	6013      	str	r3, [r2, #0]
           if(buffer_index!=0)
	        {newData = true;}
	    }


}
 8000f34:	e006      	b.n	8000f44 <ReceiveData+0x54>
           if(buffer_index!=0)
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <ReceiveData+0x68>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <ReceiveData+0x54>
	        {newData = true;}
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <ReceiveData+0x70>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	200002e0 	.word	0x200002e0
 8000f58:	2000026c 	.word	0x2000026c
 8000f5c:	200002e8 	.word	0x200002e8
 8000f60:	20000268 	.word	0x20000268

08000f64 <ParseData>:

/***************************************************************************************************/
/* Parse function */
void ParseData()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

	 /*-- Parse received data with 'SPACE' character --*/

		  //HAL_UART_Transmit(&huart2, &Buffer, buffer_index, 10); //Received data

            for(int i=0;i<buffer_index;i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e02c      	b.n	8000fca <ParseData+0x66>
            {
                     if(Buffer[i]!=32)  //Separte first command with space
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <ParseData+0x124>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d02c      	beq.n	8000fd6 <ParseData+0x72>
                     {
							  //UpperCase
							  if(Buffer[i]>96 && Buffer[i]<123) //lowerCase characters
 8000f7c:	4a42      	ldr	r2, [pc, #264]	; (8001088 <ParseData+0x124>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b60      	cmp	r3, #96	; 0x60
 8000f86:	d910      	bls.n	8000faa <ParseData+0x46>
 8000f88:	4a3f      	ldr	r2, [pc, #252]	; (8001088 <ParseData+0x124>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b7a      	cmp	r3, #122	; 0x7a
 8000f92:	d80a      	bhi.n	8000faa <ParseData+0x46>
							  {
								  cmd[cmd_length]=Buffer[i]-32;
 8000f94:	4a3c      	ldr	r2, [pc, #240]	; (8001088 <ParseData+0x124>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <ParseData+0x128>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3a20      	subs	r2, #32
 8000fa2:	b2d1      	uxtb	r1, r2
 8000fa4:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <ParseData+0x12c>)
 8000fa6:	54d1      	strb	r1, [r2, r3]
 8000fa8:	e007      	b.n	8000fba <ParseData+0x56>
							  } else
							  {
								  cmd[cmd_length]=Buffer[i];
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <ParseData+0x128>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4936      	ldr	r1, [pc, #216]	; (8001088 <ParseData+0x124>)
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	440a      	add	r2, r1
 8000fb4:	7811      	ldrb	r1, [r2, #0]
 8000fb6:	4a36      	ldr	r2, [pc, #216]	; (8001090 <ParseData+0x12c>)
 8000fb8:	54d1      	strb	r1, [r2, r3]
							  }
							  	  	  cmd_length++;
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <ParseData+0x128>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a32      	ldr	r2, [pc, #200]	; (800108c <ParseData+0x128>)
 8000fc2:	6013      	str	r3, [r2, #0]
            for(int i=0;i<buffer_index;i++)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <ParseData+0x130>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbcd      	blt.n	8000f70 <ParseData+0xc>
 8000fd4:	e000      	b.n	8000fd8 <ParseData+0x74>

                     }else
                     {
                    	 	 break;
 8000fd6:	bf00      	nop
                     }
            }

          /*-- Parse received number after commad string and 'SPACE character'--*/
		 if(cmd_length!=buffer_index){
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <ParseData+0x128>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <ParseData+0x130>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d03a      	beq.n	800105a <ParseData+0xf6>
				 for(int i=cmd_length+1;i<buffer_index;i++)
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <ParseData+0x128>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e030      	b.n	8001050 <ParseData+0xec>
				 {
					 if( (Buffer[i]<47 || Buffer[i]>58) && Buffer[i]!=46) //46='.' ASCII numbers=[47  58]
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <ParseData+0x124>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff8:	d905      	bls.n	8001006 <ParseData+0xa2>
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <ParseData+0x124>)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b3a      	cmp	r3, #58	; 0x3a
 8001004:	d90a      	bls.n	800101c <ParseData+0xb8>
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <ParseData+0x124>)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b2e      	cmp	r3, #46	; 0x2e
 8001010:	d004      	beq.n	800101c <ParseData+0xb8>
					 {

						 if(val_length!=0)
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <ParseData+0x134>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d017      	beq.n	800104a <ParseData+0xe6>
							  break;
 800101a:	e01e      	b.n	800105a <ParseData+0xf6>

					 }else
					 {
						 if(val_length==0 && Buffer[i]==46)
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <ParseData+0x134>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <ParseData+0xcc>
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <ParseData+0x124>)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b2e      	cmp	r3, #46	; 0x2e
 800102e:	d014      	beq.n	800105a <ParseData+0xf6>
							 break;
						 else
						 {
							value_str[val_length]=Buffer[i];
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <ParseData+0x134>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4914      	ldr	r1, [pc, #80]	; (8001088 <ParseData+0x124>)
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	440a      	add	r2, r1
 800103a:	7811      	ldrb	r1, [r2, #0]
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <ParseData+0x138>)
 800103e:	54d1      	strb	r1, [r2, r3]
							val_length++;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <ParseData+0x134>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <ParseData+0x134>)
 8001048:	6013      	str	r3, [r2, #0]
				 for(int i=cmd_length+1;i<buffer_index;i++)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <ParseData+0x130>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	dbc9      	blt.n	8000fee <ParseData+0x8a>

				 }
		 }//END IF

		 /*--Convert to float*/
		 if (val_length!=0)
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <ParseData+0x134>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <ParseData+0x112>
		 {
			 val=strtof(value_str,NULL);
 8001062:	2100      	movs	r1, #0
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <ParseData+0x138>)
 8001066:	f007 fb57 	bl	8008718 <strtof>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <ParseData+0x13c>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
		 {
			 val=0.0;
		 }


}/*END OF FUNCTION*/
 8001074:	e003      	b.n	800107e <ParseData+0x11a>
			 val=0.0;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <ParseData+0x13c>)
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
}/*END OF FUNCTION*/
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002e8 	.word	0x200002e8
 800108c:	20000274 	.word	0x20000274
 8001090:	20000338 	.word	0x20000338
 8001094:	2000026c 	.word	0x2000026c
 8001098:	20000278 	.word	0x20000278
 800109c:	20000328 	.word	0x20000328
 80010a0:	20000270 	.word	0x20000270

080010a4 <dispatchCommand>:


/***************************************************************************************************/
/*Dispatch Command*/
void dispatchCommand(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af04      	add	r7, sp, #16
	char command_msg[30];

  if (memcmp(cmd ,"START",5)==0) {   //Start real time
 80010aa:	2205      	movs	r2, #5
 80010ac:	49ac      	ldr	r1, [pc, #688]	; (8001360 <dispatchCommand+0x2bc>)
 80010ae:	48ad      	ldr	r0, [pc, #692]	; (8001364 <dispatchCommand+0x2c0>)
 80010b0:	f006 f8c6 	bl	8007240 <memcmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10e      	bne.n	80010d8 <dispatchCommand+0x34>
    setHeater1(0);
 80010ba:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001368 <dispatchCommand+0x2c4>
 80010be:	f000 fead 	bl	8001e1c <setHeater1>
    setHeater2(0);
 80010c2:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001368 <dispatchCommand+0x2c4>
 80010c6:	f000 feef 	bl	8001ea8 <setHeater2>
    real_time_flag=1;
 80010ca:	4ba8      	ldr	r3, [pc, #672]	; (800136c <dispatchCommand+0x2c8>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
    sendResponse("Start");
 80010d0:	48a7      	ldr	r0, [pc, #668]	; (8001370 <dispatchCommand+0x2cc>)
 80010d2:	f000 fc5f 	bl	8001994 <sendResponse>
    setHeater1(0);
    setHeater2(0);
    sendResponse(cmd);
  }

}
 80010d6:	e3e5      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"STOP",4)==0) {   //STOP real time
 80010d8:	2204      	movs	r2, #4
 80010da:	49a6      	ldr	r1, [pc, #664]	; (8001374 <dispatchCommand+0x2d0>)
 80010dc:	48a1      	ldr	r0, [pc, #644]	; (8001364 <dispatchCommand+0x2c0>)
 80010de:	f006 f8af 	bl	8007240 <memcmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10e      	bne.n	8001106 <dispatchCommand+0x62>
      setHeater1(0);
 80010e8:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8001368 <dispatchCommand+0x2c4>
 80010ec:	f000 fe96 	bl	8001e1c <setHeater1>
      setHeater2(0);
 80010f0:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001368 <dispatchCommand+0x2c4>
 80010f4:	f000 fed8 	bl	8001ea8 <setHeater2>
      real_time_flag=0;
 80010f8:	4b9c      	ldr	r3, [pc, #624]	; (800136c <dispatchCommand+0x2c8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
      sendResponse("Stop");
 80010fe:	489e      	ldr	r0, [pc, #632]	; (8001378 <dispatchCommand+0x2d4>)
 8001100:	f000 fc48 	bl	8001994 <sendResponse>
}
 8001104:	e3ce      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"LED",3)==0) {
 8001106:	2203      	movs	r2, #3
 8001108:	499c      	ldr	r1, [pc, #624]	; (800137c <dispatchCommand+0x2d8>)
 800110a:	4896      	ldr	r0, [pc, #600]	; (8001364 <dispatchCommand+0x2c0>)
 800110c:	f006 f898 	bl	8007240 <memcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <dispatchCommand+0x7a>
     sendResponse("100");
 8001116:	489a      	ldr	r0, [pc, #616]	; (8001380 <dispatchCommand+0x2dc>)
 8001118:	f000 fc3c 	bl	8001994 <sendResponse>
}
 800111c:	e3c2      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"P1",2)==0) {
 800111e:	2202      	movs	r2, #2
 8001120:	4998      	ldr	r1, [pc, #608]	; (8001384 <dispatchCommand+0x2e0>)
 8001122:	4890      	ldr	r0, [pc, #576]	; (8001364 <dispatchCommand+0x2c0>)
 8001124:	f006 f88c 	bl	8007240 <memcmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d13c      	bne.n	80011a8 <dispatchCommand+0x104>
    P1 = max(0, min(255, val));
 800112e:	4b96      	ldr	r3, [pc, #600]	; (8001388 <dispatchCommand+0x2e4>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800138c <dispatchCommand+0x2e8>
 8001138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dd01      	ble.n	8001146 <dispatchCommand+0xa2>
 8001142:	2300      	movs	r3, #0
 8001144:	e00a      	b.n	800115c <dispatchCommand+0xb8>
 8001146:	4b90      	ldr	r3, [pc, #576]	; (8001388 <dispatchCommand+0x2e4>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	bf4c      	ite	mi
 8001156:	2301      	movmi	r3, #1
 8001158:	2300      	movpl	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <dispatchCommand+0xc2>
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e00d      	b.n	8001182 <dispatchCommand+0xde>
 8001166:	4b88      	ldr	r3, [pc, #544]	; (8001388 <dispatchCommand+0x2e4>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800138c <dispatchCommand+0x2e8>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <dispatchCommand+0xda>
 800117a:	4b85      	ldr	r3, [pc, #532]	; (8001390 <dispatchCommand+0x2ec>)
 800117c:	e001      	b.n	8001182 <dispatchCommand+0xde>
 800117e:	4b82      	ldr	r3, [pc, #520]	; (8001388 <dispatchCommand+0x2e4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a84      	ldr	r2, [pc, #528]	; (8001394 <dispatchCommand+0x2f0>)
 8001184:	6013      	str	r3, [r2, #0]
    sprintf(command_msg,"%d",(int)P1);
 8001186:	4b83      	ldr	r3, [pc, #524]	; (8001394 <dispatchCommand+0x2f0>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	463b      	mov	r3, r7
 8001192:	ee17 2a90 	vmov	r2, s15
 8001196:	4980      	ldr	r1, [pc, #512]	; (8001398 <dispatchCommand+0x2f4>)
 8001198:	4618      	mov	r0, r3
 800119a:	f006 fcab 	bl	8007af4 <siprintf>
    sendResponse(command_msg);
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fbf7 	bl	8001994 <sendResponse>
}
 80011a6:	e37d      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"P2",2)==0) {
 80011a8:	2202      	movs	r2, #2
 80011aa:	497c      	ldr	r1, [pc, #496]	; (800139c <dispatchCommand+0x2f8>)
 80011ac:	486d      	ldr	r0, [pc, #436]	; (8001364 <dispatchCommand+0x2c0>)
 80011ae:	f006 f847 	bl	8007240 <memcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d13c      	bne.n	8001232 <dispatchCommand+0x18e>
    P2 = max(0, min(255, val));
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <dispatchCommand+0x2e4>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800138c <dispatchCommand+0x2e8>
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dd01      	ble.n	80011d0 <dispatchCommand+0x12c>
 80011cc:	2300      	movs	r3, #0
 80011ce:	e00a      	b.n	80011e6 <dispatchCommand+0x142>
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <dispatchCommand+0x2e4>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	bf4c      	ite	mi
 80011e0:	2301      	movmi	r3, #1
 80011e2:	2300      	movpl	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <dispatchCommand+0x14c>
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	e00d      	b.n	800120c <dispatchCommand+0x168>
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <dispatchCommand+0x2e4>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800138c <dispatchCommand+0x2e8>
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dd01      	ble.n	8001208 <dispatchCommand+0x164>
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <dispatchCommand+0x2ec>)
 8001206:	e001      	b.n	800120c <dispatchCommand+0x168>
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <dispatchCommand+0x2e4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a64      	ldr	r2, [pc, #400]	; (80013a0 <dispatchCommand+0x2fc>)
 800120e:	6013      	str	r3, [r2, #0]
    sprintf(command_msg,"%d",(int)P2);
 8001210:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <dispatchCommand+0x2fc>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	463b      	mov	r3, r7
 800121c:	ee17 2a90 	vmov	r2, s15
 8001220:	495d      	ldr	r1, [pc, #372]	; (8001398 <dispatchCommand+0x2f4>)
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fc66 	bl	8007af4 <siprintf>
     sendResponse(command_msg);
 8001228:	463b      	mov	r3, r7
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fbb2 	bl	8001994 <sendResponse>
}
 8001230:	e338      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"REF1",4)==0) {//Reference value for temp1
 8001232:	2204      	movs	r2, #4
 8001234:	495b      	ldr	r1, [pc, #364]	; (80013a4 <dispatchCommand+0x300>)
 8001236:	484b      	ldr	r0, [pc, #300]	; (8001364 <dispatchCommand+0x2c0>)
 8001238:	f006 f802 	bl	8007240 <memcmp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <dispatchCommand+0x1a8>
	    temp1_ref=val;
 8001242:	4b51      	ldr	r3, [pc, #324]	; (8001388 <dispatchCommand+0x2e4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a58      	ldr	r2, [pc, #352]	; (80013a8 <dispatchCommand+0x304>)
 8001248:	6013      	str	r3, [r2, #0]
}
 800124a:	e32b      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"REF2",4)==0) {//Reference value for temp2
 800124c:	2204      	movs	r2, #4
 800124e:	4957      	ldr	r1, [pc, #348]	; (80013ac <dispatchCommand+0x308>)
 8001250:	4844      	ldr	r0, [pc, #272]	; (8001364 <dispatchCommand+0x2c0>)
 8001252:	f005 fff5 	bl	8007240 <memcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d104      	bne.n	8001266 <dispatchCommand+0x1c2>
	    temp2_ref=val;
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <dispatchCommand+0x2e4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a53      	ldr	r2, [pc, #332]	; (80013b0 <dispatchCommand+0x30c>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	e31e      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"Q1",2)==0) {
 8001266:	2202      	movs	r2, #2
 8001268:	4952      	ldr	r1, [pc, #328]	; (80013b4 <dispatchCommand+0x310>)
 800126a:	483e      	ldr	r0, [pc, #248]	; (8001364 <dispatchCommand+0x2c0>)
 800126c:	f005 ffe8 	bl	8007240 <memcmp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <dispatchCommand+0x1f2>
	  if(open_loop_enable1==1)
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <dispatchCommand+0x314>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001280:	eef4 7a47 	vcmp.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	f040 830c 	bne.w	80018a4 <dispatchCommand+0x800>
		  u_k1=val;
 800128c:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <dispatchCommand+0x2e4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a4a      	ldr	r2, [pc, #296]	; (80013bc <dispatchCommand+0x318>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	e306      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"Q1B",3)==0) {
 8001296:	2203      	movs	r2, #3
 8001298:	4949      	ldr	r1, [pc, #292]	; (80013c0 <dispatchCommand+0x31c>)
 800129a:	4832      	ldr	r0, [pc, #200]	; (8001364 <dispatchCommand+0x2c0>)
 800129c:	f005 ffd0 	bl	8007240 <memcmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10e      	bne.n	80012c4 <dispatchCommand+0x220>
    setHeater1(val);
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <dispatchCommand+0x2e4>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	f000 fdb4 	bl	8001e1c <setHeater1>
    sendBinaryResponse(Q1);
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <dispatchCommand+0x320>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb0 0a67 	vmov.f32	s0, s15
 80012be:	f000 fcc9 	bl	8001c54 <sendBinaryResponse>
}
 80012c2:	e2ef      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"Q2",2)==0) {
 80012c4:	2202      	movs	r2, #2
 80012c6:	4940      	ldr	r1, [pc, #256]	; (80013c8 <dispatchCommand+0x324>)
 80012c8:	4826      	ldr	r0, [pc, #152]	; (8001364 <dispatchCommand+0x2c0>)
 80012ca:	f005 ffb9 	bl	8007240 <memcmp>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d114      	bne.n	80012fe <dispatchCommand+0x25a>
	  if(open_loop_enable2==1)
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <dispatchCommand+0x328>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012de:	eef4 7a47 	vcmp.f32	s15, s14
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	f040 82dd 	bne.w	80018a4 <dispatchCommand+0x800>
		  	  u_k2=val;
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <dispatchCommand+0x2e4>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 2a90 	vmov	r2, s15
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <dispatchCommand+0x32c>)
 80012fa:	601a      	str	r2, [r3, #0]
}
 80012fc:	e2d2      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"Q2B",3)==0) {
 80012fe:	2203      	movs	r2, #3
 8001300:	4934      	ldr	r1, [pc, #208]	; (80013d4 <dispatchCommand+0x330>)
 8001302:	4818      	ldr	r0, [pc, #96]	; (8001364 <dispatchCommand+0x2c0>)
 8001304:	f005 ff9c 	bl	8007240 <memcmp>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d107      	bne.n	800131e <dispatchCommand+0x27a>
    setHeater1(val);
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <dispatchCommand+0x2e4>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	f000 fd80 	bl	8001e1c <setHeater1>
}
 800131c:	e2c2      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"R1",2)==0) {
 800131e:	2202      	movs	r2, #2
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <dispatchCommand+0x334>)
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <dispatchCommand+0x2c0>)
 8001324:	f005 ff8c 	bl	8007240 <memcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <dispatchCommand+0x29a>
    sendFloatResponse(Q1);
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <dispatchCommand+0x320>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	f000 fb4a 	bl	80019d0 <sendFloatResponse>
}
 800133c:	e2b2      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"R2",2)==0) {
 800133e:	2202      	movs	r2, #2
 8001340:	4926      	ldr	r1, [pc, #152]	; (80013dc <dispatchCommand+0x338>)
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <dispatchCommand+0x2c0>)
 8001344:	f005 ff7c 	bl	8007240 <memcmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d14a      	bne.n	80013e4 <dispatchCommand+0x340>
    sendFloatResponse(Q2);
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <dispatchCommand+0x33c>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	f000 fb3a 	bl	80019d0 <sendFloatResponse>
}
 800135c:	e2a2      	b.n	80018a4 <dispatchCommand+0x800>
 800135e:	bf00      	nop
 8001360:	0800b498 	.word	0x0800b498
 8001364:	20000338 	.word	0x20000338
 8001368:	00000000 	.word	0x00000000
 800136c:	20000280 	.word	0x20000280
 8001370:	0800b4a0 	.word	0x0800b4a0
 8001374:	0800b4a8 	.word	0x0800b4a8
 8001378:	0800b4b0 	.word	0x0800b4b0
 800137c:	0800b4b8 	.word	0x0800b4b8
 8001380:	0800b4bc 	.word	0x0800b4bc
 8001384:	0800b4c0 	.word	0x0800b4c0
 8001388:	20000270 	.word	0x20000270
 800138c:	437f0000 	.word	0x437f0000
 8001390:	437f0000 	.word	0x437f0000
 8001394:	20000008 	.word	0x20000008
 8001398:	0800b4c4 	.word	0x0800b4c4
 800139c:	0800b4c8 	.word	0x0800b4c8
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	0800b4cc 	.word	0x0800b4cc
 80013a8:	20000010 	.word	0x20000010
 80013ac:	0800b4d4 	.word	0x0800b4d4
 80013b0:	2000027c 	.word	0x2000027c
 80013b4:	0800b4dc 	.word	0x0800b4dc
 80013b8:	2000029c 	.word	0x2000029c
 80013bc:	20000294 	.word	0x20000294
 80013c0:	0800b4e0 	.word	0x0800b4e0
 80013c4:	20000260 	.word	0x20000260
 80013c8:	0800b4e4 	.word	0x0800b4e4
 80013cc:	200002a0 	.word	0x200002a0
 80013d0:	20000298 	.word	0x20000298
 80013d4:	0800b4e8 	.word	0x0800b4e8
 80013d8:	0800b4ec 	.word	0x0800b4ec
 80013dc:	0800b4f0 	.word	0x0800b4f0
 80013e0:	20000264 	.word	0x20000264
  else if (memcmp(cmd ,"SCAN",4)==0) {
 80013e4:	2204      	movs	r2, #4
 80013e6:	499f      	ldr	r1, [pc, #636]	; (8001664 <dispatchCommand+0x5c0>)
 80013e8:	489f      	ldr	r0, [pc, #636]	; (8001668 <dispatchCommand+0x5c4>)
 80013ea:	f005 ff29 	bl	8007240 <memcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d120      	bne.n	8001436 <dispatchCommand+0x392>
    sendFloatResponse(readTemperature(pinT1));
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 fc4b 	bl	8001c90 <readTemperature>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	f000 fae5 	bl	80019d0 <sendFloatResponse>
    sendFloatResponse(readTemperature(pinT2));
 8001406:	2002      	movs	r0, #2
 8001408:	f000 fc42 	bl	8001c90 <readTemperature>
 800140c:	eef0 7a40 	vmov.f32	s15, s0
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	f000 fadc 	bl	80019d0 <sendFloatResponse>
    sendFloatResponse(Q1);
 8001418:	4b94      	ldr	r3, [pc, #592]	; (800166c <dispatchCommand+0x5c8>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	f000 fad5 	bl	80019d0 <sendFloatResponse>
    sendFloatResponse(Q2);
 8001426:	4b92      	ldr	r3, [pc, #584]	; (8001670 <dispatchCommand+0x5cc>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 face 	bl	80019d0 <sendFloatResponse>
}
 8001434:	e236      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"T1",2)==0) {
 8001436:	2202      	movs	r2, #2
 8001438:	498e      	ldr	r1, [pc, #568]	; (8001674 <dispatchCommand+0x5d0>)
 800143a:	488b      	ldr	r0, [pc, #556]	; (8001668 <dispatchCommand+0x5c4>)
 800143c:	f005 ff00 	bl	8007240 <memcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <dispatchCommand+0x3b6>
    sendFloatResponse(readTemperature(pinT1));
 8001446:	2001      	movs	r0, #1
 8001448:	f000 fc22 	bl	8001c90 <readTemperature>
 800144c:	eef0 7a40 	vmov.f32	s15, s0
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	f000 fabc 	bl	80019d0 <sendFloatResponse>
}
 8001458:	e224      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"T1B",3)==0) {
 800145a:	2203      	movs	r2, #3
 800145c:	4986      	ldr	r1, [pc, #536]	; (8001678 <dispatchCommand+0x5d4>)
 800145e:	4882      	ldr	r0, [pc, #520]	; (8001668 <dispatchCommand+0x5c4>)
 8001460:	f005 feee 	bl	8007240 <memcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <dispatchCommand+0x3da>
    sendBinaryResponse(readTemperature(pinT1));
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fc10 	bl	8001c90 <readTemperature>
 8001470:	eef0 7a40 	vmov.f32	s15, s0
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	f000 fbec 	bl	8001c54 <sendBinaryResponse>
}
 800147c:	e212      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"T2",2)==0) {
 800147e:	2202      	movs	r2, #2
 8001480:	497e      	ldr	r1, [pc, #504]	; (800167c <dispatchCommand+0x5d8>)
 8001482:	4879      	ldr	r0, [pc, #484]	; (8001668 <dispatchCommand+0x5c4>)
 8001484:	f005 fedc 	bl	8007240 <memcmp>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <dispatchCommand+0x3fe>
    sendFloatResponse(readTemperature(pinT2));
 800148e:	2002      	movs	r0, #2
 8001490:	f000 fbfe 	bl	8001c90 <readTemperature>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	f000 fa98 	bl	80019d0 <sendFloatResponse>
}
 80014a0:	e200      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"T2B",3)==0) {
 80014a2:	2203      	movs	r2, #3
 80014a4:	4976      	ldr	r1, [pc, #472]	; (8001680 <dispatchCommand+0x5dc>)
 80014a6:	4870      	ldr	r0, [pc, #448]	; (8001668 <dispatchCommand+0x5c4>)
 80014a8:	f005 feca 	bl	8007240 <memcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <dispatchCommand+0x422>
    sendBinaryResponse(readTemperature(pinT2));
 80014b2:	2002      	movs	r0, #2
 80014b4:	f000 fbec 	bl	8001c90 <readTemperature>
 80014b8:	eef0 7a40 	vmov.f32	s15, s0
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f000 fbc8 	bl	8001c54 <sendBinaryResponse>
}
 80014c4:	e1ee      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"VER",3)==0) {
 80014c6:	2203      	movs	r2, #3
 80014c8:	496e      	ldr	r1, [pc, #440]	; (8001684 <dispatchCommand+0x5e0>)
 80014ca:	4867      	ldr	r0, [pc, #412]	; (8001668 <dispatchCommand+0x5c4>)
 80014cc:	f005 feb8 	bl	8007240 <memcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <dispatchCommand+0x43a>
    sendResponse("TCLab Firmware - NUCLEO ARM 767 V1");
 80014d6:	486c      	ldr	r0, [pc, #432]	; (8001688 <dispatchCommand+0x5e4>)
 80014d8:	f000 fa5c 	bl	8001994 <sendResponse>
}
 80014dc:	e1e2      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"X",1)==0) {
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <dispatchCommand+0x5c4>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <dispatchCommand+0x5e8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d10b      	bne.n	8001502 <dispatchCommand+0x45e>
    setHeater1(0);
 80014ea:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001690 <dispatchCommand+0x5ec>
 80014ee:	f000 fc95 	bl	8001e1c <setHeater1>
    setHeater2(0);
 80014f2:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8001690 <dispatchCommand+0x5ec>
 80014f6:	f000 fcd7 	bl	8001ea8 <setHeater2>
    sendResponse("Stop");
 80014fa:	4866      	ldr	r0, [pc, #408]	; (8001694 <dispatchCommand+0x5f0>)
 80014fc:	f000 fa4a 	bl	8001994 <sendResponse>
}
 8001500:	e1d0      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"KP1",3)==0) {
 8001502:	2203      	movs	r2, #3
 8001504:	4964      	ldr	r1, [pc, #400]	; (8001698 <dispatchCommand+0x5f4>)
 8001506:	4858      	ldr	r0, [pc, #352]	; (8001668 <dispatchCommand+0x5c4>)
 8001508:	f005 fe9a 	bl	8007240 <memcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d104      	bne.n	800151c <dispatchCommand+0x478>
	  Kp1=val;
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <dispatchCommand+0x5f8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <dispatchCommand+0x5fc>)
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	e1c3      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"TI1",3)==0) {
 800151c:	2203      	movs	r2, #3
 800151e:	4961      	ldr	r1, [pc, #388]	; (80016a4 <dispatchCommand+0x600>)
 8001520:	4851      	ldr	r0, [pc, #324]	; (8001668 <dispatchCommand+0x5c4>)
 8001522:	f005 fe8d 	bl	8007240 <memcmp>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <dispatchCommand+0x49c>
	  Ti1=val;
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <dispatchCommand+0x5f8>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 2a90 	vmov	r2, s15
 800153a:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <dispatchCommand+0x604>)
 800153c:	601a      	str	r2, [r3, #0]
}
 800153e:	e1b1      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"TD1",3)==0) {
 8001540:	2203      	movs	r2, #3
 8001542:	495a      	ldr	r1, [pc, #360]	; (80016ac <dispatchCommand+0x608>)
 8001544:	4848      	ldr	r0, [pc, #288]	; (8001668 <dispatchCommand+0x5c4>)
 8001546:	f005 fe7b 	bl	8007240 <memcmp>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <dispatchCommand+0x4c0>
	  Td1=val;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <dispatchCommand+0x5f8>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 2a90 	vmov	r2, s15
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <dispatchCommand+0x60c>)
 8001560:	601a      	str	r2, [r3, #0]
}
 8001562:	e19f      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"KP2",3)==0) {
 8001564:	2203      	movs	r2, #3
 8001566:	4953      	ldr	r1, [pc, #332]	; (80016b4 <dispatchCommand+0x610>)
 8001568:	483f      	ldr	r0, [pc, #252]	; (8001668 <dispatchCommand+0x5c4>)
 800156a:	f005 fe69 	bl	8007240 <memcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d104      	bne.n	800157e <dispatchCommand+0x4da>
	  Kp2=val;
 8001574:	4b49      	ldr	r3, [pc, #292]	; (800169c <dispatchCommand+0x5f8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <dispatchCommand+0x614>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	e192      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"TI2",3)==0) {
 800157e:	2203      	movs	r2, #3
 8001580:	494e      	ldr	r1, [pc, #312]	; (80016bc <dispatchCommand+0x618>)
 8001582:	4839      	ldr	r0, [pc, #228]	; (8001668 <dispatchCommand+0x5c4>)
 8001584:	f005 fe5c 	bl	8007240 <memcmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <dispatchCommand+0x4fe>
	  Ti2=val;
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <dispatchCommand+0x5f8>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <dispatchCommand+0x61c>)
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	e180      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"TD2",3)==0) {
 80015a2:	2203      	movs	r2, #3
 80015a4:	4947      	ldr	r1, [pc, #284]	; (80016c4 <dispatchCommand+0x620>)
 80015a6:	4830      	ldr	r0, [pc, #192]	; (8001668 <dispatchCommand+0x5c4>)
 80015a8:	f005 fe4a 	bl	8007240 <memcmp>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <dispatchCommand+0x522>
	  Td2=val;
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <dispatchCommand+0x5f8>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015bc:	ee17 2a90 	vmov	r2, s15
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <dispatchCommand+0x624>)
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	e16e      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"SD",2)==0) {
 80015c6:	2202      	movs	r2, #2
 80015c8:	4940      	ldr	r1, [pc, #256]	; (80016cc <dispatchCommand+0x628>)
 80015ca:	4827      	ldr	r0, [pc, #156]	; (8001668 <dispatchCommand+0x5c4>)
 80015cc:	f005 fe38 	bl	8007240 <memcmp>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80d5 	bne.w	8001782 <dispatchCommand+0x6de>
	  if((open_loop_enable1==1)&&(open_loop_enable2==1))
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <dispatchCommand+0x62c>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e2:	eef4 7a47 	vcmp.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d10d      	bne.n	8001608 <dispatchCommand+0x564>
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <dispatchCommand+0x630>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f6:	eef4 7a47 	vcmp.f32	s15, s14
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	d103      	bne.n	8001608 <dispatchCommand+0x564>
		  open_loop_enable=11;
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <dispatchCommand+0x634>)
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <dispatchCommand+0x638>)
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e071      	b.n	80016ec <dispatchCommand+0x648>
	  else if((open_loop_enable2==1)&&(open_loop_enable1==0))
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <dispatchCommand+0x630>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001612:	eef4 7a47 	vcmp.f32	s15, s14
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d10c      	bne.n	8001636 <dispatchCommand+0x592>
 800161c:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <dispatchCommand+0x62c>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d104      	bne.n	8001636 <dispatchCommand+0x592>
				  open_loop_enable=1;
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <dispatchCommand+0x634>)
 800162e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e05a      	b.n	80016ec <dispatchCommand+0x648>
	  else if((open_loop_enable1==1)&&(open_loop_enable2==0))
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <dispatchCommand+0x62c>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001640:	eef4 7a47 	vcmp.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	d14c      	bne.n	80016e4 <dispatchCommand+0x640>
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <dispatchCommand+0x630>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d144      	bne.n	80016e4 <dispatchCommand+0x640>
	 		  open_loop_enable=10;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <dispatchCommand+0x634>)
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <dispatchCommand+0x63c>)
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e044      	b.n	80016ec <dispatchCommand+0x648>
 8001662:	bf00      	nop
 8001664:	0800b4f4 	.word	0x0800b4f4
 8001668:	20000338 	.word	0x20000338
 800166c:	20000260 	.word	0x20000260
 8001670:	20000264 	.word	0x20000264
 8001674:	0800b4fc 	.word	0x0800b4fc
 8001678:	0800b500 	.word	0x0800b500
 800167c:	0800b504 	.word	0x0800b504
 8001680:	0800b508 	.word	0x0800b508
 8001684:	0800b50c 	.word	0x0800b50c
 8001688:	0800b510 	.word	0x0800b510
 800168c:	0800b534 	.word	0x0800b534
 8001690:	00000000 	.word	0x00000000
 8001694:	0800b4b0 	.word	0x0800b4b0
 8001698:	0800b538 	.word	0x0800b538
 800169c:	20000270 	.word	0x20000270
 80016a0:	20000014 	.word	0x20000014
 80016a4:	0800b53c 	.word	0x0800b53c
 80016a8:	20000018 	.word	0x20000018
 80016ac:	0800b540 	.word	0x0800b540
 80016b0:	2000001c 	.word	0x2000001c
 80016b4:	0800b544 	.word	0x0800b544
 80016b8:	20000020 	.word	0x20000020
 80016bc:	0800b548 	.word	0x0800b548
 80016c0:	20000024 	.word	0x20000024
 80016c4:	0800b54c 	.word	0x0800b54c
 80016c8:	20000028 	.word	0x20000028
 80016cc:	0800b550 	.word	0x0800b550
 80016d0:	2000029c 	.word	0x2000029c
 80016d4:	200002a0 	.word	0x200002a0
 80016d8:	200002e4 	.word	0x200002e4
 80016dc:	41300000 	.word	0x41300000
 80016e0:	41200000 	.word	0x41200000
	 		  open_loop_enable=0;
 80016e4:	4b71      	ldr	r3, [pc, #452]	; (80018ac <dispatchCommand+0x808>)
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
	  sendFloatResponse2(temp1_ref, open_loop_enable, Kp1, Ti1, Td1, u_k1, temp2_ref, Kp2, Ti2, Td2, u_k2,
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <dispatchCommand+0x80c>)
 80016ee:	ed93 0a00 	vldr	s0, [r3]
 80016f2:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <dispatchCommand+0x808>)
 80016f4:	edd3 0a00 	vldr	s1, [r3]
 80016f8:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <dispatchCommand+0x810>)
 80016fa:	ed93 1a00 	vldr	s2, [r3]
 80016fe:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <dispatchCommand+0x814>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <dispatchCommand+0x818>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8001716:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <dispatchCommand+0x81c>)
 8001718:	edd3 2a00 	vldr	s5, [r3]
 800171c:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <dispatchCommand+0x820>)
 800171e:	ed93 3a00 	vldr	s6, [r3]
 8001722:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <dispatchCommand+0x824>)
 8001724:	edd3 3a00 	vldr	s7, [r3]
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <dispatchCommand+0x828>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <dispatchCommand+0x82c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <dispatchCommand+0x830>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800174c:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <dispatchCommand+0x834>)
 800174e:	edd3 5a00 	vldr	s11, [r3]
 8001752:	4b62      	ldr	r3, [pc, #392]	; (80018dc <dispatchCommand+0x838>)
 8001754:	ed93 6a00 	vldr	s12, [r3]
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <dispatchCommand+0x83c>)
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <dispatchCommand+0x840>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <dispatchCommand+0x844>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <dispatchCommand+0x848>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <dispatchCommand+0x84c>)
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	4960      	ldr	r1, [pc, #384]	; (80018f4 <dispatchCommand+0x850>)
 8001774:	6809      	ldr	r1, [r1, #0]
 8001776:	9102      	str	r1, [sp, #8]
 8001778:	9201      	str	r2, [sp, #4]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f000 f9a8 	bl	8001ad0 <sendFloatResponse2>
}
 8001780:	e090      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"OL1",3)==0) {
 8001782:	2203      	movs	r2, #3
 8001784:	495c      	ldr	r1, [pc, #368]	; (80018f8 <dispatchCommand+0x854>)
 8001786:	485d      	ldr	r0, [pc, #372]	; (80018fc <dispatchCommand+0x858>)
 8001788:	f005 fd5a 	bl	8007240 <memcmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <dispatchCommand+0x6f8>
	  open_loop_enable1=val;
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <dispatchCommand+0x85c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5b      	ldr	r2, [pc, #364]	; (8001904 <dispatchCommand+0x860>)
 8001798:	6013      	str	r3, [r2, #0]
}
 800179a:	e083      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"OL2",3)==0) {
 800179c:	2203      	movs	r2, #3
 800179e:	495a      	ldr	r1, [pc, #360]	; (8001908 <dispatchCommand+0x864>)
 80017a0:	4856      	ldr	r0, [pc, #344]	; (80018fc <dispatchCommand+0x858>)
 80017a2:	f005 fd4d 	bl	8007240 <memcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <dispatchCommand+0x712>
 	  open_loop_enable2=val;
 80017ac:	4b54      	ldr	r3, [pc, #336]	; (8001900 <dispatchCommand+0x85c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a56      	ldr	r2, [pc, #344]	; (800190c <dispatchCommand+0x868>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	e076      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"REG1",4)==0) {
 80017b6:	2204      	movs	r2, #4
 80017b8:	4955      	ldr	r1, [pc, #340]	; (8001910 <dispatchCommand+0x86c>)
 80017ba:	4850      	ldr	r0, [pc, #320]	; (80018fc <dispatchCommand+0x858>)
 80017bc:	f005 fd40 	bl	8007240 <memcmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d104      	bne.n	80017d0 <dispatchCommand+0x72c>
 	  reg1=val;
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <dispatchCommand+0x85c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <dispatchCommand+0x834>)
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	e069      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"REG2",4)==0) {
 80017d0:	2204      	movs	r2, #4
 80017d2:	4950      	ldr	r1, [pc, #320]	; (8001914 <dispatchCommand+0x870>)
 80017d4:	4849      	ldr	r0, [pc, #292]	; (80018fc <dispatchCommand+0x858>)
 80017d6:	f005 fd33 	bl	8007240 <memcmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <dispatchCommand+0x746>
 	  reg2=val;
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <dispatchCommand+0x85c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a40      	ldr	r2, [pc, #256]	; (80018e8 <dispatchCommand+0x844>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	e05c      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C1K",3)==0) {
 80017ea:	2203      	movs	r2, #3
 80017ec:	494a      	ldr	r1, [pc, #296]	; (8001918 <dispatchCommand+0x874>)
 80017ee:	4843      	ldr	r0, [pc, #268]	; (80018fc <dispatchCommand+0x858>)
 80017f0:	f005 fd26 	bl	8007240 <memcmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d104      	bne.n	8001804 <dispatchCommand+0x760>
 	  k_pz1=val;
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <dispatchCommand+0x85c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a37      	ldr	r2, [pc, #220]	; (80018dc <dispatchCommand+0x838>)
 8001800:	6013      	str	r3, [r2, #0]
}
 8001802:	e04f      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C1A",3)==0) {
 8001804:	2203      	movs	r2, #3
 8001806:	4945      	ldr	r1, [pc, #276]	; (800191c <dispatchCommand+0x878>)
 8001808:	483c      	ldr	r0, [pc, #240]	; (80018fc <dispatchCommand+0x858>)
 800180a:	f005 fd19 	bl	8007240 <memcmp>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <dispatchCommand+0x77a>
 	  a_pz1=val;
 8001814:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <dispatchCommand+0x85c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <dispatchCommand+0x83c>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	e042      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C1B",3)==0) {
 800181e:	2203      	movs	r2, #3
 8001820:	493f      	ldr	r1, [pc, #252]	; (8001920 <dispatchCommand+0x87c>)
 8001822:	4836      	ldr	r0, [pc, #216]	; (80018fc <dispatchCommand+0x858>)
 8001824:	f005 fd0c 	bl	8007240 <memcmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <dispatchCommand+0x794>
 	  b_pz1=val;
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <dispatchCommand+0x85c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <dispatchCommand+0x840>)
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	e035      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C2K",3)==0) {
 8001838:	2203      	movs	r2, #3
 800183a:	493a      	ldr	r1, [pc, #232]	; (8001924 <dispatchCommand+0x880>)
 800183c:	482f      	ldr	r0, [pc, #188]	; (80018fc <dispatchCommand+0x858>)
 800183e:	f005 fcff 	bl	8007240 <memcmp>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d104      	bne.n	8001852 <dispatchCommand+0x7ae>
 	  k_pz2=val;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <dispatchCommand+0x85c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <dispatchCommand+0x848>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	e028      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C2A",3)==0) {
 8001852:	2203      	movs	r2, #3
 8001854:	4934      	ldr	r1, [pc, #208]	; (8001928 <dispatchCommand+0x884>)
 8001856:	4829      	ldr	r0, [pc, #164]	; (80018fc <dispatchCommand+0x858>)
 8001858:	f005 fcf2 	bl	8007240 <memcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d104      	bne.n	800186c <dispatchCommand+0x7c8>
 	  a_pz2=val;
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <dispatchCommand+0x85c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <dispatchCommand+0x84c>)
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	e01b      	b.n	80018a4 <dispatchCommand+0x800>
  else if (memcmp(cmd ,"C2B",3)==0) {
 800186c:	2203      	movs	r2, #3
 800186e:	492f      	ldr	r1, [pc, #188]	; (800192c <dispatchCommand+0x888>)
 8001870:	4822      	ldr	r0, [pc, #136]	; (80018fc <dispatchCommand+0x858>)
 8001872:	f005 fce5 	bl	8007240 <memcmp>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <dispatchCommand+0x7e2>
 	  b_pz2=val;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <dispatchCommand+0x85c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <dispatchCommand+0x850>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	e00e      	b.n	80018a4 <dispatchCommand+0x800>
  else if (cmd_length > 0) {
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <dispatchCommand+0x88c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd0a      	ble.n	80018a4 <dispatchCommand+0x800>
    setHeater1(0);
 800188e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001934 <dispatchCommand+0x890>
 8001892:	f000 fac3 	bl	8001e1c <setHeater1>
    setHeater2(0);
 8001896:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001934 <dispatchCommand+0x890>
 800189a:	f000 fb05 	bl	8001ea8 <setHeater2>
    sendResponse(cmd);
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <dispatchCommand+0x858>)
 80018a0:	f000 f878 	bl	8001994 <sendResponse>
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200002e4 	.word	0x200002e4
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000014 	.word	0x20000014
 80018b8:	20000018 	.word	0x20000018
 80018bc:	2000001c 	.word	0x2000001c
 80018c0:	20000294 	.word	0x20000294
 80018c4:	2000027c 	.word	0x2000027c
 80018c8:	20000020 	.word	0x20000020
 80018cc:	20000024 	.word	0x20000024
 80018d0:	20000028 	.word	0x20000028
 80018d4:	20000298 	.word	0x20000298
 80018d8:	20000034 	.word	0x20000034
 80018dc:	2000002c 	.word	0x2000002c
 80018e0:	20000284 	.word	0x20000284
 80018e4:	20000288 	.word	0x20000288
 80018e8:	20000038 	.word	0x20000038
 80018ec:	20000030 	.word	0x20000030
 80018f0:	2000028c 	.word	0x2000028c
 80018f4:	20000290 	.word	0x20000290
 80018f8:	0800b554 	.word	0x0800b554
 80018fc:	20000338 	.word	0x20000338
 8001900:	20000270 	.word	0x20000270
 8001904:	2000029c 	.word	0x2000029c
 8001908:	0800b558 	.word	0x0800b558
 800190c:	200002a0 	.word	0x200002a0
 8001910:	0800b55c 	.word	0x0800b55c
 8001914:	0800b564 	.word	0x0800b564
 8001918:	0800b56c 	.word	0x0800b56c
 800191c:	0800b570 	.word	0x0800b570
 8001920:	0800b574 	.word	0x0800b574
 8001924:	0800b578 	.word	0x0800b578
 8001928:	0800b57c 	.word	0x0800b57c
 800192c:	0800b580 	.word	0x0800b580
 8001930:	20000274 	.word	0x20000274
 8001934:	00000000 	.word	0x00000000

08001938 <CleanData>:


/****************************************************************************************************/
/* Clean function */
void CleanData()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	/*Clean buffers*/
	memset(Buffer, 0, sizeof(Buffer));
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	2100      	movs	r1, #0
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <CleanData+0x40>)
 8001942:	f005 fc8b 	bl	800725c <memset>
	memset(value_str, 0, sizeof(value_str));
 8001946:	220f      	movs	r2, #15
 8001948:	2100      	movs	r1, #0
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <CleanData+0x44>)
 800194c:	f005 fc86 	bl	800725c <memset>
	memset(cmd, 0, sizeof(cmd));
 8001950:	220f      	movs	r2, #15
 8001952:	2100      	movs	r1, #0
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <CleanData+0x48>)
 8001956:	f005 fc81 	bl	800725c <memset>

    /*Reset counters*/
	cmd_length=0;
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <CleanData+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <CleanData+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
	val_length = 0;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <CleanData+0x54>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
	newData = false;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <CleanData+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200002e8 	.word	0x200002e8
 800197c:	20000328 	.word	0x20000328
 8001980:	20000338 	.word	0x20000338
 8001984:	20000274 	.word	0x20000274
 8001988:	2000026c 	.word	0x2000026c
 800198c:	20000278 	.word	0x20000278
 8001990:	20000268 	.word	0x20000268

08001994 <sendResponse>:
/****************************************************************************************************/
/****************************************************************************************************/
/*SUPORT FUNCTIONS*/

/* Send response */
void sendResponse(char msg[]) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    int len=strlen(msg);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7fe fc4f 	bl	8000240 <strlen>
 80019a2:	4603      	mov	r3, r0
 80019a4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, msg, len, 10);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	230a      	movs	r3, #10
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <sendResponse+0x34>)
 80019b0:	f004 fd36 	bl	8006420 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, "\n\r", 2, 10);
 80019b4:	230a      	movs	r3, #10
 80019b6:	2202      	movs	r2, #2
 80019b8:	4904      	ldr	r1, [pc, #16]	; (80019cc <sendResponse+0x38>)
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <sendResponse+0x34>)
 80019bc:	f004 fd30 	bl	8006420 <HAL_UART_Transmit>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000348 	.word	0x20000348
 80019cc:	0800b584 	.word	0x0800b584

080019d0 <sendFloatResponse>:

void sendFloatResponse(float num)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	ed87 0a01 	vstr	s0, [r7, #4]
	char sendFloatResponse_msg[10];
	int  num_INT=0, len;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]

	num_INT=(int)num;
 80019de:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e6:	ee17 3a90 	vmov	r3, s15
 80019ea:	61fb      	str	r3, [r7, #28]
	sprintf(sendFloatResponse_msg,"%.2f\n",num);
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f4:	f107 000c 	add.w	r0, r7, #12
 80019f8:	ec53 2b17 	vmov	r2, r3, d7
 80019fc:	490a      	ldr	r1, [pc, #40]	; (8001a28 <sendFloatResponse+0x58>)
 80019fe:	f006 f879 	bl	8007af4 <siprintf>
	len=strlen(sendFloatResponse_msg);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc1a 	bl	8000240 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	61bb      	str	r3, [r7, #24]
	HAL_UART_Transmit(&huart3, &sendFloatResponse_msg, len, 10);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f107 010c 	add.w	r1, r7, #12
 8001a18:	230a      	movs	r3, #10
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <sendFloatResponse+0x5c>)
 8001a1c:	f004 fd00 	bl	8006420 <HAL_UART_Transmit>

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	0800b588 	.word	0x0800b588
 8001a2c:	20000348 	.word	0x20000348

08001a30 <sendFloatResponse1>:

void sendFloatResponse1(float temp1_ref, float temp1,  float u_k1, float temp2_ref, float temp2,  float u_k2)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09c      	sub	sp, #112	; 0x70
 8001a34:	af0a      	add	r7, sp, #40	; 0x28
 8001a36:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a3a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a3e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a42:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a46:	ed87 2a01 	vstr	s4, [r7, #4]
 8001a4a:	edc7 2a00 	vstr	s5, [r7]
	char sendFloatResponse_msg[40];
	int  len;

	sprintf(sendFloatResponse_msg,"%.2f %.2f %.2f %.2f %.2f %.2f\n",temp1_ref, temp1,  u_k1, temp2_ref, temp2,  u_k2);
 8001a4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a52:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8001a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a62:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001a66:	edd7 5a02 	vldr	s11, [r7, #8]
 8001a6a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001a6e:	edd7 4a01 	vldr	s9, [r7, #4]
 8001a72:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001a76:	edd7 3a00 	vldr	s7, [r7]
 8001a7a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8001a7e:	f107 001c 	add.w	r0, r7, #28
 8001a82:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001a86:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001a8a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001a8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001a92:	ed8d 7b00 	vstr	d7, [sp]
 8001a96:	ec53 2b12 	vmov	r2, r3, d2
 8001a9a:	490b      	ldr	r1, [pc, #44]	; (8001ac8 <sendFloatResponse1+0x98>)
 8001a9c:	f006 f82a 	bl	8007af4 <siprintf>
	len=strlen(sendFloatResponse_msg);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fbcb 	bl	8000240 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
	HAL_UART_Transmit(&huart3, &sendFloatResponse_msg, len, 10);
 8001aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f107 011c 	add.w	r1, r7, #28
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <sendFloatResponse1+0x9c>)
 8001aba:	f004 fcb1 	bl	8006420 <HAL_UART_Transmit>

}
 8001abe:	bf00      	nop
 8001ac0:	3748      	adds	r7, #72	; 0x48
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0800b590 	.word	0x0800b590
 8001acc:	20000348 	.word	0x20000348

08001ad0 <sendFloatResponse2>:

void sendFloatResponse2(float temp1_ref, float open_loop_enable, float Kp1, float Ti1, float Td1, float u_k1, float temp2_ref, float Kp2, float Ti2, float Td2, float u_k2,
		float reg1, float k_pz1, float a_pz1, float b_pz1, float ref2, float k_pz2, float a_pz2, float b_pz2)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	ed2d 8b10 	vpush	{d8-d15}
 8001ad6:	b0da      	sub	sp, #360	; 0x168
 8001ad8:	af24      	add	r7, sp, #144	; 0x90
 8001ada:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
 8001ade:	edc7 0a14 	vstr	s1, [r7, #80]	; 0x50
 8001ae2:	ed87 1a13 	vstr	s2, [r7, #76]	; 0x4c
 8001ae6:	edc7 1a12 	vstr	s3, [r7, #72]	; 0x48
 8001aea:	ed87 2a11 	vstr	s4, [r7, #68]	; 0x44
 8001aee:	edc7 2a10 	vstr	s5, [r7, #64]	; 0x40
 8001af2:	ed87 3a0f 	vstr	s6, [r7, #60]	; 0x3c
 8001af6:	edc7 3a0e 	vstr	s7, [r7, #56]	; 0x38
 8001afa:	ed87 4a0d 	vstr	s8, [r7, #52]	; 0x34
 8001afe:	edc7 4a0c 	vstr	s9, [r7, #48]	; 0x30
 8001b02:	ed87 5a0b 	vstr	s10, [r7, #44]	; 0x2c
 8001b06:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001b0a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001b0e:	edc7 6a08 	vstr	s13, [r7, #32]
 8001b12:	ed87 7a07 	vstr	s14, [r7, #28]
 8001b16:	edc7 7a06 	vstr	s15, [r7, #24]
	char sendFloatResponse_msg[120];
	int  len;

	sprintf(sendFloatResponse_msg,"DS %.1f %.0f %.1f %.3f %.3f %.0f %.1f %.2f %.3f %.3f %.0f %.0f %.1f %.4f %.4f %.0f %.1f %.4f %.4f\n",
 8001b1a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b22:	ed87 7b04 	vstr	d7, [r7, #16]
 8001b26:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001b2a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001b2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001b32:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8001b36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b3a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8001b3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b42:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 8001b46:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b4a:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 8001b4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b52:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b56:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b5a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b62:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b6a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001b6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b72:	eeb7 cae7 	vcvt.f64.f32	d12, s15
 8001b76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b7a:	eeb7 dae7 	vcvt.f64.f32	d13, s15
 8001b7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b82:	eeb7 eae7 	vcvt.f64.f32	d14, s15
 8001b86:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b8a:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8001b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b92:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b96:	ed87 6b02 	vstr	d6, [r7, #8]
 8001b9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001ba2:	ed87 5b00 	vstr	d5, [r7]
 8001ba6:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8001baa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001bae:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8001bb2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001bb6:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8001bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bbe:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001bc2:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8001bc6:	ed8d 6b20 	vstr	d6, [sp, #128]	; 0x80
 8001bca:	ed8d 5b1e 	vstr	d5, [sp, #120]	; 0x78
 8001bce:	ed97 5b00 	vldr	d5, [r7]
 8001bd2:	ed8d 5b1c 	vstr	d5, [sp, #112]	; 0x70
 8001bd6:	ed97 6b02 	vldr	d6, [r7, #8]
 8001bda:	ed8d 6b1a 	vstr	d6, [sp, #104]	; 0x68
 8001bde:	ed8d fb18 	vstr	d15, [sp, #96]	; 0x60
 8001be2:	ed8d eb16 	vstr	d14, [sp, #88]	; 0x58
 8001be6:	ed8d db14 	vstr	d13, [sp, #80]	; 0x50
 8001bea:	ed8d cb12 	vstr	d12, [sp, #72]	; 0x48
 8001bee:	ed8d bb10 	vstr	d11, [sp, #64]	; 0x40
 8001bf2:	ed8d ab0e 	vstr	d10, [sp, #56]	; 0x38
 8001bf6:	ed8d 9b0c 	vstr	d9, [sp, #48]	; 0x30
 8001bfa:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8001bfe:	ed8d 0b08 	vstr	d0, [sp, #32]
 8001c02:	ed8d 1b06 	vstr	d1, [sp, #24]
 8001c06:	ed8d 2b04 	vstr	d2, [sp, #16]
 8001c0a:	ed8d 3b02 	vstr	d3, [sp, #8]
 8001c0e:	ed8d 4b00 	vstr	d4, [sp]
 8001c12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <sendFloatResponse2+0x17c>)
 8001c18:	f005 ff6c 	bl	8007af4 <siprintf>
			temp1_ref, open_loop_enable, Kp1, Ti1, Td1, u_k1, temp2_ref, Kp2, Ti2, Td2, u_k2, reg1, k_pz1, a_pz1, b_pz1, ref2, k_pz2, a_pz2, b_pz2);
	len=strlen(sendFloatResponse_msg);
 8001c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fb0d 	bl	8000240 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&huart3, &sendFloatResponse_msg, len, 10);
 8001c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001c36:	230a      	movs	r3, #10
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <sendFloatResponse2+0x180>)
 8001c3a:	f004 fbf1 	bl	8006420 <HAL_UART_Transmit>

}
 8001c3e:	bf00      	nop
 8001c40:	37d8      	adds	r7, #216	; 0xd8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	ecbd 8b10 	vpop	{d8-d15}
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800b5b0 	.word	0x0800b5b0
 8001c50:	20000348 	.word	0x20000348

08001c54 <sendBinaryResponse>:

void sendBinaryResponse(float num)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
	char sendBinaryResponse_msg[4];
	memcpy(sendBinaryResponse_msg, (unsigned char*) (&num), 4);
 8001c60:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, &sendBinaryResponse_msg, 4, 10);
 8001c62:	f107 010c 	add.w	r1, r7, #12
 8001c66:	230a      	movs	r3, #10
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <sendBinaryResponse+0x30>)
 8001c6c:	f004 fbd8 	bl	8006420 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, "\n\r", 2, 10);
 8001c70:	230a      	movs	r3, #10
 8001c72:	2202      	movs	r2, #2
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <sendBinaryResponse+0x34>)
 8001c76:	4803      	ldr	r0, [pc, #12]	; (8001c84 <sendBinaryResponse+0x30>)
 8001c78:	f004 fbd2 	bl	8006420 <HAL_UART_Transmit>

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000348 	.word	0x20000348
 8001c88:	0800b584 	.word	0x0800b584
 8001c8c:	00000000 	.word	0x00000000

08001c90 <readTemperature>:

/* Read temperature sensor*/
float readTemperature(int pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]


	if(pin == 1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d14d      	bne.n	8001d3a <readTemperature+0xaa>
	{

	    ADC_Select_CH3();
 8001c9e:	f000 fd03 	bl	80026a8 <ADC_Select_CH3>
		for(int i=0;i<10;i++) //Average filter
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e016      	b.n	8001cd6 <readTemperature+0x46>
		{
           HAL_ADC_Start(&hadc1);
 8001ca8:	4859      	ldr	r0, [pc, #356]	; (8001e10 <readTemperature+0x180>)
 8001caa:	f001 f87b 	bl	8002da4 <HAL_ADC_Start>
	 	   HAL_ADC_PollForConversion(&hadc1, 100);
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	4857      	ldr	r0, [pc, #348]	; (8001e10 <readTemperature+0x180>)
 8001cb2:	f001 f979 	bl	8002fa8 <HAL_ADC_PollForConversion>
	 	   ADC_value[0] += HAL_ADC_GetValue(&hadc1);
 8001cb6:	4856      	ldr	r0, [pc, #344]	; (8001e10 <readTemperature+0x180>)
 8001cb8:	f001 fa01 	bl	80030be <HAL_ADC_GetValue>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a55      	ldr	r2, [pc, #340]	; (8001e14 <readTemperature+0x184>)
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <readTemperature+0x184>)
 8001cc8:	601a      	str	r2, [r3, #0]
	 	   HAL_ADC_Stop(&hadc1);
 8001cca:	4851      	ldr	r0, [pc, #324]	; (8001e10 <readTemperature+0x180>)
 8001ccc:	f001 f938 	bl	8002f40 <HAL_ADC_Stop>
		for(int i=0;i<10;i++) //Average filter
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	dde5      	ble.n	8001ca8 <readTemperature+0x18>
		}
        temp[0]=ADC_value[0]/10.0;
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <readTemperature+0x184>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ce8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001cec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf4:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <readTemperature+0x188>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	 	ADC_value[0]=0;
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <readTemperature+0x184>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

	 	//return temp[0]=(temp[0] * 3.3/4095 - 0.5)/0.01 ; //TMP36 has a 0.5V offset, scale factor 10mV/C
        return temp[0]=(temp[0] * 3.3/4095 - 0.424)/0.00625 ; //LM60 has a 0.424V offset, scale factor 6.25mV/C
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <readTemperature+0x188>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001df0 <readTemperature+0x160>
 8001d0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d12:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001df8 <readTemperature+0x168>
 8001d16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d1a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001e00 <readTemperature+0x170>
 8001d1e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001d22:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8001e08 <readTemperature+0x178>
 8001d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d2e:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <readTemperature+0x188>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]
 8001d34:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <readTemperature+0x188>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e051      	b.n	8001dde <readTemperature+0x14e>

	}else if(pin== 2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d14d      	bne.n	8001ddc <readTemperature+0x14c>
	{
		ADC_Select_CH13();
 8001d40:	f000 fcd2 	bl	80026e8 <ADC_Select_CH13>
		for(int i=0;i<10;i++) //Average filter
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	e016      	b.n	8001d78 <readTemperature+0xe8>
		{
           HAL_ADC_Start(&hadc1);
 8001d4a:	4831      	ldr	r0, [pc, #196]	; (8001e10 <readTemperature+0x180>)
 8001d4c:	f001 f82a 	bl	8002da4 <HAL_ADC_Start>
	 	   HAL_ADC_PollForConversion(&hadc1, 100);
 8001d50:	2164      	movs	r1, #100	; 0x64
 8001d52:	482f      	ldr	r0, [pc, #188]	; (8001e10 <readTemperature+0x180>)
 8001d54:	f001 f928 	bl	8002fa8 <HAL_ADC_PollForConversion>
	 	   ADC_value[1] += HAL_ADC_GetValue(&hadc1);
 8001d58:	482d      	ldr	r0, [pc, #180]	; (8001e10 <readTemperature+0x180>)
 8001d5a:	f001 f9b0 	bl	80030be <HAL_ADC_GetValue>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <readTemperature+0x184>)
 8001d62:	6852      	ldr	r2, [r2, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <readTemperature+0x184>)
 8001d6a:	605a      	str	r2, [r3, #4]
	 	   HAL_ADC_Stop(&hadc1);
 8001d6c:	4828      	ldr	r0, [pc, #160]	; (8001e10 <readTemperature+0x180>)
 8001d6e:	f001 f8e7 	bl	8002f40 <HAL_ADC_Stop>
		for(int i=0;i<10;i++) //Average filter
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	dde5      	ble.n	8001d4a <readTemperature+0xba>
		}
	 	temp[1]=ADC_value[1]/10.0;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <readTemperature+0x184>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d8a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <readTemperature+0x188>)
 8001d98:	edc3 7a01 	vstr	s15, [r3, #4]
	 	ADC_value[1]=0;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <readTemperature+0x184>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
	 	//return temp[1]=(temp[1] * 3.3/4095 - 0.5)/0.01 ; //TMP36 has a 0.5V offset, scale factor 10mV/C
        return temp[1]=(temp[1] * 3.3/4095 - 0.424)/0.00625 ; //LM60 has a 0.424V offset, scale factor 6.25mV/C
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <readTemperature+0x188>)
 8001da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dac:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001df0 <readTemperature+0x160>
 8001db0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001db4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001df8 <readTemperature+0x168>
 8001db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dbc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001e00 <readTemperature+0x170>
 8001dc0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001dc4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001e08 <readTemperature+0x178>
 8001dc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <readTemperature+0x188>)
 8001dd2:	edc3 7a01 	vstr	s15, [r3, #4]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <readTemperature+0x188>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	e000      	b.n	8001dde <readTemperature+0x14e>
	}

}
 8001ddc:	e001      	b.n	8001de2 <readTemperature+0x152>
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	66666666 	.word	0x66666666
 8001df4:	400a6666 	.word	0x400a6666
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40affe00 	.word	0x40affe00
 8001e00:	e5604189 	.word	0xe5604189
 8001e04:	3fdb22d0 	.word	0x3fdb22d0
 8001e08:	9999999a 	.word	0x9999999a
 8001e0c:	3f799999 	.word	0x3f799999
 8001e10:	200003cc 	.word	0x200003cc
 8001e14:	200002cc 	.word	0x200002cc
 8001e18:	200002c4 	.word	0x200002c4

08001e1c <setHeater1>:


/* Heater 1 function */
void setHeater1(float qval)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	ed87 0a01 	vstr	s0, [r7, #4]
	qval=2.125*qval; /*Scaling factor 0-120% (Simulink) to 0-255 PWM */
 8001e26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2a:	eeb0 7a01 	vmov.f32	s14, #1	; 0x40080000  2.125
 8001e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e32:	edc7 7a01 	vstr	s15, [r7, #4]
	if(qval>255) /*MAX limiter*/
 8001e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e98 <setHeater1+0x7c>
 8001e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	dd06      	ble.n	8001e56 <setHeater1+0x3a>
	{
		Q1set_PWM=255;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <setHeater1+0x80>)
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
		Q1=255;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <setHeater1+0x84>)
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <setHeater1+0x88>)
 8001e52:	601a      	str	r2, [r3, #0]
	{
		Q1set_PWM=(int)qval;
		Q1=qval;
	}

}
 8001e54:	e019      	b.n	8001e8a <setHeater1+0x6e>
	}else if(qval<0)/*MIN limiter*/
 8001e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d507      	bpl.n	8001e74 <setHeater1+0x58>
		Q1set_PWM=0;
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <setHeater1+0x80>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
		Q1=0;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <setHeater1+0x84>)
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	e00a      	b.n	8001e8a <setHeater1+0x6e>
		Q1set_PWM=(int)qval;
 8001e74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <setHeater1+0x80>)
 8001e7e:	ee17 2a90 	vmov	r2, s15
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
		Q1=qval;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <setHeater1+0x84>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	437f0000 	.word	0x437f0000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	20000260 	.word	0x20000260
 8001ea4:	437f0000 	.word	0x437f0000

08001ea8 <setHeater2>:
/* Heater 2 function */
void setHeater2(float qval)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	ed87 0a01 	vstr	s0, [r7, #4]

	if(qval>255) /*MAX limiter*/
 8001eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f14 <setHeater2+0x6c>
 8001eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	dd06      	ble.n	8001ed2 <setHeater2+0x2a>
	{
		Q2set_PWM=255;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <setHeater2+0x70>)
 8001ec6:	22ff      	movs	r2, #255	; 0xff
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38
		Q2=255;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <setHeater2+0x74>)
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <setHeater2+0x78>)
 8001ece:	601a      	str	r2, [r3, #0]
	{
		Q2set_PWM=(int)qval;
		Q2=qval;
	}

}
 8001ed0:	e019      	b.n	8001f06 <setHeater2+0x5e>
	}else if(qval<0)/*MIN limiter*/
 8001ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d507      	bpl.n	8001ef0 <setHeater2+0x48>
		Q2set_PWM=0;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <setHeater2+0x70>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
		Q2=0;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <setHeater2+0x74>)
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	e00a      	b.n	8001f06 <setHeater2+0x5e>
		Q2set_PWM=(int)qval;
 8001ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <setHeater2+0x70>)
 8001efa:	ee17 2a90 	vmov	r2, s15
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
		Q2=qval;
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <setHeater2+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	437f0000 	.word	0x437f0000
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	20000264 	.word	0x20000264
 8001f20:	437f0000 	.word	0x437f0000

08001f24 <checkAlarm>:

/* Heater 2 function */
uint8_t temp_alarm=0;
void checkAlarm(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

	if(readTemperature(pinT1)>70)//overheating
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff feb1 	bl	8001c90 <readTemperature>
 8001f2e:	eef0 7a40 	vmov.f32	s15, s0
 8001f32:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002060 <checkAlarm+0x13c>
 8001f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	dd0a      	ble.n	8001f56 <checkAlarm+0x32>
	{
		setHeater1(0);
 8001f40:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002064 <checkAlarm+0x140>
 8001f44:	f7ff ff6a 	bl	8001e1c <setHeater1>
		LD3(1);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f4e:	4846      	ldr	r0, [pc, #280]	; (8002068 <checkAlarm+0x144>)
 8001f50:	f001 fe56 	bl	8003c00 <HAL_GPIO_WritePin>

		Alarm_LED(0);
	}


}
 8001f54:	e081      	b.n	800205a <checkAlarm+0x136>
	else if(readTemperature(pinT2)>70) //overheating
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7ff fe9a 	bl	8001c90 <readTemperature>
 8001f5c:	eef0 7a40 	vmov.f32	s15, s0
 8001f60:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002060 <checkAlarm+0x13c>
 8001f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	dd0a      	ble.n	8001f84 <checkAlarm+0x60>
		 setHeater2(0);
 8001f6e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002064 <checkAlarm+0x140>
 8001f72:	f7ff ff99 	bl	8001ea8 <setHeater2>
		 LD3(1);
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	483a      	ldr	r0, [pc, #232]	; (8002068 <checkAlarm+0x144>)
 8001f7e:	f001 fe3f 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8001f82:	e06a      	b.n	800205a <checkAlarm+0x136>
    else if(readTemperature(pinT1)>limT1 || readTemperature(pinT2)>limT2)
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff fe83 	bl	8001c90 <readTemperature>
 8001f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <checkAlarm+0x148>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dc0f      	bgt.n	8001fc4 <checkAlarm+0xa0>
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7ff fe73 	bl	8001c90 <readTemperature>
 8001faa:	eeb0 7a40 	vmov.f32	s14, s0
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <checkAlarm+0x14c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	dd09      	ble.n	8001fd8 <checkAlarm+0xb4>
		Alarm_LED(1);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fca:	482a      	ldr	r0, [pc, #168]	; (8002074 <checkAlarm+0x150>)
 8001fcc:	f001 fe18 	bl	8003c00 <HAL_GPIO_WritePin>
		temp_alarm=1;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <checkAlarm+0x154>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e040      	b.n	800205a <checkAlarm+0x136>
	}else if( (readTemperature(pinT1)<limT1-3 && readTemperature(pinT2)<limT2-3) && temp_alarm==1)
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff fe59 	bl	8001c90 <readTemperature>
 8001fde:	eeb0 7a40 	vmov.f32	s14, s0
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <checkAlarm+0x148>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3b03      	subs	r3, #3
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	d524      	bpl.n	8002044 <checkAlarm+0x120>
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7ff fe48 	bl	8001c90 <readTemperature>
 8002000:	eeb0 7a40 	vmov.f32	s14, s0
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <checkAlarm+0x14c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3b03      	subs	r3, #3
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d513      	bpl.n	8002044 <checkAlarm+0x120>
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <checkAlarm+0x154>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10f      	bne.n	8002044 <checkAlarm+0x120>
		Alarm_LED(0);
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <checkAlarm+0x150>)
 800202c:	f001 fde8 	bl	8003c00 <HAL_GPIO_WritePin>
		LD3(0);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002036:	480c      	ldr	r0, [pc, #48]	; (8002068 <checkAlarm+0x144>)
 8002038:	f001 fde2 	bl	8003c00 <HAL_GPIO_WritePin>
		temp_alarm=0;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <checkAlarm+0x154>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e00a      	b.n	800205a <checkAlarm+0x136>
	}else if(temp_alarm==0)
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <checkAlarm+0x154>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <checkAlarm+0x136>
		Alarm_LED(0);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002052:	4808      	ldr	r0, [pc, #32]	; (8002074 <checkAlarm+0x150>)
 8002054:	f001 fdd4 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8002058:	e7ff      	b.n	800205a <checkAlarm+0x136>
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	428c0000 	.word	0x428c0000
 8002064:	00000000 	.word	0x00000000
 8002068:	40020400 	.word	0x40020400
 800206c:	20000004 	.word	0x20000004
 8002070:	20000005 	.word	0x20000005
 8002074:	40020c00 	.word	0x40020c00
 8002078:	200002a4 	.word	0x200002a4

0800207c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002080:	f000 fdef 	bl	8002c62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002084:	f000 f83e 	bl	8002104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002088:	f000 fa48 	bl	800251c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800208c:	f000 fa16 	bl	80024bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002090:	f000 f8d2 	bl	8002238 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002094:	f000 f922 	bl	80022dc <MX_TIM1_Init>
  MX_TIM7_Init();
 8002098:	f000 f9d8 	bl	800244c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //Heater Q2
 800209c:	2104      	movs	r1, #4
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <main+0x74>)
 80020a0:	f003 f866 	bl	8005170 <HAL_TIM_PWM_Start>
 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //Heater Q1
 80020a4:	2108      	movs	r1, #8
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <main+0x74>)
 80020a8:	f003 f862 	bl	8005170 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim7); //Start interrupt
 80020ac:	4811      	ldr	r0, [pc, #68]	; (80020f4 <main+0x78>)
 80020ae:	f002 ff85 	bl	8004fbc <HAL_TIM_Base_Start_IT>

	 __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <main+0x7c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <main+0x7c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0220 	orr.w	r2, r2, #32
 80020c0:	601a      	str	r2, [r3, #0]

	 HAL_UART_Transmit(&huart3, "TCLab_F767\n\r", 12, 10);
 80020c2:	230a      	movs	r3, #10
 80020c4:	220c      	movs	r2, #12
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <main+0x80>)
 80020c8:	480b      	ldr	r0, [pc, #44]	; (80020f8 <main+0x7c>)
 80020ca:	f004 f9a9 	bl	8006420 <HAL_UART_Transmit>
     LD1(0);LD2(0);LD3(0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <main+0x84>)
 80020d4:	f001 fd94 	bl	8003c00 <HAL_GPIO_WritePin>
 80020d8:	2200      	movs	r2, #0
 80020da:	2101      	movs	r1, #1
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <main+0x84>)
 80020de:	f001 fd8f 	bl	8003c00 <HAL_GPIO_WritePin>
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <main+0x84>)
 80020ea:	f001 fd89 	bl	8003c00 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <main+0x72>
 80020f0:	20000414 	.word	0x20000414
 80020f4:	20000460 	.word	0x20000460
 80020f8:	20000348 	.word	0x20000348
 80020fc:	0800b614 	.word	0x0800b614
 8002100:	40020400 	.word	0x40020400

08002104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0b8      	sub	sp, #224	; 0xe0
 8002108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800210e:	2234      	movs	r2, #52	; 0x34
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f005 f8a2 	bl	800725c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	2290      	movs	r2, #144	; 0x90
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 f893 	bl	800725c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002136:	f001 fd97 	bl	8003c68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <SystemClock_Config+0x128>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <SystemClock_Config+0x128>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <SystemClock_Config+0x128>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <SystemClock_Config+0x12c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800215a:	4a35      	ldr	r2, [pc, #212]	; (8002230 <SystemClock_Config+0x12c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <SystemClock_Config+0x12c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800216e:	2301      	movs	r3, #1
 8002170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002174:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800218a:	2304      	movs	r3, #4
 800218c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002190:	2360      	movs	r3, #96	; 0x60
 8002192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800219c:	2304      	movs	r3, #4
 800219e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 fdd5 	bl	8003d5c <HAL_RCC_OscConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80021b8:	f000 fab6 	bl	8002728 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021bc:	f001 fd7e 	bl	8003cbc <HAL_PWREx_EnableOverDrive>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021c6:	f000 faaf 	bl	8002728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ca:	230f      	movs	r3, #15
 80021cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 f861 	bl	80042b8 <HAL_RCC_ClockConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80021fc:	f000 fa94 	bl	8002728 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <SystemClock_Config+0x130>)
 8002202:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002204:	2300      	movs	r3, #0
 8002206:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220e:	f107 0308 	add.w	r3, r7, #8
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fa52 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800221e:	f000 fa83 	bl	8002728 <Error_Handler>
  }
}
 8002222:	bf00      	nop
 8002224:	37e0      	adds	r7, #224	; 0xe0
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000
 8002234:	00200100 	.word	0x00200100

08002238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800223e:	463b      	mov	r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <MX_ADC1_Init+0x98>)
 800224c:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <MX_ADC1_Init+0x9c>)
 800224e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002256:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_ADC1_Init+0x98>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002260:	2201      	movs	r2, #1
 8002262:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_ADC1_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MX_ADC1_Init+0x98>)
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <MX_ADC1_Init+0xa0>)
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002286:	2201      	movs	r2, #1
 8002288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_ADC1_Init+0x98>)
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_ADC1_Init+0x98>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_ADC1_Init+0x98>)
 800229a:	f000 fd3f 	bl	8002d1c <HAL_ADC_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022a4:	f000 fa40 	bl	8002728 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022a8:	2303      	movs	r3, #3
 80022aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80022b0:	2304      	movs	r3, #4
 80022b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_ADC1_Init+0x98>)
 80022ba:	f000 ff0d 	bl	80030d8 <HAL_ADC_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80022c4:	f000 fa30 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200003cc 	.word	0x200003cc
 80022d4:	40012000 	.word	0x40012000
 80022d8:	0f000001 	.word	0x0f000001

080022dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b09a      	sub	sp, #104	; 0x68
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	222c      	movs	r2, #44	; 0x2c
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f004 ffa0 	bl	800725c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800231c:	4b49      	ldr	r3, [pc, #292]	; (8002444 <MX_TIM1_Init+0x168>)
 800231e:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <MX_TIM1_Init+0x16c>)
 8002320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <MX_TIM1_Init+0x168>)
 8002324:	22c8      	movs	r2, #200	; 0xc8
 8002326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <MX_TIM1_Init+0x168>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <MX_TIM1_Init+0x168>)
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <MX_TIM1_Init+0x168>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800233a:	4b42      	ldr	r3, [pc, #264]	; (8002444 <MX_TIM1_Init+0x168>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <MX_TIM1_Init+0x168>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002346:	483f      	ldr	r0, [pc, #252]	; (8002444 <MX_TIM1_Init+0x168>)
 8002348:	f002 fde0 	bl	8004f0c <HAL_TIM_Base_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002352:	f000 f9e9 	bl	8002728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800235c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002360:	4619      	mov	r1, r3
 8002362:	4838      	ldr	r0, [pc, #224]	; (8002444 <MX_TIM1_Init+0x168>)
 8002364:	f003 fa2e 	bl	80057c4 <HAL_TIM_ConfigClockSource>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800236e:	f000 f9db 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002372:	4834      	ldr	r0, [pc, #208]	; (8002444 <MX_TIM1_Init+0x168>)
 8002374:	f002 fe9a 	bl	80050ac <HAL_TIM_PWM_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800237e:	f000 f9d3 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800238e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002392:	4619      	mov	r1, r3
 8002394:	482b      	ldr	r0, [pc, #172]	; (8002444 <MX_TIM1_Init+0x168>)
 8002396:	f003 fecb 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80023a0:	f000 f9c2 	bl	8002728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a4:	2360      	movs	r3, #96	; 0x60
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023c4:	2204      	movs	r2, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	481e      	ldr	r0, [pc, #120]	; (8002444 <MX_TIM1_Init+0x168>)
 80023ca:	f003 f8eb 	bl	80055a4 <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80023d4:	f000 f9a8 	bl	8002728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023dc:	2208      	movs	r2, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	4818      	ldr	r0, [pc, #96]	; (8002444 <MX_TIM1_Init+0x168>)
 80023e2:	f003 f8df 	bl	80055a4 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80023ec:	f000 f99c 	bl	8002728 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002408:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <MX_TIM1_Init+0x168>)
 8002426:	f003 ff11 	bl	800624c <HAL_TIMEx_ConfigBreakDeadTime>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002430:	f000 f97a 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <MX_TIM1_Init+0x168>)
 8002436:	f000 fa3b 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 800243a:	bf00      	nop
 800243c:	3768      	adds	r7, #104	; 0x68
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000414 	.word	0x20000414
 8002448:	40010000 	.word	0x40010000

0800244c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_TIM7_Init+0x68>)
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <MX_TIM7_Init+0x6c>)
 8002460:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_TIM7_Init+0x68>)
 8002464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002468:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_TIM7_Init+0x68>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_TIM7_Init+0x68>)
 8002472:	f242 7210 	movw	r2, #10000	; 0x2710
 8002476:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_TIM7_Init+0x68>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_TIM7_Init+0x68>)
 8002480:	f002 fd44 	bl	8004f0c <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800248a:	f000 f94d 	bl	8002728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM7_Init+0x68>)
 800249c:	f003 fe48 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80024a6:	f000 f93f 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000460 	.word	0x20000460
 80024b8:	40001400 	.word	0x40001400

080024bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <MX_USART3_UART_Init+0x5c>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_USART3_UART_Init+0x58>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_USART3_UART_Init+0x58>)
 8002500:	f003 ff40 	bl	8006384 <HAL_UART_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800250a:	f000 f90d 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000348 	.word	0x20000348
 8002518:	40004800 	.word	0x40004800

0800251c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <MX_GPIO_Init+0x174>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a56      	ldr	r2, [pc, #344]	; (8002690 <MX_GPIO_Init+0x174>)
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <MX_GPIO_Init+0x174>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <MX_GPIO_Init+0x174>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a50      	ldr	r2, [pc, #320]	; (8002690 <MX_GPIO_Init+0x174>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <MX_GPIO_Init+0x174>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <MX_GPIO_Init+0x174>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <MX_GPIO_Init+0x174>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <MX_GPIO_Init+0x174>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b45      	ldr	r3, [pc, #276]	; (8002690 <MX_GPIO_Init+0x174>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a44      	ldr	r2, [pc, #272]	; (8002690 <MX_GPIO_Init+0x174>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <MX_GPIO_Init+0x174>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <MX_GPIO_Init+0x174>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <MX_GPIO_Init+0x174>)
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <MX_GPIO_Init+0x174>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <MX_GPIO_Init+0x174>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a38      	ldr	r2, [pc, #224]	; (8002690 <MX_GPIO_Init+0x174>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <MX_GPIO_Init+0x174>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <MX_GPIO_Init+0x174>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a32      	ldr	r2, [pc, #200]	; (8002690 <MX_GPIO_Init+0x174>)
 80025c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <MX_GPIO_Init+0x174>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Zelena_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80025e0:	482c      	ldr	r0, [pc, #176]	; (8002694 <MX_GPIO_Init+0x178>)
 80025e2:	f001 fb0d 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCLabLED_GPIO_Port, TCLabLED_Pin, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	482a      	ldr	r0, [pc, #168]	; (8002698 <MX_GPIO_Init+0x17c>)
 80025ee:	f001 fb07 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2140      	movs	r1, #64	; 0x40
 80025f6:	4829      	ldr	r0, [pc, #164]	; (800269c <MX_GPIO_Init+0x180>)
 80025f8:	f001 fb02 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <MX_GPIO_Init+0x184>)
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	4619      	mov	r1, r3
 8002610:	4824      	ldr	r0, [pc, #144]	; (80026a4 <MX_GPIO_Init+0x188>)
 8002612:	f001 f949 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Zelena_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Zelena_Pin|LD3_Pin|LD2_Pin;
 8002616:	f244 0381 	movw	r3, #16513	; 0x4081
 800261a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	4819      	ldr	r0, [pc, #100]	; (8002694 <MX_GPIO_Init+0x178>)
 8002630:	f001 f93a 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCLabLED_Pin */
  GPIO_InitStruct.Pin = TCLabLED_Pin;
 8002634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TCLabLED_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	4812      	ldr	r0, [pc, #72]	; (8002698 <MX_GPIO_Init+0x17c>)
 800264e:	f001 f92b 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <MX_GPIO_Init+0x180>)
 800266a:	f001 f91d 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	4806      	ldr	r0, [pc, #24]	; (800269c <MX_GPIO_Init+0x180>)
 8002682:	f001 f911 	bl	80038a8 <HAL_GPIO_Init>

}
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021800 	.word	0x40021800
 80026a0:	10110000 	.word	0x10110000
 80026a4:	40020800 	.word	0x40020800

080026a8 <ADC_Select_CH3>:

/* USER CODE BEGIN 4 */
void ADC_Select_CH3 (void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80026ae:	463b      	mov	r3, r7
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80026ba:	2303      	movs	r3, #3
 80026bc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026c2:	2304      	movs	r3, #4
 80026c4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c6:	463b      	mov	r3, r7
 80026c8:	4619      	mov	r1, r3
 80026ca:	4806      	ldr	r0, [pc, #24]	; (80026e4 <ADC_Select_CH3+0x3c>)
 80026cc:	f000 fd04 	bl	80030d8 <HAL_ADC_ConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <ADC_Select_CH3+0x32>
	  {
	    Error_Handler();
 80026d6:	f000 f827 	bl	8002728 <Error_Handler>
	  }
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200003cc 	.word	0x200003cc

080026e8 <ADC_Select_CH13>:

void ADC_Select_CH13 (void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80026ee:	463b      	mov	r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_13;
 80026fa:	230d      	movs	r3, #13
 80026fc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002702:	2304      	movs	r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <ADC_Select_CH13+0x3c>)
 800270c:	f000 fce4 	bl	80030d8 <HAL_ADC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <ADC_Select_CH13+0x32>
	  {
	    Error_Handler();
 8002716:	f000 f807 	bl	8002728 <Error_Handler>
	  }
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200003cc 	.word	0x200003cc

08002728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002730:	e7fe      	b.n	8002730 <Error_Handler+0x8>
	...

08002734 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_MspInit+0x50>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_MspInit+0x50>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_MspInit+0x50>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_MspInit+0x50>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_MspInit+0x50>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_MspInit+0x50>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2001      	movs	r0, #1
 8002770:	f000 ffd1 	bl	8003716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002774:	2001      	movs	r0, #1
 8002776:	f000 ffea 	bl	800374e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_ADC_MspInit+0xa4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d13b      	bne.n	8002822 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a20      	ldr	r2, [pc, #128]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_ADC_MspInit+0xa8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027f2:	2308      	movs	r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f6:	2303      	movs	r3, #3
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <HAL_ADC_MspInit+0xac>)
 8002806:	f001 f84f 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800280a:	2308      	movs	r3, #8
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280e:	2303      	movs	r3, #3
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4806      	ldr	r0, [pc, #24]	; (8002838 <HAL_ADC_MspInit+0xb0>)
 800281e:	f001 f843 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40012000 	.word	0x40012000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020800 	.word	0x40020800
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_TIM_Base_MspInit+0x68>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002866:	e018      	b.n	800289a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_TIM_Base_MspInit+0x70>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d113      	bne.n	800289a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	2037      	movs	r0, #55	; 0x37
 8002890:	f000 ff41 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002894:	2037      	movs	r0, #55	; 0x37
 8002896:	f000 ff5a 	bl	800374e <HAL_NVIC_EnableIRQ>
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40001400 	.word	0x40001400

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_TIM_MspPostInit+0x64>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11c      	bne.n	800290c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80028ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80028ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 8002908:	f000 ffce 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40010000 	.word	0x40010000
 8002918:	40023800 	.word	0x40023800
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <HAL_UART_MspInit+0x8c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d130      	bne.n	80029a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_UART_MspInit+0x90>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002984:	2307      	movs	r3, #7
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <HAL_UART_MspInit+0x94>)
 8002990:	f000 ff8a 	bl	80038a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	2027      	movs	r0, #39	; 0x27
 800299a:	f000 febc 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800299e:	2027      	movs	r0, #39	; 0x27
 80029a0:	f000 fed5 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40004800 	.word	0x40004800
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020c00 	.word	0x40020c00

080029b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <NMI_Handler+0x4>

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <MemManage_Handler+0x4>

080029ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a04:	f000 f96a 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002a10:	f001 f93a 	bl	8003c88 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
   char d;
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <USART3_IRQHandler+0x1c>)
 8002a1e:	f003 fd93 	bl	8006548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  Serial_read_main_TCLab();
 8002a22:	f7fe fa45 	bl	8000eb0 <Serial_read_main_TCLab>
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a2a:	4803      	ldr	r0, [pc, #12]	; (8002a38 <USART3_IRQHandler+0x20>)
 8002a2c:	f001 f901 	bl	8003c32 <HAL_GPIO_TogglePin>
  /* USER CODE END USART3_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000348 	.word	0x20000348
 8002a38:	40020400 	.word	0x40020400

08002a3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <TIM7_IRQHandler+0x1c>)
 8002a42:	f002 fc8f 	bl	8005364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

	   Controller_real_time();
 8002a46:	f7fd ffc3 	bl	80009d0 <Controller_real_time>
       HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	4803      	ldr	r0, [pc, #12]	; (8002a5c <TIM7_IRQHandler+0x20>)
 8002a4e:	f001 f8f0 	bl	8003c32 <HAL_GPIO_TogglePin>


  /* USER CODE END TIM7_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000460 	.word	0x20000460
 8002a5c:	40020400 	.word	0x40020400

08002a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
	return 1;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_kill>:

int _kill(int pid, int sig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a7a:	f004 fbb7 	bl	80071ec <__errno>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2216      	movs	r2, #22
 8002a82:	601a      	str	r2, [r3, #0]
	return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_exit>:

void _exit (int status)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ffe7 	bl	8002a70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aa2:	e7fe      	b.n	8002aa2 <_exit+0x12>

08002aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e00a      	b.n	8002acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ab6:	f3af 8000 	nop.w
 8002aba:	4601      	mov	r1, r0
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	60ba      	str	r2, [r7, #8]
 8002ac2:	b2ca      	uxtb	r2, r1
 8002ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dbf0      	blt.n	8002ab6 <_read+0x12>
	}

return len;
 8002ad4:	687b      	ldr	r3, [r7, #4]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e009      	b.n	8002b04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dbf1      	blt.n	8002af0 <_write+0x12>
	}
	return len;
 8002b0c:	687b      	ldr	r3, [r7, #4]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_close>:

int _close(int file)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_isatty>:

int _isatty(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	return 1;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f004 fb1c 	bl	80071ec <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20080000 	.word	0x20080000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	200002a8 	.word	0x200002a8
 8002be8:	200004c0 	.word	0x200004c0

08002bec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c1c:	e002      	b.n	8002c24 <LoopCopyDataInit>

08002c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c22:	3304      	adds	r3, #4

08002c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c28:	d3f9      	bcc.n	8002c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c2c:	4c0b      	ldr	r4, [pc, #44]	; (8002c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c30:	e001      	b.n	8002c36 <LoopFillZerobss>

08002c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c34:	3204      	adds	r2, #4

08002c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c38:	d3fb      	bcc.n	8002c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff ffd7 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f004 fadb 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7ff fa1b 	bl	800207c <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c50:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002c54:	0800bafc 	.word	0x0800bafc
  ldr r2, =_sbss
 8002c58:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002c5c:	200004c0 	.word	0x200004c0

08002c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC_IRQHandler>

08002c62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c66:	2003      	movs	r0, #3
 8002c68:	f000 fd4a 	bl	8003700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 f805 	bl	8002c7c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c72:	f7ff fd5f 	bl	8002734 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fd65 	bl	800376a <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 fd2d 	bl	8003716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000003c 	.word	0x2000003c
 8002cd4:	20000044 	.word	0x20000044
 8002cd8:	20000040 	.word	0x20000040

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000044 	.word	0x20000044
 8002d00:	200004ac 	.word	0x200004ac

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	200004ac 	.word	0x200004ac

08002d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e031      	b.n	8002d96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fd24 	bl	8002788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_ADC_Init+0x84>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fafe 	bl	800336c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
 8002d86:	e001      	b.n	8002d8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	ffffeefd 	.word	0xffffeefd

08002da4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Start+0x1a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ad      	b.n	8002f1a <HAL_ADC_Start+0x176>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d018      	beq.n	8002e06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_ADC_Start+0x184>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_ADC_Start+0x188>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9a      	lsrs	r2, r3, #18
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002df8:	e002      	b.n	8002e00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f9      	bne.n	8002dfa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d175      	bne.n	8002f00 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_ADC_Start+0x18c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d106      	bne.n	8002e5e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f023 0206 	bic.w	r2, r3, #6
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e5c:	e002      	b.n	8002e64 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <HAL_ADC_Start+0x190>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d143      	bne.n	8002f18 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e03a      	b.n	8002f18 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_ADC_Start+0x194>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10e      	bne.n	8002eca <HAL_ADC_Start+0x126>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ec8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_ADC_Start+0x190>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d120      	bne.n	8002f18 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_ADC_Start+0x198>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d11b      	bne.n	8002f18 <HAL_ADC_Start+0x174>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d114      	bne.n	8002f18 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	e00b      	b.n	8002f18 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000003c 	.word	0x2000003c
 8002f2c:	431bde83 	.word	0x431bde83
 8002f30:	fffff8fe 	.word	0xfffff8fe
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	40012200 	.word	0x40012200

08002f40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Stop+0x16>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e01f      	b.n	8002f96 <HAL_ADC_Stop+0x56>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_ADC_Stop+0x64>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	ffffeefe 	.word	0xffffeefe

08002fa8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d113      	bne.n	8002fee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd4:	d10b      	bne.n	8002fee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e063      	b.n	80030b6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fee:	f7ff fe89 	bl	8002d04 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ff4:	e021      	b.n	800303a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d01d      	beq.n	800303a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_ADC_PollForConversion+0x6c>
 8003004:	f7ff fe7e 	bl	8002d04 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d212      	bcs.n	800303a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d00b      	beq.n	800303a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0204 	orr.w	r2, r3, #4
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e03d      	b.n	80030b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d1d6      	bne.n	8002ff6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0212 	mvn.w	r2, #18
 8003050:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d123      	bne.n	80030b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11f      	bne.n	80030b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d006      	beq.n	8003090 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800308c:	2b00      	cmp	r3, #0
 800308e:	d111      	bne.n	80030b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e12a      	b.n	800334a <HAL_ADC_ConfigChannel+0x272>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b09      	cmp	r3, #9
 8003102:	d93a      	bls.n	800317a <HAL_ADC_ConfigChannel+0xa2>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310c:	d035      	beq.n	800317a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	3b1e      	subs	r3, #30
 8003124:	2207      	movs	r2, #7
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	400a      	ands	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a87      	ldr	r2, [pc, #540]	; (8003358 <HAL_ADC_ConfigChannel+0x280>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10a      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68d9      	ldr	r1, [r3, #12]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	061a      	lsls	r2, r3, #24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	e035      	b.n	80031c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68d9      	ldr	r1, [r3, #12]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	4603      	mov	r3, r0
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4403      	add	r3, r0
 800316c:	3b1e      	subs	r3, #30
 800316e:	409a      	lsls	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003178:	e022      	b.n	80031c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6919      	ldr	r1, [r3, #16]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43da      	mvns	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6919      	ldr	r1, [r3, #16]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4403      	add	r3, r0
 80031b6:	409a      	lsls	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d824      	bhi.n	8003212 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b05      	subs	r3, #5
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43da      	mvns	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	400a      	ands	r2, r1
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b05      	subs	r3, #5
 8003204:	fa00 f203 	lsl.w	r2, r0, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	635a      	str	r2, [r3, #52]	; 0x34
 8003210:	e04c      	b.n	80032ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d824      	bhi.n	8003264 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b23      	subs	r3, #35	; 0x23
 800322c:	221f      	movs	r2, #31
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	400a      	ands	r2, r1
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b23      	subs	r3, #35	; 0x23
 8003256:	fa00 f203 	lsl.w	r2, r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
 8003262:	e023      	b.n	80032ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b41      	subs	r3, #65	; 0x41
 8003276:	221f      	movs	r2, #31
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b41      	subs	r3, #65	; 0x41
 80032a0:	fa00 f203 	lsl.w	r2, r0, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	; (800335c <HAL_ADC_ConfigChannel+0x284>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10a      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1f4>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032be:	d105      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 80032c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_ADC_ConfigChannel+0x284>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d109      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x212>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b12      	cmp	r3, #18
 80032dc:	d105      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 80032e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_ADC_ConfigChannel+0x284>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x268>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <HAL_ADC_ConfigChannel+0x280>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x22e>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b11      	cmp	r3, #17
 8003304:	d11c      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <HAL_ADC_ConfigChannel+0x288>)
 800330c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003310:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <HAL_ADC_ConfigChannel+0x280>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_ADC_ConfigChannel+0x28c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_ADC_ConfigChannel+0x290>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9a      	lsrs	r2, r3, #18
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003332:	e002      	b.n	800333a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b01      	subs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f9      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	10000012 	.word	0x10000012
 800335c:	40012000 	.word	0x40012000
 8003360:	40012300 	.word	0x40012300
 8003364:	2000003c 	.word	0x2000003c
 8003368:	431bde83 	.word	0x431bde83

0800336c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003374:	4b78      	ldr	r3, [pc, #480]	; (8003558 <ADC_Init+0x1ec>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a77      	ldr	r2, [pc, #476]	; (8003558 <ADC_Init+0x1ec>)
 800337a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800337e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <ADC_Init+0x1ec>)
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4973      	ldr	r1, [pc, #460]	; (8003558 <ADC_Init+0x1ec>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800339c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	4a58      	ldr	r2, [pc, #352]	; (800355c <ADC_Init+0x1f0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800340e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e00f      	b.n	8003466 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0202 	bic.w	r2, r2, #2
 8003474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	005a      	lsls	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	3b01      	subs	r3, #1
 80034c0:	035a      	lsls	r2, r3, #13
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	e007      	b.n	80034dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	051a      	lsls	r2, r3, #20
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800351e:	025a      	lsls	r2, r3, #9
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	029a      	lsls	r2, r3, #10
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40012300 	.word	0x40012300
 800355c:	0f000001 	.word	0x0f000001

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	4313      	orrs	r3, r2
 800358c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	60d3      	str	r3, [r2, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00
 80035a4:	05fa0000 	.word	0x05fa0000

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4907      	ldr	r1, [pc, #28]	; (80035fc <__NVIC_EnableIRQ+0x38>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
         );
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036cc:	d301      	bcc.n	80036d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <SysTick_Config+0x40>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036da:	210f      	movs	r1, #15
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	f7ff ff8e 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SysTick_Config+0x40>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <SysTick_Config+0x40>)
 80036ec:	2207      	movs	r2, #7
 80036ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	e000e010 	.word	0xe000e010

08003700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff29 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003728:	f7ff ff3e 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 800372c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f7ff ff8e 	bl	8003654 <NVIC_EncodePriority>
 8003738:	4602      	mov	r2, r0
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff5d 	bl	8003600 <__NVIC_SetPriority>
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff31 	bl	80035c4 <__NVIC_EnableIRQ>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ffa2 	bl	80036bc <SysTick_Config>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003790:	f7ff fab8 	bl	8002d04 <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d008      	beq.n	80037b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e052      	b.n	800385a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0216 	bic.w	r2, r2, #22
 80037c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <HAL_DMA_Abort+0x62>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0208 	bic.w	r2, r2, #8
 80037f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003804:	e013      	b.n	800382e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003806:	f7ff fa7d 	bl	8002d04 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b05      	cmp	r3, #5
 8003812:	d90c      	bls.n	800382e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e015      	b.n	800385a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e4      	bne.n	8003806 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	223f      	movs	r2, #63	; 0x3f
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d004      	beq.n	8003880 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e00c      	b.n	800389a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2205      	movs	r2, #5
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e175      	b.n	8003bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f040 8164 	bne.w	8003bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d00b      	beq.n	8003906 <HAL_GPIO_Init+0x5e>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038fa:	2b11      	cmp	r3, #17
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b12      	cmp	r3, #18
 8003904:	d130      	bne.n	8003968 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	2203      	movs	r2, #3
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800393c:	2201      	movs	r2, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 0201 	and.w	r2, r3, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x100>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b12      	cmp	r3, #18
 80039a6:	d123      	bne.n	80039f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80be 	beq.w	8003bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_GPIO_Init+0x324>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_GPIO_Init+0x324>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_GPIO_Init+0x324>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a4a:	4a61      	ldr	r2, [pc, #388]	; (8003bd0 <HAL_GPIO_Init+0x328>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <HAL_GPIO_Init+0x32c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d037      	beq.n	8003ae6 <HAL_GPIO_Init+0x23e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_GPIO_Init+0x330>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_GPIO_Init+0x23a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a56      	ldr	r2, [pc, #344]	; (8003bdc <HAL_GPIO_Init+0x334>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x236>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a55      	ldr	r2, [pc, #340]	; (8003be0 <HAL_GPIO_Init+0x338>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x232>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a54      	ldr	r2, [pc, #336]	; (8003be4 <HAL_GPIO_Init+0x33c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x22e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a53      	ldr	r2, [pc, #332]	; (8003be8 <HAL_GPIO_Init+0x340>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x22a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_GPIO_Init+0x344>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x226>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_GPIO_Init+0x348>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x222>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a50      	ldr	r2, [pc, #320]	; (8003bf4 <HAL_GPIO_Init+0x34c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x21e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4f      	ldr	r2, [pc, #316]	; (8003bf8 <HAL_GPIO_Init+0x350>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x21a>
 8003abe:	2309      	movs	r3, #9
 8003ac0:	e012      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	e010      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	e00e      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e00c      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ace:	2306      	movs	r3, #6
 8003ad0:	e00a      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	e008      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ada:	2303      	movs	r3, #3
 8003adc:	e004      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e002      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f002 0203 	and.w	r2, r2, #3
 8003aee:	0092      	lsls	r2, r2, #2
 8003af0:	4093      	lsls	r3, r2
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003af8:	4935      	ldr	r1, [pc, #212]	; (8003bd0 <HAL_GPIO_Init+0x328>)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b2a:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b5a:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_GPIO_Init+0x354>)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	f67f ae86 	bls.w	80038c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020c00 	.word	0x40020c00
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40021400 	.word	0x40021400
 8003bec:	40021800 	.word	0x40021800
 8003bf0:	40021c00 	.word	0x40021c00
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022400 	.word	0x40022400
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c44:	887a      	ldrh	r2, [r7, #2]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	041a      	lsls	r2, r3, #16
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43d9      	mvns	r1, r3
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	400b      	ands	r3, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	6013      	str	r3, [r2, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40007000 	.word	0x40007000

08003c88 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003c98:	f000 f808 	bl	8003cac <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003c9c:	4b02      	ldr	r3, [pc, #8]	; (8003ca8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ca2:	615a      	str	r2, [r3, #20]
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40013c00 	.word	0x40013c00

08003cac <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cea:	f7ff f80b 	bl	8002d04 <HAL_GetTick>
 8003cee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cf0:	e009      	b.n	8003d06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cf2:	f7ff f807 	bl	8002d04 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d00:	d901      	bls.n	8003d06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e022      	b.n	8003d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d20:	f7fe fff0 	bl	8002d04 <HAL_GetTick>
 8003d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d26:	e009      	b.n	8003d3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d28:	f7fe ffec 	bl	8002d04 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d36:	d901      	bls.n	8003d3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e007      	b.n	8003d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d48:	d1ee      	bne.n	8003d28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000

08003d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e29b      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8087 	beq.w	8003e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d80:	4b96      	ldr	r3, [pc, #600]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d00c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8c:	4b93      	ldr	r3, [pc, #588]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d112      	bne.n	8003dbe <HAL_RCC_OscConfig+0x62>
 8003d98:	4b90      	ldr	r3, [pc, #576]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da4:	d10b      	bne.n	8003dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d06c      	beq.n	8003e8c <HAL_RCC_OscConfig+0x130>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d168      	bne.n	8003e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e275      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x7a>
 8003dc8:	4b84      	ldr	r3, [pc, #528]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a83      	ldr	r2, [pc, #524]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e02e      	b.n	8003e34 <HAL_RCC_OscConfig+0xd8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x9c>
 8003dde:	4b7f      	ldr	r3, [pc, #508]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a7e      	ldr	r2, [pc, #504]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b7c      	ldr	r3, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7b      	ldr	r2, [pc, #492]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e01d      	b.n	8003e34 <HAL_RCC_OscConfig+0xd8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0xc0>
 8003e02:	4b76      	ldr	r3, [pc, #472]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a75      	ldr	r2, [pc, #468]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a72      	ldr	r2, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0xd8>
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b6c      	ldr	r3, [pc, #432]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6b      	ldr	r2, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe ff62 	bl	8002d04 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fe ff5e 	bl	8002d04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e229      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0xe8>
 8003e62:	e014      	b.n	8003e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe ff4e 	bl	8002d04 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fe ff4a 	bl	8002d04 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e215      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7e:	4b57      	ldr	r3, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x110>
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d069      	beq.n	8003f6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9a:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea6:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d11c      	bne.n	8003eec <HAL_RCC_OscConfig+0x190>
 8003eb2:	4b4a      	ldr	r3, [pc, #296]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x17a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e1e9      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	493d      	ldr	r1, [pc, #244]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	e040      	b.n	8003f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d023      	beq.n	8003f3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe ff00 	bl	8002d04 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fe fefc 	bl	8002d04 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e1c7      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4929      	ldr	r1, [pc, #164]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
 8003f3a:	e018      	b.n	8003f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe fedc 	bl	8002d04 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fe fed8 	bl	8002d04 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1a3      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d038      	beq.n	8003fec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fe feb9 	bl	8002d04 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f96:	f7fe feb5 	bl	8002d04 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e180      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x23a>
 8003fb4:	e01a      	b.n	8003fec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <HAL_RCC_OscConfig+0x280>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fe9f 	bl	8002d04 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe fe9b 	bl	8002d04 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d903      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e166      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
 8003fdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	4b92      	ldr	r3, [pc, #584]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a4 	beq.w	8004142 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b8c      	ldr	r3, [pc, #560]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b89      	ldr	r3, [pc, #548]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a88      	ldr	r2, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
 8004012:	4b86      	ldr	r3, [pc, #536]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004022:	4b83      	ldr	r3, [pc, #524]	; (8004230 <HAL_RCC_OscConfig+0x4d4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800402e:	4b80      	ldr	r3, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x4d4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7f      	ldr	r2, [pc, #508]	; (8004230 <HAL_RCC_OscConfig+0x4d4>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fe63 	bl	8002d04 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe fe5f 	bl	8002d04 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e12a      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x4d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x31a>
 8004068:	4b70      	ldr	r3, [pc, #448]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a6f      	ldr	r2, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
 8004074:	e02d      	b.n	80040d2 <HAL_RCC_OscConfig+0x376>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x33c>
 800407e:	4b6b      	ldr	r3, [pc, #428]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a6a      	ldr	r2, [pc, #424]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a67      	ldr	r2, [pc, #412]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
 8004096:	e01c      	b.n	80040d2 <HAL_RCC_OscConfig+0x376>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_OscConfig+0x35e>
 80040a0:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a61      	ldr	r2, [pc, #388]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	4b5f      	ldr	r3, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a5e      	ldr	r2, [pc, #376]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x376>
 80040ba:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a5b      	ldr	r2, [pc, #364]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
 80040c6:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d015      	beq.n	8004106 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fe fe13 	bl	8002d04 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe fe0f 	bl	8002d04 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0d8      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCC_OscConfig+0x386>
 8004104:	e014      	b.n	8004130 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fe fdfd 	bl	8002d04 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fdf9 	bl	8002d04 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0c2      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a3c      	ldr	r2, [pc, #240]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80ae 	beq.w	80042a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414c:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d06d      	beq.n	8004234 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d14b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a31      	ldr	r2, [pc, #196]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fdca 	bl	8002d04 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fdc6 	bl	8002d04 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e091      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	019b      	lsls	r3, r3, #6
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	491b      	ldr	r1, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe fd98 	bl	8002d04 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fe fd94 	bl	8002d04 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e05f      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x47c>
 80041f6:	e057      	b.n	80042a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe fd7e 	bl	8002d04 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe fd7a 	bl	8002d04 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e045      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCC_OscConfig+0x4d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x4b0>
 800422a:	e03d      	b.n	80042a8 <HAL_RCC_OscConfig+0x54c>
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x558>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d030      	beq.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d129      	bne.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d122      	bne.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800426c:	4293      	cmp	r3, r2
 800426e:	d119      	bne.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d10f      	bne.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0d0      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d0:	4b6a      	ldr	r3, [pc, #424]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d910      	bls.n	8004300 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b67      	ldr	r3, [pc, #412]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 020f 	bic.w	r2, r3, #15
 80042e6:	4965      	ldr	r1, [pc, #404]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b8      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a58      	ldr	r2, [pc, #352]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a52      	ldr	r2, [pc, #328]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800433a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	494d      	ldr	r1, [pc, #308]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d040      	beq.n	80043dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d115      	bne.n	800439a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e07f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d107      	bne.n	800438a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e073      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06b      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 0203 	bic.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4936      	ldr	r1, [pc, #216]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fe fcaa 	bl	8002d04 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b4:	f7fe fca6 	bl	8002d04 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e053      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 020c 	and.w	r2, r3, #12
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1eb      	bne.n	80043b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043dc:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d210      	bcs.n	800440c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 020f 	bic.w	r2, r3, #15
 80043f2:	4922      	ldr	r1, [pc, #136]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e032      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4916      	ldr	r1, [pc, #88]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490e      	ldr	r1, [pc, #56]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444a:	f000 f821 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCC_ClockConfig+0x1cc>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1d0>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1d4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fc06 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00
 8004480:	40023800 	.word	0x40023800
 8004484:	0800b624 	.word	0x0800b624
 8004488:	2000003c 	.word	0x2000003c
 800448c:	20000040 	.word	0x20000040

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	2300      	movs	r3, #0
 80044a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a8:	4b67      	ldr	r3, [pc, #412]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 030c 	and.w	r3, r3, #12
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d00d      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x40>
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	f200 80bd 	bhi.w	8004634 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x34>
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x3a>
 80044c2:	e0b7      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044c6:	60bb      	str	r3, [r7, #8]
      break;
 80044c8:	e0b7      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ca:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044cc:	60bb      	str	r3, [r7, #8]
      break;
 80044ce:	e0b4      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d0:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044da:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d04d      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e6:	4b58      	ldr	r3, [pc, #352]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	461a      	mov	r2, r3
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	ea02 0800 	and.w	r8, r2, r0
 80044fe:	ea03 0901 	and.w	r9, r3, r1
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	014b      	lsls	r3, r1, #5
 8004510:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004514:	0142      	lsls	r2, r0, #5
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	ebb0 0008 	subs.w	r0, r0, r8
 800451e:	eb61 0109 	sbc.w	r1, r1, r9
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	018b      	lsls	r3, r1, #6
 800452c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004530:	0182      	lsls	r2, r0, #6
 8004532:	1a12      	subs	r2, r2, r0
 8004534:	eb63 0301 	sbc.w	r3, r3, r1
 8004538:	f04f 0000 	mov.w	r0, #0
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	00d9      	lsls	r1, r3, #3
 8004542:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004546:	00d0      	lsls	r0, r2, #3
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	eb12 0208 	adds.w	r2, r2, r8
 8004550:	eb43 0309 	adc.w	r3, r3, r9
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	0259      	lsls	r1, r3, #9
 800455e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004562:	0250      	lsls	r0, r2, #9
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	461a      	mov	r2, r3
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f7fc f878 	bl	8000668 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e04a      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	461a      	mov	r2, r3
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	ea02 0400 	and.w	r4, r2, r0
 800459a:	ea03 0501 	and.w	r5, r3, r1
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	014b      	lsls	r3, r1, #5
 80045ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045b0:	0142      	lsls	r2, r0, #5
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	1b00      	subs	r0, r0, r4
 80045b8:	eb61 0105 	sbc.w	r1, r1, r5
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	018b      	lsls	r3, r1, #6
 80045c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045ca:	0182      	lsls	r2, r0, #6
 80045cc:	1a12      	subs	r2, r2, r0
 80045ce:	eb63 0301 	sbc.w	r3, r3, r1
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	00d9      	lsls	r1, r3, #3
 80045dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045e0:	00d0      	lsls	r0, r2, #3
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	1912      	adds	r2, r2, r4
 80045e8:	eb45 0303 	adc.w	r3, r5, r3
 80045ec:	f04f 0000 	mov.w	r0, #0
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	0299      	lsls	r1, r3, #10
 80045f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045fa:	0290      	lsls	r0, r2, #10
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	f7fc f82c 	bl	8000668 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	3301      	adds	r3, #1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	60bb      	str	r3, [r7, #8]
      break;
 8004632:	e002      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004636:	60bb      	str	r3, [r7, #8]
      break;
 8004638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463a:	68bb      	ldr	r3, [r7, #8]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200

08004654 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_GetHCLKFreq+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	2000003c 	.word	0x2000003c

0800466c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004670:	f7ff fff0 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0a9b      	lsrs	r3, r3, #10
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	0800b634 	.word	0x0800b634

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004698:	f7ff ffdc 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0b5b      	lsrs	r3, r3, #13
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4903      	ldr	r1, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	0800b634 	.word	0x0800b634

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d012      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e4:	4b69      	ldr	r3, [pc, #420]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a68      	ldr	r2, [pc, #416]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046ee:	6093      	str	r3, [r2, #8]
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f8:	4964      	ldr	r1, [pc, #400]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d017      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004716:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	4959      	ldr	r1, [pc, #356]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d017      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004752:	4b4e      	ldr	r3, [pc, #312]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	494a      	ldr	r1, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 808b 	beq.w	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a0:	4b3a      	ldr	r3, [pc, #232]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	4a39      	ldr	r2, [pc, #228]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6413      	str	r3, [r2, #64]	; 0x40
 80047ac:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a34      	ldr	r2, [pc, #208]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fe fa9e 	bl	8002d04 <HAL_GetTick>
 80047c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047cc:	f7fe fa9a 	bl	8002d04 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e38f      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d035      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	429a      	cmp	r2, r3
 8004806:	d02e      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004808:	4b20      	ldr	r3, [pc, #128]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a1d      	ldr	r2, [pc, #116]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481e:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d114      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fe fa62 	bl	8002d04 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fe fa5e 	bl	8002d04 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e351      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004872:	d111      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004882:	400b      	ands	r3, r1
 8004884:	4901      	ldr	r1, [pc, #4]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
 800488a:	e00b      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000
 8004894:	0ffffcff 	.word	0x0ffffcff
 8004898:	4bb3      	ldr	r3, [pc, #716]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4ab2      	ldr	r2, [pc, #712]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	4bb0      	ldr	r3, [pc, #704]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	49ad      	ldr	r1, [pc, #692]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c2:	4ba9      	ldr	r3, [pc, #676]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c8:	4aa7      	ldr	r2, [pc, #668]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048d2:	4ba5      	ldr	r3, [pc, #660]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	49a2      	ldr	r1, [pc, #648]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f0:	4b9d      	ldr	r3, [pc, #628]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fe:	499a      	ldr	r1, [pc, #616]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004912:	4b95      	ldr	r3, [pc, #596]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004920:	4991      	ldr	r1, [pc, #580]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004934:	4b8c      	ldr	r3, [pc, #560]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	4989      	ldr	r1, [pc, #548]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004956:	4b84      	ldr	r3, [pc, #528]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4980      	ldr	r1, [pc, #512]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004978:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f023 0203 	bic.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	4978      	ldr	r1, [pc, #480]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f023 020c 	bic.w	r2, r3, #12
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a8:	496f      	ldr	r1, [pc, #444]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	4967      	ldr	r1, [pc, #412]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049de:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	495e      	ldr	r1, [pc, #376]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a00:	4b59      	ldr	r3, [pc, #356]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	4956      	ldr	r1, [pc, #344]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	494d      	ldr	r1, [pc, #308]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a44:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	4945      	ldr	r1, [pc, #276]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	493c      	ldr	r1, [pc, #240]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a96:	4934      	ldr	r1, [pc, #208]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab8:	492b      	ldr	r1, [pc, #172]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aea:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	491b      	ldr	r1, [pc, #108]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b0c:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	4912      	ldr	r1, [pc, #72]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b40:	4909      	ldr	r1, [pc, #36]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00f      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	4986      	ldr	r1, [pc, #536]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b80:	4b81      	ldr	r3, [pc, #516]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b90:	497d      	ldr	r1, [pc, #500]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d006      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80d6 	beq.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bac:	4b76      	ldr	r3, [pc, #472]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a75      	ldr	r2, [pc, #468]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fe f8a4 	bl	8002d04 <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bc0:	f7fe f8a0 	bl	8002d04 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e195      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d021      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11d      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bf2:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c06:	0e1b      	lsrs	r3, r3, #24
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	019a      	lsls	r2, r3, #6
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	4958      	ldr	r1, [pc, #352]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02e      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c58:	d129      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c68:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6e:	0f1b      	lsrs	r3, r3, #28
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	019a      	lsls	r2, r3, #6
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	493e      	ldr	r1, [pc, #248]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c96:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9c:	f023 021f 	bic.w	r2, r3, #31
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	4938      	ldr	r1, [pc, #224]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01d      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cc8:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cce:	0f1b      	lsrs	r3, r3, #28
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	019a      	lsls	r2, r3, #6
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	071b      	lsls	r3, r3, #28
 8004cee:	4926      	ldr	r1, [pc, #152]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	071b      	lsls	r3, r3, #28
 8004d1e:	491a      	ldr	r1, [pc, #104]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fd ffe7 	bl	8002d04 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d3a:	f7fd ffe3 	bl	8002d04 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0d8      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	f040 80ce 	bne.w	8004efc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fd ffca 	bl	8002d04 <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d72:	e00b      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d74:	f7fd ffc6 	bl	8002d04 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d904      	bls.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0bb      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d8c:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d98:	d0ec      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02e      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12a      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dc2:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	0f1b      	lsrs	r3, r3, #28
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	019a      	lsls	r2, r3, #6
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	4944      	ldr	r1, [pc, #272]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dfe:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	493d      	ldr	r1, [pc, #244]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d022      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2c:	d11d      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e2e:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	0f1b      	lsrs	r3, r3, #28
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	019a      	lsls	r2, r3, #6
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	431a      	orrs	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	4929      	ldr	r1, [pc, #164]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	0e1b      	lsrs	r3, r3, #24
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	0c1b      	lsrs	r3, r3, #16
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	019a      	lsls	r2, r3, #6
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	071b      	lsls	r3, r3, #28
 8004eaa:	4917      	ldr	r1, [pc, #92]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4911      	ldr	r1, [pc, #68]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd ff16 	bl	8002d04 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004edc:	f7fd ff12 	bl	8002d04 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e007      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efa:	d1ef      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800

08004f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e049      	b.n	8004fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd fc82 	bl	800283c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 fd32 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e054      	b.n	800507e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a26      	ldr	r2, [pc, #152]	; (800508c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d022      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d01d      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a22      	ldr	r2, [pc, #136]	; (8005090 <HAL_TIM_Base_Start_IT+0xd4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d018      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <HAL_TIM_Base_Start_IT+0xd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <HAL_TIM_Base_Start_IT+0xdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00e      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_TIM_Base_Start_IT+0xe0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d115      	bne.n	8005068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b06      	cmp	r3, #6
 800504c:	d015      	beq.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d011      	beq.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	e008      	b.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e000      	b.n	800507c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800
 80050a8:	00010007 	.word	0x00010007

080050ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e049      	b.n	8005152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f841 	bl	800515a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fc62 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x24>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e03c      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e02f      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x58>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e022      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d109      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x72>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e015      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d109      	bne.n	80051fc <HAL_TIM_PWM_Start+0x8c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e008      	b.n	800520e <HAL_TIM_PWM_Start+0x9e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	bf14      	ite	ne
 8005208:	2301      	movne	r3, #1
 800520a:	2300      	moveq	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e092      	b.n	800533c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xb6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	e023      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xc6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005234:	e01b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xd6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	e013      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xe6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005254:	e00b      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xf6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	e003      	b.n	800526e <HAL_TIM_PWM_Start+0xfe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 ff34 	bl	80060e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a30      	ldr	r2, [pc, #192]	; (8005344 <HAL_TIM_PWM_Start+0x1d4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_PWM_Start+0x120>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2f      	ldr	r2, [pc, #188]	; (8005348 <HAL_TIM_PWM_Start+0x1d8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d101      	bne.n	8005294 <HAL_TIM_PWM_Start+0x124>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_TIM_PWM_Start+0x126>
 8005294:	2300      	movs	r3, #0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a25      	ldr	r2, [pc, #148]	; (8005344 <HAL_TIM_PWM_Start+0x1d4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d01d      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a22      	ldr	r2, [pc, #136]	; (800534c <HAL_TIM_PWM_Start+0x1dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a20      	ldr	r2, [pc, #128]	; (8005350 <HAL_TIM_PWM_Start+0x1e0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_TIM_PWM_Start+0x1e4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_TIM_PWM_Start+0x1d8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_TIM_PWM_Start+0x1e8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_TIM_PWM_Start+0x18a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a19      	ldr	r2, [pc, #100]	; (800535c <HAL_TIM_PWM_Start+0x1ec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d115      	bne.n	8005326 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_TIM_PWM_Start+0x1f0>)
 8005302:	4013      	ands	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d015      	beq.n	8005338 <HAL_TIM_PWM_Start+0x1c8>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005312:	d011      	beq.n	8005338 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005324:	e008      	b.n	8005338 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e000      	b.n	800533a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40000c00 	.word	0x40000c00
 8005358:	40014000 	.word	0x40014000
 800535c:	40001800 	.word	0x40001800
 8005360:	00010007 	.word	0x00010007

08005364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0202 	mvn.w	r2, #2
 8005390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fae6 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fad8 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fae9 	bl	800598c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0204 	mvn.w	r2, #4
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fabc 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 faae 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fabf 	bl	800598c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b08      	cmp	r3, #8
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0208 	mvn.w	r2, #8
 8005438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa92 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa84 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fa95 	bl	800598c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d122      	bne.n	80054bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d11b      	bne.n	80054bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0210 	mvn.w	r2, #16
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2208      	movs	r2, #8
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa68 	bl	8005978 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa5a 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa6b 	bl	800598c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0201 	mvn.w	r2, #1
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa34 	bl	8005950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 ff24 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d10e      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d107      	bne.n	8005542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800553a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 ff17 	bl	8006370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d10e      	bne.n	800556e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d107      	bne.n	800556e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa19 	bl	80059a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b20      	cmp	r3, #32
 800557a:	d10e      	bne.n	800559a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b20      	cmp	r3, #32
 8005588:	d107      	bne.n	800559a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f06f 0220 	mvn.w	r2, #32
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fed7 	bl	8006348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0fd      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b14      	cmp	r3, #20
 80055ca:	f200 80f0 	bhi.w	80057ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005629 	.word	0x08005629
 80055d8:	080057af 	.word	0x080057af
 80055dc:	080057af 	.word	0x080057af
 80055e0:	080057af 	.word	0x080057af
 80055e4:	08005669 	.word	0x08005669
 80055e8:	080057af 	.word	0x080057af
 80055ec:	080057af 	.word	0x080057af
 80055f0:	080057af 	.word	0x080057af
 80055f4:	080056ab 	.word	0x080056ab
 80055f8:	080057af 	.word	0x080057af
 80055fc:	080057af 	.word	0x080057af
 8005600:	080057af 	.word	0x080057af
 8005604:	080056eb 	.word	0x080056eb
 8005608:	080057af 	.word	0x080057af
 800560c:	080057af 	.word	0x080057af
 8005610:	080057af 	.word	0x080057af
 8005614:	0800572d 	.word	0x0800572d
 8005618:	080057af 	.word	0x080057af
 800561c:	080057af 	.word	0x080057af
 8005620:	080057af 	.word	0x080057af
 8005624:	0800576d 	.word	0x0800576d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fa60 	bl	8005af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0208 	orr.w	r2, r2, #8
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0204 	bic.w	r2, r2, #4
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	619a      	str	r2, [r3, #24]
      break;
 8005666:	e0a3      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fab2 	bl	8005bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
      break;
 80056a8:	e082      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fb09 	bl	8005cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0204 	bic.w	r2, r2, #4
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
      break;
 80056e8:	e062      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb5f 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	021a      	lsls	r2, r3, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	61da      	str	r2, [r3, #28]
      break;
 800572a:	e041      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb96 	bl	8005e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0204 	bic.w	r2, r2, #4
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800576a:	e021      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fbc8 	bl	8005f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	021a      	lsls	r2, r3, #8
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80057ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop

080057c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_ConfigClockSource+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0b3      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x180>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4b55      	ldr	r3, [pc, #340]	; (800594c <HAL_TIM_ConfigClockSource+0x188>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005802:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d03e      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xd0>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	f200 8087 	bhi.w	800592c <HAL_TIM_ConfigClockSource+0x168>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	f000 8085 	beq.w	8005930 <HAL_TIM_ConfigClockSource+0x16c>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d87f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d01a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xa2>
 8005830:	2b70      	cmp	r3, #112	; 0x70
 8005832:	d87b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d050      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x116>
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d877      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 800583c:	2b50      	cmp	r3, #80	; 0x50
 800583e:	d03c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xf6>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d873      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d058      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x136>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d86f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d064      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x156>
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d86b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d060      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x156>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d867      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x168>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x156>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d05a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005864:	e062      	b.n	800592c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f000 fc15 	bl	80060a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005888:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	609a      	str	r2, [r3, #8]
      break;
 8005892:	e04e      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f000 fbfe 	bl	80060a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e03b      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fb72 	bl	8005fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2150      	movs	r1, #80	; 0x50
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fbcb 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 80058d8:	e02b      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 fb91 	bl	800600e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2160      	movs	r1, #96	; 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fbbb 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 80058f8:	e01b      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fb52 	bl	8005fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	; 0x40
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fbab 	bl	800606e <TIM_ITRx_SetConfig>
      break;
 8005918:	e00b      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fba2 	bl	800606e <TIM_ITRx_SetConfig>
        break;
 800592a:	e002      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005930:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	fffeff88 	.word	0xfffeff88

08005950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d00f      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3d      	ldr	r2, [pc, #244]	; (8005acc <TIM_Base_SetConfig+0x118>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00b      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <TIM_Base_SetConfig+0x11c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <TIM_Base_SetConfig+0x120>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d02b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d027      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <TIM_Base_SetConfig+0x118>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d023      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <TIM_Base_SetConfig+0x11c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01f      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <TIM_Base_SetConfig+0x120>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d017      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a28      	ldr	r2, [pc, #160]	; (8005adc <TIM_Base_SetConfig+0x128>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <TIM_Base_SetConfig+0x12c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00f      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <TIM_Base_SetConfig+0x130>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <TIM_Base_SetConfig+0x134>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a24      	ldr	r2, [pc, #144]	; (8005aec <TIM_Base_SetConfig+0x138>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <TIM_Base_SetConfig+0x13c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d108      	bne.n	8005a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_Base_SetConfig+0xf8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <TIM_Base_SetConfig+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400
 8005ae4:	40014800 	.word	0x40014800
 8005ae8:	40001800 	.word	0x40001800
 8005aec:	40001c00 	.word	0x40001c00
 8005af0:	40002000 	.word	0x40002000

08005af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <TIM_OC1_SetConfig+0xd8>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 0302 	bic.w	r3, r3, #2
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_OC1_SetConfig+0xdc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_OC1_SetConfig+0x64>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <TIM_OC1_SetConfig+0xe0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10c      	bne.n	8005b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0308 	bic.w	r3, r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <TIM_OC1_SetConfig+0xdc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC1_SetConfig+0x8e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <TIM_OC1_SetConfig+0xe0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d111      	bne.n	8005ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	621a      	str	r2, [r3, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	fffeff8f 	.word	0xfffeff8f
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f023 0210 	bic.w	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <TIM_OC2_SetConfig+0xe4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0320 	bic.w	r3, r3, #32
 8005c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <TIM_OC2_SetConfig+0xe8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC2_SetConfig+0x68>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <TIM_OC2_SetConfig+0xec>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10d      	bne.n	8005c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <TIM_OC2_SetConfig+0xe8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC2_SetConfig+0x94>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <TIM_OC2_SetConfig+0xec>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d113      	bne.n	8005c94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	feff8fff 	.word	0xfeff8fff
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40010400 	.word	0x40010400

08005cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <TIM_OC3_SetConfig+0xe0>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a22      	ldr	r2, [pc, #136]	; (8005dac <TIM_OC3_SetConfig+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_OC3_SetConfig+0x66>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <TIM_OC3_SetConfig+0xe8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10d      	bne.n	8005d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a17      	ldr	r2, [pc, #92]	; (8005dac <TIM_OC3_SetConfig+0xe4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC3_SetConfig+0x92>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <TIM_OC3_SetConfig+0xe8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d113      	bne.n	8005d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	fffeff8f 	.word	0xfffeff8f
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <TIM_OC4_SetConfig+0xa4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <TIM_OC4_SetConfig+0xa8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC4_SetConfig+0x68>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <TIM_OC4_SetConfig+0xac>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	feff8fff 	.word	0xfeff8fff
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <TIM_OC5_SetConfig+0x98>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <TIM_OC5_SetConfig+0x9c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_OC5_SetConfig+0x5e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <TIM_OC5_SetConfig+0xa0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d109      	bne.n	8005ed6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	fffeff8f 	.word	0xfffeff8f
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40010400 	.word	0x40010400

08005f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <TIM_OC6_SetConfig+0x9c>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <TIM_OC6_SetConfig+0xa0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC6_SetConfig+0x60>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <TIM_OC6_SetConfig+0xa4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d109      	bne.n	8005f7c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	feff8fff 	.word	0xfeff8fff
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40010400 	.word	0x40010400

08005fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0201 	bic.w	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 030a 	bic.w	r3, r3, #10
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0210 	bic.w	r2, r3, #16
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	f043 0307 	orr.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	2201      	movs	r2, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	43db      	mvns	r3, r3
 8006106:	401a      	ands	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1a      	ldr	r2, [r3, #32]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006144:	2302      	movs	r3, #2
 8006146:	e06d      	b.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a30      	ldr	r2, [pc, #192]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2f      	ldr	r2, [pc, #188]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d01d      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a15      	ldr	r2, [pc, #84]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40014000 	.word	0x40014000
 8006248:	40001800 	.word	0x40001800

0800624c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006264:	2302      	movs	r3, #2
 8006266:	e065      	b.n	8006334 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d115      	bne.n	8006322 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	051b      	lsls	r3, r3, #20
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40010000 	.word	0x40010000
 8006344:	40010400 	.word	0x40010400

08006348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e040      	b.n	8006418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fc faba 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 faea 	bl	800699c <UART_SetConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e022      	b.n	8006418 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fd40 	bl	8006e60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fdc7 	bl	8006fa4 <UART_CheckIdleState>
 8006416:	4603      	mov	r3, r0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006434:	2b20      	cmp	r3, #32
 8006436:	f040 8081 	bne.w	800653c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_UART_Transmit+0x26>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e079      	b.n	800653e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_UART_Transmit+0x38>
 8006454:	2302      	movs	r3, #2
 8006456:	e072      	b.n	800653e <HAL_UART_Transmit+0x11e>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2221      	movs	r2, #33	; 0x21
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646e:	f7fc fc49 	bl	8002d04 <HAL_GetTick>
 8006472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d108      	bne.n	80064a0 <HAL_UART_Transmit+0x80>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e003      	b.n	80064a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064b0:	e02c      	b.n	800650c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fdba 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e038      	b.n	800653e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e007      	b.n	80064fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cc      	bne.n	80064b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fd87 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e005      	b.n	800653e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	f640 030f 	movw	r3, #2063	; 0x80f
 800656e:	4013      	ands	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d113      	bne.n	80065a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 81cc 	beq.w	800692e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      }
      return;
 800659e:	e1c6      	b.n	800692e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80e3 	beq.w	800676e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4ba5      	ldr	r3, [pc, #660]	; (800684c <HAL_UART_IRQHandler+0x304>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80d8 	beq.w	800676e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <HAL_UART_IRQHandler+0xa2>
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2201      	movs	r2, #1
 80065d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e0:	f043 0201 	orr.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d010      	beq.n	8006616 <HAL_UART_IRQHandler+0xce>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2202      	movs	r2, #2
 8006604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660c:	f043 0204 	orr.w	r2, r3, #4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d010      	beq.n	8006642 <HAL_UART_IRQHandler+0xfa>
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2204      	movs	r2, #4
 8006630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006638:	f043 0202 	orr.w	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d015      	beq.n	8006678 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666e:	f043 0208 	orr.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667e:	2b00      	cmp	r3, #0
 8006680:	d011      	beq.n	80066a6 <HAL_UART_IRQHandler+0x15e>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8140 	beq.w	8006932 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b40      	cmp	r3, #64	; 0x40
 80066ea:	d004      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d031      	beq.n	800675a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fd19 	bl	800712e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d123      	bne.n	8006752 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	2b00      	cmp	r3, #0
 8006720:	d013      	beq.n	800674a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a4a      	ldr	r2, [pc, #296]	; (8006850 <HAL_UART_IRQHandler+0x308>)
 8006728:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd f897 	bl	8003862 <HAL_DMA_Abort_IT>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d017      	beq.n	800676a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	e00f      	b.n	800676a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f906 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	e00b      	b.n	800676a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f902 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	e007      	b.n	800676a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8fe 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006768:	e0e3      	b.n	8006932 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676a:	bf00      	nop
    return;
 800676c:	e0e1      	b.n	8006932 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006772:	2b01      	cmp	r3, #1
 8006774:	f040 80a7 	bne.w	80068c6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80a1 	beq.w	80068c6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 809b 	beq.w	80068c6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2210      	movs	r2, #16
 8006796:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d156      	bne.n	8006854 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80067b0:	893b      	ldrh	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80bf 	beq.w	8006936 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067be:	893a      	ldrh	r2, [r7, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	f080 80b8 	bcs.w	8006936 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	893a      	ldrh	r2, [r7, #8]
 80067ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d8:	d02a      	beq.n	8006830 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006808:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0210 	bic.w	r2, r2, #16
 8006824:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	4618      	mov	r0, r3
 800682c:	f7fc ffa9 	bl	8003782 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800683c:	b29b      	uxth	r3, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	b29b      	uxth	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f893 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800684a:	e074      	b.n	8006936 <HAL_UART_IRQHandler+0x3ee>
 800684c:	04000120 	.word	0x04000120
 8006850:	0800718d 	.word	0x0800718d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006860:	b29b      	uxth	r3, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d063      	beq.n	800693a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d060      	beq.n	800693a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006886:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0210 	bic.w	r2, r2, #16
 80068b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ba:	897b      	ldrh	r3, [r7, #10]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f856 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c4:	e039      	b.n	800693a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <HAL_UART_IRQHandler+0x3a4>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f84f 	bl	8006988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ea:	e029      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00d      	beq.n	8006912 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01a      	beq.n	800693e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
    }
    return;
 8006910:	e015      	b.n	800693e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d011      	beq.n	8006940 <HAL_UART_IRQHandler+0x3f8>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fc46 	bl	80071b8 <UART_EndTransmit_IT>
    return;
 800692c:	e008      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
      return;
 800692e:	bf00      	nop
 8006930:	e006      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006932:	bf00      	nop
 8006934:	e004      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
      return;
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <HAL_UART_IRQHandler+0x3f8>
    return;
 800693e:	bf00      	nop
  }

}
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop

08006948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4ba7      	ldr	r3, [pc, #668]	; (8006c64 <UART_SetConfig+0x2c8>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	6979      	ldr	r1, [r7, #20]
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a95      	ldr	r2, [pc, #596]	; (8006c68 <UART_SetConfig+0x2cc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d120      	bne.n	8006a5a <UART_SetConfig+0xbe>
 8006a18:	4b94      	ldr	r3, [pc, #592]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d816      	bhi.n	8006a54 <UART_SetConfig+0xb8>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0x90>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a49 	.word	0x08006a49
 8006a34:	08006a43 	.word	0x08006a43
 8006a38:	08006a4f 	.word	0x08006a4f
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e14f      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006a42:	2302      	movs	r3, #2
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e14c      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e149      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006a4e:	2308      	movs	r3, #8
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e146      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006a54:	2310      	movs	r3, #16
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e143      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a84      	ldr	r2, [pc, #528]	; (8006c70 <UART_SetConfig+0x2d4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d132      	bne.n	8006aca <UART_SetConfig+0x12e>
 8006a64:	4b81      	ldr	r3, [pc, #516]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d828      	bhi.n	8006ac4 <UART_SetConfig+0x128>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0xdc>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006ac5 	.word	0x08006ac5
 8006a80:	08006ac5 	.word	0x08006ac5
 8006a84:	08006ac5 	.word	0x08006ac5
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006ac5 	.word	0x08006ac5
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006ab3 	.word	0x08006ab3
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006abf 	.word	0x08006abf
 8006aac:	2300      	movs	r3, #0
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e117      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e114      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e111      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e10e      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e10b      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a69      	ldr	r2, [pc, #420]	; (8006c74 <UART_SetConfig+0x2d8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d120      	bne.n	8006b16 <UART_SetConfig+0x17a>
 8006ad4:	4b65      	ldr	r3, [pc, #404]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	d013      	beq.n	8006b0a <UART_SetConfig+0x16e>
 8006ae2:	2b30      	cmp	r3, #48	; 0x30
 8006ae4:	d814      	bhi.n	8006b10 <UART_SetConfig+0x174>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d009      	beq.n	8006afe <UART_SetConfig+0x162>
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d810      	bhi.n	8006b10 <UART_SetConfig+0x174>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <UART_SetConfig+0x15c>
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d006      	beq.n	8006b04 <UART_SetConfig+0x168>
 8006af6:	e00b      	b.n	8006b10 <UART_SetConfig+0x174>
 8006af8:	2300      	movs	r3, #0
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e0f1      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e0ee      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0eb      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e0e8      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0e5      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a57      	ldr	r2, [pc, #348]	; (8006c78 <UART_SetConfig+0x2dc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d120      	bne.n	8006b62 <UART_SetConfig+0x1c6>
 8006b20:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b2c:	d013      	beq.n	8006b56 <UART_SetConfig+0x1ba>
 8006b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b30:	d814      	bhi.n	8006b5c <UART_SetConfig+0x1c0>
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d009      	beq.n	8006b4a <UART_SetConfig+0x1ae>
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d810      	bhi.n	8006b5c <UART_SetConfig+0x1c0>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <UART_SetConfig+0x1a8>
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d006      	beq.n	8006b50 <UART_SetConfig+0x1b4>
 8006b42:	e00b      	b.n	8006b5c <UART_SetConfig+0x1c0>
 8006b44:	2300      	movs	r3, #0
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e0cb      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e0c8      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b50:	2304      	movs	r3, #4
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e0c5      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b56:	2308      	movs	r3, #8
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e0c2      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e0bf      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a45      	ldr	r2, [pc, #276]	; (8006c7c <UART_SetConfig+0x2e0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d125      	bne.n	8006bb8 <UART_SetConfig+0x21c>
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b7a:	d017      	beq.n	8006bac <UART_SetConfig+0x210>
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b80:	d817      	bhi.n	8006bb2 <UART_SetConfig+0x216>
 8006b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b86:	d00b      	beq.n	8006ba0 <UART_SetConfig+0x204>
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8c:	d811      	bhi.n	8006bb2 <UART_SetConfig+0x216>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <UART_SetConfig+0x1fe>
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b96:	d006      	beq.n	8006ba6 <UART_SetConfig+0x20a>
 8006b98:	e00b      	b.n	8006bb2 <UART_SetConfig+0x216>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e0a0      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	77fb      	strb	r3, [r7, #31]
 8006ba4:	e09d      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e09a      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006bac:	2308      	movs	r3, #8
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e097      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006bb2:	2310      	movs	r3, #16
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e094      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a30      	ldr	r2, [pc, #192]	; (8006c80 <UART_SetConfig+0x2e4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d125      	bne.n	8006c0e <UART_SetConfig+0x272>
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd0:	d017      	beq.n	8006c02 <UART_SetConfig+0x266>
 8006bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd6:	d817      	bhi.n	8006c08 <UART_SetConfig+0x26c>
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bdc:	d00b      	beq.n	8006bf6 <UART_SetConfig+0x25a>
 8006bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be2:	d811      	bhi.n	8006c08 <UART_SetConfig+0x26c>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <UART_SetConfig+0x254>
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bec:	d006      	beq.n	8006bfc <UART_SetConfig+0x260>
 8006bee:	e00b      	b.n	8006c08 <UART_SetConfig+0x26c>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e075      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e072      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e06f      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c02:	2308      	movs	r3, #8
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e06c      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e069      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <UART_SetConfig+0x2e8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d137      	bne.n	8006c88 <UART_SetConfig+0x2ec>
 8006c18:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <UART_SetConfig+0x2d0>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c26:	d017      	beq.n	8006c58 <UART_SetConfig+0x2bc>
 8006c28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2c:	d817      	bhi.n	8006c5e <UART_SetConfig+0x2c2>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c32:	d00b      	beq.n	8006c4c <UART_SetConfig+0x2b0>
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d811      	bhi.n	8006c5e <UART_SetConfig+0x2c2>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <UART_SetConfig+0x2aa>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d006      	beq.n	8006c52 <UART_SetConfig+0x2b6>
 8006c44:	e00b      	b.n	8006c5e <UART_SetConfig+0x2c2>
 8006c46:	2300      	movs	r3, #0
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e04a      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e047      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c52:	2304      	movs	r3, #4
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e044      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e041      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e03e      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006c64:	efff69f3 	.word	0xefff69f3
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40004400 	.word	0x40004400
 8006c74:	40004800 	.word	0x40004800
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	40005000 	.word	0x40005000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	40007800 	.word	0x40007800
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a71      	ldr	r2, [pc, #452]	; (8006e54 <UART_SetConfig+0x4b8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d125      	bne.n	8006cde <UART_SetConfig+0x342>
 8006c92:	4b71      	ldr	r3, [pc, #452]	; (8006e58 <UART_SetConfig+0x4bc>)
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ca0:	d017      	beq.n	8006cd2 <UART_SetConfig+0x336>
 8006ca2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ca6:	d817      	bhi.n	8006cd8 <UART_SetConfig+0x33c>
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cac:	d00b      	beq.n	8006cc6 <UART_SetConfig+0x32a>
 8006cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb2:	d811      	bhi.n	8006cd8 <UART_SetConfig+0x33c>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x324>
 8006cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cbc:	d006      	beq.n	8006ccc <UART_SetConfig+0x330>
 8006cbe:	e00b      	b.n	8006cd8 <UART_SetConfig+0x33c>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e00d      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e00a      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e007      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	77fb      	strb	r3, [r7, #31]
 8006cd6:	e004      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	77fb      	strb	r3, [r7, #31]
 8006cdc:	e001      	b.n	8006ce2 <UART_SetConfig+0x346>
 8006cde:	2310      	movs	r3, #16
 8006ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cea:	d15b      	bne.n	8006da4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006cec:	7ffb      	ldrb	r3, [r7, #31]
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d827      	bhi.n	8006d42 <UART_SetConfig+0x3a6>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <UART_SetConfig+0x35c>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d2d 	.word	0x08006d2d
 8006d04:	08006d43 	.word	0x08006d43
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d43 	.word	0x08006d43
 8006d10:	08006d43 	.word	0x08006d43
 8006d14:	08006d43 	.word	0x08006d43
 8006d18:	08006d3b 	.word	0x08006d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f7fd fca6 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 8006d20:	61b8      	str	r0, [r7, #24]
        break;
 8006d22:	e013      	b.n	8006d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7fd fcb6 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8006d28:	61b8      	str	r0, [r7, #24]
        break;
 8006d2a:	e00f      	b.n	8006d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d2c:	4b4b      	ldr	r3, [pc, #300]	; (8006e5c <UART_SetConfig+0x4c0>)
 8006d2e:	61bb      	str	r3, [r7, #24]
        break;
 8006d30:	e00c      	b.n	8006d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d32:	f7fd fbad 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006d36:	61b8      	str	r0, [r7, #24]
        break;
 8006d38:	e008      	b.n	8006d4c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3e:	61bb      	str	r3, [r7, #24]
        break;
 8006d40:	e004      	b.n	8006d4c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	77bb      	strb	r3, [r7, #30]
        break;
 8006d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d074      	beq.n	8006e3c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	005a      	lsls	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b0f      	cmp	r3, #15
 8006d6e:	d916      	bls.n	8006d9e <UART_SetConfig+0x402>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d212      	bcs.n	8006d9e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f023 030f 	bic.w	r3, r3, #15
 8006d80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	89fa      	ldrh	r2, [r7, #14]
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e04e      	b.n	8006e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	77bb      	strb	r3, [r7, #30]
 8006da2:	e04b      	b.n	8006e3c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006da4:	7ffb      	ldrb	r3, [r7, #31]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d827      	bhi.n	8006dfa <UART_SetConfig+0x45e>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x414>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006dfb 	.word	0x08006dfb
 8006dc0:	08006deb 	.word	0x08006deb
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006dfb 	.word	0x08006dfb
 8006dcc:	08006dfb 	.word	0x08006dfb
 8006dd0:	08006df3 	.word	0x08006df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd4:	f7fd fc4a 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 8006dd8:	61b8      	str	r0, [r7, #24]
        break;
 8006dda:	e013      	b.n	8006e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ddc:	f7fd fc5a 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8006de0:	61b8      	str	r0, [r7, #24]
        break;
 8006de2:	e00f      	b.n	8006e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de4:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <UART_SetConfig+0x4c0>)
 8006de6:	61bb      	str	r3, [r7, #24]
        break;
 8006de8:	e00c      	b.n	8006e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dea:	f7fd fb51 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006dee:	61b8      	str	r0, [r7, #24]
        break;
 8006df0:	e008      	b.n	8006e04 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df6:	61bb      	str	r3, [r7, #24]
        break;
 8006df8:	e004      	b.n	8006e04 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	77bb      	strb	r3, [r7, #30]
        break;
 8006e02:	bf00      	nop
    }

    if (pclk != 0U)
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d018      	beq.n	8006e3c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	085a      	lsrs	r2, r3, #1
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	441a      	add	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b0f      	cmp	r3, #15
 8006e24:	d908      	bls.n	8006e38 <UART_SetConfig+0x49c>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e2c:	d204      	bcs.n	8006e38 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	e001      	b.n	8006e3c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40007c00 	.word	0x40007c00
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	00f42400 	.word	0x00f42400

08006e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01a      	beq.n	8006f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5e:	d10a      	bne.n	8006f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb4:	f7fb fea6 	bl	8002d04 <HAL_GetTick>
 8006fb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d10e      	bne.n	8006fe6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f82d 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e023      	b.n	800702e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d10e      	bne.n	8007012 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f817 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e00d      	b.n	800702e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007046:	e05e      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d05a      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007050:	f7fb fe58 	bl	8002d04 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d302      	bcc.n	8007066 <UART_WaitOnFlagUntilTimeout+0x30>
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11b      	bne.n	800709e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007074:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e043      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02c      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ba:	d124      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	429a      	cmp	r2, r3
 8007122:	d091      	beq.n	8007048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007144:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0210 	bic.w	r2, r2, #16
 800716c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff fbd6 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fbb3 	bl	8006948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <__errno>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <__errno+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000048 	.word	0x20000048

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4d0d      	ldr	r5, [pc, #52]	; (8007230 <__libc_init_array+0x38>)
 80071fc:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 80071fe:	1b64      	subs	r4, r4, r5
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2600      	movs	r6, #0
 8007204:	42a6      	cmp	r6, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	4d0b      	ldr	r5, [pc, #44]	; (8007238 <__libc_init_array+0x40>)
 800720a:	4c0c      	ldr	r4, [pc, #48]	; (800723c <__libc_init_array+0x44>)
 800720c:	f004 f936 	bl	800b47c <_init>
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	2600      	movs	r6, #0
 8007216:	42a6      	cmp	r6, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007220:	4798      	blx	r3
 8007222:	3601      	adds	r6, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f855 3b04 	ldr.w	r3, [r5], #4
 800722a:	4798      	blx	r3
 800722c:	3601      	adds	r6, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	0800baf4 	.word	0x0800baf4
 8007234:	0800baf4 	.word	0x0800baf4
 8007238:	0800baf4 	.word	0x0800baf4
 800723c:	0800baf8 	.word	0x0800baf8

08007240 <memcmp>:
 8007240:	b530      	push	{r4, r5, lr}
 8007242:	3901      	subs	r1, #1
 8007244:	2400      	movs	r4, #0
 8007246:	42a2      	cmp	r2, r4
 8007248:	d101      	bne.n	800724e <memcmp+0xe>
 800724a:	2000      	movs	r0, #0
 800724c:	e005      	b.n	800725a <memcmp+0x1a>
 800724e:	5d03      	ldrb	r3, [r0, r4]
 8007250:	3401      	adds	r4, #1
 8007252:	5d0d      	ldrb	r5, [r1, r4]
 8007254:	42ab      	cmp	r3, r5
 8007256:	d0f6      	beq.n	8007246 <memcmp+0x6>
 8007258:	1b58      	subs	r0, r3, r5
 800725a:	bd30      	pop	{r4, r5, pc}

0800725c <memset>:
 800725c:	4402      	add	r2, r0
 800725e:	4603      	mov	r3, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <__cvt>:
 800726c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726e:	ed2d 8b02 	vpush	{d8}
 8007272:	eeb0 8b40 	vmov.f64	d8, d0
 8007276:	b085      	sub	sp, #20
 8007278:	4617      	mov	r7, r2
 800727a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800727c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800727e:	ee18 2a90 	vmov	r2, s17
 8007282:	f025 0520 	bic.w	r5, r5, #32
 8007286:	2a00      	cmp	r2, #0
 8007288:	bfb6      	itet	lt
 800728a:	222d      	movlt	r2, #45	; 0x2d
 800728c:	2200      	movge	r2, #0
 800728e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007292:	2d46      	cmp	r5, #70	; 0x46
 8007294:	460c      	mov	r4, r1
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	d004      	beq.n	80072a4 <__cvt+0x38>
 800729a:	2d45      	cmp	r5, #69	; 0x45
 800729c:	d100      	bne.n	80072a0 <__cvt+0x34>
 800729e:	3401      	adds	r4, #1
 80072a0:	2102      	movs	r1, #2
 80072a2:	e000      	b.n	80072a6 <__cvt+0x3a>
 80072a4:	2103      	movs	r1, #3
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	ab02      	add	r3, sp, #8
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4622      	mov	r2, r4
 80072b0:	4633      	mov	r3, r6
 80072b2:	eeb0 0b48 	vmov.f64	d0, d8
 80072b6:	f001 faff 	bl	80088b8 <_dtoa_r>
 80072ba:	2d47      	cmp	r5, #71	; 0x47
 80072bc:	d109      	bne.n	80072d2 <__cvt+0x66>
 80072be:	07fb      	lsls	r3, r7, #31
 80072c0:	d407      	bmi.n	80072d2 <__cvt+0x66>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072c6:	1a1b      	subs	r3, r3, r0
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	b005      	add	sp, #20
 80072cc:	ecbd 8b02 	vpop	{d8}
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d2:	2d46      	cmp	r5, #70	; 0x46
 80072d4:	eb00 0204 	add.w	r2, r0, r4
 80072d8:	d10c      	bne.n	80072f4 <__cvt+0x88>
 80072da:	7803      	ldrb	r3, [r0, #0]
 80072dc:	2b30      	cmp	r3, #48	; 0x30
 80072de:	d107      	bne.n	80072f0 <__cvt+0x84>
 80072e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	bf1c      	itt	ne
 80072ea:	f1c4 0401 	rsbne	r4, r4, #1
 80072ee:	6034      	strne	r4, [r6, #0]
 80072f0:	6833      	ldr	r3, [r6, #0]
 80072f2:	441a      	add	r2, r3
 80072f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	bf08      	it	eq
 80072fe:	9203      	streq	r2, [sp, #12]
 8007300:	2130      	movs	r1, #48	; 0x30
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	4293      	cmp	r3, r2
 8007306:	d2dc      	bcs.n	80072c2 <__cvt+0x56>
 8007308:	1c5c      	adds	r4, r3, #1
 800730a:	9403      	str	r4, [sp, #12]
 800730c:	7019      	strb	r1, [r3, #0]
 800730e:	e7f8      	b.n	8007302 <__cvt+0x96>

08007310 <__exponent>:
 8007310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007312:	4603      	mov	r3, r0
 8007314:	2900      	cmp	r1, #0
 8007316:	bfb8      	it	lt
 8007318:	4249      	neglt	r1, r1
 800731a:	f803 2b02 	strb.w	r2, [r3], #2
 800731e:	bfb4      	ite	lt
 8007320:	222d      	movlt	r2, #45	; 0x2d
 8007322:	222b      	movge	r2, #43	; 0x2b
 8007324:	2909      	cmp	r1, #9
 8007326:	7042      	strb	r2, [r0, #1]
 8007328:	dd2a      	ble.n	8007380 <__exponent+0x70>
 800732a:	f10d 0407 	add.w	r4, sp, #7
 800732e:	46a4      	mov	ip, r4
 8007330:	270a      	movs	r7, #10
 8007332:	46a6      	mov	lr, r4
 8007334:	460a      	mov	r2, r1
 8007336:	fb91 f6f7 	sdiv	r6, r1, r7
 800733a:	fb07 1516 	mls	r5, r7, r6, r1
 800733e:	3530      	adds	r5, #48	; 0x30
 8007340:	2a63      	cmp	r2, #99	; 0x63
 8007342:	f104 34ff 	add.w	r4, r4, #4294967295
 8007346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800734a:	4631      	mov	r1, r6
 800734c:	dcf1      	bgt.n	8007332 <__exponent+0x22>
 800734e:	3130      	adds	r1, #48	; 0x30
 8007350:	f1ae 0502 	sub.w	r5, lr, #2
 8007354:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007358:	1c44      	adds	r4, r0, #1
 800735a:	4629      	mov	r1, r5
 800735c:	4561      	cmp	r1, ip
 800735e:	d30a      	bcc.n	8007376 <__exponent+0x66>
 8007360:	f10d 0209 	add.w	r2, sp, #9
 8007364:	eba2 020e 	sub.w	r2, r2, lr
 8007368:	4565      	cmp	r5, ip
 800736a:	bf88      	it	hi
 800736c:	2200      	movhi	r2, #0
 800736e:	4413      	add	r3, r2
 8007370:	1a18      	subs	r0, r3, r0
 8007372:	b003      	add	sp, #12
 8007374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800737a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800737e:	e7ed      	b.n	800735c <__exponent+0x4c>
 8007380:	2330      	movs	r3, #48	; 0x30
 8007382:	3130      	adds	r1, #48	; 0x30
 8007384:	7083      	strb	r3, [r0, #2]
 8007386:	70c1      	strb	r1, [r0, #3]
 8007388:	1d03      	adds	r3, r0, #4
 800738a:	e7f1      	b.n	8007370 <__exponent+0x60>
 800738c:	0000      	movs	r0, r0
	...

08007390 <_printf_float>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	b08b      	sub	sp, #44	; 0x2c
 8007396:	460c      	mov	r4, r1
 8007398:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800739c:	4616      	mov	r6, r2
 800739e:	461f      	mov	r7, r3
 80073a0:	4605      	mov	r5, r0
 80073a2:	f002 fb7b 	bl	8009a9c <_localeconv_r>
 80073a6:	f8d0 b000 	ldr.w	fp, [r0]
 80073aa:	4658      	mov	r0, fp
 80073ac:	f7f8 ff48 	bl	8000240 <strlen>
 80073b0:	2300      	movs	r3, #0
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	f8d8 3000 	ldr.w	r3, [r8]
 80073b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	3307      	adds	r3, #7
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	f103 0108 	add.w	r1, r3, #8
 80073c8:	f8c8 1000 	str.w	r1, [r8]
 80073cc:	4682      	mov	sl, r0
 80073ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80073d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007638 <_printf_float+0x2a8>
 80073da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80073de:	eeb0 6bc0 	vabs.f64	d6, d0
 80073e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	dd24      	ble.n	8007436 <_printf_float+0xa6>
 80073ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	d502      	bpl.n	80073fc <_printf_float+0x6c>
 80073f6:	232d      	movs	r3, #45	; 0x2d
 80073f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073fc:	4b90      	ldr	r3, [pc, #576]	; (8007640 <_printf_float+0x2b0>)
 80073fe:	4891      	ldr	r0, [pc, #580]	; (8007644 <_printf_float+0x2b4>)
 8007400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007404:	bf94      	ite	ls
 8007406:	4698      	movls	r8, r3
 8007408:	4680      	movhi	r8, r0
 800740a:	2303      	movs	r3, #3
 800740c:	6123      	str	r3, [r4, #16]
 800740e:	f022 0204 	bic.w	r2, r2, #4
 8007412:	2300      	movs	r3, #0
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	9700      	str	r7, [sp, #0]
 800741a:	4633      	mov	r3, r6
 800741c:	aa09      	add	r2, sp, #36	; 0x24
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f9d3 	bl	80077cc <_printf_common>
 8007426:	3001      	adds	r0, #1
 8007428:	f040 808a 	bne.w	8007540 <_printf_float+0x1b0>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	b00b      	add	sp, #44	; 0x2c
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	eeb4 0b40 	vcmp.f64	d0, d0
 800743a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743e:	d709      	bvc.n	8007454 <_printf_float+0xc4>
 8007440:	ee10 3a90 	vmov	r3, s1
 8007444:	2b00      	cmp	r3, #0
 8007446:	bfbc      	itt	lt
 8007448:	232d      	movlt	r3, #45	; 0x2d
 800744a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800744e:	487e      	ldr	r0, [pc, #504]	; (8007648 <_printf_float+0x2b8>)
 8007450:	4b7e      	ldr	r3, [pc, #504]	; (800764c <_printf_float+0x2bc>)
 8007452:	e7d5      	b.n	8007400 <_printf_float+0x70>
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800745a:	9104      	str	r1, [sp, #16]
 800745c:	1c59      	adds	r1, r3, #1
 800745e:	d13c      	bne.n	80074da <_printf_float+0x14a>
 8007460:	2306      	movs	r3, #6
 8007462:	6063      	str	r3, [r4, #4]
 8007464:	2300      	movs	r3, #0
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	ab08      	add	r3, sp, #32
 800746a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800746e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007472:	ab07      	add	r3, sp, #28
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	f10d 031b 	add.w	r3, sp, #27
 800747e:	4628      	mov	r0, r5
 8007480:	f7ff fef4 	bl	800726c <__cvt>
 8007484:	9b04      	ldr	r3, [sp, #16]
 8007486:	9907      	ldr	r1, [sp, #28]
 8007488:	2b47      	cmp	r3, #71	; 0x47
 800748a:	4680      	mov	r8, r0
 800748c:	d108      	bne.n	80074a0 <_printf_float+0x110>
 800748e:	1cc8      	adds	r0, r1, #3
 8007490:	db02      	blt.n	8007498 <_printf_float+0x108>
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	4299      	cmp	r1, r3
 8007496:	dd41      	ble.n	800751c <_printf_float+0x18c>
 8007498:	f1a9 0902 	sub.w	r9, r9, #2
 800749c:	fa5f f989 	uxtb.w	r9, r9
 80074a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074a4:	d820      	bhi.n	80074e8 <_printf_float+0x158>
 80074a6:	3901      	subs	r1, #1
 80074a8:	464a      	mov	r2, r9
 80074aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074ae:	9107      	str	r1, [sp, #28]
 80074b0:	f7ff ff2e 	bl	8007310 <__exponent>
 80074b4:	9a08      	ldr	r2, [sp, #32]
 80074b6:	9004      	str	r0, [sp, #16]
 80074b8:	1813      	adds	r3, r2, r0
 80074ba:	2a01      	cmp	r2, #1
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	dc02      	bgt.n	80074c6 <_printf_float+0x136>
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	07d2      	lsls	r2, r2, #31
 80074c4:	d501      	bpl.n	80074ca <_printf_float+0x13a>
 80074c6:	3301      	adds	r3, #1
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0a2      	beq.n	8007418 <_printf_float+0x88>
 80074d2:	232d      	movs	r3, #45	; 0x2d
 80074d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d8:	e79e      	b.n	8007418 <_printf_float+0x88>
 80074da:	9904      	ldr	r1, [sp, #16]
 80074dc:	2947      	cmp	r1, #71	; 0x47
 80074de:	d1c1      	bne.n	8007464 <_printf_float+0xd4>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1bf      	bne.n	8007464 <_printf_float+0xd4>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e7bc      	b.n	8007462 <_printf_float+0xd2>
 80074e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80074ec:	d118      	bne.n	8007520 <_printf_float+0x190>
 80074ee:	2900      	cmp	r1, #0
 80074f0:	6863      	ldr	r3, [r4, #4]
 80074f2:	dd0b      	ble.n	800750c <_printf_float+0x17c>
 80074f4:	6121      	str	r1, [r4, #16]
 80074f6:	b913      	cbnz	r3, 80074fe <_printf_float+0x16e>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	07d0      	lsls	r0, r2, #31
 80074fc:	d502      	bpl.n	8007504 <_printf_float+0x174>
 80074fe:	3301      	adds	r3, #1
 8007500:	440b      	add	r3, r1
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	2300      	movs	r3, #0
 8007506:	65a1      	str	r1, [r4, #88]	; 0x58
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	e7de      	b.n	80074ca <_printf_float+0x13a>
 800750c:	b913      	cbnz	r3, 8007514 <_printf_float+0x184>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	07d2      	lsls	r2, r2, #31
 8007512:	d501      	bpl.n	8007518 <_printf_float+0x188>
 8007514:	3302      	adds	r3, #2
 8007516:	e7f4      	b.n	8007502 <_printf_float+0x172>
 8007518:	2301      	movs	r3, #1
 800751a:	e7f2      	b.n	8007502 <_printf_float+0x172>
 800751c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	4299      	cmp	r1, r3
 8007524:	db05      	blt.n	8007532 <_printf_float+0x1a2>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	6121      	str	r1, [r4, #16]
 800752a:	07d8      	lsls	r0, r3, #31
 800752c:	d5ea      	bpl.n	8007504 <_printf_float+0x174>
 800752e:	1c4b      	adds	r3, r1, #1
 8007530:	e7e7      	b.n	8007502 <_printf_float+0x172>
 8007532:	2900      	cmp	r1, #0
 8007534:	bfd4      	ite	le
 8007536:	f1c1 0202 	rsble	r2, r1, #2
 800753a:	2201      	movgt	r2, #1
 800753c:	4413      	add	r3, r2
 800753e:	e7e0      	b.n	8007502 <_printf_float+0x172>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	055a      	lsls	r2, r3, #21
 8007544:	d407      	bmi.n	8007556 <_printf_float+0x1c6>
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	4642      	mov	r2, r8
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	d12a      	bne.n	80075aa <_printf_float+0x21a>
 8007554:	e76a      	b.n	800742c <_printf_float+0x9c>
 8007556:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800755a:	f240 80e2 	bls.w	8007722 <_printf_float+0x392>
 800755e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756a:	d133      	bne.n	80075d4 <_printf_float+0x244>
 800756c:	4a38      	ldr	r2, [pc, #224]	; (8007650 <_printf_float+0x2c0>)
 800756e:	2301      	movs	r3, #1
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af58 	beq.w	800742c <_printf_float+0x9c>
 800757c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007580:	429a      	cmp	r2, r3
 8007582:	db02      	blt.n	800758a <_printf_float+0x1fa>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	07d8      	lsls	r0, r3, #31
 8007588:	d50f      	bpl.n	80075aa <_printf_float+0x21a>
 800758a:	4653      	mov	r3, sl
 800758c:	465a      	mov	r2, fp
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f af49 	beq.w	800742c <_printf_float+0x9c>
 800759a:	f04f 0800 	mov.w	r8, #0
 800759e:	f104 091a 	add.w	r9, r4, #26
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	4543      	cmp	r3, r8
 80075a8:	dc09      	bgt.n	80075be <_printf_float+0x22e>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	079b      	lsls	r3, r3, #30
 80075ae:	f100 8108 	bmi.w	80077c2 <_printf_float+0x432>
 80075b2:	68e0      	ldr	r0, [r4, #12]
 80075b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b6:	4298      	cmp	r0, r3
 80075b8:	bfb8      	it	lt
 80075ba:	4618      	movlt	r0, r3
 80075bc:	e738      	b.n	8007430 <_printf_float+0xa0>
 80075be:	2301      	movs	r3, #1
 80075c0:	464a      	mov	r2, r9
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f af2f 	beq.w	800742c <_printf_float+0x9c>
 80075ce:	f108 0801 	add.w	r8, r8, #1
 80075d2:	e7e6      	b.n	80075a2 <_printf_float+0x212>
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dc3c      	bgt.n	8007654 <_printf_float+0x2c4>
 80075da:	4a1d      	ldr	r2, [pc, #116]	; (8007650 <_printf_float+0x2c0>)
 80075dc:	2301      	movs	r3, #1
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f af21 	beq.w	800742c <_printf_float+0x9c>
 80075ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d102      	bne.n	80075f8 <_printf_float+0x268>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	07d9      	lsls	r1, r3, #31
 80075f6:	d5d8      	bpl.n	80075aa <_printf_float+0x21a>
 80075f8:	4653      	mov	r3, sl
 80075fa:	465a      	mov	r2, fp
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af12 	beq.w	800742c <_printf_float+0x9c>
 8007608:	f04f 0900 	mov.w	r9, #0
 800760c:	f104 0a1a 	add.w	sl, r4, #26
 8007610:	9b07      	ldr	r3, [sp, #28]
 8007612:	425b      	negs	r3, r3
 8007614:	454b      	cmp	r3, r9
 8007616:	dc01      	bgt.n	800761c <_printf_float+0x28c>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	e795      	b.n	8007548 <_printf_float+0x1b8>
 800761c:	2301      	movs	r3, #1
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af00 	beq.w	800742c <_printf_float+0x9c>
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e7ee      	b.n	8007610 <_printf_float+0x280>
 8007632:	bf00      	nop
 8007634:	f3af 8000 	nop.w
 8007638:	ffffffff 	.word	0xffffffff
 800763c:	7fefffff 	.word	0x7fefffff
 8007640:	0800b640 	.word	0x0800b640
 8007644:	0800b644 	.word	0x0800b644
 8007648:	0800b64c 	.word	0x0800b64c
 800764c:	0800b648 	.word	0x0800b648
 8007650:	0800b650 	.word	0x0800b650
 8007654:	9a08      	ldr	r2, [sp, #32]
 8007656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007658:	429a      	cmp	r2, r3
 800765a:	bfa8      	it	ge
 800765c:	461a      	movge	r2, r3
 800765e:	2a00      	cmp	r2, #0
 8007660:	4691      	mov	r9, r2
 8007662:	dc38      	bgt.n	80076d6 <_printf_float+0x346>
 8007664:	2300      	movs	r3, #0
 8007666:	9305      	str	r3, [sp, #20]
 8007668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800766c:	f104 021a 	add.w	r2, r4, #26
 8007670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007672:	9905      	ldr	r1, [sp, #20]
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	eba3 0309 	sub.w	r3, r3, r9
 800767a:	428b      	cmp	r3, r1
 800767c:	dc33      	bgt.n	80076e6 <_printf_float+0x356>
 800767e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007682:	429a      	cmp	r2, r3
 8007684:	db3c      	blt.n	8007700 <_printf_float+0x370>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	07da      	lsls	r2, r3, #31
 800768a:	d439      	bmi.n	8007700 <_printf_float+0x370>
 800768c:	9a08      	ldr	r2, [sp, #32]
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	9907      	ldr	r1, [sp, #28]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	eba2 0901 	sub.w	r9, r2, r1
 8007698:	4599      	cmp	r9, r3
 800769a:	bfa8      	it	ge
 800769c:	4699      	movge	r9, r3
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	dc35      	bgt.n	8007710 <_printf_float+0x380>
 80076a4:	f04f 0800 	mov.w	r8, #0
 80076a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076ac:	f104 0a1a 	add.w	sl, r4, #26
 80076b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	eba3 0309 	sub.w	r3, r3, r9
 80076ba:	4543      	cmp	r3, r8
 80076bc:	f77f af75 	ble.w	80075aa <_printf_float+0x21a>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4652      	mov	r2, sl
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f aeae 	beq.w	800742c <_printf_float+0x9c>
 80076d0:	f108 0801 	add.w	r8, r8, #1
 80076d4:	e7ec      	b.n	80076b0 <_printf_float+0x320>
 80076d6:	4613      	mov	r3, r2
 80076d8:	4631      	mov	r1, r6
 80076da:	4642      	mov	r2, r8
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	d1bf      	bne.n	8007664 <_printf_float+0x2d4>
 80076e4:	e6a2      	b.n	800742c <_printf_float+0x9c>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	9204      	str	r2, [sp, #16]
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f ae9b 	beq.w	800742c <_printf_float+0x9c>
 80076f6:	9b05      	ldr	r3, [sp, #20]
 80076f8:	9a04      	ldr	r2, [sp, #16]
 80076fa:	3301      	adds	r3, #1
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	e7b7      	b.n	8007670 <_printf_float+0x2e0>
 8007700:	4653      	mov	r3, sl
 8007702:	465a      	mov	r2, fp
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	d1be      	bne.n	800768c <_printf_float+0x2fc>
 800770e:	e68d      	b.n	800742c <_printf_float+0x9c>
 8007710:	9a04      	ldr	r2, [sp, #16]
 8007712:	464b      	mov	r3, r9
 8007714:	4442      	add	r2, r8
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	d1c1      	bne.n	80076a4 <_printf_float+0x314>
 8007720:	e684      	b.n	800742c <_printf_float+0x9c>
 8007722:	9a08      	ldr	r2, [sp, #32]
 8007724:	2a01      	cmp	r2, #1
 8007726:	dc01      	bgt.n	800772c <_printf_float+0x39c>
 8007728:	07db      	lsls	r3, r3, #31
 800772a:	d537      	bpl.n	800779c <_printf_float+0x40c>
 800772c:	2301      	movs	r3, #1
 800772e:	4642      	mov	r2, r8
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f ae78 	beq.w	800742c <_printf_float+0x9c>
 800773c:	4653      	mov	r3, sl
 800773e:	465a      	mov	r2, fp
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	47b8      	blx	r7
 8007746:	3001      	adds	r0, #1
 8007748:	f43f ae70 	beq.w	800742c <_printf_float+0x9c>
 800774c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	d01b      	beq.n	8007792 <_printf_float+0x402>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	f108 0201 	add.w	r2, r8, #1
 8007760:	3b01      	subs	r3, #1
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	d10e      	bne.n	800778a <_printf_float+0x3fa>
 800776c:	e65e      	b.n	800742c <_printf_float+0x9c>
 800776e:	2301      	movs	r3, #1
 8007770:	464a      	mov	r2, r9
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f ae57 	beq.w	800742c <_printf_float+0x9c>
 800777e:	f108 0801 	add.w	r8, r8, #1
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	3b01      	subs	r3, #1
 8007786:	4543      	cmp	r3, r8
 8007788:	dcf1      	bgt.n	800776e <_printf_float+0x3de>
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007790:	e6db      	b.n	800754a <_printf_float+0x1ba>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	f104 091a 	add.w	r9, r4, #26
 800779a:	e7f2      	b.n	8007782 <_printf_float+0x3f2>
 800779c:	2301      	movs	r3, #1
 800779e:	4642      	mov	r2, r8
 80077a0:	e7df      	b.n	8007762 <_printf_float+0x3d2>
 80077a2:	2301      	movs	r3, #1
 80077a4:	464a      	mov	r2, r9
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f ae3d 	beq.w	800742c <_printf_float+0x9c>
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077ba:	1a5b      	subs	r3, r3, r1
 80077bc:	4543      	cmp	r3, r8
 80077be:	dcf0      	bgt.n	80077a2 <_printf_float+0x412>
 80077c0:	e6f7      	b.n	80075b2 <_printf_float+0x222>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	f104 0919 	add.w	r9, r4, #25
 80077ca:	e7f4      	b.n	80077b6 <_printf_float+0x426>

080077cc <_printf_common>:
 80077cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	4616      	mov	r6, r2
 80077d2:	4699      	mov	r9, r3
 80077d4:	688a      	ldr	r2, [r1, #8]
 80077d6:	690b      	ldr	r3, [r1, #16]
 80077d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077dc:	4293      	cmp	r3, r2
 80077de:	bfb8      	it	lt
 80077e0:	4613      	movlt	r3, r2
 80077e2:	6033      	str	r3, [r6, #0]
 80077e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077e8:	4607      	mov	r7, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b10a      	cbz	r2, 80077f2 <_printf_common+0x26>
 80077ee:	3301      	adds	r3, #1
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	0699      	lsls	r1, r3, #26
 80077f6:	bf42      	ittt	mi
 80077f8:	6833      	ldrmi	r3, [r6, #0]
 80077fa:	3302      	addmi	r3, #2
 80077fc:	6033      	strmi	r3, [r6, #0]
 80077fe:	6825      	ldr	r5, [r4, #0]
 8007800:	f015 0506 	ands.w	r5, r5, #6
 8007804:	d106      	bne.n	8007814 <_printf_common+0x48>
 8007806:	f104 0a19 	add.w	sl, r4, #25
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	6832      	ldr	r2, [r6, #0]
 800780e:	1a9b      	subs	r3, r3, r2
 8007810:	42ab      	cmp	r3, r5
 8007812:	dc26      	bgt.n	8007862 <_printf_common+0x96>
 8007814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007818:	1e13      	subs	r3, r2, #0
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	bf18      	it	ne
 800781e:	2301      	movne	r3, #1
 8007820:	0692      	lsls	r2, r2, #26
 8007822:	d42b      	bmi.n	800787c <_printf_common+0xb0>
 8007824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d01e      	beq.n	8007870 <_printf_common+0xa4>
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	68e5      	ldr	r5, [r4, #12]
 8007836:	6832      	ldr	r2, [r6, #0]
 8007838:	f003 0306 	and.w	r3, r3, #6
 800783c:	2b04      	cmp	r3, #4
 800783e:	bf08      	it	eq
 8007840:	1aad      	subeq	r5, r5, r2
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	6922      	ldr	r2, [r4, #16]
 8007846:	bf0c      	ite	eq
 8007848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800784c:	2500      	movne	r5, #0
 800784e:	4293      	cmp	r3, r2
 8007850:	bfc4      	itt	gt
 8007852:	1a9b      	subgt	r3, r3, r2
 8007854:	18ed      	addgt	r5, r5, r3
 8007856:	2600      	movs	r6, #0
 8007858:	341a      	adds	r4, #26
 800785a:	42b5      	cmp	r5, r6
 800785c:	d11a      	bne.n	8007894 <_printf_common+0xc8>
 800785e:	2000      	movs	r0, #0
 8007860:	e008      	b.n	8007874 <_printf_common+0xa8>
 8007862:	2301      	movs	r3, #1
 8007864:	4652      	mov	r2, sl
 8007866:	4649      	mov	r1, r9
 8007868:	4638      	mov	r0, r7
 800786a:	47c0      	blx	r8
 800786c:	3001      	adds	r0, #1
 800786e:	d103      	bne.n	8007878 <_printf_common+0xac>
 8007870:	f04f 30ff 	mov.w	r0, #4294967295
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	3501      	adds	r5, #1
 800787a:	e7c6      	b.n	800780a <_printf_common+0x3e>
 800787c:	18e1      	adds	r1, r4, r3
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	2030      	movs	r0, #48	; 0x30
 8007882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007886:	4422      	add	r2, r4
 8007888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800788c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007890:	3302      	adds	r3, #2
 8007892:	e7c7      	b.n	8007824 <_printf_common+0x58>
 8007894:	2301      	movs	r3, #1
 8007896:	4622      	mov	r2, r4
 8007898:	4649      	mov	r1, r9
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	3001      	adds	r0, #1
 80078a0:	d0e6      	beq.n	8007870 <_printf_common+0xa4>
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7d9      	b.n	800785a <_printf_common+0x8e>
	...

080078a8 <_printf_i>:
 80078a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	4691      	mov	r9, r2
 80078b0:	7e27      	ldrb	r7, [r4, #24]
 80078b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078b4:	2f78      	cmp	r7, #120	; 0x78
 80078b6:	4680      	mov	r8, r0
 80078b8:	469a      	mov	sl, r3
 80078ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078be:	d807      	bhi.n	80078d0 <_printf_i+0x28>
 80078c0:	2f62      	cmp	r7, #98	; 0x62
 80078c2:	d80a      	bhi.n	80078da <_printf_i+0x32>
 80078c4:	2f00      	cmp	r7, #0
 80078c6:	f000 80d8 	beq.w	8007a7a <_printf_i+0x1d2>
 80078ca:	2f58      	cmp	r7, #88	; 0x58
 80078cc:	f000 80a3 	beq.w	8007a16 <_printf_i+0x16e>
 80078d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078d8:	e03a      	b.n	8007950 <_printf_i+0xa8>
 80078da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078de:	2b15      	cmp	r3, #21
 80078e0:	d8f6      	bhi.n	80078d0 <_printf_i+0x28>
 80078e2:	a001      	add	r0, pc, #4	; (adr r0, 80078e8 <_printf_i+0x40>)
 80078e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078e8:	08007941 	.word	0x08007941
 80078ec:	08007955 	.word	0x08007955
 80078f0:	080078d1 	.word	0x080078d1
 80078f4:	080078d1 	.word	0x080078d1
 80078f8:	080078d1 	.word	0x080078d1
 80078fc:	080078d1 	.word	0x080078d1
 8007900:	08007955 	.word	0x08007955
 8007904:	080078d1 	.word	0x080078d1
 8007908:	080078d1 	.word	0x080078d1
 800790c:	080078d1 	.word	0x080078d1
 8007910:	080078d1 	.word	0x080078d1
 8007914:	08007a61 	.word	0x08007a61
 8007918:	08007985 	.word	0x08007985
 800791c:	08007a43 	.word	0x08007a43
 8007920:	080078d1 	.word	0x080078d1
 8007924:	080078d1 	.word	0x080078d1
 8007928:	08007a83 	.word	0x08007a83
 800792c:	080078d1 	.word	0x080078d1
 8007930:	08007985 	.word	0x08007985
 8007934:	080078d1 	.word	0x080078d1
 8007938:	080078d1 	.word	0x080078d1
 800793c:	08007a4b 	.word	0x08007a4b
 8007940:	680b      	ldr	r3, [r1, #0]
 8007942:	1d1a      	adds	r2, r3, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	600a      	str	r2, [r1, #0]
 8007948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800794c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007950:	2301      	movs	r3, #1
 8007952:	e0a3      	b.n	8007a9c <_printf_i+0x1f4>
 8007954:	6825      	ldr	r5, [r4, #0]
 8007956:	6808      	ldr	r0, [r1, #0]
 8007958:	062e      	lsls	r6, r5, #24
 800795a:	f100 0304 	add.w	r3, r0, #4
 800795e:	d50a      	bpl.n	8007976 <_printf_i+0xce>
 8007960:	6805      	ldr	r5, [r0, #0]
 8007962:	600b      	str	r3, [r1, #0]
 8007964:	2d00      	cmp	r5, #0
 8007966:	da03      	bge.n	8007970 <_printf_i+0xc8>
 8007968:	232d      	movs	r3, #45	; 0x2d
 800796a:	426d      	negs	r5, r5
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	485e      	ldr	r0, [pc, #376]	; (8007aec <_printf_i+0x244>)
 8007972:	230a      	movs	r3, #10
 8007974:	e019      	b.n	80079aa <_printf_i+0x102>
 8007976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800797a:	6805      	ldr	r5, [r0, #0]
 800797c:	600b      	str	r3, [r1, #0]
 800797e:	bf18      	it	ne
 8007980:	b22d      	sxthne	r5, r5
 8007982:	e7ef      	b.n	8007964 <_printf_i+0xbc>
 8007984:	680b      	ldr	r3, [r1, #0]
 8007986:	6825      	ldr	r5, [r4, #0]
 8007988:	1d18      	adds	r0, r3, #4
 800798a:	6008      	str	r0, [r1, #0]
 800798c:	0628      	lsls	r0, r5, #24
 800798e:	d501      	bpl.n	8007994 <_printf_i+0xec>
 8007990:	681d      	ldr	r5, [r3, #0]
 8007992:	e002      	b.n	800799a <_printf_i+0xf2>
 8007994:	0669      	lsls	r1, r5, #25
 8007996:	d5fb      	bpl.n	8007990 <_printf_i+0xe8>
 8007998:	881d      	ldrh	r5, [r3, #0]
 800799a:	4854      	ldr	r0, [pc, #336]	; (8007aec <_printf_i+0x244>)
 800799c:	2f6f      	cmp	r7, #111	; 0x6f
 800799e:	bf0c      	ite	eq
 80079a0:	2308      	moveq	r3, #8
 80079a2:	230a      	movne	r3, #10
 80079a4:	2100      	movs	r1, #0
 80079a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079aa:	6866      	ldr	r6, [r4, #4]
 80079ac:	60a6      	str	r6, [r4, #8]
 80079ae:	2e00      	cmp	r6, #0
 80079b0:	bfa2      	ittt	ge
 80079b2:	6821      	ldrge	r1, [r4, #0]
 80079b4:	f021 0104 	bicge.w	r1, r1, #4
 80079b8:	6021      	strge	r1, [r4, #0]
 80079ba:	b90d      	cbnz	r5, 80079c0 <_printf_i+0x118>
 80079bc:	2e00      	cmp	r6, #0
 80079be:	d04d      	beq.n	8007a5c <_printf_i+0x1b4>
 80079c0:	4616      	mov	r6, r2
 80079c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079c6:	fb03 5711 	mls	r7, r3, r1, r5
 80079ca:	5dc7      	ldrb	r7, [r0, r7]
 80079cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079d0:	462f      	mov	r7, r5
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	460d      	mov	r5, r1
 80079d6:	d9f4      	bls.n	80079c2 <_printf_i+0x11a>
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d10b      	bne.n	80079f4 <_printf_i+0x14c>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	07df      	lsls	r7, r3, #31
 80079e0:	d508      	bpl.n	80079f4 <_printf_i+0x14c>
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	6861      	ldr	r1, [r4, #4]
 80079e6:	4299      	cmp	r1, r3
 80079e8:	bfde      	ittt	le
 80079ea:	2330      	movle	r3, #48	; 0x30
 80079ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079f4:	1b92      	subs	r2, r2, r6
 80079f6:	6122      	str	r2, [r4, #16]
 80079f8:	f8cd a000 	str.w	sl, [sp]
 80079fc:	464b      	mov	r3, r9
 80079fe:	aa03      	add	r2, sp, #12
 8007a00:	4621      	mov	r1, r4
 8007a02:	4640      	mov	r0, r8
 8007a04:	f7ff fee2 	bl	80077cc <_printf_common>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d14c      	bne.n	8007aa6 <_printf_i+0x1fe>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	b004      	add	sp, #16
 8007a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a16:	4835      	ldr	r0, [pc, #212]	; (8007aec <_printf_i+0x244>)
 8007a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	680e      	ldr	r6, [r1, #0]
 8007a20:	061f      	lsls	r7, r3, #24
 8007a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a26:	600e      	str	r6, [r1, #0]
 8007a28:	d514      	bpl.n	8007a54 <_printf_i+0x1ac>
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	bf44      	itt	mi
 8007a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a32:	6023      	strmi	r3, [r4, #0]
 8007a34:	b91d      	cbnz	r5, 8007a3e <_printf_i+0x196>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	2310      	movs	r3, #16
 8007a40:	e7b0      	b.n	80079a4 <_printf_i+0xfc>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f043 0320 	orr.w	r3, r3, #32
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2378      	movs	r3, #120	; 0x78
 8007a4c:	4828      	ldr	r0, [pc, #160]	; (8007af0 <_printf_i+0x248>)
 8007a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a52:	e7e3      	b.n	8007a1c <_printf_i+0x174>
 8007a54:	065e      	lsls	r6, r3, #25
 8007a56:	bf48      	it	mi
 8007a58:	b2ad      	uxthmi	r5, r5
 8007a5a:	e7e6      	b.n	8007a2a <_printf_i+0x182>
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	e7bb      	b.n	80079d8 <_printf_i+0x130>
 8007a60:	680b      	ldr	r3, [r1, #0]
 8007a62:	6826      	ldr	r6, [r4, #0]
 8007a64:	6960      	ldr	r0, [r4, #20]
 8007a66:	1d1d      	adds	r5, r3, #4
 8007a68:	600d      	str	r5, [r1, #0]
 8007a6a:	0635      	lsls	r5, r6, #24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0x1cc>
 8007a70:	6018      	str	r0, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <_printf_i+0x1d2>
 8007a74:	0671      	lsls	r1, r6, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0x1c8>
 8007a78:	8018      	strh	r0, [r3, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	4616      	mov	r6, r2
 8007a80:	e7ba      	b.n	80079f8 <_printf_i+0x150>
 8007a82:	680b      	ldr	r3, [r1, #0]
 8007a84:	1d1a      	adds	r2, r3, #4
 8007a86:	600a      	str	r2, [r1, #0]
 8007a88:	681e      	ldr	r6, [r3, #0]
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7f8 fbde 	bl	8000250 <memchr>
 8007a94:	b108      	cbz	r0, 8007a9a <_printf_i+0x1f2>
 8007a96:	1b80      	subs	r0, r0, r6
 8007a98:	6060      	str	r0, [r4, #4]
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	e7a8      	b.n	80079f8 <_printf_i+0x150>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	47d0      	blx	sl
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0ab      	beq.n	8007a0c <_printf_i+0x164>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	d413      	bmi.n	8007ae2 <_printf_i+0x23a>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	4618      	movlt	r0, r3
 8007ac4:	e7a4      	b.n	8007a10 <_printf_i+0x168>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4649      	mov	r1, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	47d0      	blx	sl
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d09b      	beq.n	8007a0c <_printf_i+0x164>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	9903      	ldr	r1, [sp, #12]
 8007ada:	1a5b      	subs	r3, r3, r1
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dcf2      	bgt.n	8007ac6 <_printf_i+0x21e>
 8007ae0:	e7eb      	b.n	8007aba <_printf_i+0x212>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	f104 0619 	add.w	r6, r4, #25
 8007ae8:	e7f5      	b.n	8007ad6 <_printf_i+0x22e>
 8007aea:	bf00      	nop
 8007aec:	0800b652 	.word	0x0800b652
 8007af0:	0800b663 	.word	0x0800b663

08007af4 <siprintf>:
 8007af4:	b40e      	push	{r1, r2, r3}
 8007af6:	b500      	push	{lr}
 8007af8:	b09c      	sub	sp, #112	; 0x70
 8007afa:	ab1d      	add	r3, sp, #116	; 0x74
 8007afc:	9002      	str	r0, [sp, #8]
 8007afe:	9006      	str	r0, [sp, #24]
 8007b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b04:	4809      	ldr	r0, [pc, #36]	; (8007b2c <siprintf+0x38>)
 8007b06:	9107      	str	r1, [sp, #28]
 8007b08:	9104      	str	r1, [sp, #16]
 8007b0a:	4909      	ldr	r1, [pc, #36]	; (8007b30 <siprintf+0x3c>)
 8007b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	6800      	ldr	r0, [r0, #0]
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	a902      	add	r1, sp, #8
 8007b18:	f002 fdbe 	bl	800a698 <_svfiprintf_r>
 8007b1c:	9b02      	ldr	r3, [sp, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	b01c      	add	sp, #112	; 0x70
 8007b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b28:	b003      	add	sp, #12
 8007b2a:	4770      	bx	lr
 8007b2c:	20000048 	.word	0x20000048
 8007b30:	ffff0208 	.word	0xffff0208

08007b34 <sulp>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	4616      	mov	r6, r2
 8007b3c:	ec45 4b10 	vmov	d0, r4, r5
 8007b40:	f002 fb44 	bl	800a1cc <__ulp>
 8007b44:	b17e      	cbz	r6, 8007b66 <sulp+0x32>
 8007b46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dd09      	ble.n	8007b66 <sulp+0x32>
 8007b52:	051b      	lsls	r3, r3, #20
 8007b54:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007b58:	2000      	movs	r0, #0
 8007b5a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007b5e:	ec41 0b17 	vmov	d7, r0, r1
 8007b62:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007b66:	bd70      	pop	{r4, r5, r6, pc}

08007b68 <_strtod_l>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	ed2d 8b0c 	vpush	{d8-d13}
 8007b70:	b09d      	sub	sp, #116	; 0x74
 8007b72:	461f      	mov	r7, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	9318      	str	r3, [sp, #96]	; 0x60
 8007b78:	4ba6      	ldr	r3, [pc, #664]	; (8007e14 <_strtod_l+0x2ac>)
 8007b7a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	4604      	mov	r4, r0
 8007b82:	4618      	mov	r0, r3
 8007b84:	468a      	mov	sl, r1
 8007b86:	f7f8 fb5b 	bl	8000240 <strlen>
 8007b8a:	f04f 0800 	mov.w	r8, #0
 8007b8e:	4605      	mov	r5, r0
 8007b90:	f04f 0900 	mov.w	r9, #0
 8007b94:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	2a2b      	cmp	r2, #43	; 0x2b
 8007b9e:	d04d      	beq.n	8007c3c <_strtod_l+0xd4>
 8007ba0:	d83a      	bhi.n	8007c18 <_strtod_l+0xb0>
 8007ba2:	2a0d      	cmp	r2, #13
 8007ba4:	d833      	bhi.n	8007c0e <_strtod_l+0xa6>
 8007ba6:	2a08      	cmp	r2, #8
 8007ba8:	d833      	bhi.n	8007c12 <_strtod_l+0xaa>
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d03d      	beq.n	8007c2a <_strtod_l+0xc2>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007bb4:	7833      	ldrb	r3, [r6, #0]
 8007bb6:	2b30      	cmp	r3, #48	; 0x30
 8007bb8:	f040 80b6 	bne.w	8007d28 <_strtod_l+0x1c0>
 8007bbc:	7873      	ldrb	r3, [r6, #1]
 8007bbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bc2:	2b58      	cmp	r3, #88	; 0x58
 8007bc4:	d16d      	bne.n	8007ca2 <_strtod_l+0x13a>
 8007bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	ab18      	add	r3, sp, #96	; 0x60
 8007bcc:	9702      	str	r7, [sp, #8]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	4a91      	ldr	r2, [pc, #580]	; (8007e18 <_strtod_l+0x2b0>)
 8007bd2:	ab19      	add	r3, sp, #100	; 0x64
 8007bd4:	a917      	add	r1, sp, #92	; 0x5c
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f001 fc58 	bl	800948c <__gethex>
 8007bdc:	f010 0507 	ands.w	r5, r0, #7
 8007be0:	4607      	mov	r7, r0
 8007be2:	d005      	beq.n	8007bf0 <_strtod_l+0x88>
 8007be4:	2d06      	cmp	r5, #6
 8007be6:	d12b      	bne.n	8007c40 <_strtod_l+0xd8>
 8007be8:	3601      	adds	r6, #1
 8007bea:	2300      	movs	r3, #0
 8007bec:	9617      	str	r6, [sp, #92]	; 0x5c
 8007bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f040 856e 	bne.w	80086d4 <_strtod_l+0xb6c>
 8007bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfa:	b1e3      	cbz	r3, 8007c36 <_strtod_l+0xce>
 8007bfc:	ec49 8b17 	vmov	d7, r8, r9
 8007c00:	eeb1 0b47 	vneg.f64	d0, d7
 8007c04:	b01d      	add	sp, #116	; 0x74
 8007c06:	ecbd 8b0c 	vpop	{d8-d13}
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	2a20      	cmp	r2, #32
 8007c10:	d1cd      	bne.n	8007bae <_strtod_l+0x46>
 8007c12:	3301      	adds	r3, #1
 8007c14:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c16:	e7bf      	b.n	8007b98 <_strtod_l+0x30>
 8007c18:	2a2d      	cmp	r2, #45	; 0x2d
 8007c1a:	d1c8      	bne.n	8007bae <_strtod_l+0x46>
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1c3      	bne.n	8007bb2 <_strtod_l+0x4a>
 8007c2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c2c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 854d 	bne.w	80086d0 <_strtod_l+0xb68>
 8007c36:	ec49 8b10 	vmov	d0, r8, r9
 8007c3a:	e7e3      	b.n	8007c04 <_strtod_l+0x9c>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	e7ee      	b.n	8007c1e <_strtod_l+0xb6>
 8007c40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c42:	b13a      	cbz	r2, 8007c54 <_strtod_l+0xec>
 8007c44:	2135      	movs	r1, #53	; 0x35
 8007c46:	a81a      	add	r0, sp, #104	; 0x68
 8007c48:	f002 fbcc 	bl	800a3e4 <__copybits>
 8007c4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f001 ff90 	bl	8009b74 <_Bfree>
 8007c54:	3d01      	subs	r5, #1
 8007c56:	2d05      	cmp	r5, #5
 8007c58:	d807      	bhi.n	8007c6a <_strtod_l+0x102>
 8007c5a:	e8df f005 	tbb	[pc, r5]
 8007c5e:	0b0e      	.short	0x0b0e
 8007c60:	030e1d18 	.word	0x030e1d18
 8007c64:	f04f 0900 	mov.w	r9, #0
 8007c68:	46c8      	mov	r8, r9
 8007c6a:	073b      	lsls	r3, r7, #28
 8007c6c:	d5c0      	bpl.n	8007bf0 <_strtod_l+0x88>
 8007c6e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007c72:	e7bd      	b.n	8007bf0 <_strtod_l+0x88>
 8007c74:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007c78:	e7f7      	b.n	8007c6a <_strtod_l+0x102>
 8007c7a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8007c7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c84:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007c8c:	e7ed      	b.n	8007c6a <_strtod_l+0x102>
 8007c8e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8007e1c <_strtod_l+0x2b4>
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	e7e8      	b.n	8007c6a <_strtod_l+0x102>
 8007c98:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007c9c:	f04f 38ff 	mov.w	r8, #4294967295
 8007ca0:	e7e3      	b.n	8007c6a <_strtod_l+0x102>
 8007ca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d0f9      	beq.n	8007ca2 <_strtod_l+0x13a>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d09e      	beq.n	8007bf0 <_strtod_l+0x88>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	9306      	str	r3, [sp, #24]
 8007cb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc0:	461e      	mov	r6, r3
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007cc6:	f890 b000 	ldrb.w	fp, [r0]
 8007cca:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8007cce:	b2d9      	uxtb	r1, r3
 8007cd0:	2909      	cmp	r1, #9
 8007cd2:	d92b      	bls.n	8007d2c <_strtod_l+0x1c4>
 8007cd4:	9908      	ldr	r1, [sp, #32]
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	f002 fdfc 	bl	800a8d4 <strncmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d035      	beq.n	8007d4c <_strtod_l+0x1e4>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	465a      	mov	r2, fp
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	4683      	mov	fp, r0
 8007ce8:	4601      	mov	r1, r0
 8007cea:	2a65      	cmp	r2, #101	; 0x65
 8007cec:	d001      	beq.n	8007cf2 <_strtod_l+0x18a>
 8007cee:	2a45      	cmp	r2, #69	; 0x45
 8007cf0:	d118      	bne.n	8007d24 <_strtod_l+0x1bc>
 8007cf2:	b91b      	cbnz	r3, 8007cfc <_strtod_l+0x194>
 8007cf4:	9b06      	ldr	r3, [sp, #24]
 8007cf6:	4303      	orrs	r3, r0
 8007cf8:	d097      	beq.n	8007c2a <_strtod_l+0xc2>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007d00:	f10a 0201 	add.w	r2, sl, #1
 8007d04:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d06:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8007d0a:	2a2b      	cmp	r2, #43	; 0x2b
 8007d0c:	d077      	beq.n	8007dfe <_strtod_l+0x296>
 8007d0e:	2a2d      	cmp	r2, #45	; 0x2d
 8007d10:	d07d      	beq.n	8007e0e <_strtod_l+0x2a6>
 8007d12:	f04f 0e00 	mov.w	lr, #0
 8007d16:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007d1a:	2d09      	cmp	r5, #9
 8007d1c:	f240 8084 	bls.w	8007e28 <_strtod_l+0x2c0>
 8007d20:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007d24:	2500      	movs	r5, #0
 8007d26:	e09f      	b.n	8007e68 <_strtod_l+0x300>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e7c3      	b.n	8007cb4 <_strtod_l+0x14c>
 8007d2c:	2e08      	cmp	r6, #8
 8007d2e:	bfd5      	itete	le
 8007d30:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007d32:	9904      	ldrgt	r1, [sp, #16]
 8007d34:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d3c:	f100 0001 	add.w	r0, r0, #1
 8007d40:	bfd4      	ite	le
 8007d42:	930a      	strle	r3, [sp, #40]	; 0x28
 8007d44:	9304      	strgt	r3, [sp, #16]
 8007d46:	3601      	adds	r6, #1
 8007d48:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d4a:	e7bb      	b.n	8007cc4 <_strtod_l+0x15c>
 8007d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d4e:	195a      	adds	r2, r3, r5
 8007d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d52:	5d5a      	ldrb	r2, [r3, r5]
 8007d54:	b3ae      	cbz	r6, 8007dc2 <_strtod_l+0x25a>
 8007d56:	4683      	mov	fp, r0
 8007d58:	4633      	mov	r3, r6
 8007d5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007d5e:	2909      	cmp	r1, #9
 8007d60:	d912      	bls.n	8007d88 <_strtod_l+0x220>
 8007d62:	2101      	movs	r1, #1
 8007d64:	e7c1      	b.n	8007cea <_strtod_l+0x182>
 8007d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d6c:	785a      	ldrb	r2, [r3, #1]
 8007d6e:	3001      	adds	r0, #1
 8007d70:	2a30      	cmp	r2, #48	; 0x30
 8007d72:	d0f8      	beq.n	8007d66 <_strtod_l+0x1fe>
 8007d74:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	f200 84b0 	bhi.w	80086de <_strtod_l+0xb76>
 8007d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d80:	930c      	str	r3, [sp, #48]	; 0x30
 8007d82:	4683      	mov	fp, r0
 8007d84:	2000      	movs	r0, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	3a30      	subs	r2, #48	; 0x30
 8007d8a:	f100 0101 	add.w	r1, r0, #1
 8007d8e:	d012      	beq.n	8007db6 <_strtod_l+0x24e>
 8007d90:	448b      	add	fp, r1
 8007d92:	eb00 0c03 	add.w	ip, r0, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	250a      	movs	r5, #10
 8007d9a:	4561      	cmp	r1, ip
 8007d9c:	d113      	bne.n	8007dc6 <_strtod_l+0x25e>
 8007d9e:	1819      	adds	r1, r3, r0
 8007da0:	2908      	cmp	r1, #8
 8007da2:	f103 0301 	add.w	r3, r3, #1
 8007da6:	4403      	add	r3, r0
 8007da8:	dc1d      	bgt.n	8007de6 <_strtod_l+0x27e>
 8007daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007dac:	210a      	movs	r1, #10
 8007dae:	fb01 2200 	mla	r2, r1, r0, r2
 8007db2:	920a      	str	r2, [sp, #40]	; 0x28
 8007db4:	2100      	movs	r1, #0
 8007db6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007db8:	1c50      	adds	r0, r2, #1
 8007dba:	9017      	str	r0, [sp, #92]	; 0x5c
 8007dbc:	7852      	ldrb	r2, [r2, #1]
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	e7cb      	b.n	8007d5a <_strtod_l+0x1f2>
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	e7d4      	b.n	8007d70 <_strtod_l+0x208>
 8007dc6:	2908      	cmp	r1, #8
 8007dc8:	dc04      	bgt.n	8007dd4 <_strtod_l+0x26c>
 8007dca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007dcc:	436f      	muls	r7, r5
 8007dce:	970a      	str	r7, [sp, #40]	; 0x28
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	e7e2      	b.n	8007d9a <_strtod_l+0x232>
 8007dd4:	f101 0e01 	add.w	lr, r1, #1
 8007dd8:	f1be 0f10 	cmp.w	lr, #16
 8007ddc:	bfde      	ittt	le
 8007dde:	9f04      	ldrle	r7, [sp, #16]
 8007de0:	436f      	mulle	r7, r5
 8007de2:	9704      	strle	r7, [sp, #16]
 8007de4:	e7f4      	b.n	8007dd0 <_strtod_l+0x268>
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	bfdf      	itttt	le
 8007dea:	9804      	ldrle	r0, [sp, #16]
 8007dec:	210a      	movle	r1, #10
 8007dee:	fb01 2200 	mlale	r2, r1, r0, r2
 8007df2:	9204      	strle	r2, [sp, #16]
 8007df4:	e7de      	b.n	8007db4 <_strtod_l+0x24c>
 8007df6:	f04f 0b00 	mov.w	fp, #0
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	e77a      	b.n	8007cf4 <_strtod_l+0x18c>
 8007dfe:	f04f 0e00 	mov.w	lr, #0
 8007e02:	f10a 0202 	add.w	r2, sl, #2
 8007e06:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e08:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8007e0c:	e783      	b.n	8007d16 <_strtod_l+0x1ae>
 8007e0e:	f04f 0e01 	mov.w	lr, #1
 8007e12:	e7f6      	b.n	8007e02 <_strtod_l+0x29a>
 8007e14:	0800b7c8 	.word	0x0800b7c8
 8007e18:	0800b674 	.word	0x0800b674
 8007e1c:	7ff00000 	.word	0x7ff00000
 8007e20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e22:	1c55      	adds	r5, r2, #1
 8007e24:	9517      	str	r5, [sp, #92]	; 0x5c
 8007e26:	7852      	ldrb	r2, [r2, #1]
 8007e28:	2a30      	cmp	r2, #48	; 0x30
 8007e2a:	d0f9      	beq.n	8007e20 <_strtod_l+0x2b8>
 8007e2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007e30:	2d08      	cmp	r5, #8
 8007e32:	f63f af77 	bhi.w	8007d24 <_strtod_l+0x1bc>
 8007e36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e3c:	9208      	str	r2, [sp, #32]
 8007e3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e40:	1c55      	adds	r5, r2, #1
 8007e42:	9517      	str	r5, [sp, #92]	; 0x5c
 8007e44:	7852      	ldrb	r2, [r2, #1]
 8007e46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007e4a:	2f09      	cmp	r7, #9
 8007e4c:	d937      	bls.n	8007ebe <_strtod_l+0x356>
 8007e4e:	9f08      	ldr	r7, [sp, #32]
 8007e50:	1bed      	subs	r5, r5, r7
 8007e52:	2d08      	cmp	r5, #8
 8007e54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007e58:	dc02      	bgt.n	8007e60 <_strtod_l+0x2f8>
 8007e5a:	4565      	cmp	r5, ip
 8007e5c:	bfa8      	it	ge
 8007e5e:	4665      	movge	r5, ip
 8007e60:	f1be 0f00 	cmp.w	lr, #0
 8007e64:	d000      	beq.n	8007e68 <_strtod_l+0x300>
 8007e66:	426d      	negs	r5, r5
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d14f      	bne.n	8007f0c <_strtod_l+0x3a4>
 8007e6c:	9b06      	ldr	r3, [sp, #24]
 8007e6e:	4303      	orrs	r3, r0
 8007e70:	f47f aebe 	bne.w	8007bf0 <_strtod_l+0x88>
 8007e74:	2900      	cmp	r1, #0
 8007e76:	f47f aed8 	bne.w	8007c2a <_strtod_l+0xc2>
 8007e7a:	2a69      	cmp	r2, #105	; 0x69
 8007e7c:	d027      	beq.n	8007ece <_strtod_l+0x366>
 8007e7e:	dc24      	bgt.n	8007eca <_strtod_l+0x362>
 8007e80:	2a49      	cmp	r2, #73	; 0x49
 8007e82:	d024      	beq.n	8007ece <_strtod_l+0x366>
 8007e84:	2a4e      	cmp	r2, #78	; 0x4e
 8007e86:	f47f aed0 	bne.w	8007c2a <_strtod_l+0xc2>
 8007e8a:	499b      	ldr	r1, [pc, #620]	; (80080f8 <_strtod_l+0x590>)
 8007e8c:	a817      	add	r0, sp, #92	; 0x5c
 8007e8e:	f001 fd55 	bl	800993c <__match>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f43f aec9 	beq.w	8007c2a <_strtod_l+0xc2>
 8007e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b28      	cmp	r3, #40	; 0x28
 8007e9e:	d12d      	bne.n	8007efc <_strtod_l+0x394>
 8007ea0:	4996      	ldr	r1, [pc, #600]	; (80080fc <_strtod_l+0x594>)
 8007ea2:	aa1a      	add	r2, sp, #104	; 0x68
 8007ea4:	a817      	add	r0, sp, #92	; 0x5c
 8007ea6:	f001 fd5d 	bl	8009964 <__hexnan>
 8007eaa:	2805      	cmp	r0, #5
 8007eac:	d126      	bne.n	8007efc <_strtod_l+0x394>
 8007eae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007eb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007eb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007ebc:	e698      	b.n	8007bf0 <_strtod_l+0x88>
 8007ebe:	250a      	movs	r5, #10
 8007ec0:	fb05 250c 	mla	r5, r5, ip, r2
 8007ec4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007ec8:	e7b9      	b.n	8007e3e <_strtod_l+0x2d6>
 8007eca:	2a6e      	cmp	r2, #110	; 0x6e
 8007ecc:	e7db      	b.n	8007e86 <_strtod_l+0x31e>
 8007ece:	498c      	ldr	r1, [pc, #560]	; (8008100 <_strtod_l+0x598>)
 8007ed0:	a817      	add	r0, sp, #92	; 0x5c
 8007ed2:	f001 fd33 	bl	800993c <__match>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f43f aea7 	beq.w	8007c2a <_strtod_l+0xc2>
 8007edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ede:	4989      	ldr	r1, [pc, #548]	; (8008104 <_strtod_l+0x59c>)
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	a817      	add	r0, sp, #92	; 0x5c
 8007ee4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ee6:	f001 fd29 	bl	800993c <__match>
 8007eea:	b910      	cbnz	r0, 8007ef2 <_strtod_l+0x38a>
 8007eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eee:	3301      	adds	r3, #1
 8007ef0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ef2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008118 <_strtod_l+0x5b0>
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	e679      	b.n	8007bf0 <_strtod_l+0x88>
 8007efc:	4882      	ldr	r0, [pc, #520]	; (8008108 <_strtod_l+0x5a0>)
 8007efe:	f002 fccb 	bl	800a898 <nan>
 8007f02:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007f06:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f0a:	e671      	b.n	8007bf0 <_strtod_l+0x88>
 8007f0c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007f10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f14:	eba5 020b 	sub.w	r2, r5, fp
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	bf08      	it	eq
 8007f1c:	461e      	moveq	r6, r3
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007f24:	9206      	str	r2, [sp, #24]
 8007f26:	461a      	mov	r2, r3
 8007f28:	bfa8      	it	ge
 8007f2a:	2210      	movge	r2, #16
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007f32:	dd0e      	ble.n	8007f52 <_strtod_l+0x3ea>
 8007f34:	4975      	ldr	r1, [pc, #468]	; (800810c <_strtod_l+0x5a4>)
 8007f36:	eddd 7a04 	vldr	s15, [sp, #16]
 8007f3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007f3e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007f42:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007f46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007f4e:	ec59 8b17 	vmov	r8, r9, d7
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	dc37      	bgt.n	8007fc6 <_strtod_l+0x45e>
 8007f56:	9906      	ldr	r1, [sp, #24]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	f43f ae49 	beq.w	8007bf0 <_strtod_l+0x88>
 8007f5e:	dd23      	ble.n	8007fa8 <_strtod_l+0x440>
 8007f60:	2916      	cmp	r1, #22
 8007f62:	dc0b      	bgt.n	8007f7c <_strtod_l+0x414>
 8007f64:	4b69      	ldr	r3, [pc, #420]	; (800810c <_strtod_l+0x5a4>)
 8007f66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007f6a:	ed93 7b00 	vldr	d7, [r3]
 8007f6e:	ec49 8b16 	vmov	d6, r8, r9
 8007f72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f76:	ec59 8b17 	vmov	r8, r9, d7
 8007f7a:	e639      	b.n	8007bf0 <_strtod_l+0x88>
 8007f7c:	9806      	ldr	r0, [sp, #24]
 8007f7e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007f82:	4281      	cmp	r1, r0
 8007f84:	db1f      	blt.n	8007fc6 <_strtod_l+0x45e>
 8007f86:	4a61      	ldr	r2, [pc, #388]	; (800810c <_strtod_l+0x5a4>)
 8007f88:	f1c3 030f 	rsb	r3, r3, #15
 8007f8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007f90:	ed91 7b00 	vldr	d7, [r1]
 8007f94:	ec49 8b16 	vmov	d6, r8, r9
 8007f98:	1ac3      	subs	r3, r0, r3
 8007f9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fa2:	ed92 6b00 	vldr	d6, [r2]
 8007fa6:	e7e4      	b.n	8007f72 <_strtod_l+0x40a>
 8007fa8:	9906      	ldr	r1, [sp, #24]
 8007faa:	3116      	adds	r1, #22
 8007fac:	db0b      	blt.n	8007fc6 <_strtod_l+0x45e>
 8007fae:	4b57      	ldr	r3, [pc, #348]	; (800810c <_strtod_l+0x5a4>)
 8007fb0:	ebab 0505 	sub.w	r5, fp, r5
 8007fb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007fb8:	ed95 7b00 	vldr	d7, [r5]
 8007fbc:	ec49 8b16 	vmov	d6, r8, r9
 8007fc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007fc4:	e7d7      	b.n	8007f76 <_strtod_l+0x40e>
 8007fc6:	9906      	ldr	r1, [sp, #24]
 8007fc8:	1a9a      	subs	r2, r3, r2
 8007fca:	440a      	add	r2, r1
 8007fcc:	2a00      	cmp	r2, #0
 8007fce:	dd74      	ble.n	80080ba <_strtod_l+0x552>
 8007fd0:	f012 000f 	ands.w	r0, r2, #15
 8007fd4:	d00a      	beq.n	8007fec <_strtod_l+0x484>
 8007fd6:	494d      	ldr	r1, [pc, #308]	; (800810c <_strtod_l+0x5a4>)
 8007fd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007fdc:	ed91 7b00 	vldr	d7, [r1]
 8007fe0:	ec49 8b16 	vmov	d6, r8, r9
 8007fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fe8:	ec59 8b17 	vmov	r8, r9, d7
 8007fec:	f032 020f 	bics.w	r2, r2, #15
 8007ff0:	d04f      	beq.n	8008092 <_strtod_l+0x52a>
 8007ff2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007ff6:	dd22      	ble.n	800803e <_strtod_l+0x4d6>
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	462e      	mov	r6, r5
 8007ffc:	950a      	str	r5, [sp, #40]	; 0x28
 8007ffe:	462f      	mov	r7, r5
 8008000:	2322      	movs	r3, #34	; 0x22
 8008002:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008118 <_strtod_l+0x5b0>
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	f04f 0800 	mov.w	r8, #0
 800800c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	f43f adee 	beq.w	8007bf0 <_strtod_l+0x88>
 8008014:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008016:	4620      	mov	r0, r4
 8008018:	f001 fdac 	bl	8009b74 <_Bfree>
 800801c:	4639      	mov	r1, r7
 800801e:	4620      	mov	r0, r4
 8008020:	f001 fda8 	bl	8009b74 <_Bfree>
 8008024:	4631      	mov	r1, r6
 8008026:	4620      	mov	r0, r4
 8008028:	f001 fda4 	bl	8009b74 <_Bfree>
 800802c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800802e:	4620      	mov	r0, r4
 8008030:	f001 fda0 	bl	8009b74 <_Bfree>
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f001 fd9c 	bl	8009b74 <_Bfree>
 800803c:	e5d8      	b.n	8007bf0 <_strtod_l+0x88>
 800803e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008042:	2000      	movs	r0, #0
 8008044:	4f32      	ldr	r7, [pc, #200]	; (8008110 <_strtod_l+0x5a8>)
 8008046:	1112      	asrs	r2, r2, #4
 8008048:	4601      	mov	r1, r0
 800804a:	2a01      	cmp	r2, #1
 800804c:	dc24      	bgt.n	8008098 <_strtod_l+0x530>
 800804e:	b108      	cbz	r0, 8008054 <_strtod_l+0x4ec>
 8008050:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008054:	4a2e      	ldr	r2, [pc, #184]	; (8008110 <_strtod_l+0x5a8>)
 8008056:	482f      	ldr	r0, [pc, #188]	; (8008114 <_strtod_l+0x5ac>)
 8008058:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800805c:	ed91 7b00 	vldr	d7, [r1]
 8008060:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008064:	ec49 8b16 	vmov	d6, r8, r9
 8008068:	ee27 7b06 	vmul.f64	d7, d7, d6
 800806c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008070:	9905      	ldr	r1, [sp, #20]
 8008072:	4a29      	ldr	r2, [pc, #164]	; (8008118 <_strtod_l+0x5b0>)
 8008074:	400a      	ands	r2, r1
 8008076:	4282      	cmp	r2, r0
 8008078:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800807c:	d8bc      	bhi.n	8007ff8 <_strtod_l+0x490>
 800807e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008082:	4282      	cmp	r2, r0
 8008084:	bf86      	itte	hi
 8008086:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800811c <_strtod_l+0x5b4>
 800808a:	f04f 38ff 	movhi.w	r8, #4294967295
 800808e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008092:	2200      	movs	r2, #0
 8008094:	9204      	str	r2, [sp, #16]
 8008096:	e07f      	b.n	8008198 <_strtod_l+0x630>
 8008098:	f012 0f01 	tst.w	r2, #1
 800809c:	d00a      	beq.n	80080b4 <_strtod_l+0x54c>
 800809e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80080a2:	ed90 7b00 	vldr	d7, [r0]
 80080a6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80080aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80080ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080b2:	2001      	movs	r0, #1
 80080b4:	3101      	adds	r1, #1
 80080b6:	1052      	asrs	r2, r2, #1
 80080b8:	e7c7      	b.n	800804a <_strtod_l+0x4e2>
 80080ba:	d0ea      	beq.n	8008092 <_strtod_l+0x52a>
 80080bc:	4252      	negs	r2, r2
 80080be:	f012 000f 	ands.w	r0, r2, #15
 80080c2:	d00a      	beq.n	80080da <_strtod_l+0x572>
 80080c4:	4911      	ldr	r1, [pc, #68]	; (800810c <_strtod_l+0x5a4>)
 80080c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80080ca:	ed91 7b00 	vldr	d7, [r1]
 80080ce:	ec49 8b16 	vmov	d6, r8, r9
 80080d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080d6:	ec59 8b17 	vmov	r8, r9, d7
 80080da:	1112      	asrs	r2, r2, #4
 80080dc:	d0d9      	beq.n	8008092 <_strtod_l+0x52a>
 80080de:	2a1f      	cmp	r2, #31
 80080e0:	dd1e      	ble.n	8008120 <_strtod_l+0x5b8>
 80080e2:	2500      	movs	r5, #0
 80080e4:	462e      	mov	r6, r5
 80080e6:	950a      	str	r5, [sp, #40]	; 0x28
 80080e8:	462f      	mov	r7, r5
 80080ea:	2322      	movs	r3, #34	; 0x22
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	f04f 0900 	mov.w	r9, #0
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	e789      	b.n	800800c <_strtod_l+0x4a4>
 80080f8:	0800b64d 	.word	0x0800b64d
 80080fc:	0800b688 	.word	0x0800b688
 8008100:	0800b645 	.word	0x0800b645
 8008104:	0800b6cb 	.word	0x0800b6cb
 8008108:	0800b988 	.word	0x0800b988
 800810c:	0800b868 	.word	0x0800b868
 8008110:	0800b840 	.word	0x0800b840
 8008114:	7ca00000 	.word	0x7ca00000
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	7fefffff 	.word	0x7fefffff
 8008120:	f012 0110 	ands.w	r1, r2, #16
 8008124:	bf18      	it	ne
 8008126:	216a      	movne	r1, #106	; 0x6a
 8008128:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800812c:	9104      	str	r1, [sp, #16]
 800812e:	49c0      	ldr	r1, [pc, #768]	; (8008430 <_strtod_l+0x8c8>)
 8008130:	2000      	movs	r0, #0
 8008132:	07d7      	lsls	r7, r2, #31
 8008134:	d508      	bpl.n	8008148 <_strtod_l+0x5e0>
 8008136:	ed9d 6b08 	vldr	d6, [sp, #32]
 800813a:	ed91 7b00 	vldr	d7, [r1]
 800813e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008142:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008146:	2001      	movs	r0, #1
 8008148:	1052      	asrs	r2, r2, #1
 800814a:	f101 0108 	add.w	r1, r1, #8
 800814e:	d1f0      	bne.n	8008132 <_strtod_l+0x5ca>
 8008150:	b108      	cbz	r0, 8008156 <_strtod_l+0x5ee>
 8008152:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008156:	9a04      	ldr	r2, [sp, #16]
 8008158:	b1ba      	cbz	r2, 800818a <_strtod_l+0x622>
 800815a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800815e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8008162:	2a00      	cmp	r2, #0
 8008164:	4649      	mov	r1, r9
 8008166:	dd10      	ble.n	800818a <_strtod_l+0x622>
 8008168:	2a1f      	cmp	r2, #31
 800816a:	f340 8132 	ble.w	80083d2 <_strtod_l+0x86a>
 800816e:	2a34      	cmp	r2, #52	; 0x34
 8008170:	bfde      	ittt	le
 8008172:	3a20      	suble	r2, #32
 8008174:	f04f 30ff 	movle.w	r0, #4294967295
 8008178:	fa00 f202 	lslle.w	r2, r0, r2
 800817c:	f04f 0800 	mov.w	r8, #0
 8008180:	bfcc      	ite	gt
 8008182:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008186:	ea02 0901 	andle.w	r9, r2, r1
 800818a:	ec49 8b17 	vmov	d7, r8, r9
 800818e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008196:	d0a4      	beq.n	80080e2 <_strtod_l+0x57a>
 8008198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800819a:	9200      	str	r2, [sp, #0]
 800819c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800819e:	4632      	mov	r2, r6
 80081a0:	4620      	mov	r0, r4
 80081a2:	f001 fd53 	bl	8009c4c <__s2b>
 80081a6:	900a      	str	r0, [sp, #40]	; 0x28
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f43f af25 	beq.w	8007ff8 <_strtod_l+0x490>
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	ebab 0505 	sub.w	r5, fp, r5
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfb4      	ite	lt
 80081b8:	462b      	movlt	r3, r5
 80081ba:	2300      	movge	r3, #0
 80081bc:	930c      	str	r3, [sp, #48]	; 0x30
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008418 <_strtod_l+0x8b0>
 80081c4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008420 <_strtod_l+0x8b8>
 80081c8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008428 <_strtod_l+0x8c0>
 80081cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081d0:	2500      	movs	r5, #0
 80081d2:	9312      	str	r3, [sp, #72]	; 0x48
 80081d4:	462e      	mov	r6, r5
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	4620      	mov	r0, r4
 80081da:	6859      	ldr	r1, [r3, #4]
 80081dc:	f001 fc8a 	bl	8009af4 <_Balloc>
 80081e0:	4607      	mov	r7, r0
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f43f af0c 	beq.w	8008000 <_strtod_l+0x498>
 80081e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	3202      	adds	r2, #2
 80081ee:	f103 010c 	add.w	r1, r3, #12
 80081f2:	0092      	lsls	r2, r2, #2
 80081f4:	300c      	adds	r0, #12
 80081f6:	f001 fc6f 	bl	8009ad8 <memcpy>
 80081fa:	ec49 8b10 	vmov	d0, r8, r9
 80081fe:	aa1a      	add	r2, sp, #104	; 0x68
 8008200:	a919      	add	r1, sp, #100	; 0x64
 8008202:	4620      	mov	r0, r4
 8008204:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008208:	f002 f85c 	bl	800a2c4 <__d2b>
 800820c:	9018      	str	r0, [sp, #96]	; 0x60
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f aef6 	beq.w	8008000 <_strtod_l+0x498>
 8008214:	2101      	movs	r1, #1
 8008216:	4620      	mov	r0, r4
 8008218:	f001 fdb2 	bl	8009d80 <__i2b>
 800821c:	4606      	mov	r6, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f aeee 	beq.w	8008000 <_strtod_l+0x498>
 8008224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008226:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfab      	itete	ge
 800822c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800822e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008230:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8008234:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008238:	bfac      	ite	ge
 800823a:	eb03 0b02 	addge.w	fp, r3, r2
 800823e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008242:	9a04      	ldr	r2, [sp, #16]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	440b      	add	r3, r1
 8008248:	4a7a      	ldr	r2, [pc, #488]	; (8008434 <_strtod_l+0x8cc>)
 800824a:	3b01      	subs	r3, #1
 800824c:	4293      	cmp	r3, r2
 800824e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008252:	f280 80d1 	bge.w	80083f8 <_strtod_l+0x890>
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	2a1f      	cmp	r2, #31
 800825a:	eba1 0102 	sub.w	r1, r1, r2
 800825e:	f04f 0001 	mov.w	r0, #1
 8008262:	f300 80bd 	bgt.w	80083e0 <_strtod_l+0x878>
 8008266:	fa00 f302 	lsl.w	r3, r0, r2
 800826a:	930e      	str	r3, [sp, #56]	; 0x38
 800826c:	2300      	movs	r3, #0
 800826e:	930d      	str	r3, [sp, #52]	; 0x34
 8008270:	eb0b 0301 	add.w	r3, fp, r1
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	459b      	cmp	fp, r3
 8008278:	448a      	add	sl, r1
 800827a:	4492      	add	sl, r2
 800827c:	465a      	mov	r2, fp
 800827e:	bfa8      	it	ge
 8008280:	461a      	movge	r2, r3
 8008282:	4552      	cmp	r2, sl
 8008284:	bfa8      	it	ge
 8008286:	4652      	movge	r2, sl
 8008288:	2a00      	cmp	r2, #0
 800828a:	bfc2      	ittt	gt
 800828c:	1a9b      	subgt	r3, r3, r2
 800828e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008292:	ebab 0b02 	subgt.w	fp, fp, r2
 8008296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008298:	2a00      	cmp	r2, #0
 800829a:	dd18      	ble.n	80082ce <_strtod_l+0x766>
 800829c:	4631      	mov	r1, r6
 800829e:	4620      	mov	r0, r4
 80082a0:	9315      	str	r3, [sp, #84]	; 0x54
 80082a2:	f001 fe29 	bl	8009ef8 <__pow5mult>
 80082a6:	4606      	mov	r6, r0
 80082a8:	2800      	cmp	r0, #0
 80082aa:	f43f aea9 	beq.w	8008000 <_strtod_l+0x498>
 80082ae:	4601      	mov	r1, r0
 80082b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082b2:	4620      	mov	r0, r4
 80082b4:	f001 fd7a 	bl	8009dac <__multiply>
 80082b8:	9014      	str	r0, [sp, #80]	; 0x50
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f43f aea0 	beq.w	8008000 <_strtod_l+0x498>
 80082c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082c2:	4620      	mov	r0, r4
 80082c4:	f001 fc56 	bl	8009b74 <_Bfree>
 80082c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082cc:	9218      	str	r2, [sp, #96]	; 0x60
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f300 8097 	bgt.w	8008402 <_strtod_l+0x89a>
 80082d4:	9b06      	ldr	r3, [sp, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	dd08      	ble.n	80082ec <_strtod_l+0x784>
 80082da:	4639      	mov	r1, r7
 80082dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 fe0a 	bl	8009ef8 <__pow5mult>
 80082e4:	4607      	mov	r7, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f ae8a 	beq.w	8008000 <_strtod_l+0x498>
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	dd08      	ble.n	8008304 <_strtod_l+0x79c>
 80082f2:	4639      	mov	r1, r7
 80082f4:	4652      	mov	r2, sl
 80082f6:	4620      	mov	r0, r4
 80082f8:	f001 fe58 	bl	8009fac <__lshift>
 80082fc:	4607      	mov	r7, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f ae7e 	beq.w	8008000 <_strtod_l+0x498>
 8008304:	f1bb 0f00 	cmp.w	fp, #0
 8008308:	dd08      	ble.n	800831c <_strtod_l+0x7b4>
 800830a:	4631      	mov	r1, r6
 800830c:	465a      	mov	r2, fp
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fe4c 	bl	8009fac <__lshift>
 8008314:	4606      	mov	r6, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	f43f ae72 	beq.w	8008000 <_strtod_l+0x498>
 800831c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800831e:	463a      	mov	r2, r7
 8008320:	4620      	mov	r0, r4
 8008322:	f001 fecb 	bl	800a0bc <__mdiff>
 8008326:	4605      	mov	r5, r0
 8008328:	2800      	cmp	r0, #0
 800832a:	f43f ae69 	beq.w	8008000 <_strtod_l+0x498>
 800832e:	2300      	movs	r3, #0
 8008330:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008334:	60c3      	str	r3, [r0, #12]
 8008336:	4631      	mov	r1, r6
 8008338:	f001 fea4 	bl	800a084 <__mcmp>
 800833c:	2800      	cmp	r0, #0
 800833e:	da7f      	bge.n	8008440 <_strtod_l+0x8d8>
 8008340:	ea5a 0308 	orrs.w	r3, sl, r8
 8008344:	f040 80a5 	bne.w	8008492 <_strtod_l+0x92a>
 8008348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 80a0 	bne.w	8008492 <_strtod_l+0x92a>
 8008352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008356:	0d1b      	lsrs	r3, r3, #20
 8008358:	051b      	lsls	r3, r3, #20
 800835a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800835e:	f240 8098 	bls.w	8008492 <_strtod_l+0x92a>
 8008362:	696b      	ldr	r3, [r5, #20]
 8008364:	b91b      	cbnz	r3, 800836e <_strtod_l+0x806>
 8008366:	692b      	ldr	r3, [r5, #16]
 8008368:	2b01      	cmp	r3, #1
 800836a:	f340 8092 	ble.w	8008492 <_strtod_l+0x92a>
 800836e:	4629      	mov	r1, r5
 8008370:	2201      	movs	r2, #1
 8008372:	4620      	mov	r0, r4
 8008374:	f001 fe1a 	bl	8009fac <__lshift>
 8008378:	4631      	mov	r1, r6
 800837a:	4605      	mov	r5, r0
 800837c:	f001 fe82 	bl	800a084 <__mcmp>
 8008380:	2800      	cmp	r0, #0
 8008382:	f340 8086 	ble.w	8008492 <_strtod_l+0x92a>
 8008386:	9904      	ldr	r1, [sp, #16]
 8008388:	4a2b      	ldr	r2, [pc, #172]	; (8008438 <_strtod_l+0x8d0>)
 800838a:	464b      	mov	r3, r9
 800838c:	2900      	cmp	r1, #0
 800838e:	f000 80a1 	beq.w	80084d4 <_strtod_l+0x96c>
 8008392:	ea02 0109 	and.w	r1, r2, r9
 8008396:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800839a:	f300 809b 	bgt.w	80084d4 <_strtod_l+0x96c>
 800839e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80083a2:	f77f aea2 	ble.w	80080ea <_strtod_l+0x582>
 80083a6:	4a25      	ldr	r2, [pc, #148]	; (800843c <_strtod_l+0x8d4>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80083ae:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80083b2:	ec49 8b17 	vmov	d7, r8, r9
 80083b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083be:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	bf08      	it	eq
 80083c6:	2322      	moveq	r3, #34	; 0x22
 80083c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80083cc:	bf08      	it	eq
 80083ce:	6023      	streq	r3, [r4, #0]
 80083d0:	e620      	b.n	8008014 <_strtod_l+0x4ac>
 80083d2:	f04f 31ff 	mov.w	r1, #4294967295
 80083d6:	fa01 f202 	lsl.w	r2, r1, r2
 80083da:	ea02 0808 	and.w	r8, r2, r8
 80083de:	e6d4      	b.n	800818a <_strtod_l+0x622>
 80083e0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80083e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80083e8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80083ec:	33e2      	adds	r3, #226	; 0xe2
 80083ee:	fa00 f303 	lsl.w	r3, r0, r3
 80083f2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80083f6:	e73b      	b.n	8008270 <_strtod_l+0x708>
 80083f8:	2000      	movs	r0, #0
 80083fa:	2301      	movs	r3, #1
 80083fc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008400:	e736      	b.n	8008270 <_strtod_l+0x708>
 8008402:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008404:	461a      	mov	r2, r3
 8008406:	4620      	mov	r0, r4
 8008408:	f001 fdd0 	bl	8009fac <__lshift>
 800840c:	9018      	str	r0, [sp, #96]	; 0x60
 800840e:	2800      	cmp	r0, #0
 8008410:	f47f af60 	bne.w	80082d4 <_strtod_l+0x76c>
 8008414:	e5f4      	b.n	8008000 <_strtod_l+0x498>
 8008416:	bf00      	nop
 8008418:	94a03595 	.word	0x94a03595
 800841c:	3fcfffff 	.word	0x3fcfffff
 8008420:	94a03595 	.word	0x94a03595
 8008424:	3fdfffff 	.word	0x3fdfffff
 8008428:	35afe535 	.word	0x35afe535
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	0800b6a0 	.word	0x0800b6a0
 8008434:	fffffc02 	.word	0xfffffc02
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	39500000 	.word	0x39500000
 8008440:	46cb      	mov	fp, r9
 8008442:	d165      	bne.n	8008510 <_strtod_l+0x9a8>
 8008444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008448:	f1ba 0f00 	cmp.w	sl, #0
 800844c:	d02a      	beq.n	80084a4 <_strtod_l+0x93c>
 800844e:	4aaa      	ldr	r2, [pc, #680]	; (80086f8 <_strtod_l+0xb90>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d12b      	bne.n	80084ac <_strtod_l+0x944>
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	4641      	mov	r1, r8
 8008458:	b1fb      	cbz	r3, 800849a <_strtod_l+0x932>
 800845a:	4aa8      	ldr	r2, [pc, #672]	; (80086fc <_strtod_l+0xb94>)
 800845c:	ea09 0202 	and.w	r2, r9, r2
 8008460:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	d81a      	bhi.n	80084a0 <_strtod_l+0x938>
 800846a:	0d12      	lsrs	r2, r2, #20
 800846c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008470:	fa00 f303 	lsl.w	r3, r0, r3
 8008474:	4299      	cmp	r1, r3
 8008476:	d119      	bne.n	80084ac <_strtod_l+0x944>
 8008478:	4ba1      	ldr	r3, [pc, #644]	; (8008700 <_strtod_l+0xb98>)
 800847a:	459b      	cmp	fp, r3
 800847c:	d102      	bne.n	8008484 <_strtod_l+0x91c>
 800847e:	3101      	adds	r1, #1
 8008480:	f43f adbe 	beq.w	8008000 <_strtod_l+0x498>
 8008484:	4b9d      	ldr	r3, [pc, #628]	; (80086fc <_strtod_l+0xb94>)
 8008486:	ea0b 0303 	and.w	r3, fp, r3
 800848a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800848e:	f04f 0800 	mov.w	r8, #0
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d186      	bne.n	80083a6 <_strtod_l+0x83e>
 8008498:	e5bc      	b.n	8008014 <_strtod_l+0x4ac>
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e7e9      	b.n	8008474 <_strtod_l+0x90c>
 80084a0:	4603      	mov	r3, r0
 80084a2:	e7e7      	b.n	8008474 <_strtod_l+0x90c>
 80084a4:	ea53 0308 	orrs.w	r3, r3, r8
 80084a8:	f43f af6d 	beq.w	8008386 <_strtod_l+0x81e>
 80084ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ae:	b1db      	cbz	r3, 80084e8 <_strtod_l+0x980>
 80084b0:	ea13 0f0b 	tst.w	r3, fp
 80084b4:	d0ed      	beq.n	8008492 <_strtod_l+0x92a>
 80084b6:	9a04      	ldr	r2, [sp, #16]
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f1ba 0f00 	cmp.w	sl, #0
 80084c0:	d016      	beq.n	80084f0 <_strtod_l+0x988>
 80084c2:	f7ff fb37 	bl	8007b34 <sulp>
 80084c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80084ca:	ee37 7b00 	vadd.f64	d7, d7, d0
 80084ce:	ec59 8b17 	vmov	r8, r9, d7
 80084d2:	e7de      	b.n	8008492 <_strtod_l+0x92a>
 80084d4:	4013      	ands	r3, r2
 80084d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80084de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80084e2:	f04f 38ff 	mov.w	r8, #4294967295
 80084e6:	e7d4      	b.n	8008492 <_strtod_l+0x92a>
 80084e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ea:	ea13 0f08 	tst.w	r3, r8
 80084ee:	e7e1      	b.n	80084b4 <_strtod_l+0x94c>
 80084f0:	f7ff fb20 	bl	8007b34 <sulp>
 80084f4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80084f8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80084fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008500:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800850c:	d1c1      	bne.n	8008492 <_strtod_l+0x92a>
 800850e:	e5ec      	b.n	80080ea <_strtod_l+0x582>
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	f001 ff32 	bl	800a37c <__ratio>
 8008518:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800851c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008524:	d867      	bhi.n	80085f6 <_strtod_l+0xa8e>
 8008526:	f1ba 0f00 	cmp.w	sl, #0
 800852a:	d044      	beq.n	80085b6 <_strtod_l+0xa4e>
 800852c:	4b75      	ldr	r3, [pc, #468]	; (8008704 <_strtod_l+0xb9c>)
 800852e:	2200      	movs	r2, #0
 8008530:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008534:	4971      	ldr	r1, [pc, #452]	; (80086fc <_strtod_l+0xb94>)
 8008536:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008710 <_strtod_l+0xba8>
 800853a:	ea0b 0001 	and.w	r0, fp, r1
 800853e:	4560      	cmp	r0, ip
 8008540:	900d      	str	r0, [sp, #52]	; 0x34
 8008542:	f040 808b 	bne.w	800865c <_strtod_l+0xaf4>
 8008546:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800854a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800854e:	ec49 8b10 	vmov	d0, r8, r9
 8008552:	ec43 2b1c 	vmov	d12, r2, r3
 8008556:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800855a:	f001 fe37 	bl	800a1cc <__ulp>
 800855e:	ec49 8b1d 	vmov	d13, r8, r9
 8008562:	eeac db00 	vfma.f64	d13, d12, d0
 8008566:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800856a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800856c:	4963      	ldr	r1, [pc, #396]	; (80086fc <_strtod_l+0xb94>)
 800856e:	4a66      	ldr	r2, [pc, #408]	; (8008708 <_strtod_l+0xba0>)
 8008570:	4019      	ands	r1, r3
 8008572:	4291      	cmp	r1, r2
 8008574:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008578:	d947      	bls.n	800860a <_strtod_l+0xaa2>
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008580:	4293      	cmp	r3, r2
 8008582:	d103      	bne.n	800858c <_strtod_l+0xa24>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	3301      	adds	r3, #1
 8008588:	f43f ad3a 	beq.w	8008000 <_strtod_l+0x498>
 800858c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008700 <_strtod_l+0xb98>
 8008590:	f04f 38ff 	mov.w	r8, #4294967295
 8008594:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008596:	4620      	mov	r0, r4
 8008598:	f001 faec 	bl	8009b74 <_Bfree>
 800859c:	4639      	mov	r1, r7
 800859e:	4620      	mov	r0, r4
 80085a0:	f001 fae8 	bl	8009b74 <_Bfree>
 80085a4:	4631      	mov	r1, r6
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 fae4 	bl	8009b74 <_Bfree>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	f001 fae0 	bl	8009b74 <_Bfree>
 80085b4:	e60f      	b.n	80081d6 <_strtod_l+0x66e>
 80085b6:	f1b8 0f00 	cmp.w	r8, #0
 80085ba:	d112      	bne.n	80085e2 <_strtod_l+0xa7a>
 80085bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085c0:	b9b3      	cbnz	r3, 80085f0 <_strtod_l+0xa88>
 80085c2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80085c6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80085d2:	d401      	bmi.n	80085d8 <_strtod_l+0xa70>
 80085d4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80085d8:	eeb1 7b48 	vneg.f64	d7, d8
 80085dc:	ec53 2b17 	vmov	r2, r3, d7
 80085e0:	e7a8      	b.n	8008534 <_strtod_l+0x9cc>
 80085e2:	f1b8 0f01 	cmp.w	r8, #1
 80085e6:	d103      	bne.n	80085f0 <_strtod_l+0xa88>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	f43f ad7d 	beq.w	80080ea <_strtod_l+0x582>
 80085f0:	4b46      	ldr	r3, [pc, #280]	; (800870c <_strtod_l+0xba4>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	e79c      	b.n	8008530 <_strtod_l+0x9c8>
 80085f6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80085fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80085fe:	f1ba 0f00 	cmp.w	sl, #0
 8008602:	d0e9      	beq.n	80085d8 <_strtod_l+0xa70>
 8008604:	ec53 2b18 	vmov	r2, r3, d8
 8008608:	e794      	b.n	8008534 <_strtod_l+0x9cc>
 800860a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1bf      	bne.n	8008594 <_strtod_l+0xa2c>
 8008614:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800861a:	0d1b      	lsrs	r3, r3, #20
 800861c:	051b      	lsls	r3, r3, #20
 800861e:	429a      	cmp	r2, r3
 8008620:	d1b8      	bne.n	8008594 <_strtod_l+0xa2c>
 8008622:	ec51 0b18 	vmov	r0, r1, d8
 8008626:	f7f8 f837 	bl	8000698 <__aeabi_d2lz>
 800862a:	f7f7 ffef 	bl	800060c <__aeabi_l2d>
 800862e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008632:	ec41 0b17 	vmov	d7, r0, r1
 8008636:	ea43 0308 	orr.w	r3, r3, r8
 800863a:	ea53 030a 	orrs.w	r3, r3, sl
 800863e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008642:	d03e      	beq.n	80086c2 <_strtod_l+0xb5a>
 8008644:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864c:	f53f ace2 	bmi.w	8008014 <_strtod_l+0x4ac>
 8008650:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8008654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008658:	dd9c      	ble.n	8008594 <_strtod_l+0xa2c>
 800865a:	e4db      	b.n	8008014 <_strtod_l+0x4ac>
 800865c:	9904      	ldr	r1, [sp, #16]
 800865e:	b301      	cbz	r1, 80086a2 <_strtod_l+0xb3a>
 8008660:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008662:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008666:	d81c      	bhi.n	80086a2 <_strtod_l+0xb3a>
 8008668:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80086f0 <_strtod_l+0xb88>
 800866c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	d811      	bhi.n	800869a <_strtod_l+0xb32>
 8008676:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800867a:	ee18 3a10 	vmov	r3, s16
 800867e:	2b01      	cmp	r3, #1
 8008680:	bf38      	it	cc
 8008682:	2301      	movcc	r3, #1
 8008684:	ee08 3a10 	vmov	s16, r3
 8008688:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800868c:	f1ba 0f00 	cmp.w	sl, #0
 8008690:	d114      	bne.n	80086bc <_strtod_l+0xb54>
 8008692:	eeb1 7b48 	vneg.f64	d7, d8
 8008696:	ec53 2b17 	vmov	r2, r3, d7
 800869a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800869c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80086a0:	1a0b      	subs	r3, r1, r0
 80086a2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80086a6:	ec43 2b1c 	vmov	d12, r2, r3
 80086aa:	f001 fd8f 	bl	800a1cc <__ulp>
 80086ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80086b2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80086b6:	ec59 8b17 	vmov	r8, r9, d7
 80086ba:	e7a8      	b.n	800860e <_strtod_l+0xaa6>
 80086bc:	ec53 2b18 	vmov	r2, r3, d8
 80086c0:	e7eb      	b.n	800869a <_strtod_l+0xb32>
 80086c2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	f57f af63 	bpl.w	8008594 <_strtod_l+0xa2c>
 80086ce:	e4a1      	b.n	8008014 <_strtod_l+0x4ac>
 80086d0:	2300      	movs	r3, #0
 80086d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	f7ff ba8d 	b.w	8007bf8 <_strtod_l+0x90>
 80086de:	2a65      	cmp	r2, #101	; 0x65
 80086e0:	f43f ab89 	beq.w	8007df6 <_strtod_l+0x28e>
 80086e4:	2a45      	cmp	r2, #69	; 0x45
 80086e6:	f43f ab86 	beq.w	8007df6 <_strtod_l+0x28e>
 80086ea:	2101      	movs	r1, #1
 80086ec:	f7ff bbbe 	b.w	8007e6c <_strtod_l+0x304>
 80086f0:	ffc00000 	.word	0xffc00000
 80086f4:	41dfffff 	.word	0x41dfffff
 80086f8:	000fffff 	.word	0x000fffff
 80086fc:	7ff00000 	.word	0x7ff00000
 8008700:	7fefffff 	.word	0x7fefffff
 8008704:	3ff00000 	.word	0x3ff00000
 8008708:	7c9fffff 	.word	0x7c9fffff
 800870c:	bff00000 	.word	0xbff00000
 8008710:	7fe00000 	.word	0x7fe00000
 8008714:	00000000 	.word	0x00000000

08008718 <strtof>:
 8008718:	b510      	push	{r4, lr}
 800871a:	4c1d      	ldr	r4, [pc, #116]	; (8008790 <strtof+0x78>)
 800871c:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <strtof+0x7c>)
 800871e:	460a      	mov	r2, r1
 8008720:	4601      	mov	r1, r0
 8008722:	6820      	ldr	r0, [r4, #0]
 8008724:	f7ff fa20 	bl	8007b68 <_strtod_l>
 8008728:	eeb4 0b40 	vcmp.f64	d0, d0
 800872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008730:	eeb0 7b40 	vmov.f64	d7, d0
 8008734:	d70d      	bvc.n	8008752 <strtof+0x3a>
 8008736:	ee17 3a90 	vmov	r3, s15
 800873a:	2b00      	cmp	r3, #0
 800873c:	4816      	ldr	r0, [pc, #88]	; (8008798 <strtof+0x80>)
 800873e:	da04      	bge.n	800874a <strtof+0x32>
 8008740:	f002 f8c2 	bl	800a8c8 <nanf>
 8008744:	eeb1 0a40 	vneg.f32	s0, s0
 8008748:	bd10      	pop	{r4, pc}
 800874a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800874e:	f002 b8bb 	b.w	800a8c8 <nanf>
 8008752:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008756:	eddf 6a11 	vldr	s13, [pc, #68]	; 800879c <strtof+0x84>
 800875a:	eeb0 6ac0 	vabs.f32	s12, s0
 800875e:	eeb4 6a66 	vcmp.f32	s12, s13
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	ddef      	ble.n	8008748 <strtof+0x30>
 8008768:	eeb0 7bc7 	vabs.f64	d7, d7
 800876c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8008788 <strtof+0x70>
 8008770:	eeb4 7b46 	vcmp.f64	d7, d6
 8008774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008778:	bfde      	ittt	le
 800877a:	6823      	ldrle	r3, [r4, #0]
 800877c:	2222      	movle	r2, #34	; 0x22
 800877e:	601a      	strle	r2, [r3, #0]
 8008780:	e7e2      	b.n	8008748 <strtof+0x30>
 8008782:	bf00      	nop
 8008784:	f3af 8000 	nop.w
 8008788:	ffffffff 	.word	0xffffffff
 800878c:	7fefffff 	.word	0x7fefffff
 8008790:	20000048 	.word	0x20000048
 8008794:	200000b0 	.word	0x200000b0
 8008798:	0800b988 	.word	0x0800b988
 800879c:	7f7fffff 	.word	0x7f7fffff

080087a0 <quorem>:
 80087a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	6903      	ldr	r3, [r0, #16]
 80087a6:	690c      	ldr	r4, [r1, #16]
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	4607      	mov	r7, r0
 80087ac:	f2c0 8081 	blt.w	80088b2 <quorem+0x112>
 80087b0:	3c01      	subs	r4, #1
 80087b2:	f101 0814 	add.w	r8, r1, #20
 80087b6:	f100 0514 	add.w	r5, r0, #20
 80087ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c8:	3301      	adds	r3, #1
 80087ca:	429a      	cmp	r2, r3
 80087cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80087d8:	d331      	bcc.n	800883e <quorem+0x9e>
 80087da:	f04f 0e00 	mov.w	lr, #0
 80087de:	4640      	mov	r0, r8
 80087e0:	46ac      	mov	ip, r5
 80087e2:	46f2      	mov	sl, lr
 80087e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80087e8:	b293      	uxth	r3, r2
 80087ea:	fb06 e303 	mla	r3, r6, r3, lr
 80087ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ebaa 0303 	sub.w	r3, sl, r3
 80087f8:	0c12      	lsrs	r2, r2, #16
 80087fa:	f8dc a000 	ldr.w	sl, [ip]
 80087fe:	fb06 e202 	mla	r2, r6, r2, lr
 8008802:	fa13 f38a 	uxtah	r3, r3, sl
 8008806:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800880a:	fa1f fa82 	uxth.w	sl, r2
 800880e:	f8dc 2000 	ldr.w	r2, [ip]
 8008812:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008816:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800881a:	b29b      	uxth	r3, r3
 800881c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008820:	4581      	cmp	r9, r0
 8008822:	f84c 3b04 	str.w	r3, [ip], #4
 8008826:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800882a:	d2db      	bcs.n	80087e4 <quorem+0x44>
 800882c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008830:	b92b      	cbnz	r3, 800883e <quorem+0x9e>
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	3b04      	subs	r3, #4
 8008836:	429d      	cmp	r5, r3
 8008838:	461a      	mov	r2, r3
 800883a:	d32e      	bcc.n	800889a <quorem+0xfa>
 800883c:	613c      	str	r4, [r7, #16]
 800883e:	4638      	mov	r0, r7
 8008840:	f001 fc20 	bl	800a084 <__mcmp>
 8008844:	2800      	cmp	r0, #0
 8008846:	db24      	blt.n	8008892 <quorem+0xf2>
 8008848:	3601      	adds	r6, #1
 800884a:	4628      	mov	r0, r5
 800884c:	f04f 0c00 	mov.w	ip, #0
 8008850:	f858 2b04 	ldr.w	r2, [r8], #4
 8008854:	f8d0 e000 	ldr.w	lr, [r0]
 8008858:	b293      	uxth	r3, r2
 800885a:	ebac 0303 	sub.w	r3, ip, r3
 800885e:	0c12      	lsrs	r2, r2, #16
 8008860:	fa13 f38e 	uxtah	r3, r3, lr
 8008864:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800886c:	b29b      	uxth	r3, r3
 800886e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008872:	45c1      	cmp	r9, r8
 8008874:	f840 3b04 	str.w	r3, [r0], #4
 8008878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800887c:	d2e8      	bcs.n	8008850 <quorem+0xb0>
 800887e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008886:	b922      	cbnz	r2, 8008892 <quorem+0xf2>
 8008888:	3b04      	subs	r3, #4
 800888a:	429d      	cmp	r5, r3
 800888c:	461a      	mov	r2, r3
 800888e:	d30a      	bcc.n	80088a6 <quorem+0x106>
 8008890:	613c      	str	r4, [r7, #16]
 8008892:	4630      	mov	r0, r6
 8008894:	b003      	add	sp, #12
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	3b04      	subs	r3, #4
 800889e:	2a00      	cmp	r2, #0
 80088a0:	d1cc      	bne.n	800883c <quorem+0x9c>
 80088a2:	3c01      	subs	r4, #1
 80088a4:	e7c7      	b.n	8008836 <quorem+0x96>
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	3b04      	subs	r3, #4
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	d1f0      	bne.n	8008890 <quorem+0xf0>
 80088ae:	3c01      	subs	r4, #1
 80088b0:	e7eb      	b.n	800888a <quorem+0xea>
 80088b2:	2000      	movs	r0, #0
 80088b4:	e7ee      	b.n	8008894 <quorem+0xf4>
	...

080088b8 <_dtoa_r>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	ec59 8b10 	vmov	r8, r9, d0
 80088c0:	b095      	sub	sp, #84	; 0x54
 80088c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088c4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80088c6:	9107      	str	r1, [sp, #28]
 80088c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80088cc:	4606      	mov	r6, r0
 80088ce:	9209      	str	r2, [sp, #36]	; 0x24
 80088d0:	9310      	str	r3, [sp, #64]	; 0x40
 80088d2:	b975      	cbnz	r5, 80088f2 <_dtoa_r+0x3a>
 80088d4:	2010      	movs	r0, #16
 80088d6:	f001 f8e5 	bl	8009aa4 <malloc>
 80088da:	4602      	mov	r2, r0
 80088dc:	6270      	str	r0, [r6, #36]	; 0x24
 80088de:	b920      	cbnz	r0, 80088ea <_dtoa_r+0x32>
 80088e0:	4bab      	ldr	r3, [pc, #684]	; (8008b90 <_dtoa_r+0x2d8>)
 80088e2:	21ea      	movs	r1, #234	; 0xea
 80088e4:	48ab      	ldr	r0, [pc, #684]	; (8008b94 <_dtoa_r+0x2dc>)
 80088e6:	f002 f815 	bl	800a914 <__assert_func>
 80088ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088ee:	6005      	str	r5, [r0, #0]
 80088f0:	60c5      	str	r5, [r0, #12]
 80088f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80088f4:	6819      	ldr	r1, [r3, #0]
 80088f6:	b151      	cbz	r1, 800890e <_dtoa_r+0x56>
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	604a      	str	r2, [r1, #4]
 80088fc:	2301      	movs	r3, #1
 80088fe:	4093      	lsls	r3, r2
 8008900:	608b      	str	r3, [r1, #8]
 8008902:	4630      	mov	r0, r6
 8008904:	f001 f936 	bl	8009b74 <_Bfree>
 8008908:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f1b9 0300 	subs.w	r3, r9, #0
 8008912:	bfbb      	ittet	lt
 8008914:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008918:	9303      	strlt	r3, [sp, #12]
 800891a:	2300      	movge	r3, #0
 800891c:	2201      	movlt	r2, #1
 800891e:	bfac      	ite	ge
 8008920:	6023      	strge	r3, [r4, #0]
 8008922:	6022      	strlt	r2, [r4, #0]
 8008924:	4b9c      	ldr	r3, [pc, #624]	; (8008b98 <_dtoa_r+0x2e0>)
 8008926:	9c03      	ldr	r4, [sp, #12]
 8008928:	43a3      	bics	r3, r4
 800892a:	d11a      	bne.n	8008962 <_dtoa_r+0xaa>
 800892c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800892e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008938:	ea53 0308 	orrs.w	r3, r3, r8
 800893c:	f000 8512 	beq.w	8009364 <_dtoa_r+0xaac>
 8008940:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008942:	b953      	cbnz	r3, 800895a <_dtoa_r+0xa2>
 8008944:	4b95      	ldr	r3, [pc, #596]	; (8008b9c <_dtoa_r+0x2e4>)
 8008946:	e01f      	b.n	8008988 <_dtoa_r+0xd0>
 8008948:	4b95      	ldr	r3, [pc, #596]	; (8008ba0 <_dtoa_r+0x2e8>)
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	9800      	ldr	r0, [sp, #0]
 8008954:	b015      	add	sp, #84	; 0x54
 8008956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895a:	4b90      	ldr	r3, [pc, #576]	; (8008b9c <_dtoa_r+0x2e4>)
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	3303      	adds	r3, #3
 8008960:	e7f5      	b.n	800894e <_dtoa_r+0x96>
 8008962:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800896a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008972:	d10b      	bne.n	800898c <_dtoa_r+0xd4>
 8008974:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008976:	2301      	movs	r3, #1
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 84ee 	beq.w	800935e <_dtoa_r+0xaa6>
 8008982:	4888      	ldr	r0, [pc, #544]	; (8008ba4 <_dtoa_r+0x2ec>)
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	1e43      	subs	r3, r0, #1
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	e7e2      	b.n	8008952 <_dtoa_r+0x9a>
 800898c:	a913      	add	r1, sp, #76	; 0x4c
 800898e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008992:	aa12      	add	r2, sp, #72	; 0x48
 8008994:	4630      	mov	r0, r6
 8008996:	f001 fc95 	bl	800a2c4 <__d2b>
 800899a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800899e:	4605      	mov	r5, r0
 80089a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d047      	beq.n	8008a36 <_dtoa_r+0x17e>
 80089a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80089a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80089ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089b0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80089b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089b8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80089bc:	2400      	movs	r4, #0
 80089be:	ec43 2b16 	vmov	d6, r2, r3
 80089c2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80089c6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008b78 <_dtoa_r+0x2c0>
 80089ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089ce:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008b80 <_dtoa_r+0x2c8>
 80089d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80089d6:	eeb0 7b46 	vmov.f64	d7, d6
 80089da:	ee06 1a90 	vmov	s13, r1
 80089de:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80089e2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008b88 <_dtoa_r+0x2d0>
 80089e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80089ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80089f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f6:	ee16 ba90 	vmov	fp, s13
 80089fa:	9411      	str	r4, [sp, #68]	; 0x44
 80089fc:	d508      	bpl.n	8008a10 <_dtoa_r+0x158>
 80089fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008a02:	eeb4 6b47 	vcmp.f64	d6, d7
 8008a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0a:	bf18      	it	ne
 8008a0c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008a10:	f1bb 0f16 	cmp.w	fp, #22
 8008a14:	d832      	bhi.n	8008a7c <_dtoa_r+0x1c4>
 8008a16:	4b64      	ldr	r3, [pc, #400]	; (8008ba8 <_dtoa_r+0x2f0>)
 8008a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a1c:	ed93 7b00 	vldr	d7, [r3]
 8008a20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008a24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2c:	d501      	bpl.n	8008a32 <_dtoa_r+0x17a>
 8008a2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a32:	2300      	movs	r3, #0
 8008a34:	e023      	b.n	8008a7e <_dtoa_r+0x1c6>
 8008a36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a38:	4401      	add	r1, r0
 8008a3a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	bfc3      	ittte	gt
 8008a42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a46:	fa04 f303 	lslgt.w	r3, r4, r3
 8008a4a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008a4e:	f1c3 0320 	rsble	r3, r3, #32
 8008a52:	bfc6      	itte	gt
 8008a54:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008a58:	ea43 0308 	orrgt.w	r3, r3, r8
 8008a5c:	fa08 f303 	lslle.w	r3, r8, r3
 8008a60:	ee07 3a90 	vmov	s15, r3
 8008a64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a68:	3901      	subs	r1, #1
 8008a6a:	ed8d 7b00 	vstr	d7, [sp]
 8008a6e:	9c01      	ldr	r4, [sp, #4]
 8008a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008a78:	2401      	movs	r4, #1
 8008a7a:	e7a0      	b.n	80089be <_dtoa_r+0x106>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a80:	1a43      	subs	r3, r0, r1
 8008a82:	1e5a      	subs	r2, r3, #1
 8008a84:	bf45      	ittet	mi
 8008a86:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a8a:	9305      	strmi	r3, [sp, #20]
 8008a8c:	2300      	movpl	r3, #0
 8008a8e:	2300      	movmi	r3, #0
 8008a90:	9206      	str	r2, [sp, #24]
 8008a92:	bf54      	ite	pl
 8008a94:	9305      	strpl	r3, [sp, #20]
 8008a96:	9306      	strmi	r3, [sp, #24]
 8008a98:	f1bb 0f00 	cmp.w	fp, #0
 8008a9c:	db18      	blt.n	8008ad0 <_dtoa_r+0x218>
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008aa4:	445b      	add	r3, fp
 8008aa6:	9306      	str	r3, [sp, #24]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d849      	bhi.n	8008b44 <_dtoa_r+0x28c>
 8008ab0:	2a05      	cmp	r2, #5
 8008ab2:	bfc4      	itt	gt
 8008ab4:	3a04      	subgt	r2, #4
 8008ab6:	9207      	strgt	r2, [sp, #28]
 8008ab8:	9a07      	ldr	r2, [sp, #28]
 8008aba:	f1a2 0202 	sub.w	r2, r2, #2
 8008abe:	bfcc      	ite	gt
 8008ac0:	2400      	movgt	r4, #0
 8008ac2:	2401      	movle	r4, #1
 8008ac4:	2a03      	cmp	r2, #3
 8008ac6:	d848      	bhi.n	8008b5a <_dtoa_r+0x2a2>
 8008ac8:	e8df f002 	tbb	[pc, r2]
 8008acc:	3a2c2e0b 	.word	0x3a2c2e0b
 8008ad0:	9b05      	ldr	r3, [sp, #20]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	eba3 030b 	sub.w	r3, r3, fp
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	920e      	str	r2, [sp, #56]	; 0x38
 8008adc:	f1cb 0300 	rsb	r3, fp, #0
 8008ae0:	e7e3      	b.n	8008aaa <_dtoa_r+0x1f2>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	9208      	str	r2, [sp, #32]
 8008ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	dc39      	bgt.n	8008b60 <_dtoa_r+0x2a8>
 8008aec:	f04f 0a01 	mov.w	sl, #1
 8008af0:	46d1      	mov	r9, sl
 8008af2:	4652      	mov	r2, sl
 8008af4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008af8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008afa:	2100      	movs	r1, #0
 8008afc:	6079      	str	r1, [r7, #4]
 8008afe:	2004      	movs	r0, #4
 8008b00:	f100 0c14 	add.w	ip, r0, #20
 8008b04:	4594      	cmp	ip, r2
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	d92f      	bls.n	8008b6a <_dtoa_r+0x2b2>
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8008b0e:	f000 fff1 	bl	8009af4 <_Balloc>
 8008b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b14:	9000      	str	r0, [sp, #0]
 8008b16:	4602      	mov	r2, r0
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d149      	bne.n	8008bb0 <_dtoa_r+0x2f8>
 8008b1c:	4b23      	ldr	r3, [pc, #140]	; (8008bac <_dtoa_r+0x2f4>)
 8008b1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b22:	e6df      	b.n	80088e4 <_dtoa_r+0x2c>
 8008b24:	2201      	movs	r2, #1
 8008b26:	e7dd      	b.n	8008ae4 <_dtoa_r+0x22c>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	9208      	str	r2, [sp, #32]
 8008b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b2e:	eb0b 0a02 	add.w	sl, fp, r2
 8008b32:	f10a 0901 	add.w	r9, sl, #1
 8008b36:	464a      	mov	r2, r9
 8008b38:	2a01      	cmp	r2, #1
 8008b3a:	bfb8      	it	lt
 8008b3c:	2201      	movlt	r2, #1
 8008b3e:	e7db      	b.n	8008af8 <_dtoa_r+0x240>
 8008b40:	2201      	movs	r2, #1
 8008b42:	e7f2      	b.n	8008b2a <_dtoa_r+0x272>
 8008b44:	2401      	movs	r4, #1
 8008b46:	2200      	movs	r2, #0
 8008b48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008b50:	2100      	movs	r1, #0
 8008b52:	46d1      	mov	r9, sl
 8008b54:	2212      	movs	r2, #18
 8008b56:	9109      	str	r1, [sp, #36]	; 0x24
 8008b58:	e7ce      	b.n	8008af8 <_dtoa_r+0x240>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	9208      	str	r2, [sp, #32]
 8008b5e:	e7f5      	b.n	8008b4c <_dtoa_r+0x294>
 8008b60:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008b64:	46d1      	mov	r9, sl
 8008b66:	4652      	mov	r2, sl
 8008b68:	e7c6      	b.n	8008af8 <_dtoa_r+0x240>
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	6079      	str	r1, [r7, #4]
 8008b6e:	0040      	lsls	r0, r0, #1
 8008b70:	e7c6      	b.n	8008b00 <_dtoa_r+0x248>
 8008b72:	bf00      	nop
 8008b74:	f3af 8000 	nop.w
 8008b78:	636f4361 	.word	0x636f4361
 8008b7c:	3fd287a7 	.word	0x3fd287a7
 8008b80:	8b60c8b3 	.word	0x8b60c8b3
 8008b84:	3fc68a28 	.word	0x3fc68a28
 8008b88:	509f79fb 	.word	0x509f79fb
 8008b8c:	3fd34413 	.word	0x3fd34413
 8008b90:	0800b6d5 	.word	0x0800b6d5
 8008b94:	0800b6ec 	.word	0x0800b6ec
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	0800b6d1 	.word	0x0800b6d1
 8008ba0:	0800b6c8 	.word	0x0800b6c8
 8008ba4:	0800b651 	.word	0x0800b651
 8008ba8:	0800b868 	.word	0x0800b868
 8008bac:	0800b74b 	.word	0x0800b74b
 8008bb0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008bb2:	9900      	ldr	r1, [sp, #0]
 8008bb4:	6011      	str	r1, [r2, #0]
 8008bb6:	f1b9 0f0e 	cmp.w	r9, #14
 8008bba:	d872      	bhi.n	8008ca2 <_dtoa_r+0x3ea>
 8008bbc:	2c00      	cmp	r4, #0
 8008bbe:	d070      	beq.n	8008ca2 <_dtoa_r+0x3ea>
 8008bc0:	f1bb 0f00 	cmp.w	fp, #0
 8008bc4:	f340 80a6 	ble.w	8008d14 <_dtoa_r+0x45c>
 8008bc8:	49ca      	ldr	r1, [pc, #808]	; (8008ef4 <_dtoa_r+0x63c>)
 8008bca:	f00b 020f 	and.w	r2, fp, #15
 8008bce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008bd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008bd6:	ed92 7b00 	vldr	d7, [r2]
 8008bda:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008bde:	f000 808d 	beq.w	8008cfc <_dtoa_r+0x444>
 8008be2:	4ac5      	ldr	r2, [pc, #788]	; (8008ef8 <_dtoa_r+0x640>)
 8008be4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008be8:	ed92 6b08 	vldr	d6, [r2, #32]
 8008bec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008bf0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008bf4:	f001 010f 	and.w	r1, r1, #15
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	48bf      	ldr	r0, [pc, #764]	; (8008ef8 <_dtoa_r+0x640>)
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d17f      	bne.n	8008d00 <_dtoa_r+0x448>
 8008c00:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008c04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	f000 80b2 	beq.w	8008d78 <_dtoa_r+0x4c0>
 8008c14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008c18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	f140 80a8 	bpl.w	8008d78 <_dtoa_r+0x4c0>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	f000 80a4 	beq.w	8008d78 <_dtoa_r+0x4c0>
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	dd31      	ble.n	8008c9a <_dtoa_r+0x3e2>
 8008c36:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008c3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c42:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c46:	3201      	adds	r2, #1
 8008c48:	4650      	mov	r0, sl
 8008c4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008c4e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008c52:	ee07 2a90 	vmov	s15, r2
 8008c56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008c5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008c5e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008c62:	9c03      	ldr	r4, [sp, #12]
 8008c64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008c68:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 8086 	bne.w	8008d7e <_dtoa_r+0x4c6>
 8008c72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008c76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008c7a:	ec42 1b17 	vmov	d7, r1, r2
 8008c7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	f300 8272 	bgt.w	800916e <_dtoa_r+0x8b6>
 8008c8a:	eeb1 7b47 	vneg.f64	d7, d7
 8008c8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c96:	f100 8267 	bmi.w	8009168 <_dtoa_r+0x8b0>
 8008c9a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008c9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ca4:	2a00      	cmp	r2, #0
 8008ca6:	f2c0 8129 	blt.w	8008efc <_dtoa_r+0x644>
 8008caa:	f1bb 0f0e 	cmp.w	fp, #14
 8008cae:	f300 8125 	bgt.w	8008efc <_dtoa_r+0x644>
 8008cb2:	4b90      	ldr	r3, [pc, #576]	; (8008ef4 <_dtoa_r+0x63c>)
 8008cb4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cb8:	ed93 6b00 	vldr	d6, [r3]
 8008cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f280 80c3 	bge.w	8008e4a <_dtoa_r+0x592>
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	f300 80bf 	bgt.w	8008e4a <_dtoa_r+0x592>
 8008ccc:	f040 824c 	bne.w	8009168 <_dtoa_r+0x8b0>
 8008cd0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008cd4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008cd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce4:	464c      	mov	r4, r9
 8008ce6:	464f      	mov	r7, r9
 8008ce8:	f280 8222 	bge.w	8009130 <_dtoa_r+0x878>
 8008cec:	f8dd 8000 	ldr.w	r8, [sp]
 8008cf0:	2331      	movs	r3, #49	; 0x31
 8008cf2:	f808 3b01 	strb.w	r3, [r8], #1
 8008cf6:	f10b 0b01 	add.w	fp, fp, #1
 8008cfa:	e21e      	b.n	800913a <_dtoa_r+0x882>
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	e77c      	b.n	8008bfa <_dtoa_r+0x342>
 8008d00:	07cc      	lsls	r4, r1, #31
 8008d02:	d504      	bpl.n	8008d0e <_dtoa_r+0x456>
 8008d04:	ed90 6b00 	vldr	d6, [r0]
 8008d08:	3201      	adds	r2, #1
 8008d0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d0e:	1049      	asrs	r1, r1, #1
 8008d10:	3008      	adds	r0, #8
 8008d12:	e773      	b.n	8008bfc <_dtoa_r+0x344>
 8008d14:	d02e      	beq.n	8008d74 <_dtoa_r+0x4bc>
 8008d16:	f1cb 0100 	rsb	r1, fp, #0
 8008d1a:	4a76      	ldr	r2, [pc, #472]	; (8008ef4 <_dtoa_r+0x63c>)
 8008d1c:	f001 000f 	and.w	r0, r1, #15
 8008d20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008d24:	ed92 7b00 	vldr	d7, [r2]
 8008d28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008d2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008d30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008d34:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008d38:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008d3c:	486e      	ldr	r0, [pc, #440]	; (8008ef8 <_dtoa_r+0x640>)
 8008d3e:	1109      	asrs	r1, r1, #4
 8008d40:	2400      	movs	r4, #0
 8008d42:	2202      	movs	r2, #2
 8008d44:	b939      	cbnz	r1, 8008d56 <_dtoa_r+0x49e>
 8008d46:	2c00      	cmp	r4, #0
 8008d48:	f43f af60 	beq.w	8008c0c <_dtoa_r+0x354>
 8008d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d54:	e75a      	b.n	8008c0c <_dtoa_r+0x354>
 8008d56:	07cf      	lsls	r7, r1, #31
 8008d58:	d509      	bpl.n	8008d6e <_dtoa_r+0x4b6>
 8008d5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008d5e:	ed90 7b00 	vldr	d7, [r0]
 8008d62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008d66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	2401      	movs	r4, #1
 8008d6e:	1049      	asrs	r1, r1, #1
 8008d70:	3008      	adds	r0, #8
 8008d72:	e7e7      	b.n	8008d44 <_dtoa_r+0x48c>
 8008d74:	2202      	movs	r2, #2
 8008d76:	e749      	b.n	8008c0c <_dtoa_r+0x354>
 8008d78:	465f      	mov	r7, fp
 8008d7a:	4648      	mov	r0, r9
 8008d7c:	e765      	b.n	8008c4a <_dtoa_r+0x392>
 8008d7e:	ec42 1b17 	vmov	d7, r1, r2
 8008d82:	4a5c      	ldr	r2, [pc, #368]	; (8008ef4 <_dtoa_r+0x63c>)
 8008d84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008d88:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008d8c:	9a00      	ldr	r2, [sp, #0]
 8008d8e:	1814      	adds	r4, r2, r0
 8008d90:	9a08      	ldr	r2, [sp, #32]
 8008d92:	b352      	cbz	r2, 8008dea <_dtoa_r+0x532>
 8008d94:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008d98:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008d9c:	f8dd 8000 	ldr.w	r8, [sp]
 8008da0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008da4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008da8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008dac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008db0:	ee14 2a90 	vmov	r2, s9
 8008db4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008db8:	3230      	adds	r2, #48	; 0x30
 8008dba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc6:	f808 2b01 	strb.w	r2, [r8], #1
 8008dca:	d439      	bmi.n	8008e40 <_dtoa_r+0x588>
 8008dcc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008dd0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd8:	d472      	bmi.n	8008ec0 <_dtoa_r+0x608>
 8008dda:	45a0      	cmp	r8, r4
 8008ddc:	f43f af5d 	beq.w	8008c9a <_dtoa_r+0x3e2>
 8008de0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008de4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008de8:	e7e0      	b.n	8008dac <_dtoa_r+0x4f4>
 8008dea:	f8dd 8000 	ldr.w	r8, [sp]
 8008dee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008df2:	4621      	mov	r1, r4
 8008df4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008df8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008dfc:	ee14 2a90 	vmov	r2, s9
 8008e00:	3230      	adds	r2, #48	; 0x30
 8008e02:	f808 2b01 	strb.w	r2, [r8], #1
 8008e06:	45a0      	cmp	r8, r4
 8008e08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008e0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e10:	d118      	bne.n	8008e44 <_dtoa_r+0x58c>
 8008e12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008e1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e22:	dc4d      	bgt.n	8008ec0 <_dtoa_r+0x608>
 8008e24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e30:	f57f af33 	bpl.w	8008c9a <_dtoa_r+0x3e2>
 8008e34:	4688      	mov	r8, r1
 8008e36:	3901      	subs	r1, #1
 8008e38:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008e3c:	2b30      	cmp	r3, #48	; 0x30
 8008e3e:	d0f9      	beq.n	8008e34 <_dtoa_r+0x57c>
 8008e40:	46bb      	mov	fp, r7
 8008e42:	e02a      	b.n	8008e9a <_dtoa_r+0x5e2>
 8008e44:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008e48:	e7d6      	b.n	8008df8 <_dtoa_r+0x540>
 8008e4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e4e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008e52:	f8dd 8000 	ldr.w	r8, [sp]
 8008e56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008e5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008e5e:	ee15 3a10 	vmov	r3, s10
 8008e62:	3330      	adds	r3, #48	; 0x30
 8008e64:	f808 3b01 	strb.w	r3, [r8], #1
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	eba8 0303 	sub.w	r3, r8, r3
 8008e6e:	4599      	cmp	r9, r3
 8008e70:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008e74:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008e78:	d133      	bne.n	8008ee2 <_dtoa_r+0x62a>
 8008e7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008e7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e86:	dc1a      	bgt.n	8008ebe <_dtoa_r+0x606>
 8008e88:	eeb4 7b46 	vcmp.f64	d7, d6
 8008e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e90:	d103      	bne.n	8008e9a <_dtoa_r+0x5e2>
 8008e92:	ee15 3a10 	vmov	r3, s10
 8008e96:	07d9      	lsls	r1, r3, #31
 8008e98:	d411      	bmi.n	8008ebe <_dtoa_r+0x606>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 fe69 	bl	8009b74 <_Bfree>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ea6:	f888 3000 	strb.w	r3, [r8]
 8008eaa:	f10b 0301 	add.w	r3, fp, #1
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f43f ad4d 	beq.w	8008952 <_dtoa_r+0x9a>
 8008eb8:	f8c3 8000 	str.w	r8, [r3]
 8008ebc:	e549      	b.n	8008952 <_dtoa_r+0x9a>
 8008ebe:	465f      	mov	r7, fp
 8008ec0:	4643      	mov	r3, r8
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ec8:	2a39      	cmp	r2, #57	; 0x39
 8008eca:	d106      	bne.n	8008eda <_dtoa_r+0x622>
 8008ecc:	9a00      	ldr	r2, [sp, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d1f7      	bne.n	8008ec2 <_dtoa_r+0x60a>
 8008ed2:	9900      	ldr	r1, [sp, #0]
 8008ed4:	2230      	movs	r2, #48	; 0x30
 8008ed6:	3701      	adds	r7, #1
 8008ed8:	700a      	strb	r2, [r1, #0]
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	3201      	adds	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	e7ae      	b.n	8008e40 <_dtoa_r+0x588>
 8008ee2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008ee6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	d1b2      	bne.n	8008e56 <_dtoa_r+0x59e>
 8008ef0:	e7d3      	b.n	8008e9a <_dtoa_r+0x5e2>
 8008ef2:	bf00      	nop
 8008ef4:	0800b868 	.word	0x0800b868
 8008ef8:	0800b840 	.word	0x0800b840
 8008efc:	9908      	ldr	r1, [sp, #32]
 8008efe:	2900      	cmp	r1, #0
 8008f00:	f000 80d1 	beq.w	80090a6 <_dtoa_r+0x7ee>
 8008f04:	9907      	ldr	r1, [sp, #28]
 8008f06:	2901      	cmp	r1, #1
 8008f08:	f300 80b4 	bgt.w	8009074 <_dtoa_r+0x7bc>
 8008f0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	f000 80ac 	beq.w	800906c <_dtoa_r+0x7b4>
 8008f14:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008f1c:	461c      	mov	r4, r3
 8008f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	4413      	add	r3, r2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4413      	add	r3, r2
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	9306      	str	r3, [sp, #24]
 8008f30:	f000 ff26 	bl	8009d80 <__i2b>
 8008f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f36:	4607      	mov	r7, r0
 8008f38:	f1b8 0f00 	cmp.w	r8, #0
 8008f3c:	dd0d      	ble.n	8008f5a <_dtoa_r+0x6a2>
 8008f3e:	9a06      	ldr	r2, [sp, #24]
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	dd0a      	ble.n	8008f5a <_dtoa_r+0x6a2>
 8008f44:	4542      	cmp	r2, r8
 8008f46:	9905      	ldr	r1, [sp, #20]
 8008f48:	bfa8      	it	ge
 8008f4a:	4642      	movge	r2, r8
 8008f4c:	1a89      	subs	r1, r1, r2
 8008f4e:	9105      	str	r1, [sp, #20]
 8008f50:	9906      	ldr	r1, [sp, #24]
 8008f52:	eba8 0802 	sub.w	r8, r8, r2
 8008f56:	1a8a      	subs	r2, r1, r2
 8008f58:	9206      	str	r2, [sp, #24]
 8008f5a:	b303      	cbz	r3, 8008f9e <_dtoa_r+0x6e6>
 8008f5c:	9a08      	ldr	r2, [sp, #32]
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	f000 80a6 	beq.w	80090b0 <_dtoa_r+0x7f8>
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	dd13      	ble.n	8008f90 <_dtoa_r+0x6d8>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f70:	f000 ffc2 	bl	8009ef8 <__pow5mult>
 8008f74:	462a      	mov	r2, r5
 8008f76:	4601      	mov	r1, r0
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f000 ff16 	bl	8009dac <__multiply>
 8008f80:	4629      	mov	r1, r5
 8008f82:	900a      	str	r0, [sp, #40]	; 0x28
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 fdf5 	bl	8009b74 <_Bfree>
 8008f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8e:	4615      	mov	r5, r2
 8008f90:	1b1a      	subs	r2, r3, r4
 8008f92:	d004      	beq.n	8008f9e <_dtoa_r+0x6e6>
 8008f94:	4629      	mov	r1, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	f000 ffae 	bl	8009ef8 <__pow5mult>
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 feed 	bl	8009d80 <__i2b>
 8008fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	f340 8082 	ble.w	80090b4 <_dtoa_r+0x7fc>
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 ff9f 	bl	8009ef8 <__pow5mult>
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	dd7b      	ble.n	80090ba <_dtoa_r+0x802>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc6:	6922      	ldr	r2, [r4, #16]
 8008fc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008fcc:	6910      	ldr	r0, [r2, #16]
 8008fce:	f000 fe87 	bl	8009ce0 <__hi0bits>
 8008fd2:	f1c0 0020 	rsb	r0, r0, #32
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	4418      	add	r0, r3
 8008fda:	f010 001f 	ands.w	r0, r0, #31
 8008fde:	f000 808d 	beq.w	80090fc <_dtoa_r+0x844>
 8008fe2:	f1c0 0220 	rsb	r2, r0, #32
 8008fe6:	2a04      	cmp	r2, #4
 8008fe8:	f340 8086 	ble.w	80090f8 <_dtoa_r+0x840>
 8008fec:	f1c0 001c 	rsb	r0, r0, #28
 8008ff0:	9b05      	ldr	r3, [sp, #20]
 8008ff2:	4403      	add	r3, r0
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	4403      	add	r3, r0
 8008ffa:	4480      	add	r8, r0
 8008ffc:	9306      	str	r3, [sp, #24]
 8008ffe:	9b05      	ldr	r3, [sp, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dd05      	ble.n	8009010 <_dtoa_r+0x758>
 8009004:	4629      	mov	r1, r5
 8009006:	461a      	mov	r2, r3
 8009008:	4630      	mov	r0, r6
 800900a:	f000 ffcf 	bl	8009fac <__lshift>
 800900e:	4605      	mov	r5, r0
 8009010:	9b06      	ldr	r3, [sp, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dd05      	ble.n	8009022 <_dtoa_r+0x76a>
 8009016:	4621      	mov	r1, r4
 8009018:	461a      	mov	r2, r3
 800901a:	4630      	mov	r0, r6
 800901c:	f000 ffc6 	bl	8009fac <__lshift>
 8009020:	4604      	mov	r4, r0
 8009022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d06b      	beq.n	8009100 <_dtoa_r+0x848>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f001 f82a 	bl	800a084 <__mcmp>
 8009030:	2800      	cmp	r0, #0
 8009032:	da65      	bge.n	8009100 <_dtoa_r+0x848>
 8009034:	2300      	movs	r3, #0
 8009036:	4629      	mov	r1, r5
 8009038:	220a      	movs	r2, #10
 800903a:	4630      	mov	r0, r6
 800903c:	f000 fdbc 	bl	8009bb8 <__multadd>
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009046:	4605      	mov	r5, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 8192 	beq.w	8009372 <_dtoa_r+0xaba>
 800904e:	4639      	mov	r1, r7
 8009050:	2300      	movs	r3, #0
 8009052:	220a      	movs	r2, #10
 8009054:	4630      	mov	r0, r6
 8009056:	f000 fdaf 	bl	8009bb8 <__multadd>
 800905a:	f1ba 0f00 	cmp.w	sl, #0
 800905e:	4607      	mov	r7, r0
 8009060:	f300 808e 	bgt.w	8009180 <_dtoa_r+0x8c8>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	2b02      	cmp	r3, #2
 8009068:	dc51      	bgt.n	800910e <_dtoa_r+0x856>
 800906a:	e089      	b.n	8009180 <_dtoa_r+0x8c8>
 800906c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800906e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009072:	e751      	b.n	8008f18 <_dtoa_r+0x660>
 8009074:	f109 34ff 	add.w	r4, r9, #4294967295
 8009078:	42a3      	cmp	r3, r4
 800907a:	bfbf      	itttt	lt
 800907c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800907e:	1ae3      	sublt	r3, r4, r3
 8009080:	18d2      	addlt	r2, r2, r3
 8009082:	4613      	movlt	r3, r2
 8009084:	bfb7      	itett	lt
 8009086:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009088:	1b1c      	subge	r4, r3, r4
 800908a:	4623      	movlt	r3, r4
 800908c:	2400      	movlt	r4, #0
 800908e:	f1b9 0f00 	cmp.w	r9, #0
 8009092:	bfb5      	itete	lt
 8009094:	9a05      	ldrlt	r2, [sp, #20]
 8009096:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800909a:	eba2 0809 	sublt.w	r8, r2, r9
 800909e:	464a      	movge	r2, r9
 80090a0:	bfb8      	it	lt
 80090a2:	2200      	movlt	r2, #0
 80090a4:	e73b      	b.n	8008f1e <_dtoa_r+0x666>
 80090a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80090aa:	9f08      	ldr	r7, [sp, #32]
 80090ac:	461c      	mov	r4, r3
 80090ae:	e743      	b.n	8008f38 <_dtoa_r+0x680>
 80090b0:	461a      	mov	r2, r3
 80090b2:	e76f      	b.n	8008f94 <_dtoa_r+0x6dc>
 80090b4:	9b07      	ldr	r3, [sp, #28]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	dc18      	bgt.n	80090ec <_dtoa_r+0x834>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	b9b3      	cbnz	r3, 80090ec <_dtoa_r+0x834>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80090c4:	b9a2      	cbnz	r2, 80090f0 <_dtoa_r+0x838>
 80090c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090ca:	0d12      	lsrs	r2, r2, #20
 80090cc:	0512      	lsls	r2, r2, #20
 80090ce:	b18a      	cbz	r2, 80090f4 <_dtoa_r+0x83c>
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	3301      	adds	r3, #1
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	3301      	adds	r3, #1
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	2301      	movs	r3, #1
 80090de:	930a      	str	r3, [sp, #40]	; 0x28
 80090e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f47f af6f 	bne.w	8008fc6 <_dtoa_r+0x70e>
 80090e8:	2001      	movs	r0, #1
 80090ea:	e774      	b.n	8008fd6 <_dtoa_r+0x71e>
 80090ec:	2300      	movs	r3, #0
 80090ee:	e7f6      	b.n	80090de <_dtoa_r+0x826>
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	e7f4      	b.n	80090de <_dtoa_r+0x826>
 80090f4:	920a      	str	r2, [sp, #40]	; 0x28
 80090f6:	e7f3      	b.n	80090e0 <_dtoa_r+0x828>
 80090f8:	d081      	beq.n	8008ffe <_dtoa_r+0x746>
 80090fa:	4610      	mov	r0, r2
 80090fc:	301c      	adds	r0, #28
 80090fe:	e777      	b.n	8008ff0 <_dtoa_r+0x738>
 8009100:	f1b9 0f00 	cmp.w	r9, #0
 8009104:	dc37      	bgt.n	8009176 <_dtoa_r+0x8be>
 8009106:	9b07      	ldr	r3, [sp, #28]
 8009108:	2b02      	cmp	r3, #2
 800910a:	dd34      	ble.n	8009176 <_dtoa_r+0x8be>
 800910c:	46ca      	mov	sl, r9
 800910e:	f1ba 0f00 	cmp.w	sl, #0
 8009112:	d10d      	bne.n	8009130 <_dtoa_r+0x878>
 8009114:	4621      	mov	r1, r4
 8009116:	4653      	mov	r3, sl
 8009118:	2205      	movs	r2, #5
 800911a:	4630      	mov	r0, r6
 800911c:	f000 fd4c 	bl	8009bb8 <__multadd>
 8009120:	4601      	mov	r1, r0
 8009122:	4604      	mov	r4, r0
 8009124:	4628      	mov	r0, r5
 8009126:	f000 ffad 	bl	800a084 <__mcmp>
 800912a:	2800      	cmp	r0, #0
 800912c:	f73f adde 	bgt.w	8008cec <_dtoa_r+0x434>
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	f8dd 8000 	ldr.w	r8, [sp]
 8009136:	ea6f 0b03 	mvn.w	fp, r3
 800913a:	f04f 0900 	mov.w	r9, #0
 800913e:	4621      	mov	r1, r4
 8009140:	4630      	mov	r0, r6
 8009142:	f000 fd17 	bl	8009b74 <_Bfree>
 8009146:	2f00      	cmp	r7, #0
 8009148:	f43f aea7 	beq.w	8008e9a <_dtoa_r+0x5e2>
 800914c:	f1b9 0f00 	cmp.w	r9, #0
 8009150:	d005      	beq.n	800915e <_dtoa_r+0x8a6>
 8009152:	45b9      	cmp	r9, r7
 8009154:	d003      	beq.n	800915e <_dtoa_r+0x8a6>
 8009156:	4649      	mov	r1, r9
 8009158:	4630      	mov	r0, r6
 800915a:	f000 fd0b 	bl	8009b74 <_Bfree>
 800915e:	4639      	mov	r1, r7
 8009160:	4630      	mov	r0, r6
 8009162:	f000 fd07 	bl	8009b74 <_Bfree>
 8009166:	e698      	b.n	8008e9a <_dtoa_r+0x5e2>
 8009168:	2400      	movs	r4, #0
 800916a:	4627      	mov	r7, r4
 800916c:	e7e0      	b.n	8009130 <_dtoa_r+0x878>
 800916e:	46bb      	mov	fp, r7
 8009170:	4604      	mov	r4, r0
 8009172:	4607      	mov	r7, r0
 8009174:	e5ba      	b.n	8008cec <_dtoa_r+0x434>
 8009176:	9b08      	ldr	r3, [sp, #32]
 8009178:	46ca      	mov	sl, r9
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 8100 	beq.w	8009380 <_dtoa_r+0xac8>
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	dd05      	ble.n	8009192 <_dtoa_r+0x8da>
 8009186:	4639      	mov	r1, r7
 8009188:	4642      	mov	r2, r8
 800918a:	4630      	mov	r0, r6
 800918c:	f000 ff0e 	bl	8009fac <__lshift>
 8009190:	4607      	mov	r7, r0
 8009192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05d      	beq.n	8009254 <_dtoa_r+0x99c>
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4630      	mov	r0, r6
 800919c:	f000 fcaa 	bl	8009af4 <_Balloc>
 80091a0:	4680      	mov	r8, r0
 80091a2:	b928      	cbnz	r0, 80091b0 <_dtoa_r+0x8f8>
 80091a4:	4b82      	ldr	r3, [pc, #520]	; (80093b0 <_dtoa_r+0xaf8>)
 80091a6:	4602      	mov	r2, r0
 80091a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ac:	f7ff bb9a 	b.w	80088e4 <_dtoa_r+0x2c>
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	3202      	adds	r2, #2
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	f107 010c 	add.w	r1, r7, #12
 80091ba:	300c      	adds	r0, #12
 80091bc:	f000 fc8c 	bl	8009ad8 <memcpy>
 80091c0:	2201      	movs	r2, #1
 80091c2:	4641      	mov	r1, r8
 80091c4:	4630      	mov	r0, r6
 80091c6:	f000 fef1 	bl	8009fac <__lshift>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	9305      	str	r3, [sp, #20]
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	4453      	add	r3, sl
 80091d4:	9309      	str	r3, [sp, #36]	; 0x24
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	46b9      	mov	r9, r7
 80091de:	9308      	str	r3, [sp, #32]
 80091e0:	4607      	mov	r7, r0
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	4621      	mov	r1, r4
 80091e6:	3b01      	subs	r3, #1
 80091e8:	4628      	mov	r0, r5
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	f7ff fad8 	bl	80087a0 <quorem>
 80091f0:	4603      	mov	r3, r0
 80091f2:	3330      	adds	r3, #48	; 0x30
 80091f4:	9006      	str	r0, [sp, #24]
 80091f6:	4649      	mov	r1, r9
 80091f8:	4628      	mov	r0, r5
 80091fa:	930a      	str	r3, [sp, #40]	; 0x28
 80091fc:	f000 ff42 	bl	800a084 <__mcmp>
 8009200:	463a      	mov	r2, r7
 8009202:	4682      	mov	sl, r0
 8009204:	4621      	mov	r1, r4
 8009206:	4630      	mov	r0, r6
 8009208:	f000 ff58 	bl	800a0bc <__mdiff>
 800920c:	68c2      	ldr	r2, [r0, #12]
 800920e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009210:	4680      	mov	r8, r0
 8009212:	bb0a      	cbnz	r2, 8009258 <_dtoa_r+0x9a0>
 8009214:	4601      	mov	r1, r0
 8009216:	4628      	mov	r0, r5
 8009218:	f000 ff34 	bl	800a084 <__mcmp>
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	4602      	mov	r2, r0
 8009220:	4641      	mov	r1, r8
 8009222:	4630      	mov	r0, r6
 8009224:	920e      	str	r2, [sp, #56]	; 0x38
 8009226:	930a      	str	r3, [sp, #40]	; 0x28
 8009228:	f000 fca4 	bl	8009b74 <_Bfree>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009230:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009234:	ea43 0102 	orr.w	r1, r3, r2
 8009238:	9b08      	ldr	r3, [sp, #32]
 800923a:	430b      	orrs	r3, r1
 800923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923e:	d10d      	bne.n	800925c <_dtoa_r+0x9a4>
 8009240:	2b39      	cmp	r3, #57	; 0x39
 8009242:	d029      	beq.n	8009298 <_dtoa_r+0x9e0>
 8009244:	f1ba 0f00 	cmp.w	sl, #0
 8009248:	dd01      	ble.n	800924e <_dtoa_r+0x996>
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	3331      	adds	r3, #49	; 0x31
 800924e:	9a02      	ldr	r2, [sp, #8]
 8009250:	7013      	strb	r3, [r2, #0]
 8009252:	e774      	b.n	800913e <_dtoa_r+0x886>
 8009254:	4638      	mov	r0, r7
 8009256:	e7b8      	b.n	80091ca <_dtoa_r+0x912>
 8009258:	2201      	movs	r2, #1
 800925a:	e7e1      	b.n	8009220 <_dtoa_r+0x968>
 800925c:	f1ba 0f00 	cmp.w	sl, #0
 8009260:	db06      	blt.n	8009270 <_dtoa_r+0x9b8>
 8009262:	9907      	ldr	r1, [sp, #28]
 8009264:	ea41 0a0a 	orr.w	sl, r1, sl
 8009268:	9908      	ldr	r1, [sp, #32]
 800926a:	ea5a 0101 	orrs.w	r1, sl, r1
 800926e:	d120      	bne.n	80092b2 <_dtoa_r+0x9fa>
 8009270:	2a00      	cmp	r2, #0
 8009272:	ddec      	ble.n	800924e <_dtoa_r+0x996>
 8009274:	4629      	mov	r1, r5
 8009276:	2201      	movs	r2, #1
 8009278:	4630      	mov	r0, r6
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	f000 fe96 	bl	8009fac <__lshift>
 8009280:	4621      	mov	r1, r4
 8009282:	4605      	mov	r5, r0
 8009284:	f000 fefe 	bl	800a084 <__mcmp>
 8009288:	2800      	cmp	r0, #0
 800928a:	9b05      	ldr	r3, [sp, #20]
 800928c:	dc02      	bgt.n	8009294 <_dtoa_r+0x9dc>
 800928e:	d1de      	bne.n	800924e <_dtoa_r+0x996>
 8009290:	07da      	lsls	r2, r3, #31
 8009292:	d5dc      	bpl.n	800924e <_dtoa_r+0x996>
 8009294:	2b39      	cmp	r3, #57	; 0x39
 8009296:	d1d8      	bne.n	800924a <_dtoa_r+0x992>
 8009298:	9a02      	ldr	r2, [sp, #8]
 800929a:	2339      	movs	r3, #57	; 0x39
 800929c:	7013      	strb	r3, [r2, #0]
 800929e:	4643      	mov	r3, r8
 80092a0:	4698      	mov	r8, r3
 80092a2:	3b01      	subs	r3, #1
 80092a4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80092a8:	2a39      	cmp	r2, #57	; 0x39
 80092aa:	d051      	beq.n	8009350 <_dtoa_r+0xa98>
 80092ac:	3201      	adds	r2, #1
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e745      	b.n	800913e <_dtoa_r+0x886>
 80092b2:	2a00      	cmp	r2, #0
 80092b4:	dd03      	ble.n	80092be <_dtoa_r+0xa06>
 80092b6:	2b39      	cmp	r3, #57	; 0x39
 80092b8:	d0ee      	beq.n	8009298 <_dtoa_r+0x9e0>
 80092ba:	3301      	adds	r3, #1
 80092bc:	e7c7      	b.n	800924e <_dtoa_r+0x996>
 80092be:	9a05      	ldr	r2, [sp, #20]
 80092c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092c6:	428a      	cmp	r2, r1
 80092c8:	d02b      	beq.n	8009322 <_dtoa_r+0xa6a>
 80092ca:	4629      	mov	r1, r5
 80092cc:	2300      	movs	r3, #0
 80092ce:	220a      	movs	r2, #10
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 fc71 	bl	8009bb8 <__multadd>
 80092d6:	45b9      	cmp	r9, r7
 80092d8:	4605      	mov	r5, r0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	f04f 020a 	mov.w	r2, #10
 80092e2:	4649      	mov	r1, r9
 80092e4:	4630      	mov	r0, r6
 80092e6:	d107      	bne.n	80092f8 <_dtoa_r+0xa40>
 80092e8:	f000 fc66 	bl	8009bb8 <__multadd>
 80092ec:	4681      	mov	r9, r0
 80092ee:	4607      	mov	r7, r0
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	3301      	adds	r3, #1
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	e774      	b.n	80091e2 <_dtoa_r+0x92a>
 80092f8:	f000 fc5e 	bl	8009bb8 <__multadd>
 80092fc:	4639      	mov	r1, r7
 80092fe:	4681      	mov	r9, r0
 8009300:	2300      	movs	r3, #0
 8009302:	220a      	movs	r2, #10
 8009304:	4630      	mov	r0, r6
 8009306:	f000 fc57 	bl	8009bb8 <__multadd>
 800930a:	4607      	mov	r7, r0
 800930c:	e7f0      	b.n	80092f0 <_dtoa_r+0xa38>
 800930e:	f1ba 0f00 	cmp.w	sl, #0
 8009312:	9a00      	ldr	r2, [sp, #0]
 8009314:	bfcc      	ite	gt
 8009316:	46d0      	movgt	r8, sl
 8009318:	f04f 0801 	movle.w	r8, #1
 800931c:	4490      	add	r8, r2
 800931e:	f04f 0900 	mov.w	r9, #0
 8009322:	4629      	mov	r1, r5
 8009324:	2201      	movs	r2, #1
 8009326:	4630      	mov	r0, r6
 8009328:	9302      	str	r3, [sp, #8]
 800932a:	f000 fe3f 	bl	8009fac <__lshift>
 800932e:	4621      	mov	r1, r4
 8009330:	4605      	mov	r5, r0
 8009332:	f000 fea7 	bl	800a084 <__mcmp>
 8009336:	2800      	cmp	r0, #0
 8009338:	dcb1      	bgt.n	800929e <_dtoa_r+0x9e6>
 800933a:	d102      	bne.n	8009342 <_dtoa_r+0xa8a>
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	07db      	lsls	r3, r3, #31
 8009340:	d4ad      	bmi.n	800929e <_dtoa_r+0x9e6>
 8009342:	4643      	mov	r3, r8
 8009344:	4698      	mov	r8, r3
 8009346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934a:	2a30      	cmp	r2, #48	; 0x30
 800934c:	d0fa      	beq.n	8009344 <_dtoa_r+0xa8c>
 800934e:	e6f6      	b.n	800913e <_dtoa_r+0x886>
 8009350:	9a00      	ldr	r2, [sp, #0]
 8009352:	429a      	cmp	r2, r3
 8009354:	d1a4      	bne.n	80092a0 <_dtoa_r+0x9e8>
 8009356:	f10b 0b01 	add.w	fp, fp, #1
 800935a:	2331      	movs	r3, #49	; 0x31
 800935c:	e778      	b.n	8009250 <_dtoa_r+0x998>
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <_dtoa_r+0xafc>)
 8009360:	f7ff bb12 	b.w	8008988 <_dtoa_r+0xd0>
 8009364:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009366:	2b00      	cmp	r3, #0
 8009368:	f47f aaee 	bne.w	8008948 <_dtoa_r+0x90>
 800936c:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <_dtoa_r+0xb00>)
 800936e:	f7ff bb0b 	b.w	8008988 <_dtoa_r+0xd0>
 8009372:	f1ba 0f00 	cmp.w	sl, #0
 8009376:	dc03      	bgt.n	8009380 <_dtoa_r+0xac8>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	2b02      	cmp	r3, #2
 800937c:	f73f aec7 	bgt.w	800910e <_dtoa_r+0x856>
 8009380:	f8dd 8000 	ldr.w	r8, [sp]
 8009384:	4621      	mov	r1, r4
 8009386:	4628      	mov	r0, r5
 8009388:	f7ff fa0a 	bl	80087a0 <quorem>
 800938c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009390:	f808 3b01 	strb.w	r3, [r8], #1
 8009394:	9a00      	ldr	r2, [sp, #0]
 8009396:	eba8 0202 	sub.w	r2, r8, r2
 800939a:	4592      	cmp	sl, r2
 800939c:	ddb7      	ble.n	800930e <_dtoa_r+0xa56>
 800939e:	4629      	mov	r1, r5
 80093a0:	2300      	movs	r3, #0
 80093a2:	220a      	movs	r2, #10
 80093a4:	4630      	mov	r0, r6
 80093a6:	f000 fc07 	bl	8009bb8 <__multadd>
 80093aa:	4605      	mov	r5, r0
 80093ac:	e7ea      	b.n	8009384 <_dtoa_r+0xacc>
 80093ae:	bf00      	nop
 80093b0:	0800b74b 	.word	0x0800b74b
 80093b4:	0800b650 	.word	0x0800b650
 80093b8:	0800b6c8 	.word	0x0800b6c8

080093bc <rshift>:
 80093bc:	6903      	ldr	r3, [r0, #16]
 80093be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093ca:	f100 0414 	add.w	r4, r0, #20
 80093ce:	dd45      	ble.n	800945c <rshift+0xa0>
 80093d0:	f011 011f 	ands.w	r1, r1, #31
 80093d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093dc:	d10c      	bne.n	80093f8 <rshift+0x3c>
 80093de:	f100 0710 	add.w	r7, r0, #16
 80093e2:	4629      	mov	r1, r5
 80093e4:	42b1      	cmp	r1, r6
 80093e6:	d334      	bcc.n	8009452 <rshift+0x96>
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	1eea      	subs	r2, r5, #3
 80093ee:	4296      	cmp	r6, r2
 80093f0:	bf38      	it	cc
 80093f2:	2300      	movcc	r3, #0
 80093f4:	4423      	add	r3, r4
 80093f6:	e015      	b.n	8009424 <rshift+0x68>
 80093f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093fc:	f1c1 0820 	rsb	r8, r1, #32
 8009400:	40cf      	lsrs	r7, r1
 8009402:	f105 0e04 	add.w	lr, r5, #4
 8009406:	46a1      	mov	r9, r4
 8009408:	4576      	cmp	r6, lr
 800940a:	46f4      	mov	ip, lr
 800940c:	d815      	bhi.n	800943a <rshift+0x7e>
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	009a      	lsls	r2, r3, #2
 8009412:	3a04      	subs	r2, #4
 8009414:	3501      	adds	r5, #1
 8009416:	42ae      	cmp	r6, r5
 8009418:	bf38      	it	cc
 800941a:	2200      	movcc	r2, #0
 800941c:	18a3      	adds	r3, r4, r2
 800941e:	50a7      	str	r7, [r4, r2]
 8009420:	b107      	cbz	r7, 8009424 <rshift+0x68>
 8009422:	3304      	adds	r3, #4
 8009424:	1b1a      	subs	r2, r3, r4
 8009426:	42a3      	cmp	r3, r4
 8009428:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800942c:	bf08      	it	eq
 800942e:	2300      	moveq	r3, #0
 8009430:	6102      	str	r2, [r0, #16]
 8009432:	bf08      	it	eq
 8009434:	6143      	streq	r3, [r0, #20]
 8009436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800943a:	f8dc c000 	ldr.w	ip, [ip]
 800943e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009442:	ea4c 0707 	orr.w	r7, ip, r7
 8009446:	f849 7b04 	str.w	r7, [r9], #4
 800944a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800944e:	40cf      	lsrs	r7, r1
 8009450:	e7da      	b.n	8009408 <rshift+0x4c>
 8009452:	f851 cb04 	ldr.w	ip, [r1], #4
 8009456:	f847 cf04 	str.w	ip, [r7, #4]!
 800945a:	e7c3      	b.n	80093e4 <rshift+0x28>
 800945c:	4623      	mov	r3, r4
 800945e:	e7e1      	b.n	8009424 <rshift+0x68>

08009460 <__hexdig_fun>:
 8009460:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009464:	2b09      	cmp	r3, #9
 8009466:	d802      	bhi.n	800946e <__hexdig_fun+0xe>
 8009468:	3820      	subs	r0, #32
 800946a:	b2c0      	uxtb	r0, r0
 800946c:	4770      	bx	lr
 800946e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009472:	2b05      	cmp	r3, #5
 8009474:	d801      	bhi.n	800947a <__hexdig_fun+0x1a>
 8009476:	3847      	subs	r0, #71	; 0x47
 8009478:	e7f7      	b.n	800946a <__hexdig_fun+0xa>
 800947a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800947e:	2b05      	cmp	r3, #5
 8009480:	d801      	bhi.n	8009486 <__hexdig_fun+0x26>
 8009482:	3827      	subs	r0, #39	; 0x27
 8009484:	e7f1      	b.n	800946a <__hexdig_fun+0xa>
 8009486:	2000      	movs	r0, #0
 8009488:	4770      	bx	lr
	...

0800948c <__gethex>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	ed2d 8b02 	vpush	{d8}
 8009494:	b089      	sub	sp, #36	; 0x24
 8009496:	ee08 0a10 	vmov	s16, r0
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	4bbc      	ldr	r3, [pc, #752]	; (8009790 <__gethex+0x304>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	4618      	mov	r0, r3
 80094a4:	468b      	mov	fp, r1
 80094a6:	4690      	mov	r8, r2
 80094a8:	f7f6 feca 	bl	8000240 <strlen>
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	f8db 2000 	ldr.w	r2, [fp]
 80094b2:	4403      	add	r3, r0
 80094b4:	4682      	mov	sl, r0
 80094b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	1c93      	adds	r3, r2, #2
 80094be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094c6:	32fe      	adds	r2, #254	; 0xfe
 80094c8:	18d1      	adds	r1, r2, r3
 80094ca:	461f      	mov	r7, r3
 80094cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094d0:	9100      	str	r1, [sp, #0]
 80094d2:	2830      	cmp	r0, #48	; 0x30
 80094d4:	d0f8      	beq.n	80094c8 <__gethex+0x3c>
 80094d6:	f7ff ffc3 	bl	8009460 <__hexdig_fun>
 80094da:	4604      	mov	r4, r0
 80094dc:	2800      	cmp	r0, #0
 80094de:	d13a      	bne.n	8009556 <__gethex+0xca>
 80094e0:	9901      	ldr	r1, [sp, #4]
 80094e2:	4652      	mov	r2, sl
 80094e4:	4638      	mov	r0, r7
 80094e6:	f001 f9f5 	bl	800a8d4 <strncmp>
 80094ea:	4605      	mov	r5, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d168      	bne.n	80095c2 <__gethex+0x136>
 80094f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80094f4:	eb07 060a 	add.w	r6, r7, sl
 80094f8:	f7ff ffb2 	bl	8009460 <__hexdig_fun>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d062      	beq.n	80095c6 <__gethex+0x13a>
 8009500:	4633      	mov	r3, r6
 8009502:	7818      	ldrb	r0, [r3, #0]
 8009504:	2830      	cmp	r0, #48	; 0x30
 8009506:	461f      	mov	r7, r3
 8009508:	f103 0301 	add.w	r3, r3, #1
 800950c:	d0f9      	beq.n	8009502 <__gethex+0x76>
 800950e:	f7ff ffa7 	bl	8009460 <__hexdig_fun>
 8009512:	2301      	movs	r3, #1
 8009514:	fab0 f480 	clz	r4, r0
 8009518:	0964      	lsrs	r4, r4, #5
 800951a:	4635      	mov	r5, r6
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	463a      	mov	r2, r7
 8009520:	4616      	mov	r6, r2
 8009522:	3201      	adds	r2, #1
 8009524:	7830      	ldrb	r0, [r6, #0]
 8009526:	f7ff ff9b 	bl	8009460 <__hexdig_fun>
 800952a:	2800      	cmp	r0, #0
 800952c:	d1f8      	bne.n	8009520 <__gethex+0x94>
 800952e:	9901      	ldr	r1, [sp, #4]
 8009530:	4652      	mov	r2, sl
 8009532:	4630      	mov	r0, r6
 8009534:	f001 f9ce 	bl	800a8d4 <strncmp>
 8009538:	b980      	cbnz	r0, 800955c <__gethex+0xd0>
 800953a:	b94d      	cbnz	r5, 8009550 <__gethex+0xc4>
 800953c:	eb06 050a 	add.w	r5, r6, sl
 8009540:	462a      	mov	r2, r5
 8009542:	4616      	mov	r6, r2
 8009544:	3201      	adds	r2, #1
 8009546:	7830      	ldrb	r0, [r6, #0]
 8009548:	f7ff ff8a 	bl	8009460 <__hexdig_fun>
 800954c:	2800      	cmp	r0, #0
 800954e:	d1f8      	bne.n	8009542 <__gethex+0xb6>
 8009550:	1bad      	subs	r5, r5, r6
 8009552:	00ad      	lsls	r5, r5, #2
 8009554:	e004      	b.n	8009560 <__gethex+0xd4>
 8009556:	2400      	movs	r4, #0
 8009558:	4625      	mov	r5, r4
 800955a:	e7e0      	b.n	800951e <__gethex+0x92>
 800955c:	2d00      	cmp	r5, #0
 800955e:	d1f7      	bne.n	8009550 <__gethex+0xc4>
 8009560:	7833      	ldrb	r3, [r6, #0]
 8009562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009566:	2b50      	cmp	r3, #80	; 0x50
 8009568:	d13b      	bne.n	80095e2 <__gethex+0x156>
 800956a:	7873      	ldrb	r3, [r6, #1]
 800956c:	2b2b      	cmp	r3, #43	; 0x2b
 800956e:	d02c      	beq.n	80095ca <__gethex+0x13e>
 8009570:	2b2d      	cmp	r3, #45	; 0x2d
 8009572:	d02e      	beq.n	80095d2 <__gethex+0x146>
 8009574:	1c71      	adds	r1, r6, #1
 8009576:	f04f 0900 	mov.w	r9, #0
 800957a:	7808      	ldrb	r0, [r1, #0]
 800957c:	f7ff ff70 	bl	8009460 <__hexdig_fun>
 8009580:	1e43      	subs	r3, r0, #1
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b18      	cmp	r3, #24
 8009586:	d82c      	bhi.n	80095e2 <__gethex+0x156>
 8009588:	f1a0 0210 	sub.w	r2, r0, #16
 800958c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009590:	f7ff ff66 	bl	8009460 <__hexdig_fun>
 8009594:	1e43      	subs	r3, r0, #1
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b18      	cmp	r3, #24
 800959a:	d91d      	bls.n	80095d8 <__gethex+0x14c>
 800959c:	f1b9 0f00 	cmp.w	r9, #0
 80095a0:	d000      	beq.n	80095a4 <__gethex+0x118>
 80095a2:	4252      	negs	r2, r2
 80095a4:	4415      	add	r5, r2
 80095a6:	f8cb 1000 	str.w	r1, [fp]
 80095aa:	b1e4      	cbz	r4, 80095e6 <__gethex+0x15a>
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2700      	movne	r7, #0
 80095b4:	2706      	moveq	r7, #6
 80095b6:	4638      	mov	r0, r7
 80095b8:	b009      	add	sp, #36	; 0x24
 80095ba:	ecbd 8b02 	vpop	{d8}
 80095be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c2:	463e      	mov	r6, r7
 80095c4:	4625      	mov	r5, r4
 80095c6:	2401      	movs	r4, #1
 80095c8:	e7ca      	b.n	8009560 <__gethex+0xd4>
 80095ca:	f04f 0900 	mov.w	r9, #0
 80095ce:	1cb1      	adds	r1, r6, #2
 80095d0:	e7d3      	b.n	800957a <__gethex+0xee>
 80095d2:	f04f 0901 	mov.w	r9, #1
 80095d6:	e7fa      	b.n	80095ce <__gethex+0x142>
 80095d8:	230a      	movs	r3, #10
 80095da:	fb03 0202 	mla	r2, r3, r2, r0
 80095de:	3a10      	subs	r2, #16
 80095e0:	e7d4      	b.n	800958c <__gethex+0x100>
 80095e2:	4631      	mov	r1, r6
 80095e4:	e7df      	b.n	80095a6 <__gethex+0x11a>
 80095e6:	1bf3      	subs	r3, r6, r7
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4621      	mov	r1, r4
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	dc0b      	bgt.n	8009608 <__gethex+0x17c>
 80095f0:	ee18 0a10 	vmov	r0, s16
 80095f4:	f000 fa7e 	bl	8009af4 <_Balloc>
 80095f8:	4604      	mov	r4, r0
 80095fa:	b940      	cbnz	r0, 800960e <__gethex+0x182>
 80095fc:	4b65      	ldr	r3, [pc, #404]	; (8009794 <__gethex+0x308>)
 80095fe:	4602      	mov	r2, r0
 8009600:	21de      	movs	r1, #222	; 0xde
 8009602:	4865      	ldr	r0, [pc, #404]	; (8009798 <__gethex+0x30c>)
 8009604:	f001 f986 	bl	800a914 <__assert_func>
 8009608:	3101      	adds	r1, #1
 800960a:	105b      	asrs	r3, r3, #1
 800960c:	e7ee      	b.n	80095ec <__gethex+0x160>
 800960e:	f100 0914 	add.w	r9, r0, #20
 8009612:	f04f 0b00 	mov.w	fp, #0
 8009616:	f1ca 0301 	rsb	r3, sl, #1
 800961a:	f8cd 9008 	str.w	r9, [sp, #8]
 800961e:	f8cd b000 	str.w	fp, [sp]
 8009622:	9306      	str	r3, [sp, #24]
 8009624:	42b7      	cmp	r7, r6
 8009626:	d340      	bcc.n	80096aa <__gethex+0x21e>
 8009628:	9802      	ldr	r0, [sp, #8]
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	f840 3b04 	str.w	r3, [r0], #4
 8009630:	eba0 0009 	sub.w	r0, r0, r9
 8009634:	1080      	asrs	r0, r0, #2
 8009636:	0146      	lsls	r6, r0, #5
 8009638:	6120      	str	r0, [r4, #16]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fb50 	bl	8009ce0 <__hi0bits>
 8009640:	1a30      	subs	r0, r6, r0
 8009642:	f8d8 6000 	ldr.w	r6, [r8]
 8009646:	42b0      	cmp	r0, r6
 8009648:	dd63      	ble.n	8009712 <__gethex+0x286>
 800964a:	1b87      	subs	r7, r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	4620      	mov	r0, r4
 8009650:	f000 feeb 	bl	800a42a <__any_on>
 8009654:	4682      	mov	sl, r0
 8009656:	b1a8      	cbz	r0, 8009684 <__gethex+0x1f8>
 8009658:	1e7b      	subs	r3, r7, #1
 800965a:	1159      	asrs	r1, r3, #5
 800965c:	f003 021f 	and.w	r2, r3, #31
 8009660:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009664:	f04f 0a01 	mov.w	sl, #1
 8009668:	fa0a f202 	lsl.w	r2, sl, r2
 800966c:	420a      	tst	r2, r1
 800966e:	d009      	beq.n	8009684 <__gethex+0x1f8>
 8009670:	4553      	cmp	r3, sl
 8009672:	dd05      	ble.n	8009680 <__gethex+0x1f4>
 8009674:	1eb9      	subs	r1, r7, #2
 8009676:	4620      	mov	r0, r4
 8009678:	f000 fed7 	bl	800a42a <__any_on>
 800967c:	2800      	cmp	r0, #0
 800967e:	d145      	bne.n	800970c <__gethex+0x280>
 8009680:	f04f 0a02 	mov.w	sl, #2
 8009684:	4639      	mov	r1, r7
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff fe98 	bl	80093bc <rshift>
 800968c:	443d      	add	r5, r7
 800968e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009692:	42ab      	cmp	r3, r5
 8009694:	da4c      	bge.n	8009730 <__gethex+0x2a4>
 8009696:	ee18 0a10 	vmov	r0, s16
 800969a:	4621      	mov	r1, r4
 800969c:	f000 fa6a 	bl	8009b74 <_Bfree>
 80096a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096a2:	2300      	movs	r3, #0
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	27a3      	movs	r7, #163	; 0xa3
 80096a8:	e785      	b.n	80095b6 <__gethex+0x12a>
 80096aa:	1e73      	subs	r3, r6, #1
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	9303      	str	r3, [sp, #12]
 80096b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d019      	beq.n	80096ec <__gethex+0x260>
 80096b8:	f1bb 0f20 	cmp.w	fp, #32
 80096bc:	d107      	bne.n	80096ce <__gethex+0x242>
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	9a00      	ldr	r2, [sp, #0]
 80096c2:	f843 2b04 	str.w	r2, [r3], #4
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	2300      	movs	r3, #0
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	469b      	mov	fp, r3
 80096ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096d2:	f7ff fec5 	bl	8009460 <__hexdig_fun>
 80096d6:	9b00      	ldr	r3, [sp, #0]
 80096d8:	f000 000f 	and.w	r0, r0, #15
 80096dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80096e0:	4303      	orrs	r3, r0
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	f10b 0b04 	add.w	fp, fp, #4
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	e00d      	b.n	8009708 <__gethex+0x27c>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	9a06      	ldr	r2, [sp, #24]
 80096f0:	4413      	add	r3, r2
 80096f2:	42bb      	cmp	r3, r7
 80096f4:	d3e0      	bcc.n	80096b8 <__gethex+0x22c>
 80096f6:	4618      	mov	r0, r3
 80096f8:	9901      	ldr	r1, [sp, #4]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	4652      	mov	r2, sl
 80096fe:	f001 f8e9 	bl	800a8d4 <strncmp>
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	2800      	cmp	r0, #0
 8009706:	d1d7      	bne.n	80096b8 <__gethex+0x22c>
 8009708:	461e      	mov	r6, r3
 800970a:	e78b      	b.n	8009624 <__gethex+0x198>
 800970c:	f04f 0a03 	mov.w	sl, #3
 8009710:	e7b8      	b.n	8009684 <__gethex+0x1f8>
 8009712:	da0a      	bge.n	800972a <__gethex+0x29e>
 8009714:	1a37      	subs	r7, r6, r0
 8009716:	4621      	mov	r1, r4
 8009718:	ee18 0a10 	vmov	r0, s16
 800971c:	463a      	mov	r2, r7
 800971e:	f000 fc45 	bl	8009fac <__lshift>
 8009722:	1bed      	subs	r5, r5, r7
 8009724:	4604      	mov	r4, r0
 8009726:	f100 0914 	add.w	r9, r0, #20
 800972a:	f04f 0a00 	mov.w	sl, #0
 800972e:	e7ae      	b.n	800968e <__gethex+0x202>
 8009730:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009734:	42a8      	cmp	r0, r5
 8009736:	dd72      	ble.n	800981e <__gethex+0x392>
 8009738:	1b45      	subs	r5, r0, r5
 800973a:	42ae      	cmp	r6, r5
 800973c:	dc36      	bgt.n	80097ac <__gethex+0x320>
 800973e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d02a      	beq.n	800979c <__gethex+0x310>
 8009746:	2b03      	cmp	r3, #3
 8009748:	d02c      	beq.n	80097a4 <__gethex+0x318>
 800974a:	2b01      	cmp	r3, #1
 800974c:	d115      	bne.n	800977a <__gethex+0x2ee>
 800974e:	42ae      	cmp	r6, r5
 8009750:	d113      	bne.n	800977a <__gethex+0x2ee>
 8009752:	2e01      	cmp	r6, #1
 8009754:	d10b      	bne.n	800976e <__gethex+0x2e2>
 8009756:	9a04      	ldr	r2, [sp, #16]
 8009758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	2301      	movs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	f8c9 3000 	str.w	r3, [r9]
 8009766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009768:	2762      	movs	r7, #98	; 0x62
 800976a:	601c      	str	r4, [r3, #0]
 800976c:	e723      	b.n	80095b6 <__gethex+0x12a>
 800976e:	1e71      	subs	r1, r6, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fe5a 	bl	800a42a <__any_on>
 8009776:	2800      	cmp	r0, #0
 8009778:	d1ed      	bne.n	8009756 <__gethex+0x2ca>
 800977a:	ee18 0a10 	vmov	r0, s16
 800977e:	4621      	mov	r1, r4
 8009780:	f000 f9f8 	bl	8009b74 <_Bfree>
 8009784:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009786:	2300      	movs	r3, #0
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	2750      	movs	r7, #80	; 0x50
 800978c:	e713      	b.n	80095b6 <__gethex+0x12a>
 800978e:	bf00      	nop
 8009790:	0800b7c8 	.word	0x0800b7c8
 8009794:	0800b74b 	.word	0x0800b74b
 8009798:	0800b75c 	.word	0x0800b75c
 800979c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1eb      	bne.n	800977a <__gethex+0x2ee>
 80097a2:	e7d8      	b.n	8009756 <__gethex+0x2ca>
 80097a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1d5      	bne.n	8009756 <__gethex+0x2ca>
 80097aa:	e7e6      	b.n	800977a <__gethex+0x2ee>
 80097ac:	1e6f      	subs	r7, r5, #1
 80097ae:	f1ba 0f00 	cmp.w	sl, #0
 80097b2:	d131      	bne.n	8009818 <__gethex+0x38c>
 80097b4:	b127      	cbz	r7, 80097c0 <__gethex+0x334>
 80097b6:	4639      	mov	r1, r7
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fe36 	bl	800a42a <__any_on>
 80097be:	4682      	mov	sl, r0
 80097c0:	117b      	asrs	r3, r7, #5
 80097c2:	2101      	movs	r1, #1
 80097c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097c8:	f007 071f 	and.w	r7, r7, #31
 80097cc:	fa01 f707 	lsl.w	r7, r1, r7
 80097d0:	421f      	tst	r7, r3
 80097d2:	4629      	mov	r1, r5
 80097d4:	4620      	mov	r0, r4
 80097d6:	bf18      	it	ne
 80097d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80097dc:	1b76      	subs	r6, r6, r5
 80097de:	f7ff fded 	bl	80093bc <rshift>
 80097e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097e6:	2702      	movs	r7, #2
 80097e8:	f1ba 0f00 	cmp.w	sl, #0
 80097ec:	d048      	beq.n	8009880 <__gethex+0x3f4>
 80097ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d015      	beq.n	8009822 <__gethex+0x396>
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d017      	beq.n	800982a <__gethex+0x39e>
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d109      	bne.n	8009812 <__gethex+0x386>
 80097fe:	f01a 0f02 	tst.w	sl, #2
 8009802:	d006      	beq.n	8009812 <__gethex+0x386>
 8009804:	f8d9 0000 	ldr.w	r0, [r9]
 8009808:	ea4a 0a00 	orr.w	sl, sl, r0
 800980c:	f01a 0f01 	tst.w	sl, #1
 8009810:	d10e      	bne.n	8009830 <__gethex+0x3a4>
 8009812:	f047 0710 	orr.w	r7, r7, #16
 8009816:	e033      	b.n	8009880 <__gethex+0x3f4>
 8009818:	f04f 0a01 	mov.w	sl, #1
 800981c:	e7d0      	b.n	80097c0 <__gethex+0x334>
 800981e:	2701      	movs	r7, #1
 8009820:	e7e2      	b.n	80097e8 <__gethex+0x35c>
 8009822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009824:	f1c3 0301 	rsb	r3, r3, #1
 8009828:	9315      	str	r3, [sp, #84]	; 0x54
 800982a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0f0      	beq.n	8009812 <__gethex+0x386>
 8009830:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009834:	f104 0314 	add.w	r3, r4, #20
 8009838:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800983c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009840:	f04f 0c00 	mov.w	ip, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f853 2b04 	ldr.w	r2, [r3], #4
 800984a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800984e:	d01c      	beq.n	800988a <__gethex+0x3fe>
 8009850:	3201      	adds	r2, #1
 8009852:	6002      	str	r2, [r0, #0]
 8009854:	2f02      	cmp	r7, #2
 8009856:	f104 0314 	add.w	r3, r4, #20
 800985a:	d13f      	bne.n	80098dc <__gethex+0x450>
 800985c:	f8d8 2000 	ldr.w	r2, [r8]
 8009860:	3a01      	subs	r2, #1
 8009862:	42b2      	cmp	r2, r6
 8009864:	d10a      	bne.n	800987c <__gethex+0x3f0>
 8009866:	1171      	asrs	r1, r6, #5
 8009868:	2201      	movs	r2, #1
 800986a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800986e:	f006 061f 	and.w	r6, r6, #31
 8009872:	fa02 f606 	lsl.w	r6, r2, r6
 8009876:	421e      	tst	r6, r3
 8009878:	bf18      	it	ne
 800987a:	4617      	movne	r7, r2
 800987c:	f047 0720 	orr.w	r7, r7, #32
 8009880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009882:	601c      	str	r4, [r3, #0]
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	601d      	str	r5, [r3, #0]
 8009888:	e695      	b.n	80095b6 <__gethex+0x12a>
 800988a:	4299      	cmp	r1, r3
 800988c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009890:	d8d8      	bhi.n	8009844 <__gethex+0x3b8>
 8009892:	68a3      	ldr	r3, [r4, #8]
 8009894:	459b      	cmp	fp, r3
 8009896:	db19      	blt.n	80098cc <__gethex+0x440>
 8009898:	6861      	ldr	r1, [r4, #4]
 800989a:	ee18 0a10 	vmov	r0, s16
 800989e:	3101      	adds	r1, #1
 80098a0:	f000 f928 	bl	8009af4 <_Balloc>
 80098a4:	4681      	mov	r9, r0
 80098a6:	b918      	cbnz	r0, 80098b0 <__gethex+0x424>
 80098a8:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <__gethex+0x488>)
 80098aa:	4602      	mov	r2, r0
 80098ac:	2184      	movs	r1, #132	; 0x84
 80098ae:	e6a8      	b.n	8009602 <__gethex+0x176>
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	3202      	adds	r2, #2
 80098b4:	f104 010c 	add.w	r1, r4, #12
 80098b8:	0092      	lsls	r2, r2, #2
 80098ba:	300c      	adds	r0, #12
 80098bc:	f000 f90c 	bl	8009ad8 <memcpy>
 80098c0:	4621      	mov	r1, r4
 80098c2:	ee18 0a10 	vmov	r0, s16
 80098c6:	f000 f955 	bl	8009b74 <_Bfree>
 80098ca:	464c      	mov	r4, r9
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098d4:	6122      	str	r2, [r4, #16]
 80098d6:	2201      	movs	r2, #1
 80098d8:	615a      	str	r2, [r3, #20]
 80098da:	e7bb      	b.n	8009854 <__gethex+0x3c8>
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	455a      	cmp	r2, fp
 80098e0:	dd0b      	ble.n	80098fa <__gethex+0x46e>
 80098e2:	2101      	movs	r1, #1
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7ff fd69 	bl	80093bc <rshift>
 80098ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098ee:	3501      	adds	r5, #1
 80098f0:	42ab      	cmp	r3, r5
 80098f2:	f6ff aed0 	blt.w	8009696 <__gethex+0x20a>
 80098f6:	2701      	movs	r7, #1
 80098f8:	e7c0      	b.n	800987c <__gethex+0x3f0>
 80098fa:	f016 061f 	ands.w	r6, r6, #31
 80098fe:	d0fa      	beq.n	80098f6 <__gethex+0x46a>
 8009900:	449a      	add	sl, r3
 8009902:	f1c6 0620 	rsb	r6, r6, #32
 8009906:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800990a:	f000 f9e9 	bl	8009ce0 <__hi0bits>
 800990e:	42b0      	cmp	r0, r6
 8009910:	dbe7      	blt.n	80098e2 <__gethex+0x456>
 8009912:	e7f0      	b.n	80098f6 <__gethex+0x46a>
 8009914:	0800b74b 	.word	0x0800b74b

08009918 <L_shift>:
 8009918:	f1c2 0208 	rsb	r2, r2, #8
 800991c:	0092      	lsls	r2, r2, #2
 800991e:	b570      	push	{r4, r5, r6, lr}
 8009920:	f1c2 0620 	rsb	r6, r2, #32
 8009924:	6843      	ldr	r3, [r0, #4]
 8009926:	6804      	ldr	r4, [r0, #0]
 8009928:	fa03 f506 	lsl.w	r5, r3, r6
 800992c:	432c      	orrs	r4, r5
 800992e:	40d3      	lsrs	r3, r2
 8009930:	6004      	str	r4, [r0, #0]
 8009932:	f840 3f04 	str.w	r3, [r0, #4]!
 8009936:	4288      	cmp	r0, r1
 8009938:	d3f4      	bcc.n	8009924 <L_shift+0xc>
 800993a:	bd70      	pop	{r4, r5, r6, pc}

0800993c <__match>:
 800993c:	b530      	push	{r4, r5, lr}
 800993e:	6803      	ldr	r3, [r0, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009946:	b914      	cbnz	r4, 800994e <__match+0x12>
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	2001      	movs	r0, #1
 800994c:	bd30      	pop	{r4, r5, pc}
 800994e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009952:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009956:	2d19      	cmp	r5, #25
 8009958:	bf98      	it	ls
 800995a:	3220      	addls	r2, #32
 800995c:	42a2      	cmp	r2, r4
 800995e:	d0f0      	beq.n	8009942 <__match+0x6>
 8009960:	2000      	movs	r0, #0
 8009962:	e7f3      	b.n	800994c <__match+0x10>

08009964 <__hexnan>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	680b      	ldr	r3, [r1, #0]
 800996a:	6801      	ldr	r1, [r0, #0]
 800996c:	115e      	asrs	r6, r3, #5
 800996e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009972:	f013 031f 	ands.w	r3, r3, #31
 8009976:	b087      	sub	sp, #28
 8009978:	bf18      	it	ne
 800997a:	3604      	addne	r6, #4
 800997c:	2500      	movs	r5, #0
 800997e:	1f37      	subs	r7, r6, #4
 8009980:	4682      	mov	sl, r0
 8009982:	4690      	mov	r8, r2
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	f846 5c04 	str.w	r5, [r6, #-4]
 800998a:	46b9      	mov	r9, r7
 800998c:	463c      	mov	r4, r7
 800998e:	9502      	str	r5, [sp, #8]
 8009990:	46ab      	mov	fp, r5
 8009992:	784a      	ldrb	r2, [r1, #1]
 8009994:	1c4b      	adds	r3, r1, #1
 8009996:	9303      	str	r3, [sp, #12]
 8009998:	b342      	cbz	r2, 80099ec <__hexnan+0x88>
 800999a:	4610      	mov	r0, r2
 800999c:	9105      	str	r1, [sp, #20]
 800999e:	9204      	str	r2, [sp, #16]
 80099a0:	f7ff fd5e 	bl	8009460 <__hexdig_fun>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d14f      	bne.n	8009a48 <__hexnan+0xe4>
 80099a8:	9a04      	ldr	r2, [sp, #16]
 80099aa:	9905      	ldr	r1, [sp, #20]
 80099ac:	2a20      	cmp	r2, #32
 80099ae:	d818      	bhi.n	80099e2 <__hexnan+0x7e>
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	459b      	cmp	fp, r3
 80099b4:	dd13      	ble.n	80099de <__hexnan+0x7a>
 80099b6:	454c      	cmp	r4, r9
 80099b8:	d206      	bcs.n	80099c8 <__hexnan+0x64>
 80099ba:	2d07      	cmp	r5, #7
 80099bc:	dc04      	bgt.n	80099c8 <__hexnan+0x64>
 80099be:	462a      	mov	r2, r5
 80099c0:	4649      	mov	r1, r9
 80099c2:	4620      	mov	r0, r4
 80099c4:	f7ff ffa8 	bl	8009918 <L_shift>
 80099c8:	4544      	cmp	r4, r8
 80099ca:	d950      	bls.n	8009a6e <__hexnan+0x10a>
 80099cc:	2300      	movs	r3, #0
 80099ce:	f1a4 0904 	sub.w	r9, r4, #4
 80099d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80099d6:	f8cd b008 	str.w	fp, [sp, #8]
 80099da:	464c      	mov	r4, r9
 80099dc:	461d      	mov	r5, r3
 80099de:	9903      	ldr	r1, [sp, #12]
 80099e0:	e7d7      	b.n	8009992 <__hexnan+0x2e>
 80099e2:	2a29      	cmp	r2, #41	; 0x29
 80099e4:	d156      	bne.n	8009a94 <__hexnan+0x130>
 80099e6:	3102      	adds	r1, #2
 80099e8:	f8ca 1000 	str.w	r1, [sl]
 80099ec:	f1bb 0f00 	cmp.w	fp, #0
 80099f0:	d050      	beq.n	8009a94 <__hexnan+0x130>
 80099f2:	454c      	cmp	r4, r9
 80099f4:	d206      	bcs.n	8009a04 <__hexnan+0xa0>
 80099f6:	2d07      	cmp	r5, #7
 80099f8:	dc04      	bgt.n	8009a04 <__hexnan+0xa0>
 80099fa:	462a      	mov	r2, r5
 80099fc:	4649      	mov	r1, r9
 80099fe:	4620      	mov	r0, r4
 8009a00:	f7ff ff8a 	bl	8009918 <L_shift>
 8009a04:	4544      	cmp	r4, r8
 8009a06:	d934      	bls.n	8009a72 <__hexnan+0x10e>
 8009a08:	f1a8 0204 	sub.w	r2, r8, #4
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a12:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a16:	429f      	cmp	r7, r3
 8009a18:	d2f9      	bcs.n	8009a0e <__hexnan+0xaa>
 8009a1a:	1b3b      	subs	r3, r7, r4
 8009a1c:	f023 0303 	bic.w	r3, r3, #3
 8009a20:	3304      	adds	r3, #4
 8009a22:	3401      	adds	r4, #1
 8009a24:	3e03      	subs	r6, #3
 8009a26:	42b4      	cmp	r4, r6
 8009a28:	bf88      	it	hi
 8009a2a:	2304      	movhi	r3, #4
 8009a2c:	4443      	add	r3, r8
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f843 2b04 	str.w	r2, [r3], #4
 8009a34:	429f      	cmp	r7, r3
 8009a36:	d2fb      	bcs.n	8009a30 <__hexnan+0xcc>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	b91b      	cbnz	r3, 8009a44 <__hexnan+0xe0>
 8009a3c:	4547      	cmp	r7, r8
 8009a3e:	d127      	bne.n	8009a90 <__hexnan+0x12c>
 8009a40:	2301      	movs	r3, #1
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	2005      	movs	r0, #5
 8009a46:	e026      	b.n	8009a96 <__hexnan+0x132>
 8009a48:	3501      	adds	r5, #1
 8009a4a:	2d08      	cmp	r5, #8
 8009a4c:	f10b 0b01 	add.w	fp, fp, #1
 8009a50:	dd06      	ble.n	8009a60 <__hexnan+0xfc>
 8009a52:	4544      	cmp	r4, r8
 8009a54:	d9c3      	bls.n	80099de <__hexnan+0x7a>
 8009a56:	2300      	movs	r3, #0
 8009a58:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a5c:	2501      	movs	r5, #1
 8009a5e:	3c04      	subs	r4, #4
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	f000 000f 	and.w	r0, r0, #15
 8009a66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	e7b7      	b.n	80099de <__hexnan+0x7a>
 8009a6e:	2508      	movs	r5, #8
 8009a70:	e7b5      	b.n	80099de <__hexnan+0x7a>
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0df      	beq.n	8009a38 <__hexnan+0xd4>
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	f1c3 0320 	rsb	r3, r3, #32
 8009a80:	fa22 f303 	lsr.w	r3, r2, r3
 8009a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a88:	401a      	ands	r2, r3
 8009a8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a8e:	e7d3      	b.n	8009a38 <__hexnan+0xd4>
 8009a90:	3f04      	subs	r7, #4
 8009a92:	e7d1      	b.n	8009a38 <__hexnan+0xd4>
 8009a94:	2004      	movs	r0, #4
 8009a96:	b007      	add	sp, #28
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a9c <_localeconv_r>:
 8009a9c:	4800      	ldr	r0, [pc, #0]	; (8009aa0 <_localeconv_r+0x4>)
 8009a9e:	4770      	bx	lr
 8009aa0:	200001a0 	.word	0x200001a0

08009aa4 <malloc>:
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <malloc+0xc>)
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f000 bd3f 	b.w	800a52c <_malloc_r>
 8009aae:	bf00      	nop
 8009ab0:	20000048 	.word	0x20000048

08009ab4 <__ascii_mbtowc>:
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	b901      	cbnz	r1, 8009aba <__ascii_mbtowc+0x6>
 8009ab8:	a901      	add	r1, sp, #4
 8009aba:	b142      	cbz	r2, 8009ace <__ascii_mbtowc+0x1a>
 8009abc:	b14b      	cbz	r3, 8009ad2 <__ascii_mbtowc+0x1e>
 8009abe:	7813      	ldrb	r3, [r2, #0]
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	1e10      	subs	r0, r2, #0
 8009ac6:	bf18      	it	ne
 8009ac8:	2001      	movne	r0, #1
 8009aca:	b002      	add	sp, #8
 8009acc:	4770      	bx	lr
 8009ace:	4610      	mov	r0, r2
 8009ad0:	e7fb      	b.n	8009aca <__ascii_mbtowc+0x16>
 8009ad2:	f06f 0001 	mvn.w	r0, #1
 8009ad6:	e7f8      	b.n	8009aca <__ascii_mbtowc+0x16>

08009ad8 <memcpy>:
 8009ad8:	440a      	add	r2, r1
 8009ada:	4291      	cmp	r1, r2
 8009adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae0:	d100      	bne.n	8009ae4 <memcpy+0xc>
 8009ae2:	4770      	bx	lr
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aee:	4291      	cmp	r1, r2
 8009af0:	d1f9      	bne.n	8009ae6 <memcpy+0xe>
 8009af2:	bd10      	pop	{r4, pc}

08009af4 <_Balloc>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	b976      	cbnz	r6, 8009b1c <_Balloc+0x28>
 8009afe:	2010      	movs	r0, #16
 8009b00:	f7ff ffd0 	bl	8009aa4 <malloc>
 8009b04:	4602      	mov	r2, r0
 8009b06:	6260      	str	r0, [r4, #36]	; 0x24
 8009b08:	b920      	cbnz	r0, 8009b14 <_Balloc+0x20>
 8009b0a:	4b18      	ldr	r3, [pc, #96]	; (8009b6c <_Balloc+0x78>)
 8009b0c:	4818      	ldr	r0, [pc, #96]	; (8009b70 <_Balloc+0x7c>)
 8009b0e:	2166      	movs	r1, #102	; 0x66
 8009b10:	f000 ff00 	bl	800a914 <__assert_func>
 8009b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b18:	6006      	str	r6, [r0, #0]
 8009b1a:	60c6      	str	r6, [r0, #12]
 8009b1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b1e:	68f3      	ldr	r3, [r6, #12]
 8009b20:	b183      	cbz	r3, 8009b44 <_Balloc+0x50>
 8009b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b2a:	b9b8      	cbnz	r0, 8009b5c <_Balloc+0x68>
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b32:	1d72      	adds	r2, r6, #5
 8009b34:	0092      	lsls	r2, r2, #2
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 fc98 	bl	800a46c <_calloc_r>
 8009b3c:	b160      	cbz	r0, 8009b58 <_Balloc+0x64>
 8009b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b42:	e00e      	b.n	8009b62 <_Balloc+0x6e>
 8009b44:	2221      	movs	r2, #33	; 0x21
 8009b46:	2104      	movs	r1, #4
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 fc8f 	bl	800a46c <_calloc_r>
 8009b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b50:	60f0      	str	r0, [r6, #12]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e4      	bne.n	8009b22 <_Balloc+0x2e>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	6802      	ldr	r2, [r0, #0]
 8009b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b62:	2300      	movs	r3, #0
 8009b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b68:	e7f7      	b.n	8009b5a <_Balloc+0x66>
 8009b6a:	bf00      	nop
 8009b6c:	0800b6d5 	.word	0x0800b6d5
 8009b70:	0800b7dc 	.word	0x0800b7dc

08009b74 <_Bfree>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b78:	4605      	mov	r5, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	b976      	cbnz	r6, 8009b9c <_Bfree+0x28>
 8009b7e:	2010      	movs	r0, #16
 8009b80:	f7ff ff90 	bl	8009aa4 <malloc>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6268      	str	r0, [r5, #36]	; 0x24
 8009b88:	b920      	cbnz	r0, 8009b94 <_Bfree+0x20>
 8009b8a:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <_Bfree+0x3c>)
 8009b8c:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <_Bfree+0x40>)
 8009b8e:	218a      	movs	r1, #138	; 0x8a
 8009b90:	f000 fec0 	bl	800a914 <__assert_func>
 8009b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b98:	6006      	str	r6, [r0, #0]
 8009b9a:	60c6      	str	r6, [r0, #12]
 8009b9c:	b13c      	cbz	r4, 8009bae <_Bfree+0x3a>
 8009b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ba0:	6862      	ldr	r2, [r4, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba8:	6021      	str	r1, [r4, #0]
 8009baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	0800b6d5 	.word	0x0800b6d5
 8009bb4:	0800b7dc 	.word	0x0800b7dc

08009bb8 <__multadd>:
 8009bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbc:	690e      	ldr	r6, [r1, #16]
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	4698      	mov	r8, r3
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	f101 0014 	add.w	r0, r1, #20
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6805      	ldr	r5, [r0, #0]
 8009bcc:	b2a9      	uxth	r1, r5
 8009bce:	fb02 8101 	mla	r1, r2, r1, r8
 8009bd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009bd6:	0c2d      	lsrs	r5, r5, #16
 8009bd8:	fb02 c505 	mla	r5, r2, r5, ip
 8009bdc:	b289      	uxth	r1, r1
 8009bde:	3301      	adds	r3, #1
 8009be0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009be4:	429e      	cmp	r6, r3
 8009be6:	f840 1b04 	str.w	r1, [r0], #4
 8009bea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009bee:	dcec      	bgt.n	8009bca <__multadd+0x12>
 8009bf0:	f1b8 0f00 	cmp.w	r8, #0
 8009bf4:	d022      	beq.n	8009c3c <__multadd+0x84>
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	dc19      	bgt.n	8009c30 <__multadd+0x78>
 8009bfc:	6861      	ldr	r1, [r4, #4]
 8009bfe:	4638      	mov	r0, r7
 8009c00:	3101      	adds	r1, #1
 8009c02:	f7ff ff77 	bl	8009af4 <_Balloc>
 8009c06:	4605      	mov	r5, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <__multadd+0x5e>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <__multadd+0x8c>)
 8009c0e:	480e      	ldr	r0, [pc, #56]	; (8009c48 <__multadd+0x90>)
 8009c10:	21b5      	movs	r1, #181	; 0xb5
 8009c12:	f000 fe7f 	bl	800a914 <__assert_func>
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	3202      	adds	r2, #2
 8009c1a:	f104 010c 	add.w	r1, r4, #12
 8009c1e:	0092      	lsls	r2, r2, #2
 8009c20:	300c      	adds	r0, #12
 8009c22:	f7ff ff59 	bl	8009ad8 <memcpy>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff ffa3 	bl	8009b74 <_Bfree>
 8009c2e:	462c      	mov	r4, r5
 8009c30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009c34:	3601      	adds	r6, #1
 8009c36:	f8c3 8014 	str.w	r8, [r3, #20]
 8009c3a:	6126      	str	r6, [r4, #16]
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c42:	bf00      	nop
 8009c44:	0800b74b 	.word	0x0800b74b
 8009c48:	0800b7dc 	.word	0x0800b7dc

08009c4c <__s2b>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4615      	mov	r5, r2
 8009c54:	461f      	mov	r7, r3
 8009c56:	2209      	movs	r2, #9
 8009c58:	3308      	adds	r3, #8
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c60:	2100      	movs	r1, #0
 8009c62:	2201      	movs	r2, #1
 8009c64:	429a      	cmp	r2, r3
 8009c66:	db09      	blt.n	8009c7c <__s2b+0x30>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff ff43 	bl	8009af4 <_Balloc>
 8009c6e:	b940      	cbnz	r0, 8009c82 <__s2b+0x36>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b19      	ldr	r3, [pc, #100]	; (8009cd8 <__s2b+0x8c>)
 8009c74:	4819      	ldr	r0, [pc, #100]	; (8009cdc <__s2b+0x90>)
 8009c76:	21ce      	movs	r1, #206	; 0xce
 8009c78:	f000 fe4c 	bl	800a914 <__assert_func>
 8009c7c:	0052      	lsls	r2, r2, #1
 8009c7e:	3101      	adds	r1, #1
 8009c80:	e7f0      	b.n	8009c64 <__s2b+0x18>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	6143      	str	r3, [r0, #20]
 8009c86:	2d09      	cmp	r5, #9
 8009c88:	f04f 0301 	mov.w	r3, #1
 8009c8c:	6103      	str	r3, [r0, #16]
 8009c8e:	dd16      	ble.n	8009cbe <__s2b+0x72>
 8009c90:	f104 0909 	add.w	r9, r4, #9
 8009c94:	46c8      	mov	r8, r9
 8009c96:	442c      	add	r4, r5
 8009c98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	3b30      	subs	r3, #48	; 0x30
 8009ca0:	220a      	movs	r2, #10
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ff88 	bl	8009bb8 <__multadd>
 8009ca8:	45a0      	cmp	r8, r4
 8009caa:	d1f5      	bne.n	8009c98 <__s2b+0x4c>
 8009cac:	f1a5 0408 	sub.w	r4, r5, #8
 8009cb0:	444c      	add	r4, r9
 8009cb2:	1b2d      	subs	r5, r5, r4
 8009cb4:	1963      	adds	r3, r4, r5
 8009cb6:	42bb      	cmp	r3, r7
 8009cb8:	db04      	blt.n	8009cc4 <__s2b+0x78>
 8009cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cbe:	340a      	adds	r4, #10
 8009cc0:	2509      	movs	r5, #9
 8009cc2:	e7f6      	b.n	8009cb2 <__s2b+0x66>
 8009cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cc8:	4601      	mov	r1, r0
 8009cca:	3b30      	subs	r3, #48	; 0x30
 8009ccc:	220a      	movs	r2, #10
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff ff72 	bl	8009bb8 <__multadd>
 8009cd4:	e7ee      	b.n	8009cb4 <__s2b+0x68>
 8009cd6:	bf00      	nop
 8009cd8:	0800b74b 	.word	0x0800b74b
 8009cdc:	0800b7dc 	.word	0x0800b7dc

08009ce0 <__hi0bits>:
 8009ce0:	0c03      	lsrs	r3, r0, #16
 8009ce2:	041b      	lsls	r3, r3, #16
 8009ce4:	b9d3      	cbnz	r3, 8009d1c <__hi0bits+0x3c>
 8009ce6:	0400      	lsls	r0, r0, #16
 8009ce8:	2310      	movs	r3, #16
 8009cea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cee:	bf04      	itt	eq
 8009cf0:	0200      	lsleq	r0, r0, #8
 8009cf2:	3308      	addeq	r3, #8
 8009cf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cf8:	bf04      	itt	eq
 8009cfa:	0100      	lsleq	r0, r0, #4
 8009cfc:	3304      	addeq	r3, #4
 8009cfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d02:	bf04      	itt	eq
 8009d04:	0080      	lsleq	r0, r0, #2
 8009d06:	3302      	addeq	r3, #2
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	db05      	blt.n	8009d18 <__hi0bits+0x38>
 8009d0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d10:	f103 0301 	add.w	r3, r3, #1
 8009d14:	bf08      	it	eq
 8009d16:	2320      	moveq	r3, #32
 8009d18:	4618      	mov	r0, r3
 8009d1a:	4770      	bx	lr
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e7e4      	b.n	8009cea <__hi0bits+0xa>

08009d20 <__lo0bits>:
 8009d20:	6803      	ldr	r3, [r0, #0]
 8009d22:	f013 0207 	ands.w	r2, r3, #7
 8009d26:	4601      	mov	r1, r0
 8009d28:	d00b      	beq.n	8009d42 <__lo0bits+0x22>
 8009d2a:	07da      	lsls	r2, r3, #31
 8009d2c:	d424      	bmi.n	8009d78 <__lo0bits+0x58>
 8009d2e:	0798      	lsls	r0, r3, #30
 8009d30:	bf49      	itett	mi
 8009d32:	085b      	lsrmi	r3, r3, #1
 8009d34:	089b      	lsrpl	r3, r3, #2
 8009d36:	2001      	movmi	r0, #1
 8009d38:	600b      	strmi	r3, [r1, #0]
 8009d3a:	bf5c      	itt	pl
 8009d3c:	600b      	strpl	r3, [r1, #0]
 8009d3e:	2002      	movpl	r0, #2
 8009d40:	4770      	bx	lr
 8009d42:	b298      	uxth	r0, r3
 8009d44:	b9b0      	cbnz	r0, 8009d74 <__lo0bits+0x54>
 8009d46:	0c1b      	lsrs	r3, r3, #16
 8009d48:	2010      	movs	r0, #16
 8009d4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d4e:	bf04      	itt	eq
 8009d50:	0a1b      	lsreq	r3, r3, #8
 8009d52:	3008      	addeq	r0, #8
 8009d54:	071a      	lsls	r2, r3, #28
 8009d56:	bf04      	itt	eq
 8009d58:	091b      	lsreq	r3, r3, #4
 8009d5a:	3004      	addeq	r0, #4
 8009d5c:	079a      	lsls	r2, r3, #30
 8009d5e:	bf04      	itt	eq
 8009d60:	089b      	lsreq	r3, r3, #2
 8009d62:	3002      	addeq	r0, #2
 8009d64:	07da      	lsls	r2, r3, #31
 8009d66:	d403      	bmi.n	8009d70 <__lo0bits+0x50>
 8009d68:	085b      	lsrs	r3, r3, #1
 8009d6a:	f100 0001 	add.w	r0, r0, #1
 8009d6e:	d005      	beq.n	8009d7c <__lo0bits+0x5c>
 8009d70:	600b      	str	r3, [r1, #0]
 8009d72:	4770      	bx	lr
 8009d74:	4610      	mov	r0, r2
 8009d76:	e7e8      	b.n	8009d4a <__lo0bits+0x2a>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	4770      	bx	lr
 8009d7c:	2020      	movs	r0, #32
 8009d7e:	4770      	bx	lr

08009d80 <__i2b>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	2101      	movs	r1, #1
 8009d86:	f7ff feb5 	bl	8009af4 <_Balloc>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <__i2b+0x1a>
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <__i2b+0x24>)
 8009d90:	4805      	ldr	r0, [pc, #20]	; (8009da8 <__i2b+0x28>)
 8009d92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d96:	f000 fdbd 	bl	800a914 <__assert_func>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	6144      	str	r4, [r0, #20]
 8009d9e:	6103      	str	r3, [r0, #16]
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	0800b74b 	.word	0x0800b74b
 8009da8:	0800b7dc 	.word	0x0800b7dc

08009dac <__multiply>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4614      	mov	r4, r2
 8009db2:	690a      	ldr	r2, [r1, #16]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	bfb8      	it	lt
 8009dba:	460b      	movlt	r3, r1
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	bfbc      	itt	lt
 8009dc0:	4625      	movlt	r5, r4
 8009dc2:	461c      	movlt	r4, r3
 8009dc4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009dc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009dcc:	68ab      	ldr	r3, [r5, #8]
 8009dce:	6869      	ldr	r1, [r5, #4]
 8009dd0:	eb0a 0709 	add.w	r7, sl, r9
 8009dd4:	42bb      	cmp	r3, r7
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	bfb8      	it	lt
 8009dda:	3101      	addlt	r1, #1
 8009ddc:	f7ff fe8a 	bl	8009af4 <_Balloc>
 8009de0:	b930      	cbnz	r0, 8009df0 <__multiply+0x44>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b42      	ldr	r3, [pc, #264]	; (8009ef0 <__multiply+0x144>)
 8009de6:	4843      	ldr	r0, [pc, #268]	; (8009ef4 <__multiply+0x148>)
 8009de8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dec:	f000 fd92 	bl	800a914 <__assert_func>
 8009df0:	f100 0614 	add.w	r6, r0, #20
 8009df4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009df8:	4633      	mov	r3, r6
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4543      	cmp	r3, r8
 8009dfe:	d31e      	bcc.n	8009e3e <__multiply+0x92>
 8009e00:	f105 0c14 	add.w	ip, r5, #20
 8009e04:	f104 0314 	add.w	r3, r4, #20
 8009e08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e10:	9202      	str	r2, [sp, #8]
 8009e12:	ebac 0205 	sub.w	r2, ip, r5
 8009e16:	3a15      	subs	r2, #21
 8009e18:	f022 0203 	bic.w	r2, r2, #3
 8009e1c:	3204      	adds	r2, #4
 8009e1e:	f105 0115 	add.w	r1, r5, #21
 8009e22:	458c      	cmp	ip, r1
 8009e24:	bf38      	it	cc
 8009e26:	2204      	movcc	r2, #4
 8009e28:	9201      	str	r2, [sp, #4]
 8009e2a:	9a02      	ldr	r2, [sp, #8]
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d808      	bhi.n	8009e44 <__multiply+0x98>
 8009e32:	2f00      	cmp	r7, #0
 8009e34:	dc55      	bgt.n	8009ee2 <__multiply+0x136>
 8009e36:	6107      	str	r7, [r0, #16]
 8009e38:	b005      	add	sp, #20
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	f843 2b04 	str.w	r2, [r3], #4
 8009e42:	e7db      	b.n	8009dfc <__multiply+0x50>
 8009e44:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e48:	f1ba 0f00 	cmp.w	sl, #0
 8009e4c:	d020      	beq.n	8009e90 <__multiply+0xe4>
 8009e4e:	f105 0e14 	add.w	lr, r5, #20
 8009e52:	46b1      	mov	r9, r6
 8009e54:	2200      	movs	r2, #0
 8009e56:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e5a:	f8d9 b000 	ldr.w	fp, [r9]
 8009e5e:	b2a1      	uxth	r1, r4
 8009e60:	fa1f fb8b 	uxth.w	fp, fp
 8009e64:	fb0a b101 	mla	r1, sl, r1, fp
 8009e68:	4411      	add	r1, r2
 8009e6a:	f8d9 2000 	ldr.w	r2, [r9]
 8009e6e:	0c24      	lsrs	r4, r4, #16
 8009e70:	0c12      	lsrs	r2, r2, #16
 8009e72:	fb0a 2404 	mla	r4, sl, r4, r2
 8009e76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e80:	45f4      	cmp	ip, lr
 8009e82:	f849 1b04 	str.w	r1, [r9], #4
 8009e86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009e8a:	d8e4      	bhi.n	8009e56 <__multiply+0xaa>
 8009e8c:	9901      	ldr	r1, [sp, #4]
 8009e8e:	5072      	str	r2, [r6, r1]
 8009e90:	9a03      	ldr	r2, [sp, #12]
 8009e92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e96:	3304      	adds	r3, #4
 8009e98:	f1b9 0f00 	cmp.w	r9, #0
 8009e9c:	d01f      	beq.n	8009ede <__multiply+0x132>
 8009e9e:	6834      	ldr	r4, [r6, #0]
 8009ea0:	f105 0114 	add.w	r1, r5, #20
 8009ea4:	46b6      	mov	lr, r6
 8009ea6:	f04f 0a00 	mov.w	sl, #0
 8009eaa:	880a      	ldrh	r2, [r1, #0]
 8009eac:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009eb0:	fb09 b202 	mla	r2, r9, r2, fp
 8009eb4:	4492      	add	sl, r2
 8009eb6:	b2a4      	uxth	r4, r4
 8009eb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ebc:	f84e 4b04 	str.w	r4, [lr], #4
 8009ec0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ec4:	f8be 2000 	ldrh.w	r2, [lr]
 8009ec8:	0c24      	lsrs	r4, r4, #16
 8009eca:	fb09 2404 	mla	r4, r9, r4, r2
 8009ece:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ed2:	458c      	cmp	ip, r1
 8009ed4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ed8:	d8e7      	bhi.n	8009eaa <__multiply+0xfe>
 8009eda:	9a01      	ldr	r2, [sp, #4]
 8009edc:	50b4      	str	r4, [r6, r2]
 8009ede:	3604      	adds	r6, #4
 8009ee0:	e7a3      	b.n	8009e2a <__multiply+0x7e>
 8009ee2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1a5      	bne.n	8009e36 <__multiply+0x8a>
 8009eea:	3f01      	subs	r7, #1
 8009eec:	e7a1      	b.n	8009e32 <__multiply+0x86>
 8009eee:	bf00      	nop
 8009ef0:	0800b74b 	.word	0x0800b74b
 8009ef4:	0800b7dc 	.word	0x0800b7dc

08009ef8 <__pow5mult>:
 8009ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009efc:	4615      	mov	r5, r2
 8009efe:	f012 0203 	ands.w	r2, r2, #3
 8009f02:	4606      	mov	r6, r0
 8009f04:	460f      	mov	r7, r1
 8009f06:	d007      	beq.n	8009f18 <__pow5mult+0x20>
 8009f08:	4c25      	ldr	r4, [pc, #148]	; (8009fa0 <__pow5mult+0xa8>)
 8009f0a:	3a01      	subs	r2, #1
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f12:	f7ff fe51 	bl	8009bb8 <__multadd>
 8009f16:	4607      	mov	r7, r0
 8009f18:	10ad      	asrs	r5, r5, #2
 8009f1a:	d03d      	beq.n	8009f98 <__pow5mult+0xa0>
 8009f1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f1e:	b97c      	cbnz	r4, 8009f40 <__pow5mult+0x48>
 8009f20:	2010      	movs	r0, #16
 8009f22:	f7ff fdbf 	bl	8009aa4 <malloc>
 8009f26:	4602      	mov	r2, r0
 8009f28:	6270      	str	r0, [r6, #36]	; 0x24
 8009f2a:	b928      	cbnz	r0, 8009f38 <__pow5mult+0x40>
 8009f2c:	4b1d      	ldr	r3, [pc, #116]	; (8009fa4 <__pow5mult+0xac>)
 8009f2e:	481e      	ldr	r0, [pc, #120]	; (8009fa8 <__pow5mult+0xb0>)
 8009f30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f34:	f000 fcee 	bl	800a914 <__assert_func>
 8009f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f3c:	6004      	str	r4, [r0, #0]
 8009f3e:	60c4      	str	r4, [r0, #12]
 8009f40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f48:	b94c      	cbnz	r4, 8009f5e <__pow5mult+0x66>
 8009f4a:	f240 2171 	movw	r1, #625	; 0x271
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff ff16 	bl	8009d80 <__i2b>
 8009f54:	2300      	movs	r3, #0
 8009f56:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	6003      	str	r3, [r0, #0]
 8009f5e:	f04f 0900 	mov.w	r9, #0
 8009f62:	07eb      	lsls	r3, r5, #31
 8009f64:	d50a      	bpl.n	8009f7c <__pow5mult+0x84>
 8009f66:	4639      	mov	r1, r7
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ff1e 	bl	8009dac <__multiply>
 8009f70:	4639      	mov	r1, r7
 8009f72:	4680      	mov	r8, r0
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7ff fdfd 	bl	8009b74 <_Bfree>
 8009f7a:	4647      	mov	r7, r8
 8009f7c:	106d      	asrs	r5, r5, #1
 8009f7e:	d00b      	beq.n	8009f98 <__pow5mult+0xa0>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	b938      	cbnz	r0, 8009f94 <__pow5mult+0x9c>
 8009f84:	4622      	mov	r2, r4
 8009f86:	4621      	mov	r1, r4
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ff0f 	bl	8009dac <__multiply>
 8009f8e:	6020      	str	r0, [r4, #0]
 8009f90:	f8c0 9000 	str.w	r9, [r0]
 8009f94:	4604      	mov	r4, r0
 8009f96:	e7e4      	b.n	8009f62 <__pow5mult+0x6a>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	bf00      	nop
 8009fa0:	0800b930 	.word	0x0800b930
 8009fa4:	0800b6d5 	.word	0x0800b6d5
 8009fa8:	0800b7dc 	.word	0x0800b7dc

08009fac <__lshift>:
 8009fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	6849      	ldr	r1, [r1, #4]
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	4691      	mov	r9, r2
 8009fc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fc4:	f108 0601 	add.w	r6, r8, #1
 8009fc8:	42b3      	cmp	r3, r6
 8009fca:	db0b      	blt.n	8009fe4 <__lshift+0x38>
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff fd91 	bl	8009af4 <_Balloc>
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b948      	cbnz	r0, 8009fea <__lshift+0x3e>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	4b28      	ldr	r3, [pc, #160]	; (800a07c <__lshift+0xd0>)
 8009fda:	4829      	ldr	r0, [pc, #164]	; (800a080 <__lshift+0xd4>)
 8009fdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fe0:	f000 fc98 	bl	800a914 <__assert_func>
 8009fe4:	3101      	adds	r1, #1
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	e7ee      	b.n	8009fc8 <__lshift+0x1c>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f100 0114 	add.w	r1, r0, #20
 8009ff0:	f100 0210 	add.w	r2, r0, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	4553      	cmp	r3, sl
 8009ff8:	db33      	blt.n	800a062 <__lshift+0xb6>
 8009ffa:	6920      	ldr	r0, [r4, #16]
 8009ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a000:	f104 0314 	add.w	r3, r4, #20
 800a004:	f019 091f 	ands.w	r9, r9, #31
 800a008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a00c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a010:	d02b      	beq.n	800a06a <__lshift+0xbe>
 800a012:	f1c9 0e20 	rsb	lr, r9, #32
 800a016:	468a      	mov	sl, r1
 800a018:	2200      	movs	r2, #0
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	fa00 f009 	lsl.w	r0, r0, r9
 800a020:	4302      	orrs	r2, r0
 800a022:	f84a 2b04 	str.w	r2, [sl], #4
 800a026:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02a:	459c      	cmp	ip, r3
 800a02c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a030:	d8f3      	bhi.n	800a01a <__lshift+0x6e>
 800a032:	ebac 0304 	sub.w	r3, ip, r4
 800a036:	3b15      	subs	r3, #21
 800a038:	f023 0303 	bic.w	r3, r3, #3
 800a03c:	3304      	adds	r3, #4
 800a03e:	f104 0015 	add.w	r0, r4, #21
 800a042:	4584      	cmp	ip, r0
 800a044:	bf38      	it	cc
 800a046:	2304      	movcc	r3, #4
 800a048:	50ca      	str	r2, [r1, r3]
 800a04a:	b10a      	cbz	r2, 800a050 <__lshift+0xa4>
 800a04c:	f108 0602 	add.w	r6, r8, #2
 800a050:	3e01      	subs	r6, #1
 800a052:	4638      	mov	r0, r7
 800a054:	612e      	str	r6, [r5, #16]
 800a056:	4621      	mov	r1, r4
 800a058:	f7ff fd8c 	bl	8009b74 <_Bfree>
 800a05c:	4628      	mov	r0, r5
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	f842 0f04 	str.w	r0, [r2, #4]!
 800a066:	3301      	adds	r3, #1
 800a068:	e7c5      	b.n	8009ff6 <__lshift+0x4a>
 800a06a:	3904      	subs	r1, #4
 800a06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a070:	f841 2f04 	str.w	r2, [r1, #4]!
 800a074:	459c      	cmp	ip, r3
 800a076:	d8f9      	bhi.n	800a06c <__lshift+0xc0>
 800a078:	e7ea      	b.n	800a050 <__lshift+0xa4>
 800a07a:	bf00      	nop
 800a07c:	0800b74b 	.word	0x0800b74b
 800a080:	0800b7dc 	.word	0x0800b7dc

0800a084 <__mcmp>:
 800a084:	b530      	push	{r4, r5, lr}
 800a086:	6902      	ldr	r2, [r0, #16]
 800a088:	690c      	ldr	r4, [r1, #16]
 800a08a:	1b12      	subs	r2, r2, r4
 800a08c:	d10e      	bne.n	800a0ac <__mcmp+0x28>
 800a08e:	f100 0314 	add.w	r3, r0, #20
 800a092:	3114      	adds	r1, #20
 800a094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a09c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0a4:	42a5      	cmp	r5, r4
 800a0a6:	d003      	beq.n	800a0b0 <__mcmp+0x2c>
 800a0a8:	d305      	bcc.n	800a0b6 <__mcmp+0x32>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	bd30      	pop	{r4, r5, pc}
 800a0b0:	4283      	cmp	r3, r0
 800a0b2:	d3f3      	bcc.n	800a09c <__mcmp+0x18>
 800a0b4:	e7fa      	b.n	800a0ac <__mcmp+0x28>
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	e7f7      	b.n	800a0ac <__mcmp+0x28>

0800a0bc <__mdiff>:
 800a0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	4617      	mov	r7, r2
 800a0ca:	f7ff ffdb 	bl	800a084 <__mcmp>
 800a0ce:	1e05      	subs	r5, r0, #0
 800a0d0:	d110      	bne.n	800a0f4 <__mdiff+0x38>
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff fd0d 	bl	8009af4 <_Balloc>
 800a0da:	b930      	cbnz	r0, 800a0ea <__mdiff+0x2e>
 800a0dc:	4b39      	ldr	r3, [pc, #228]	; (800a1c4 <__mdiff+0x108>)
 800a0de:	4602      	mov	r2, r0
 800a0e0:	f240 2132 	movw	r1, #562	; 0x232
 800a0e4:	4838      	ldr	r0, [pc, #224]	; (800a1c8 <__mdiff+0x10c>)
 800a0e6:	f000 fc15 	bl	800a914 <__assert_func>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f4:	bfa4      	itt	ge
 800a0f6:	463b      	movge	r3, r7
 800a0f8:	4627      	movge	r7, r4
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	bfa6      	itte	ge
 800a100:	461c      	movge	r4, r3
 800a102:	2500      	movge	r5, #0
 800a104:	2501      	movlt	r5, #1
 800a106:	f7ff fcf5 	bl	8009af4 <_Balloc>
 800a10a:	b920      	cbnz	r0, 800a116 <__mdiff+0x5a>
 800a10c:	4b2d      	ldr	r3, [pc, #180]	; (800a1c4 <__mdiff+0x108>)
 800a10e:	4602      	mov	r2, r0
 800a110:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a114:	e7e6      	b.n	800a0e4 <__mdiff+0x28>
 800a116:	693e      	ldr	r6, [r7, #16]
 800a118:	60c5      	str	r5, [r0, #12]
 800a11a:	6925      	ldr	r5, [r4, #16]
 800a11c:	f107 0114 	add.w	r1, r7, #20
 800a120:	f104 0914 	add.w	r9, r4, #20
 800a124:	f100 0e14 	add.w	lr, r0, #20
 800a128:	f107 0210 	add.w	r2, r7, #16
 800a12c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a130:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a134:	46f2      	mov	sl, lr
 800a136:	2700      	movs	r7, #0
 800a138:	f859 3b04 	ldr.w	r3, [r9], #4
 800a13c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a140:	fa1f f883 	uxth.w	r8, r3
 800a144:	fa17 f78b 	uxtah	r7, r7, fp
 800a148:	0c1b      	lsrs	r3, r3, #16
 800a14a:	eba7 0808 	sub.w	r8, r7, r8
 800a14e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a152:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a156:	fa1f f888 	uxth.w	r8, r8
 800a15a:	141f      	asrs	r7, r3, #16
 800a15c:	454d      	cmp	r5, r9
 800a15e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a162:	f84a 3b04 	str.w	r3, [sl], #4
 800a166:	d8e7      	bhi.n	800a138 <__mdiff+0x7c>
 800a168:	1b2b      	subs	r3, r5, r4
 800a16a:	3b15      	subs	r3, #21
 800a16c:	f023 0303 	bic.w	r3, r3, #3
 800a170:	3304      	adds	r3, #4
 800a172:	3415      	adds	r4, #21
 800a174:	42a5      	cmp	r5, r4
 800a176:	bf38      	it	cc
 800a178:	2304      	movcc	r3, #4
 800a17a:	4419      	add	r1, r3
 800a17c:	4473      	add	r3, lr
 800a17e:	469e      	mov	lr, r3
 800a180:	460d      	mov	r5, r1
 800a182:	4565      	cmp	r5, ip
 800a184:	d30e      	bcc.n	800a1a4 <__mdiff+0xe8>
 800a186:	f10c 0203 	add.w	r2, ip, #3
 800a18a:	1a52      	subs	r2, r2, r1
 800a18c:	f022 0203 	bic.w	r2, r2, #3
 800a190:	3903      	subs	r1, #3
 800a192:	458c      	cmp	ip, r1
 800a194:	bf38      	it	cc
 800a196:	2200      	movcc	r2, #0
 800a198:	441a      	add	r2, r3
 800a19a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a19e:	b17b      	cbz	r3, 800a1c0 <__mdiff+0x104>
 800a1a0:	6106      	str	r6, [r0, #16]
 800a1a2:	e7a5      	b.n	800a0f0 <__mdiff+0x34>
 800a1a4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1a8:	fa17 f488 	uxtah	r4, r7, r8
 800a1ac:	1422      	asrs	r2, r4, #16
 800a1ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a1b2:	b2a4      	uxth	r4, r4
 800a1b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a1b8:	f84e 4b04 	str.w	r4, [lr], #4
 800a1bc:	1417      	asrs	r7, r2, #16
 800a1be:	e7e0      	b.n	800a182 <__mdiff+0xc6>
 800a1c0:	3e01      	subs	r6, #1
 800a1c2:	e7ea      	b.n	800a19a <__mdiff+0xde>
 800a1c4:	0800b74b 	.word	0x0800b74b
 800a1c8:	0800b7dc 	.word	0x0800b7dc

0800a1cc <__ulp>:
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	ed8d 0b00 	vstr	d0, [sp]
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	4912      	ldr	r1, [pc, #72]	; (800a220 <__ulp+0x54>)
 800a1d6:	4019      	ands	r1, r3
 800a1d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	dd05      	ble.n	800a1ec <__ulp+0x20>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	ec43 2b10 	vmov	d0, r2, r3
 800a1e8:	b002      	add	sp, #8
 800a1ea:	4770      	bx	lr
 800a1ec:	4249      	negs	r1, r1
 800a1ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a1f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a1f6:	f04f 0200 	mov.w	r2, #0
 800a1fa:	f04f 0300 	mov.w	r3, #0
 800a1fe:	da04      	bge.n	800a20a <__ulp+0x3e>
 800a200:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a204:	fa41 f300 	asr.w	r3, r1, r0
 800a208:	e7ec      	b.n	800a1e4 <__ulp+0x18>
 800a20a:	f1a0 0114 	sub.w	r1, r0, #20
 800a20e:	291e      	cmp	r1, #30
 800a210:	bfda      	itte	le
 800a212:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a216:	fa20 f101 	lsrle.w	r1, r0, r1
 800a21a:	2101      	movgt	r1, #1
 800a21c:	460a      	mov	r2, r1
 800a21e:	e7e1      	b.n	800a1e4 <__ulp+0x18>
 800a220:	7ff00000 	.word	0x7ff00000

0800a224 <__b2d>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	6905      	ldr	r5, [r0, #16]
 800a228:	f100 0714 	add.w	r7, r0, #20
 800a22c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a230:	1f2e      	subs	r6, r5, #4
 800a232:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff fd52 	bl	8009ce0 <__hi0bits>
 800a23c:	f1c0 0320 	rsb	r3, r0, #32
 800a240:	280a      	cmp	r0, #10
 800a242:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a2c0 <__b2d+0x9c>
 800a246:	600b      	str	r3, [r1, #0]
 800a248:	dc14      	bgt.n	800a274 <__b2d+0x50>
 800a24a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a24e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a252:	42b7      	cmp	r7, r6
 800a254:	ea41 030c 	orr.w	r3, r1, ip
 800a258:	bf34      	ite	cc
 800a25a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a25e:	2100      	movcs	r1, #0
 800a260:	3015      	adds	r0, #21
 800a262:	fa04 f000 	lsl.w	r0, r4, r0
 800a266:	fa21 f10e 	lsr.w	r1, r1, lr
 800a26a:	ea40 0201 	orr.w	r2, r0, r1
 800a26e:	ec43 2b10 	vmov	d0, r2, r3
 800a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a274:	42b7      	cmp	r7, r6
 800a276:	bf3a      	itte	cc
 800a278:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a27c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a280:	2100      	movcs	r1, #0
 800a282:	380b      	subs	r0, #11
 800a284:	d017      	beq.n	800a2b6 <__b2d+0x92>
 800a286:	f1c0 0c20 	rsb	ip, r0, #32
 800a28a:	fa04 f500 	lsl.w	r5, r4, r0
 800a28e:	42be      	cmp	r6, r7
 800a290:	fa21 f40c 	lsr.w	r4, r1, ip
 800a294:	ea45 0504 	orr.w	r5, r5, r4
 800a298:	bf8c      	ite	hi
 800a29a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a29e:	2400      	movls	r4, #0
 800a2a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a2a4:	fa01 f000 	lsl.w	r0, r1, r0
 800a2a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a2ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2b0:	ea40 0204 	orr.w	r2, r0, r4
 800a2b4:	e7db      	b.n	800a26e <__b2d+0x4a>
 800a2b6:	ea44 030c 	orr.w	r3, r4, ip
 800a2ba:	460a      	mov	r2, r1
 800a2bc:	e7d7      	b.n	800a26e <__b2d+0x4a>
 800a2be:	bf00      	nop
 800a2c0:	3ff00000 	.word	0x3ff00000

0800a2c4 <__d2b>:
 800a2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	4689      	mov	r9, r1
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	ec57 6b10 	vmov	r6, r7, d0
 800a2d0:	4690      	mov	r8, r2
 800a2d2:	f7ff fc0f 	bl	8009af4 <_Balloc>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	b930      	cbnz	r0, 800a2e8 <__d2b+0x24>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <__d2b+0xb0>)
 800a2de:	4826      	ldr	r0, [pc, #152]	; (800a378 <__d2b+0xb4>)
 800a2e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a2e4:	f000 fb16 	bl	800a914 <__assert_func>
 800a2e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2f0:	bb35      	cbnz	r5, 800a340 <__d2b+0x7c>
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	d028      	beq.n	800a34a <__d2b+0x86>
 800a2f8:	4668      	mov	r0, sp
 800a2fa:	9600      	str	r6, [sp, #0]
 800a2fc:	f7ff fd10 	bl	8009d20 <__lo0bits>
 800a300:	9900      	ldr	r1, [sp, #0]
 800a302:	b300      	cbz	r0, 800a346 <__d2b+0x82>
 800a304:	9a01      	ldr	r2, [sp, #4]
 800a306:	f1c0 0320 	rsb	r3, r0, #32
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	430b      	orrs	r3, r1
 800a310:	40c2      	lsrs	r2, r0
 800a312:	6163      	str	r3, [r4, #20]
 800a314:	9201      	str	r2, [sp, #4]
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	61a3      	str	r3, [r4, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bf14      	ite	ne
 800a31e:	2202      	movne	r2, #2
 800a320:	2201      	moveq	r2, #1
 800a322:	6122      	str	r2, [r4, #16]
 800a324:	b1d5      	cbz	r5, 800a35c <__d2b+0x98>
 800a326:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a32a:	4405      	add	r5, r0
 800a32c:	f8c9 5000 	str.w	r5, [r9]
 800a330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a334:	f8c8 0000 	str.w	r0, [r8]
 800a338:	4620      	mov	r0, r4
 800a33a:	b003      	add	sp, #12
 800a33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a344:	e7d5      	b.n	800a2f2 <__d2b+0x2e>
 800a346:	6161      	str	r1, [r4, #20]
 800a348:	e7e5      	b.n	800a316 <__d2b+0x52>
 800a34a:	a801      	add	r0, sp, #4
 800a34c:	f7ff fce8 	bl	8009d20 <__lo0bits>
 800a350:	9b01      	ldr	r3, [sp, #4]
 800a352:	6163      	str	r3, [r4, #20]
 800a354:	2201      	movs	r2, #1
 800a356:	6122      	str	r2, [r4, #16]
 800a358:	3020      	adds	r0, #32
 800a35a:	e7e3      	b.n	800a324 <__d2b+0x60>
 800a35c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a364:	f8c9 0000 	str.w	r0, [r9]
 800a368:	6918      	ldr	r0, [r3, #16]
 800a36a:	f7ff fcb9 	bl	8009ce0 <__hi0bits>
 800a36e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a372:	e7df      	b.n	800a334 <__d2b+0x70>
 800a374:	0800b74b 	.word	0x0800b74b
 800a378:	0800b7dc 	.word	0x0800b7dc

0800a37c <__ratio>:
 800a37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	468a      	mov	sl, r1
 800a382:	4669      	mov	r1, sp
 800a384:	4683      	mov	fp, r0
 800a386:	f7ff ff4d 	bl	800a224 <__b2d>
 800a38a:	a901      	add	r1, sp, #4
 800a38c:	4650      	mov	r0, sl
 800a38e:	ec59 8b10 	vmov	r8, r9, d0
 800a392:	ee10 6a10 	vmov	r6, s0
 800a396:	f7ff ff45 	bl	800a224 <__b2d>
 800a39a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a39e:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a3a2:	eba3 0c02 	sub.w	ip, r3, r2
 800a3a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3b0:	ec55 4b10 	vmov	r4, r5, d0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	ee10 0a10 	vmov	r0, s0
 800a3ba:	bfce      	itee	gt
 800a3bc:	464a      	movgt	r2, r9
 800a3be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3c2:	462a      	movle	r2, r5
 800a3c4:	464f      	mov	r7, r9
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	bfcc      	ite	gt
 800a3ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3ce:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a3d2:	ec47 6b17 	vmov	d7, r6, r7
 800a3d6:	ec41 0b16 	vmov	d6, r0, r1
 800a3da:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800a3de:	b003      	add	sp, #12
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3e4 <__copybits>:
 800a3e4:	3901      	subs	r1, #1
 800a3e6:	b570      	push	{r4, r5, r6, lr}
 800a3e8:	1149      	asrs	r1, r1, #5
 800a3ea:	6914      	ldr	r4, [r2, #16]
 800a3ec:	3101      	adds	r1, #1
 800a3ee:	f102 0314 	add.w	r3, r2, #20
 800a3f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3fa:	1f05      	subs	r5, r0, #4
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	d30c      	bcc.n	800a41a <__copybits+0x36>
 800a400:	1aa3      	subs	r3, r4, r2
 800a402:	3b11      	subs	r3, #17
 800a404:	f023 0303 	bic.w	r3, r3, #3
 800a408:	3211      	adds	r2, #17
 800a40a:	42a2      	cmp	r2, r4
 800a40c:	bf88      	it	hi
 800a40e:	2300      	movhi	r3, #0
 800a410:	4418      	add	r0, r3
 800a412:	2300      	movs	r3, #0
 800a414:	4288      	cmp	r0, r1
 800a416:	d305      	bcc.n	800a424 <__copybits+0x40>
 800a418:	bd70      	pop	{r4, r5, r6, pc}
 800a41a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a41e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a422:	e7eb      	b.n	800a3fc <__copybits+0x18>
 800a424:	f840 3b04 	str.w	r3, [r0], #4
 800a428:	e7f4      	b.n	800a414 <__copybits+0x30>

0800a42a <__any_on>:
 800a42a:	f100 0214 	add.w	r2, r0, #20
 800a42e:	6900      	ldr	r0, [r0, #16]
 800a430:	114b      	asrs	r3, r1, #5
 800a432:	4298      	cmp	r0, r3
 800a434:	b510      	push	{r4, lr}
 800a436:	db11      	blt.n	800a45c <__any_on+0x32>
 800a438:	dd0a      	ble.n	800a450 <__any_on+0x26>
 800a43a:	f011 011f 	ands.w	r1, r1, #31
 800a43e:	d007      	beq.n	800a450 <__any_on+0x26>
 800a440:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a444:	fa24 f001 	lsr.w	r0, r4, r1
 800a448:	fa00 f101 	lsl.w	r1, r0, r1
 800a44c:	428c      	cmp	r4, r1
 800a44e:	d10b      	bne.n	800a468 <__any_on+0x3e>
 800a450:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a454:	4293      	cmp	r3, r2
 800a456:	d803      	bhi.n	800a460 <__any_on+0x36>
 800a458:	2000      	movs	r0, #0
 800a45a:	bd10      	pop	{r4, pc}
 800a45c:	4603      	mov	r3, r0
 800a45e:	e7f7      	b.n	800a450 <__any_on+0x26>
 800a460:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a464:	2900      	cmp	r1, #0
 800a466:	d0f5      	beq.n	800a454 <__any_on+0x2a>
 800a468:	2001      	movs	r0, #1
 800a46a:	e7f6      	b.n	800a45a <__any_on+0x30>

0800a46c <_calloc_r>:
 800a46c:	b513      	push	{r0, r1, r4, lr}
 800a46e:	434a      	muls	r2, r1
 800a470:	4611      	mov	r1, r2
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	f000 f85a 	bl	800a52c <_malloc_r>
 800a478:	4604      	mov	r4, r0
 800a47a:	b118      	cbz	r0, 800a484 <_calloc_r+0x18>
 800a47c:	9a01      	ldr	r2, [sp, #4]
 800a47e:	2100      	movs	r1, #0
 800a480:	f7fc feec 	bl	800725c <memset>
 800a484:	4620      	mov	r0, r4
 800a486:	b002      	add	sp, #8
 800a488:	bd10      	pop	{r4, pc}
	...

0800a48c <_free_r>:
 800a48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a48e:	2900      	cmp	r1, #0
 800a490:	d048      	beq.n	800a524 <_free_r+0x98>
 800a492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a496:	9001      	str	r0, [sp, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f1a1 0404 	sub.w	r4, r1, #4
 800a49e:	bfb8      	it	lt
 800a4a0:	18e4      	addlt	r4, r4, r3
 800a4a2:	f000 fa81 	bl	800a9a8 <__malloc_lock>
 800a4a6:	4a20      	ldr	r2, [pc, #128]	; (800a528 <_free_r+0x9c>)
 800a4a8:	9801      	ldr	r0, [sp, #4]
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	b933      	cbnz	r3, 800a4be <_free_r+0x32>
 800a4b0:	6063      	str	r3, [r4, #4]
 800a4b2:	6014      	str	r4, [r2, #0]
 800a4b4:	b003      	add	sp, #12
 800a4b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ba:	f000 ba7b 	b.w	800a9b4 <__malloc_unlock>
 800a4be:	42a3      	cmp	r3, r4
 800a4c0:	d90b      	bls.n	800a4da <_free_r+0x4e>
 800a4c2:	6821      	ldr	r1, [r4, #0]
 800a4c4:	1862      	adds	r2, r4, r1
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	bf04      	itt	eq
 800a4ca:	681a      	ldreq	r2, [r3, #0]
 800a4cc:	685b      	ldreq	r3, [r3, #4]
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	bf04      	itt	eq
 800a4d2:	1852      	addeq	r2, r2, r1
 800a4d4:	6022      	streq	r2, [r4, #0]
 800a4d6:	602c      	str	r4, [r5, #0]
 800a4d8:	e7ec      	b.n	800a4b4 <_free_r+0x28>
 800a4da:	461a      	mov	r2, r3
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b10b      	cbz	r3, 800a4e4 <_free_r+0x58>
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	d9fa      	bls.n	800a4da <_free_r+0x4e>
 800a4e4:	6811      	ldr	r1, [r2, #0]
 800a4e6:	1855      	adds	r5, r2, r1
 800a4e8:	42a5      	cmp	r5, r4
 800a4ea:	d10b      	bne.n	800a504 <_free_r+0x78>
 800a4ec:	6824      	ldr	r4, [r4, #0]
 800a4ee:	4421      	add	r1, r4
 800a4f0:	1854      	adds	r4, r2, r1
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	6011      	str	r1, [r2, #0]
 800a4f6:	d1dd      	bne.n	800a4b4 <_free_r+0x28>
 800a4f8:	681c      	ldr	r4, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	6053      	str	r3, [r2, #4]
 800a4fe:	4421      	add	r1, r4
 800a500:	6011      	str	r1, [r2, #0]
 800a502:	e7d7      	b.n	800a4b4 <_free_r+0x28>
 800a504:	d902      	bls.n	800a50c <_free_r+0x80>
 800a506:	230c      	movs	r3, #12
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	e7d3      	b.n	800a4b4 <_free_r+0x28>
 800a50c:	6825      	ldr	r5, [r4, #0]
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	428b      	cmp	r3, r1
 800a512:	bf04      	itt	eq
 800a514:	6819      	ldreq	r1, [r3, #0]
 800a516:	685b      	ldreq	r3, [r3, #4]
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	bf04      	itt	eq
 800a51c:	1949      	addeq	r1, r1, r5
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	6054      	str	r4, [r2, #4]
 800a522:	e7c7      	b.n	800a4b4 <_free_r+0x28>
 800a524:	b003      	add	sp, #12
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	200002ac 	.word	0x200002ac

0800a52c <_malloc_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	1ccd      	adds	r5, r1, #3
 800a530:	f025 0503 	bic.w	r5, r5, #3
 800a534:	3508      	adds	r5, #8
 800a536:	2d0c      	cmp	r5, #12
 800a538:	bf38      	it	cc
 800a53a:	250c      	movcc	r5, #12
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	4606      	mov	r6, r0
 800a540:	db01      	blt.n	800a546 <_malloc_r+0x1a>
 800a542:	42a9      	cmp	r1, r5
 800a544:	d903      	bls.n	800a54e <_malloc_r+0x22>
 800a546:	230c      	movs	r3, #12
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	2000      	movs	r0, #0
 800a54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a54e:	f000 fa2b 	bl	800a9a8 <__malloc_lock>
 800a552:	4921      	ldr	r1, [pc, #132]	; (800a5d8 <_malloc_r+0xac>)
 800a554:	680a      	ldr	r2, [r1, #0]
 800a556:	4614      	mov	r4, r2
 800a558:	b99c      	cbnz	r4, 800a582 <_malloc_r+0x56>
 800a55a:	4f20      	ldr	r7, [pc, #128]	; (800a5dc <_malloc_r+0xb0>)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	b923      	cbnz	r3, 800a56a <_malloc_r+0x3e>
 800a560:	4621      	mov	r1, r4
 800a562:	4630      	mov	r0, r6
 800a564:	f000 f9a0 	bl	800a8a8 <_sbrk_r>
 800a568:	6038      	str	r0, [r7, #0]
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 f99b 	bl	800a8a8 <_sbrk_r>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d123      	bne.n	800a5be <_malloc_r+0x92>
 800a576:	230c      	movs	r3, #12
 800a578:	6033      	str	r3, [r6, #0]
 800a57a:	4630      	mov	r0, r6
 800a57c:	f000 fa1a 	bl	800a9b4 <__malloc_unlock>
 800a580:	e7e3      	b.n	800a54a <_malloc_r+0x1e>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	1b5b      	subs	r3, r3, r5
 800a586:	d417      	bmi.n	800a5b8 <_malloc_r+0x8c>
 800a588:	2b0b      	cmp	r3, #11
 800a58a:	d903      	bls.n	800a594 <_malloc_r+0x68>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	441c      	add	r4, r3
 800a590:	6025      	str	r5, [r4, #0]
 800a592:	e004      	b.n	800a59e <_malloc_r+0x72>
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	42a2      	cmp	r2, r4
 800a598:	bf0c      	ite	eq
 800a59a:	600b      	streq	r3, [r1, #0]
 800a59c:	6053      	strne	r3, [r2, #4]
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f000 fa08 	bl	800a9b4 <__malloc_unlock>
 800a5a4:	f104 000b 	add.w	r0, r4, #11
 800a5a8:	1d23      	adds	r3, r4, #4
 800a5aa:	f020 0007 	bic.w	r0, r0, #7
 800a5ae:	1ac2      	subs	r2, r0, r3
 800a5b0:	d0cc      	beq.n	800a54c <_malloc_r+0x20>
 800a5b2:	1a1b      	subs	r3, r3, r0
 800a5b4:	50a3      	str	r3, [r4, r2]
 800a5b6:	e7c9      	b.n	800a54c <_malloc_r+0x20>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	6864      	ldr	r4, [r4, #4]
 800a5bc:	e7cc      	b.n	800a558 <_malloc_r+0x2c>
 800a5be:	1cc4      	adds	r4, r0, #3
 800a5c0:	f024 0403 	bic.w	r4, r4, #3
 800a5c4:	42a0      	cmp	r0, r4
 800a5c6:	d0e3      	beq.n	800a590 <_malloc_r+0x64>
 800a5c8:	1a21      	subs	r1, r4, r0
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f000 f96c 	bl	800a8a8 <_sbrk_r>
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d1dd      	bne.n	800a590 <_malloc_r+0x64>
 800a5d4:	e7cf      	b.n	800a576 <_malloc_r+0x4a>
 800a5d6:	bf00      	nop
 800a5d8:	200002ac 	.word	0x200002ac
 800a5dc:	200002b0 	.word	0x200002b0

0800a5e0 <__ssputs_r>:
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	688e      	ldr	r6, [r1, #8]
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4690      	mov	r8, r2
 800a5ee:	461f      	mov	r7, r3
 800a5f0:	d838      	bhi.n	800a664 <__ssputs_r+0x84>
 800a5f2:	898a      	ldrh	r2, [r1, #12]
 800a5f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5f8:	d032      	beq.n	800a660 <__ssputs_r+0x80>
 800a5fa:	6825      	ldr	r5, [r4, #0]
 800a5fc:	6909      	ldr	r1, [r1, #16]
 800a5fe:	eba5 0901 	sub.w	r9, r5, r1
 800a602:	6965      	ldr	r5, [r4, #20]
 800a604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a60c:	3301      	adds	r3, #1
 800a60e:	444b      	add	r3, r9
 800a610:	106d      	asrs	r5, r5, #1
 800a612:	429d      	cmp	r5, r3
 800a614:	bf38      	it	cc
 800a616:	461d      	movcc	r5, r3
 800a618:	0553      	lsls	r3, r2, #21
 800a61a:	d531      	bpl.n	800a680 <__ssputs_r+0xa0>
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7ff ff85 	bl	800a52c <_malloc_r>
 800a622:	4606      	mov	r6, r0
 800a624:	b950      	cbnz	r0, 800a63c <__ssputs_r+0x5c>
 800a626:	230c      	movs	r3, #12
 800a628:	f8ca 3000 	str.w	r3, [sl]
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	6921      	ldr	r1, [r4, #16]
 800a63e:	464a      	mov	r2, r9
 800a640:	f7ff fa4a 	bl	8009ad8 <memcpy>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	6126      	str	r6, [r4, #16]
 800a652:	6165      	str	r5, [r4, #20]
 800a654:	444e      	add	r6, r9
 800a656:	eba5 0509 	sub.w	r5, r5, r9
 800a65a:	6026      	str	r6, [r4, #0]
 800a65c:	60a5      	str	r5, [r4, #8]
 800a65e:	463e      	mov	r6, r7
 800a660:	42be      	cmp	r6, r7
 800a662:	d900      	bls.n	800a666 <__ssputs_r+0x86>
 800a664:	463e      	mov	r6, r7
 800a666:	4632      	mov	r2, r6
 800a668:	6820      	ldr	r0, [r4, #0]
 800a66a:	4641      	mov	r1, r8
 800a66c:	f000 f982 	bl	800a974 <memmove>
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	1b9b      	subs	r3, r3, r6
 800a676:	4432      	add	r2, r6
 800a678:	60a3      	str	r3, [r4, #8]
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e7db      	b.n	800a638 <__ssputs_r+0x58>
 800a680:	462a      	mov	r2, r5
 800a682:	f000 f99d 	bl	800a9c0 <_realloc_r>
 800a686:	4606      	mov	r6, r0
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1e1      	bne.n	800a650 <__ssputs_r+0x70>
 800a68c:	6921      	ldr	r1, [r4, #16]
 800a68e:	4650      	mov	r0, sl
 800a690:	f7ff fefc 	bl	800a48c <_free_r>
 800a694:	e7c7      	b.n	800a626 <__ssputs_r+0x46>
	...

0800a698 <_svfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	4698      	mov	r8, r3
 800a69e:	898b      	ldrh	r3, [r1, #12]
 800a6a0:	061b      	lsls	r3, r3, #24
 800a6a2:	b09d      	sub	sp, #116	; 0x74
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	d50e      	bpl.n	800a6ca <_svfiprintf_r+0x32>
 800a6ac:	690b      	ldr	r3, [r1, #16]
 800a6ae:	b963      	cbnz	r3, 800a6ca <_svfiprintf_r+0x32>
 800a6b0:	2140      	movs	r1, #64	; 0x40
 800a6b2:	f7ff ff3b 	bl	800a52c <_malloc_r>
 800a6b6:	6028      	str	r0, [r5, #0]
 800a6b8:	6128      	str	r0, [r5, #16]
 800a6ba:	b920      	cbnz	r0, 800a6c6 <_svfiprintf_r+0x2e>
 800a6bc:	230c      	movs	r3, #12
 800a6be:	603b      	str	r3, [r7, #0]
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c4:	e0d1      	b.n	800a86a <_svfiprintf_r+0x1d2>
 800a6c6:	2340      	movs	r3, #64	; 0x40
 800a6c8:	616b      	str	r3, [r5, #20]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d8:	2330      	movs	r3, #48	; 0x30
 800a6da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a884 <_svfiprintf_r+0x1ec>
 800a6de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e2:	f04f 0901 	mov.w	r9, #1
 800a6e6:	4623      	mov	r3, r4
 800a6e8:	469a      	mov	sl, r3
 800a6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ee:	b10a      	cbz	r2, 800a6f4 <_svfiprintf_r+0x5c>
 800a6f0:	2a25      	cmp	r2, #37	; 0x25
 800a6f2:	d1f9      	bne.n	800a6e8 <_svfiprintf_r+0x50>
 800a6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f8:	d00b      	beq.n	800a712 <_svfiprintf_r+0x7a>
 800a6fa:	465b      	mov	r3, fp
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	4638      	mov	r0, r7
 800a702:	f7ff ff6d 	bl	800a5e0 <__ssputs_r>
 800a706:	3001      	adds	r0, #1
 800a708:	f000 80aa 	beq.w	800a860 <_svfiprintf_r+0x1c8>
 800a70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70e:	445a      	add	r2, fp
 800a710:	9209      	str	r2, [sp, #36]	; 0x24
 800a712:	f89a 3000 	ldrb.w	r3, [sl]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80a2 	beq.w	800a860 <_svfiprintf_r+0x1c8>
 800a71c:	2300      	movs	r3, #0
 800a71e:	f04f 32ff 	mov.w	r2, #4294967295
 800a722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a726:	f10a 0a01 	add.w	sl, sl, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	9307      	str	r3, [sp, #28]
 800a72e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a732:	931a      	str	r3, [sp, #104]	; 0x68
 800a734:	4654      	mov	r4, sl
 800a736:	2205      	movs	r2, #5
 800a738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73c:	4851      	ldr	r0, [pc, #324]	; (800a884 <_svfiprintf_r+0x1ec>)
 800a73e:	f7f5 fd87 	bl	8000250 <memchr>
 800a742:	9a04      	ldr	r2, [sp, #16]
 800a744:	b9d8      	cbnz	r0, 800a77e <_svfiprintf_r+0xe6>
 800a746:	06d0      	lsls	r0, r2, #27
 800a748:	bf44      	itt	mi
 800a74a:	2320      	movmi	r3, #32
 800a74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a750:	0711      	lsls	r1, r2, #28
 800a752:	bf44      	itt	mi
 800a754:	232b      	movmi	r3, #43	; 0x2b
 800a756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a75a:	f89a 3000 	ldrb.w	r3, [sl]
 800a75e:	2b2a      	cmp	r3, #42	; 0x2a
 800a760:	d015      	beq.n	800a78e <_svfiprintf_r+0xf6>
 800a762:	9a07      	ldr	r2, [sp, #28]
 800a764:	4654      	mov	r4, sl
 800a766:	2000      	movs	r0, #0
 800a768:	f04f 0c0a 	mov.w	ip, #10
 800a76c:	4621      	mov	r1, r4
 800a76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a772:	3b30      	subs	r3, #48	; 0x30
 800a774:	2b09      	cmp	r3, #9
 800a776:	d94e      	bls.n	800a816 <_svfiprintf_r+0x17e>
 800a778:	b1b0      	cbz	r0, 800a7a8 <_svfiprintf_r+0x110>
 800a77a:	9207      	str	r2, [sp, #28]
 800a77c:	e014      	b.n	800a7a8 <_svfiprintf_r+0x110>
 800a77e:	eba0 0308 	sub.w	r3, r0, r8
 800a782:	fa09 f303 	lsl.w	r3, r9, r3
 800a786:	4313      	orrs	r3, r2
 800a788:	9304      	str	r3, [sp, #16]
 800a78a:	46a2      	mov	sl, r4
 800a78c:	e7d2      	b.n	800a734 <_svfiprintf_r+0x9c>
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	1d19      	adds	r1, r3, #4
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	9103      	str	r1, [sp, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	bfbb      	ittet	lt
 800a79a:	425b      	neglt	r3, r3
 800a79c:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a0:	9307      	strge	r3, [sp, #28]
 800a7a2:	9307      	strlt	r3, [sp, #28]
 800a7a4:	bfb8      	it	lt
 800a7a6:	9204      	strlt	r2, [sp, #16]
 800a7a8:	7823      	ldrb	r3, [r4, #0]
 800a7aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ac:	d10c      	bne.n	800a7c8 <_svfiprintf_r+0x130>
 800a7ae:	7863      	ldrb	r3, [r4, #1]
 800a7b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b2:	d135      	bne.n	800a820 <_svfiprintf_r+0x188>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	9203      	str	r2, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bfb8      	it	lt
 800a7c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c4:	3402      	adds	r4, #2
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a894 <_svfiprintf_r+0x1fc>
 800a7cc:	7821      	ldrb	r1, [r4, #0]
 800a7ce:	2203      	movs	r2, #3
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f7f5 fd3d 	bl	8000250 <memchr>
 800a7d6:	b140      	cbz	r0, 800a7ea <_svfiprintf_r+0x152>
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	eba0 000a 	sub.w	r0, r0, sl
 800a7de:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e2:	9b04      	ldr	r3, [sp, #16]
 800a7e4:	4303      	orrs	r3, r0
 800a7e6:	3401      	adds	r4, #1
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ee:	4826      	ldr	r0, [pc, #152]	; (800a888 <_svfiprintf_r+0x1f0>)
 800a7f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f4:	2206      	movs	r2, #6
 800a7f6:	f7f5 fd2b 	bl	8000250 <memchr>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d038      	beq.n	800a870 <_svfiprintf_r+0x1d8>
 800a7fe:	4b23      	ldr	r3, [pc, #140]	; (800a88c <_svfiprintf_r+0x1f4>)
 800a800:	bb1b      	cbnz	r3, 800a84a <_svfiprintf_r+0x1b2>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	3307      	adds	r3, #7
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	3308      	adds	r3, #8
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a810:	4433      	add	r3, r6
 800a812:	9309      	str	r3, [sp, #36]	; 0x24
 800a814:	e767      	b.n	800a6e6 <_svfiprintf_r+0x4e>
 800a816:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81a:	460c      	mov	r4, r1
 800a81c:	2001      	movs	r0, #1
 800a81e:	e7a5      	b.n	800a76c <_svfiprintf_r+0xd4>
 800a820:	2300      	movs	r3, #0
 800a822:	3401      	adds	r4, #1
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	4619      	mov	r1, r3
 800a828:	f04f 0c0a 	mov.w	ip, #10
 800a82c:	4620      	mov	r0, r4
 800a82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a832:	3a30      	subs	r2, #48	; 0x30
 800a834:	2a09      	cmp	r2, #9
 800a836:	d903      	bls.n	800a840 <_svfiprintf_r+0x1a8>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0c5      	beq.n	800a7c8 <_svfiprintf_r+0x130>
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	e7c3      	b.n	800a7c8 <_svfiprintf_r+0x130>
 800a840:	fb0c 2101 	mla	r1, ip, r1, r2
 800a844:	4604      	mov	r4, r0
 800a846:	2301      	movs	r3, #1
 800a848:	e7f0      	b.n	800a82c <_svfiprintf_r+0x194>
 800a84a:	ab03      	add	r3, sp, #12
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	462a      	mov	r2, r5
 800a850:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <_svfiprintf_r+0x1f8>)
 800a852:	a904      	add	r1, sp, #16
 800a854:	4638      	mov	r0, r7
 800a856:	f7fc fd9b 	bl	8007390 <_printf_float>
 800a85a:	1c42      	adds	r2, r0, #1
 800a85c:	4606      	mov	r6, r0
 800a85e:	d1d6      	bne.n	800a80e <_svfiprintf_r+0x176>
 800a860:	89ab      	ldrh	r3, [r5, #12]
 800a862:	065b      	lsls	r3, r3, #25
 800a864:	f53f af2c 	bmi.w	800a6c0 <_svfiprintf_r+0x28>
 800a868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a86a:	b01d      	add	sp, #116	; 0x74
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	ab03      	add	r3, sp, #12
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	462a      	mov	r2, r5
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <_svfiprintf_r+0x1f8>)
 800a878:	a904      	add	r1, sp, #16
 800a87a:	4638      	mov	r0, r7
 800a87c:	f7fd f814 	bl	80078a8 <_printf_i>
 800a880:	e7eb      	b.n	800a85a <_svfiprintf_r+0x1c2>
 800a882:	bf00      	nop
 800a884:	0800b93c 	.word	0x0800b93c
 800a888:	0800b946 	.word	0x0800b946
 800a88c:	08007391 	.word	0x08007391
 800a890:	0800a5e1 	.word	0x0800a5e1
 800a894:	0800b942 	.word	0x0800b942

0800a898 <nan>:
 800a898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8a0 <nan+0x8>
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	7ff80000 	.word	0x7ff80000

0800a8a8 <_sbrk_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d06      	ldr	r5, [pc, #24]	; (800a8c4 <_sbrk_r+0x1c>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7f8 f964 	bl	8002b80 <_sbrk>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_sbrk_r+0x1a>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_sbrk_r+0x1a>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	200004b0 	.word	0x200004b0

0800a8c8 <nanf>:
 800a8c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a8d0 <nanf+0x8>
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	7fc00000 	.word	0x7fc00000

0800a8d4 <strncmp>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	b16a      	cbz	r2, 800a8f4 <strncmp+0x20>
 800a8d8:	3901      	subs	r1, #1
 800a8da:	1884      	adds	r4, r0, r2
 800a8dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a8e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d103      	bne.n	800a8f0 <strncmp+0x1c>
 800a8e8:	42a0      	cmp	r0, r4
 800a8ea:	d001      	beq.n	800a8f0 <strncmp+0x1c>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f5      	bne.n	800a8dc <strncmp+0x8>
 800a8f0:	1a98      	subs	r0, r3, r2
 800a8f2:	bd10      	pop	{r4, pc}
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	e7fc      	b.n	800a8f2 <strncmp+0x1e>

0800a8f8 <__ascii_wctomb>:
 800a8f8:	b149      	cbz	r1, 800a90e <__ascii_wctomb+0x16>
 800a8fa:	2aff      	cmp	r2, #255	; 0xff
 800a8fc:	bf85      	ittet	hi
 800a8fe:	238a      	movhi	r3, #138	; 0x8a
 800a900:	6003      	strhi	r3, [r0, #0]
 800a902:	700a      	strbls	r2, [r1, #0]
 800a904:	f04f 30ff 	movhi.w	r0, #4294967295
 800a908:	bf98      	it	ls
 800a90a:	2001      	movls	r0, #1
 800a90c:	4770      	bx	lr
 800a90e:	4608      	mov	r0, r1
 800a910:	4770      	bx	lr
	...

0800a914 <__assert_func>:
 800a914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a916:	4614      	mov	r4, r2
 800a918:	461a      	mov	r2, r3
 800a91a:	4b09      	ldr	r3, [pc, #36]	; (800a940 <__assert_func+0x2c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4605      	mov	r5, r0
 800a920:	68d8      	ldr	r0, [r3, #12]
 800a922:	b14c      	cbz	r4, 800a938 <__assert_func+0x24>
 800a924:	4b07      	ldr	r3, [pc, #28]	; (800a944 <__assert_func+0x30>)
 800a926:	9100      	str	r1, [sp, #0]
 800a928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a92c:	4906      	ldr	r1, [pc, #24]	; (800a948 <__assert_func+0x34>)
 800a92e:	462b      	mov	r3, r5
 800a930:	f000 f80e 	bl	800a950 <fiprintf>
 800a934:	f000 fa84 	bl	800ae40 <abort>
 800a938:	4b04      	ldr	r3, [pc, #16]	; (800a94c <__assert_func+0x38>)
 800a93a:	461c      	mov	r4, r3
 800a93c:	e7f3      	b.n	800a926 <__assert_func+0x12>
 800a93e:	bf00      	nop
 800a940:	20000048 	.word	0x20000048
 800a944:	0800b94d 	.word	0x0800b94d
 800a948:	0800b95a 	.word	0x0800b95a
 800a94c:	0800b988 	.word	0x0800b988

0800a950 <fiprintf>:
 800a950:	b40e      	push	{r1, r2, r3}
 800a952:	b503      	push	{r0, r1, lr}
 800a954:	4601      	mov	r1, r0
 800a956:	ab03      	add	r3, sp, #12
 800a958:	4805      	ldr	r0, [pc, #20]	; (800a970 <fiprintf+0x20>)
 800a95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a95e:	6800      	ldr	r0, [r0, #0]
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	f000 f87d 	bl	800aa60 <_vfiprintf_r>
 800a966:	b002      	add	sp, #8
 800a968:	f85d eb04 	ldr.w	lr, [sp], #4
 800a96c:	b003      	add	sp, #12
 800a96e:	4770      	bx	lr
 800a970:	20000048 	.word	0x20000048

0800a974 <memmove>:
 800a974:	4288      	cmp	r0, r1
 800a976:	b510      	push	{r4, lr}
 800a978:	eb01 0402 	add.w	r4, r1, r2
 800a97c:	d902      	bls.n	800a984 <memmove+0x10>
 800a97e:	4284      	cmp	r4, r0
 800a980:	4623      	mov	r3, r4
 800a982:	d807      	bhi.n	800a994 <memmove+0x20>
 800a984:	1e43      	subs	r3, r0, #1
 800a986:	42a1      	cmp	r1, r4
 800a988:	d008      	beq.n	800a99c <memmove+0x28>
 800a98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a992:	e7f8      	b.n	800a986 <memmove+0x12>
 800a994:	4402      	add	r2, r0
 800a996:	4601      	mov	r1, r0
 800a998:	428a      	cmp	r2, r1
 800a99a:	d100      	bne.n	800a99e <memmove+0x2a>
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9a6:	e7f7      	b.n	800a998 <memmove+0x24>

0800a9a8 <__malloc_lock>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	; (800a9b0 <__malloc_lock+0x8>)
 800a9aa:	f000 bc09 	b.w	800b1c0 <__retarget_lock_acquire_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	200004b8 	.word	0x200004b8

0800a9b4 <__malloc_unlock>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__malloc_unlock+0x8>)
 800a9b6:	f000 bc04 	b.w	800b1c2 <__retarget_lock_release_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	200004b8 	.word	0x200004b8

0800a9c0 <_realloc_r>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	460e      	mov	r6, r1
 800a9c8:	b921      	cbnz	r1, 800a9d4 <_realloc_r+0x14>
 800a9ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	f7ff bdac 	b.w	800a52c <_malloc_r>
 800a9d4:	b922      	cbnz	r2, 800a9e0 <_realloc_r+0x20>
 800a9d6:	f7ff fd59 	bl	800a48c <_free_r>
 800a9da:	4625      	mov	r5, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e0:	f000 fc54 	bl	800b28c <_malloc_usable_size_r>
 800a9e4:	42a0      	cmp	r0, r4
 800a9e6:	d20f      	bcs.n	800aa08 <_realloc_r+0x48>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff fd9e 	bl	800a52c <_malloc_r>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d0f2      	beq.n	800a9dc <_realloc_r+0x1c>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	f7ff f86d 	bl	8009ad8 <memcpy>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff fd43 	bl	800a48c <_free_r>
 800aa06:	e7e9      	b.n	800a9dc <_realloc_r+0x1c>
 800aa08:	4635      	mov	r5, r6
 800aa0a:	e7e7      	b.n	800a9dc <_realloc_r+0x1c>

0800aa0c <__sfputc_r>:
 800aa0c:	6893      	ldr	r3, [r2, #8]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	b410      	push	{r4}
 800aa14:	6093      	str	r3, [r2, #8]
 800aa16:	da08      	bge.n	800aa2a <__sfputc_r+0x1e>
 800aa18:	6994      	ldr	r4, [r2, #24]
 800aa1a:	42a3      	cmp	r3, r4
 800aa1c:	db01      	blt.n	800aa22 <__sfputc_r+0x16>
 800aa1e:	290a      	cmp	r1, #10
 800aa20:	d103      	bne.n	800aa2a <__sfputc_r+0x1e>
 800aa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa26:	f000 b94b 	b.w	800acc0 <__swbuf_r>
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	1c58      	adds	r0, r3, #1
 800aa2e:	6010      	str	r0, [r2, #0]
 800aa30:	7019      	strb	r1, [r3, #0]
 800aa32:	4608      	mov	r0, r1
 800aa34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <__sfputs_r>:
 800aa3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	460f      	mov	r7, r1
 800aa40:	4614      	mov	r4, r2
 800aa42:	18d5      	adds	r5, r2, r3
 800aa44:	42ac      	cmp	r4, r5
 800aa46:	d101      	bne.n	800aa4c <__sfputs_r+0x12>
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e007      	b.n	800aa5c <__sfputs_r+0x22>
 800aa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa50:	463a      	mov	r2, r7
 800aa52:	4630      	mov	r0, r6
 800aa54:	f7ff ffda 	bl	800aa0c <__sfputc_r>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d1f3      	bne.n	800aa44 <__sfputs_r+0xa>
 800aa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa60 <_vfiprintf_r>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	460d      	mov	r5, r1
 800aa66:	b09d      	sub	sp, #116	; 0x74
 800aa68:	4614      	mov	r4, r2
 800aa6a:	4698      	mov	r8, r3
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	b118      	cbz	r0, 800aa78 <_vfiprintf_r+0x18>
 800aa70:	6983      	ldr	r3, [r0, #24]
 800aa72:	b90b      	cbnz	r3, 800aa78 <_vfiprintf_r+0x18>
 800aa74:	f000 fb06 	bl	800b084 <__sinit>
 800aa78:	4b89      	ldr	r3, [pc, #548]	; (800aca0 <_vfiprintf_r+0x240>)
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	d11b      	bne.n	800aab6 <_vfiprintf_r+0x56>
 800aa7e:	6875      	ldr	r5, [r6, #4]
 800aa80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa82:	07d9      	lsls	r1, r3, #31
 800aa84:	d405      	bmi.n	800aa92 <_vfiprintf_r+0x32>
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	059a      	lsls	r2, r3, #22
 800aa8a:	d402      	bmi.n	800aa92 <_vfiprintf_r+0x32>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa8e:	f000 fb97 	bl	800b1c0 <__retarget_lock_acquire_recursive>
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	071b      	lsls	r3, r3, #28
 800aa96:	d501      	bpl.n	800aa9c <_vfiprintf_r+0x3c>
 800aa98:	692b      	ldr	r3, [r5, #16]
 800aa9a:	b9eb      	cbnz	r3, 800aad8 <_vfiprintf_r+0x78>
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f000 f960 	bl	800ad64 <__swsetup_r>
 800aaa4:	b1c0      	cbz	r0, 800aad8 <_vfiprintf_r+0x78>
 800aaa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaa8:	07dc      	lsls	r4, r3, #31
 800aaaa:	d50e      	bpl.n	800aaca <_vfiprintf_r+0x6a>
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	b01d      	add	sp, #116	; 0x74
 800aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab6:	4b7b      	ldr	r3, [pc, #492]	; (800aca4 <_vfiprintf_r+0x244>)
 800aab8:	429d      	cmp	r5, r3
 800aaba:	d101      	bne.n	800aac0 <_vfiprintf_r+0x60>
 800aabc:	68b5      	ldr	r5, [r6, #8]
 800aabe:	e7df      	b.n	800aa80 <_vfiprintf_r+0x20>
 800aac0:	4b79      	ldr	r3, [pc, #484]	; (800aca8 <_vfiprintf_r+0x248>)
 800aac2:	429d      	cmp	r5, r3
 800aac4:	bf08      	it	eq
 800aac6:	68f5      	ldreq	r5, [r6, #12]
 800aac8:	e7da      	b.n	800aa80 <_vfiprintf_r+0x20>
 800aaca:	89ab      	ldrh	r3, [r5, #12]
 800aacc:	0598      	lsls	r0, r3, #22
 800aace:	d4ed      	bmi.n	800aaac <_vfiprintf_r+0x4c>
 800aad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad2:	f000 fb76 	bl	800b1c2 <__retarget_lock_release_recursive>
 800aad6:	e7e9      	b.n	800aaac <_vfiprintf_r+0x4c>
 800aad8:	2300      	movs	r3, #0
 800aada:	9309      	str	r3, [sp, #36]	; 0x24
 800aadc:	2320      	movs	r3, #32
 800aade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae6:	2330      	movs	r3, #48	; 0x30
 800aae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acac <_vfiprintf_r+0x24c>
 800aaec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaf0:	f04f 0901 	mov.w	r9, #1
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	469a      	mov	sl, r3
 800aaf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aafc:	b10a      	cbz	r2, 800ab02 <_vfiprintf_r+0xa2>
 800aafe:	2a25      	cmp	r2, #37	; 0x25
 800ab00:	d1f9      	bne.n	800aaf6 <_vfiprintf_r+0x96>
 800ab02:	ebba 0b04 	subs.w	fp, sl, r4
 800ab06:	d00b      	beq.n	800ab20 <_vfiprintf_r+0xc0>
 800ab08:	465b      	mov	r3, fp
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ff93 	bl	800aa3a <__sfputs_r>
 800ab14:	3001      	adds	r0, #1
 800ab16:	f000 80aa 	beq.w	800ac6e <_vfiprintf_r+0x20e>
 800ab1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab1c:	445a      	add	r2, fp
 800ab1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab20:	f89a 3000 	ldrb.w	r3, [sl]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80a2 	beq.w	800ac6e <_vfiprintf_r+0x20e>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab34:	f10a 0a01 	add.w	sl, sl, #1
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	9307      	str	r3, [sp, #28]
 800ab3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab40:	931a      	str	r3, [sp, #104]	; 0x68
 800ab42:	4654      	mov	r4, sl
 800ab44:	2205      	movs	r2, #5
 800ab46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4a:	4858      	ldr	r0, [pc, #352]	; (800acac <_vfiprintf_r+0x24c>)
 800ab4c:	f7f5 fb80 	bl	8000250 <memchr>
 800ab50:	9a04      	ldr	r2, [sp, #16]
 800ab52:	b9d8      	cbnz	r0, 800ab8c <_vfiprintf_r+0x12c>
 800ab54:	06d1      	lsls	r1, r2, #27
 800ab56:	bf44      	itt	mi
 800ab58:	2320      	movmi	r3, #32
 800ab5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5e:	0713      	lsls	r3, r2, #28
 800ab60:	bf44      	itt	mi
 800ab62:	232b      	movmi	r3, #43	; 0x2b
 800ab64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab68:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab6e:	d015      	beq.n	800ab9c <_vfiprintf_r+0x13c>
 800ab70:	9a07      	ldr	r2, [sp, #28]
 800ab72:	4654      	mov	r4, sl
 800ab74:	2000      	movs	r0, #0
 800ab76:	f04f 0c0a 	mov.w	ip, #10
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab80:	3b30      	subs	r3, #48	; 0x30
 800ab82:	2b09      	cmp	r3, #9
 800ab84:	d94e      	bls.n	800ac24 <_vfiprintf_r+0x1c4>
 800ab86:	b1b0      	cbz	r0, 800abb6 <_vfiprintf_r+0x156>
 800ab88:	9207      	str	r2, [sp, #28]
 800ab8a:	e014      	b.n	800abb6 <_vfiprintf_r+0x156>
 800ab8c:	eba0 0308 	sub.w	r3, r0, r8
 800ab90:	fa09 f303 	lsl.w	r3, r9, r3
 800ab94:	4313      	orrs	r3, r2
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	46a2      	mov	sl, r4
 800ab9a:	e7d2      	b.n	800ab42 <_vfiprintf_r+0xe2>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	1d19      	adds	r1, r3, #4
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	9103      	str	r1, [sp, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bfbb      	ittet	lt
 800aba8:	425b      	neglt	r3, r3
 800abaa:	f042 0202 	orrlt.w	r2, r2, #2
 800abae:	9307      	strge	r3, [sp, #28]
 800abb0:	9307      	strlt	r3, [sp, #28]
 800abb2:	bfb8      	it	lt
 800abb4:	9204      	strlt	r2, [sp, #16]
 800abb6:	7823      	ldrb	r3, [r4, #0]
 800abb8:	2b2e      	cmp	r3, #46	; 0x2e
 800abba:	d10c      	bne.n	800abd6 <_vfiprintf_r+0x176>
 800abbc:	7863      	ldrb	r3, [r4, #1]
 800abbe:	2b2a      	cmp	r3, #42	; 0x2a
 800abc0:	d135      	bne.n	800ac2e <_vfiprintf_r+0x1ce>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	1d1a      	adds	r2, r3, #4
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	9203      	str	r2, [sp, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bfb8      	it	lt
 800abce:	f04f 33ff 	movlt.w	r3, #4294967295
 800abd2:	3402      	adds	r4, #2
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acbc <_vfiprintf_r+0x25c>
 800abda:	7821      	ldrb	r1, [r4, #0]
 800abdc:	2203      	movs	r2, #3
 800abde:	4650      	mov	r0, sl
 800abe0:	f7f5 fb36 	bl	8000250 <memchr>
 800abe4:	b140      	cbz	r0, 800abf8 <_vfiprintf_r+0x198>
 800abe6:	2340      	movs	r3, #64	; 0x40
 800abe8:	eba0 000a 	sub.w	r0, r0, sl
 800abec:	fa03 f000 	lsl.w	r0, r3, r0
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	4303      	orrs	r3, r0
 800abf4:	3401      	adds	r4, #1
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfc:	482c      	ldr	r0, [pc, #176]	; (800acb0 <_vfiprintf_r+0x250>)
 800abfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac02:	2206      	movs	r2, #6
 800ac04:	f7f5 fb24 	bl	8000250 <memchr>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d03f      	beq.n	800ac8c <_vfiprintf_r+0x22c>
 800ac0c:	4b29      	ldr	r3, [pc, #164]	; (800acb4 <_vfiprintf_r+0x254>)
 800ac0e:	bb1b      	cbnz	r3, 800ac58 <_vfiprintf_r+0x1f8>
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	3307      	adds	r3, #7
 800ac14:	f023 0307 	bic.w	r3, r3, #7
 800ac18:	3308      	adds	r3, #8
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1e:	443b      	add	r3, r7
 800ac20:	9309      	str	r3, [sp, #36]	; 0x24
 800ac22:	e767      	b.n	800aaf4 <_vfiprintf_r+0x94>
 800ac24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac28:	460c      	mov	r4, r1
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	e7a5      	b.n	800ab7a <_vfiprintf_r+0x11a>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	3401      	adds	r4, #1
 800ac32:	9305      	str	r3, [sp, #20]
 800ac34:	4619      	mov	r1, r3
 800ac36:	f04f 0c0a 	mov.w	ip, #10
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac40:	3a30      	subs	r2, #48	; 0x30
 800ac42:	2a09      	cmp	r2, #9
 800ac44:	d903      	bls.n	800ac4e <_vfiprintf_r+0x1ee>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0c5      	beq.n	800abd6 <_vfiprintf_r+0x176>
 800ac4a:	9105      	str	r1, [sp, #20]
 800ac4c:	e7c3      	b.n	800abd6 <_vfiprintf_r+0x176>
 800ac4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac52:	4604      	mov	r4, r0
 800ac54:	2301      	movs	r3, #1
 800ac56:	e7f0      	b.n	800ac3a <_vfiprintf_r+0x1da>
 800ac58:	ab03      	add	r3, sp, #12
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	462a      	mov	r2, r5
 800ac5e:	4b16      	ldr	r3, [pc, #88]	; (800acb8 <_vfiprintf_r+0x258>)
 800ac60:	a904      	add	r1, sp, #16
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7fc fb94 	bl	8007390 <_printf_float>
 800ac68:	4607      	mov	r7, r0
 800ac6a:	1c78      	adds	r0, r7, #1
 800ac6c:	d1d6      	bne.n	800ac1c <_vfiprintf_r+0x1bc>
 800ac6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac70:	07d9      	lsls	r1, r3, #31
 800ac72:	d405      	bmi.n	800ac80 <_vfiprintf_r+0x220>
 800ac74:	89ab      	ldrh	r3, [r5, #12]
 800ac76:	059a      	lsls	r2, r3, #22
 800ac78:	d402      	bmi.n	800ac80 <_vfiprintf_r+0x220>
 800ac7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac7c:	f000 faa1 	bl	800b1c2 <__retarget_lock_release_recursive>
 800ac80:	89ab      	ldrh	r3, [r5, #12]
 800ac82:	065b      	lsls	r3, r3, #25
 800ac84:	f53f af12 	bmi.w	800aaac <_vfiprintf_r+0x4c>
 800ac88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac8a:	e711      	b.n	800aab0 <_vfiprintf_r+0x50>
 800ac8c:	ab03      	add	r3, sp, #12
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	462a      	mov	r2, r5
 800ac92:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <_vfiprintf_r+0x258>)
 800ac94:	a904      	add	r1, sp, #16
 800ac96:	4630      	mov	r0, r6
 800ac98:	f7fc fe06 	bl	80078a8 <_printf_i>
 800ac9c:	e7e4      	b.n	800ac68 <_vfiprintf_r+0x208>
 800ac9e:	bf00      	nop
 800aca0:	0800baac 	.word	0x0800baac
 800aca4:	0800bacc 	.word	0x0800bacc
 800aca8:	0800ba8c 	.word	0x0800ba8c
 800acac:	0800b93c 	.word	0x0800b93c
 800acb0:	0800b946 	.word	0x0800b946
 800acb4:	08007391 	.word	0x08007391
 800acb8:	0800aa3b 	.word	0x0800aa3b
 800acbc:	0800b942 	.word	0x0800b942

0800acc0 <__swbuf_r>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	460e      	mov	r6, r1
 800acc4:	4614      	mov	r4, r2
 800acc6:	4605      	mov	r5, r0
 800acc8:	b118      	cbz	r0, 800acd2 <__swbuf_r+0x12>
 800acca:	6983      	ldr	r3, [r0, #24]
 800accc:	b90b      	cbnz	r3, 800acd2 <__swbuf_r+0x12>
 800acce:	f000 f9d9 	bl	800b084 <__sinit>
 800acd2:	4b21      	ldr	r3, [pc, #132]	; (800ad58 <__swbuf_r+0x98>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d12b      	bne.n	800ad30 <__swbuf_r+0x70>
 800acd8:	686c      	ldr	r4, [r5, #4]
 800acda:	69a3      	ldr	r3, [r4, #24]
 800acdc:	60a3      	str	r3, [r4, #8]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	071a      	lsls	r2, r3, #28
 800ace2:	d52f      	bpl.n	800ad44 <__swbuf_r+0x84>
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	b36b      	cbz	r3, 800ad44 <__swbuf_r+0x84>
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	6820      	ldr	r0, [r4, #0]
 800acec:	1ac0      	subs	r0, r0, r3
 800acee:	6963      	ldr	r3, [r4, #20]
 800acf0:	b2f6      	uxtb	r6, r6
 800acf2:	4283      	cmp	r3, r0
 800acf4:	4637      	mov	r7, r6
 800acf6:	dc04      	bgt.n	800ad02 <__swbuf_r+0x42>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f92e 	bl	800af5c <_fflush_r>
 800ad00:	bb30      	cbnz	r0, 800ad50 <__swbuf_r+0x90>
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	60a3      	str	r3, [r4, #8]
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	6022      	str	r2, [r4, #0]
 800ad0e:	701e      	strb	r6, [r3, #0]
 800ad10:	6963      	ldr	r3, [r4, #20]
 800ad12:	3001      	adds	r0, #1
 800ad14:	4283      	cmp	r3, r0
 800ad16:	d004      	beq.n	800ad22 <__swbuf_r+0x62>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	07db      	lsls	r3, r3, #31
 800ad1c:	d506      	bpl.n	800ad2c <__swbuf_r+0x6c>
 800ad1e:	2e0a      	cmp	r6, #10
 800ad20:	d104      	bne.n	800ad2c <__swbuf_r+0x6c>
 800ad22:	4621      	mov	r1, r4
 800ad24:	4628      	mov	r0, r5
 800ad26:	f000 f919 	bl	800af5c <_fflush_r>
 800ad2a:	b988      	cbnz	r0, 800ad50 <__swbuf_r+0x90>
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <__swbuf_r+0x9c>)
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d101      	bne.n	800ad3a <__swbuf_r+0x7a>
 800ad36:	68ac      	ldr	r4, [r5, #8]
 800ad38:	e7cf      	b.n	800acda <__swbuf_r+0x1a>
 800ad3a:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <__swbuf_r+0xa0>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	bf08      	it	eq
 800ad40:	68ec      	ldreq	r4, [r5, #12]
 800ad42:	e7ca      	b.n	800acda <__swbuf_r+0x1a>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 f80c 	bl	800ad64 <__swsetup_r>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d0cb      	beq.n	800ace8 <__swbuf_r+0x28>
 800ad50:	f04f 37ff 	mov.w	r7, #4294967295
 800ad54:	e7ea      	b.n	800ad2c <__swbuf_r+0x6c>
 800ad56:	bf00      	nop
 800ad58:	0800baac 	.word	0x0800baac
 800ad5c:	0800bacc 	.word	0x0800bacc
 800ad60:	0800ba8c 	.word	0x0800ba8c

0800ad64 <__swsetup_r>:
 800ad64:	4b32      	ldr	r3, [pc, #200]	; (800ae30 <__swsetup_r+0xcc>)
 800ad66:	b570      	push	{r4, r5, r6, lr}
 800ad68:	681d      	ldr	r5, [r3, #0]
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	b125      	cbz	r5, 800ad7a <__swsetup_r+0x16>
 800ad70:	69ab      	ldr	r3, [r5, #24]
 800ad72:	b913      	cbnz	r3, 800ad7a <__swsetup_r+0x16>
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 f985 	bl	800b084 <__sinit>
 800ad7a:	4b2e      	ldr	r3, [pc, #184]	; (800ae34 <__swsetup_r+0xd0>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	d10f      	bne.n	800ada0 <__swsetup_r+0x3c>
 800ad80:	686c      	ldr	r4, [r5, #4]
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad88:	0719      	lsls	r1, r3, #28
 800ad8a:	d42c      	bmi.n	800ade6 <__swsetup_r+0x82>
 800ad8c:	06dd      	lsls	r5, r3, #27
 800ad8e:	d411      	bmi.n	800adb4 <__swsetup_r+0x50>
 800ad90:	2309      	movs	r3, #9
 800ad92:	6033      	str	r3, [r6, #0]
 800ad94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9e:	e03e      	b.n	800ae1e <__swsetup_r+0xba>
 800ada0:	4b25      	ldr	r3, [pc, #148]	; (800ae38 <__swsetup_r+0xd4>)
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d101      	bne.n	800adaa <__swsetup_r+0x46>
 800ada6:	68ac      	ldr	r4, [r5, #8]
 800ada8:	e7eb      	b.n	800ad82 <__swsetup_r+0x1e>
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <__swsetup_r+0xd8>)
 800adac:	429c      	cmp	r4, r3
 800adae:	bf08      	it	eq
 800adb0:	68ec      	ldreq	r4, [r5, #12]
 800adb2:	e7e6      	b.n	800ad82 <__swsetup_r+0x1e>
 800adb4:	0758      	lsls	r0, r3, #29
 800adb6:	d512      	bpl.n	800adde <__swsetup_r+0x7a>
 800adb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adba:	b141      	cbz	r1, 800adce <__swsetup_r+0x6a>
 800adbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d002      	beq.n	800adca <__swsetup_r+0x66>
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff fb61 	bl	800a48c <_free_r>
 800adca:	2300      	movs	r3, #0
 800adcc:	6363      	str	r3, [r4, #52]	; 0x34
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800add4:	81a3      	strh	r3, [r4, #12]
 800add6:	2300      	movs	r3, #0
 800add8:	6063      	str	r3, [r4, #4]
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f043 0308 	orr.w	r3, r3, #8
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	b94b      	cbnz	r3, 800adfe <__swsetup_r+0x9a>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf4:	d003      	beq.n	800adfe <__swsetup_r+0x9a>
 800adf6:	4621      	mov	r1, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	f000 fa07 	bl	800b20c <__smakebuf_r>
 800adfe:	89a0      	ldrh	r0, [r4, #12]
 800ae00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae04:	f010 0301 	ands.w	r3, r0, #1
 800ae08:	d00a      	beq.n	800ae20 <__swsetup_r+0xbc>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60a3      	str	r3, [r4, #8]
 800ae0e:	6963      	ldr	r3, [r4, #20]
 800ae10:	425b      	negs	r3, r3
 800ae12:	61a3      	str	r3, [r4, #24]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	b943      	cbnz	r3, 800ae2a <__swsetup_r+0xc6>
 800ae18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae1c:	d1ba      	bne.n	800ad94 <__swsetup_r+0x30>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	0781      	lsls	r1, r0, #30
 800ae22:	bf58      	it	pl
 800ae24:	6963      	ldrpl	r3, [r4, #20]
 800ae26:	60a3      	str	r3, [r4, #8]
 800ae28:	e7f4      	b.n	800ae14 <__swsetup_r+0xb0>
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	e7f7      	b.n	800ae1e <__swsetup_r+0xba>
 800ae2e:	bf00      	nop
 800ae30:	20000048 	.word	0x20000048
 800ae34:	0800baac 	.word	0x0800baac
 800ae38:	0800bacc 	.word	0x0800bacc
 800ae3c:	0800ba8c 	.word	0x0800ba8c

0800ae40 <abort>:
 800ae40:	b508      	push	{r3, lr}
 800ae42:	2006      	movs	r0, #6
 800ae44:	f000 fa52 	bl	800b2ec <raise>
 800ae48:	2001      	movs	r0, #1
 800ae4a:	f7f7 fe21 	bl	8002a90 <_exit>
	...

0800ae50 <__sflush_r>:
 800ae50:	898a      	ldrh	r2, [r1, #12]
 800ae52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	4605      	mov	r5, r0
 800ae58:	0710      	lsls	r0, r2, #28
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	d458      	bmi.n	800af10 <__sflush_r+0xc0>
 800ae5e:	684b      	ldr	r3, [r1, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dc05      	bgt.n	800ae70 <__sflush_r+0x20>
 800ae64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dc02      	bgt.n	800ae70 <__sflush_r+0x20>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	d0f9      	beq.n	800ae6a <__sflush_r+0x1a>
 800ae76:	2300      	movs	r3, #0
 800ae78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae7c:	682f      	ldr	r7, [r5, #0]
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	d032      	beq.n	800aee8 <__sflush_r+0x98>
 800ae82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	075a      	lsls	r2, r3, #29
 800ae88:	d505      	bpl.n	800ae96 <__sflush_r+0x46>
 800ae8a:	6863      	ldr	r3, [r4, #4]
 800ae8c:	1ac0      	subs	r0, r0, r3
 800ae8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae90:	b10b      	cbz	r3, 800ae96 <__sflush_r+0x46>
 800ae92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae94:	1ac0      	subs	r0, r0, r3
 800ae96:	2300      	movs	r3, #0
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae9c:	6a21      	ldr	r1, [r4, #32]
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b0      	blx	r6
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	d106      	bne.n	800aeb6 <__sflush_r+0x66>
 800aea8:	6829      	ldr	r1, [r5, #0]
 800aeaa:	291d      	cmp	r1, #29
 800aeac:	d82c      	bhi.n	800af08 <__sflush_r+0xb8>
 800aeae:	4a2a      	ldr	r2, [pc, #168]	; (800af58 <__sflush_r+0x108>)
 800aeb0:	40ca      	lsrs	r2, r1
 800aeb2:	07d6      	lsls	r6, r2, #31
 800aeb4:	d528      	bpl.n	800af08 <__sflush_r+0xb8>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	6062      	str	r2, [r4, #4]
 800aeba:	04d9      	lsls	r1, r3, #19
 800aebc:	6922      	ldr	r2, [r4, #16]
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	d504      	bpl.n	800aecc <__sflush_r+0x7c>
 800aec2:	1c42      	adds	r2, r0, #1
 800aec4:	d101      	bne.n	800aeca <__sflush_r+0x7a>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	b903      	cbnz	r3, 800aecc <__sflush_r+0x7c>
 800aeca:	6560      	str	r0, [r4, #84]	; 0x54
 800aecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aece:	602f      	str	r7, [r5, #0]
 800aed0:	2900      	cmp	r1, #0
 800aed2:	d0ca      	beq.n	800ae6a <__sflush_r+0x1a>
 800aed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed8:	4299      	cmp	r1, r3
 800aeda:	d002      	beq.n	800aee2 <__sflush_r+0x92>
 800aedc:	4628      	mov	r0, r5
 800aede:	f7ff fad5 	bl	800a48c <_free_r>
 800aee2:	2000      	movs	r0, #0
 800aee4:	6360      	str	r0, [r4, #52]	; 0x34
 800aee6:	e7c1      	b.n	800ae6c <__sflush_r+0x1c>
 800aee8:	6a21      	ldr	r1, [r4, #32]
 800aeea:	2301      	movs	r3, #1
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b0      	blx	r6
 800aef0:	1c41      	adds	r1, r0, #1
 800aef2:	d1c7      	bne.n	800ae84 <__sflush_r+0x34>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0c4      	beq.n	800ae84 <__sflush_r+0x34>
 800aefa:	2b1d      	cmp	r3, #29
 800aefc:	d001      	beq.n	800af02 <__sflush_r+0xb2>
 800aefe:	2b16      	cmp	r3, #22
 800af00:	d101      	bne.n	800af06 <__sflush_r+0xb6>
 800af02:	602f      	str	r7, [r5, #0]
 800af04:	e7b1      	b.n	800ae6a <__sflush_r+0x1a>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	e7ad      	b.n	800ae6c <__sflush_r+0x1c>
 800af10:	690f      	ldr	r7, [r1, #16]
 800af12:	2f00      	cmp	r7, #0
 800af14:	d0a9      	beq.n	800ae6a <__sflush_r+0x1a>
 800af16:	0793      	lsls	r3, r2, #30
 800af18:	680e      	ldr	r6, [r1, #0]
 800af1a:	bf08      	it	eq
 800af1c:	694b      	ldreq	r3, [r1, #20]
 800af1e:	600f      	str	r7, [r1, #0]
 800af20:	bf18      	it	ne
 800af22:	2300      	movne	r3, #0
 800af24:	eba6 0807 	sub.w	r8, r6, r7
 800af28:	608b      	str	r3, [r1, #8]
 800af2a:	f1b8 0f00 	cmp.w	r8, #0
 800af2e:	dd9c      	ble.n	800ae6a <__sflush_r+0x1a>
 800af30:	6a21      	ldr	r1, [r4, #32]
 800af32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af34:	4643      	mov	r3, r8
 800af36:	463a      	mov	r2, r7
 800af38:	4628      	mov	r0, r5
 800af3a:	47b0      	blx	r6
 800af3c:	2800      	cmp	r0, #0
 800af3e:	dc06      	bgt.n	800af4e <__sflush_r+0xfe>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	f04f 30ff 	mov.w	r0, #4294967295
 800af4c:	e78e      	b.n	800ae6c <__sflush_r+0x1c>
 800af4e:	4407      	add	r7, r0
 800af50:	eba8 0800 	sub.w	r8, r8, r0
 800af54:	e7e9      	b.n	800af2a <__sflush_r+0xda>
 800af56:	bf00      	nop
 800af58:	20400001 	.word	0x20400001

0800af5c <_fflush_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	690b      	ldr	r3, [r1, #16]
 800af60:	4605      	mov	r5, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b913      	cbnz	r3, 800af6c <_fflush_r+0x10>
 800af66:	2500      	movs	r5, #0
 800af68:	4628      	mov	r0, r5
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	b118      	cbz	r0, 800af76 <_fflush_r+0x1a>
 800af6e:	6983      	ldr	r3, [r0, #24]
 800af70:	b90b      	cbnz	r3, 800af76 <_fflush_r+0x1a>
 800af72:	f000 f887 	bl	800b084 <__sinit>
 800af76:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <_fflush_r+0x6c>)
 800af78:	429c      	cmp	r4, r3
 800af7a:	d11b      	bne.n	800afb4 <_fflush_r+0x58>
 800af7c:	686c      	ldr	r4, [r5, #4]
 800af7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0ef      	beq.n	800af66 <_fflush_r+0xa>
 800af86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af88:	07d0      	lsls	r0, r2, #31
 800af8a:	d404      	bmi.n	800af96 <_fflush_r+0x3a>
 800af8c:	0599      	lsls	r1, r3, #22
 800af8e:	d402      	bmi.n	800af96 <_fflush_r+0x3a>
 800af90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af92:	f000 f915 	bl	800b1c0 <__retarget_lock_acquire_recursive>
 800af96:	4628      	mov	r0, r5
 800af98:	4621      	mov	r1, r4
 800af9a:	f7ff ff59 	bl	800ae50 <__sflush_r>
 800af9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afa0:	07da      	lsls	r2, r3, #31
 800afa2:	4605      	mov	r5, r0
 800afa4:	d4e0      	bmi.n	800af68 <_fflush_r+0xc>
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	059b      	lsls	r3, r3, #22
 800afaa:	d4dd      	bmi.n	800af68 <_fflush_r+0xc>
 800afac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afae:	f000 f908 	bl	800b1c2 <__retarget_lock_release_recursive>
 800afb2:	e7d9      	b.n	800af68 <_fflush_r+0xc>
 800afb4:	4b05      	ldr	r3, [pc, #20]	; (800afcc <_fflush_r+0x70>)
 800afb6:	429c      	cmp	r4, r3
 800afb8:	d101      	bne.n	800afbe <_fflush_r+0x62>
 800afba:	68ac      	ldr	r4, [r5, #8]
 800afbc:	e7df      	b.n	800af7e <_fflush_r+0x22>
 800afbe:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <_fflush_r+0x74>)
 800afc0:	429c      	cmp	r4, r3
 800afc2:	bf08      	it	eq
 800afc4:	68ec      	ldreq	r4, [r5, #12]
 800afc6:	e7da      	b.n	800af7e <_fflush_r+0x22>
 800afc8:	0800baac 	.word	0x0800baac
 800afcc:	0800bacc 	.word	0x0800bacc
 800afd0:	0800ba8c 	.word	0x0800ba8c

0800afd4 <std>:
 800afd4:	2300      	movs	r3, #0
 800afd6:	b510      	push	{r4, lr}
 800afd8:	4604      	mov	r4, r0
 800afda:	e9c0 3300 	strd	r3, r3, [r0]
 800afde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afe2:	6083      	str	r3, [r0, #8]
 800afe4:	8181      	strh	r1, [r0, #12]
 800afe6:	6643      	str	r3, [r0, #100]	; 0x64
 800afe8:	81c2      	strh	r2, [r0, #14]
 800afea:	6183      	str	r3, [r0, #24]
 800afec:	4619      	mov	r1, r3
 800afee:	2208      	movs	r2, #8
 800aff0:	305c      	adds	r0, #92	; 0x5c
 800aff2:	f7fc f933 	bl	800725c <memset>
 800aff6:	4b05      	ldr	r3, [pc, #20]	; (800b00c <std+0x38>)
 800aff8:	6263      	str	r3, [r4, #36]	; 0x24
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <std+0x3c>)
 800affc:	62a3      	str	r3, [r4, #40]	; 0x28
 800affe:	4b05      	ldr	r3, [pc, #20]	; (800b014 <std+0x40>)
 800b000:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b002:	4b05      	ldr	r3, [pc, #20]	; (800b018 <std+0x44>)
 800b004:	6224      	str	r4, [r4, #32]
 800b006:	6323      	str	r3, [r4, #48]	; 0x30
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	bf00      	nop
 800b00c:	0800b325 	.word	0x0800b325
 800b010:	0800b347 	.word	0x0800b347
 800b014:	0800b37f 	.word	0x0800b37f
 800b018:	0800b3a3 	.word	0x0800b3a3

0800b01c <_cleanup_r>:
 800b01c:	4901      	ldr	r1, [pc, #4]	; (800b024 <_cleanup_r+0x8>)
 800b01e:	f000 b8af 	b.w	800b180 <_fwalk_reent>
 800b022:	bf00      	nop
 800b024:	0800af5d 	.word	0x0800af5d

0800b028 <__sfmoreglue>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	1e4a      	subs	r2, r1, #1
 800b02c:	2568      	movs	r5, #104	; 0x68
 800b02e:	4355      	muls	r5, r2
 800b030:	460e      	mov	r6, r1
 800b032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b036:	f7ff fa79 	bl	800a52c <_malloc_r>
 800b03a:	4604      	mov	r4, r0
 800b03c:	b140      	cbz	r0, 800b050 <__sfmoreglue+0x28>
 800b03e:	2100      	movs	r1, #0
 800b040:	e9c0 1600 	strd	r1, r6, [r0]
 800b044:	300c      	adds	r0, #12
 800b046:	60a0      	str	r0, [r4, #8]
 800b048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b04c:	f7fc f906 	bl	800725c <memset>
 800b050:	4620      	mov	r0, r4
 800b052:	bd70      	pop	{r4, r5, r6, pc}

0800b054 <__sfp_lock_acquire>:
 800b054:	4801      	ldr	r0, [pc, #4]	; (800b05c <__sfp_lock_acquire+0x8>)
 800b056:	f000 b8b3 	b.w	800b1c0 <__retarget_lock_acquire_recursive>
 800b05a:	bf00      	nop
 800b05c:	200004bc 	.word	0x200004bc

0800b060 <__sfp_lock_release>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__sfp_lock_release+0x8>)
 800b062:	f000 b8ae 	b.w	800b1c2 <__retarget_lock_release_recursive>
 800b066:	bf00      	nop
 800b068:	200004bc 	.word	0x200004bc

0800b06c <__sinit_lock_acquire>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__sinit_lock_acquire+0x8>)
 800b06e:	f000 b8a7 	b.w	800b1c0 <__retarget_lock_acquire_recursive>
 800b072:	bf00      	nop
 800b074:	200004b7 	.word	0x200004b7

0800b078 <__sinit_lock_release>:
 800b078:	4801      	ldr	r0, [pc, #4]	; (800b080 <__sinit_lock_release+0x8>)
 800b07a:	f000 b8a2 	b.w	800b1c2 <__retarget_lock_release_recursive>
 800b07e:	bf00      	nop
 800b080:	200004b7 	.word	0x200004b7

0800b084 <__sinit>:
 800b084:	b510      	push	{r4, lr}
 800b086:	4604      	mov	r4, r0
 800b088:	f7ff fff0 	bl	800b06c <__sinit_lock_acquire>
 800b08c:	69a3      	ldr	r3, [r4, #24]
 800b08e:	b11b      	cbz	r3, 800b098 <__sinit+0x14>
 800b090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b094:	f7ff bff0 	b.w	800b078 <__sinit_lock_release>
 800b098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b09c:	6523      	str	r3, [r4, #80]	; 0x50
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <__sinit+0x68>)
 800b0a0:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <__sinit+0x6c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	bf04      	itt	eq
 800b0aa:	2301      	moveq	r3, #1
 800b0ac:	61a3      	streq	r3, [r4, #24]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f820 	bl	800b0f4 <__sfp>
 800b0b4:	6060      	str	r0, [r4, #4]
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f000 f81c 	bl	800b0f4 <__sfp>
 800b0bc:	60a0      	str	r0, [r4, #8]
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 f818 	bl	800b0f4 <__sfp>
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	60e0      	str	r0, [r4, #12]
 800b0c8:	2104      	movs	r1, #4
 800b0ca:	6860      	ldr	r0, [r4, #4]
 800b0cc:	f7ff ff82 	bl	800afd4 <std>
 800b0d0:	68a0      	ldr	r0, [r4, #8]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	2109      	movs	r1, #9
 800b0d6:	f7ff ff7d 	bl	800afd4 <std>
 800b0da:	68e0      	ldr	r0, [r4, #12]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	2112      	movs	r1, #18
 800b0e0:	f7ff ff78 	bl	800afd4 <std>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	61a3      	str	r3, [r4, #24]
 800b0e8:	e7d2      	b.n	800b090 <__sinit+0xc>
 800b0ea:	bf00      	nop
 800b0ec:	0800b63c 	.word	0x0800b63c
 800b0f0:	0800b01d 	.word	0x0800b01d

0800b0f4 <__sfp>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	f7ff ffac 	bl	800b054 <__sfp_lock_acquire>
 800b0fc:	4b1e      	ldr	r3, [pc, #120]	; (800b178 <__sfp+0x84>)
 800b0fe:	681e      	ldr	r6, [r3, #0]
 800b100:	69b3      	ldr	r3, [r6, #24]
 800b102:	b913      	cbnz	r3, 800b10a <__sfp+0x16>
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff ffbd 	bl	800b084 <__sinit>
 800b10a:	3648      	adds	r6, #72	; 0x48
 800b10c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b110:	3b01      	subs	r3, #1
 800b112:	d503      	bpl.n	800b11c <__sfp+0x28>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	b30b      	cbz	r3, 800b15c <__sfp+0x68>
 800b118:	6836      	ldr	r6, [r6, #0]
 800b11a:	e7f7      	b.n	800b10c <__sfp+0x18>
 800b11c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b120:	b9d5      	cbnz	r5, 800b158 <__sfp+0x64>
 800b122:	4b16      	ldr	r3, [pc, #88]	; (800b17c <__sfp+0x88>)
 800b124:	60e3      	str	r3, [r4, #12]
 800b126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b12a:	6665      	str	r5, [r4, #100]	; 0x64
 800b12c:	f000 f847 	bl	800b1be <__retarget_lock_init_recursive>
 800b130:	f7ff ff96 	bl	800b060 <__sfp_lock_release>
 800b134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b13c:	6025      	str	r5, [r4, #0]
 800b13e:	61a5      	str	r5, [r4, #24]
 800b140:	2208      	movs	r2, #8
 800b142:	4629      	mov	r1, r5
 800b144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b148:	f7fc f888 	bl	800725c <memset>
 800b14c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b154:	4620      	mov	r0, r4
 800b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b158:	3468      	adds	r4, #104	; 0x68
 800b15a:	e7d9      	b.n	800b110 <__sfp+0x1c>
 800b15c:	2104      	movs	r1, #4
 800b15e:	4638      	mov	r0, r7
 800b160:	f7ff ff62 	bl	800b028 <__sfmoreglue>
 800b164:	4604      	mov	r4, r0
 800b166:	6030      	str	r0, [r6, #0]
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1d5      	bne.n	800b118 <__sfp+0x24>
 800b16c:	f7ff ff78 	bl	800b060 <__sfp_lock_release>
 800b170:	230c      	movs	r3, #12
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	e7ee      	b.n	800b154 <__sfp+0x60>
 800b176:	bf00      	nop
 800b178:	0800b63c 	.word	0x0800b63c
 800b17c:	ffff0001 	.word	0xffff0001

0800b180 <_fwalk_reent>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	4606      	mov	r6, r0
 800b186:	4688      	mov	r8, r1
 800b188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b18c:	2700      	movs	r7, #0
 800b18e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b192:	f1b9 0901 	subs.w	r9, r9, #1
 800b196:	d505      	bpl.n	800b1a4 <_fwalk_reent+0x24>
 800b198:	6824      	ldr	r4, [r4, #0]
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d1f7      	bne.n	800b18e <_fwalk_reent+0xe>
 800b19e:	4638      	mov	r0, r7
 800b1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a4:	89ab      	ldrh	r3, [r5, #12]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d907      	bls.n	800b1ba <_fwalk_reent+0x3a>
 800b1aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	d003      	beq.n	800b1ba <_fwalk_reent+0x3a>
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	47c0      	blx	r8
 800b1b8:	4307      	orrs	r7, r0
 800b1ba:	3568      	adds	r5, #104	; 0x68
 800b1bc:	e7e9      	b.n	800b192 <_fwalk_reent+0x12>

0800b1be <__retarget_lock_init_recursive>:
 800b1be:	4770      	bx	lr

0800b1c0 <__retarget_lock_acquire_recursive>:
 800b1c0:	4770      	bx	lr

0800b1c2 <__retarget_lock_release_recursive>:
 800b1c2:	4770      	bx	lr

0800b1c4 <__swhatbuf_r>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	b096      	sub	sp, #88	; 0x58
 800b1d0:	4614      	mov	r4, r2
 800b1d2:	461d      	mov	r5, r3
 800b1d4:	da07      	bge.n	800b1e6 <__swhatbuf_r+0x22>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	89b3      	ldrh	r3, [r6, #12]
 800b1dc:	061a      	lsls	r2, r3, #24
 800b1de:	d410      	bmi.n	800b202 <__swhatbuf_r+0x3e>
 800b1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1e4:	e00e      	b.n	800b204 <__swhatbuf_r+0x40>
 800b1e6:	466a      	mov	r2, sp
 800b1e8:	f000 f902 	bl	800b3f0 <_fstat_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	dbf2      	blt.n	800b1d6 <__swhatbuf_r+0x12>
 800b1f0:	9a01      	ldr	r2, [sp, #4]
 800b1f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1fa:	425a      	negs	r2, r3
 800b1fc:	415a      	adcs	r2, r3
 800b1fe:	602a      	str	r2, [r5, #0]
 800b200:	e7ee      	b.n	800b1e0 <__swhatbuf_r+0x1c>
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	2000      	movs	r0, #0
 800b206:	6023      	str	r3, [r4, #0]
 800b208:	b016      	add	sp, #88	; 0x58
 800b20a:	bd70      	pop	{r4, r5, r6, pc}

0800b20c <__smakebuf_r>:
 800b20c:	898b      	ldrh	r3, [r1, #12]
 800b20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b210:	079d      	lsls	r5, r3, #30
 800b212:	4606      	mov	r6, r0
 800b214:	460c      	mov	r4, r1
 800b216:	d507      	bpl.n	800b228 <__smakebuf_r+0x1c>
 800b218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	6123      	str	r3, [r4, #16]
 800b220:	2301      	movs	r3, #1
 800b222:	6163      	str	r3, [r4, #20]
 800b224:	b002      	add	sp, #8
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	ab01      	add	r3, sp, #4
 800b22a:	466a      	mov	r2, sp
 800b22c:	f7ff ffca 	bl	800b1c4 <__swhatbuf_r>
 800b230:	9900      	ldr	r1, [sp, #0]
 800b232:	4605      	mov	r5, r0
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff f979 	bl	800a52c <_malloc_r>
 800b23a:	b948      	cbnz	r0, 800b250 <__smakebuf_r+0x44>
 800b23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b240:	059a      	lsls	r2, r3, #22
 800b242:	d4ef      	bmi.n	800b224 <__smakebuf_r+0x18>
 800b244:	f023 0303 	bic.w	r3, r3, #3
 800b248:	f043 0302 	orr.w	r3, r3, #2
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	e7e3      	b.n	800b218 <__smakebuf_r+0xc>
 800b250:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <__smakebuf_r+0x7c>)
 800b252:	62b3      	str	r3, [r6, #40]	; 0x28
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	9b00      	ldr	r3, [sp, #0]
 800b260:	6163      	str	r3, [r4, #20]
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	6120      	str	r0, [r4, #16]
 800b266:	b15b      	cbz	r3, 800b280 <__smakebuf_r+0x74>
 800b268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b26c:	4630      	mov	r0, r6
 800b26e:	f000 f8d1 	bl	800b414 <_isatty_r>
 800b272:	b128      	cbz	r0, 800b280 <__smakebuf_r+0x74>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	f043 0301 	orr.w	r3, r3, #1
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	89a0      	ldrh	r0, [r4, #12]
 800b282:	4305      	orrs	r5, r0
 800b284:	81a5      	strh	r5, [r4, #12]
 800b286:	e7cd      	b.n	800b224 <__smakebuf_r+0x18>
 800b288:	0800b01d 	.word	0x0800b01d

0800b28c <_malloc_usable_size_r>:
 800b28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b290:	1f18      	subs	r0, r3, #4
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfbc      	itt	lt
 800b296:	580b      	ldrlt	r3, [r1, r0]
 800b298:	18c0      	addlt	r0, r0, r3
 800b29a:	4770      	bx	lr

0800b29c <_raise_r>:
 800b29c:	291f      	cmp	r1, #31
 800b29e:	b538      	push	{r3, r4, r5, lr}
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	d904      	bls.n	800b2b0 <_raise_r+0x14>
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2b2:	b112      	cbz	r2, 800b2ba <_raise_r+0x1e>
 800b2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2b8:	b94b      	cbnz	r3, 800b2ce <_raise_r+0x32>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 f830 	bl	800b320 <_getpid_r>
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f000 b817 	b.w	800b2fc <_kill_r>
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d00a      	beq.n	800b2e8 <_raise_r+0x4c>
 800b2d2:	1c59      	adds	r1, r3, #1
 800b2d4:	d103      	bne.n	800b2de <_raise_r+0x42>
 800b2d6:	2316      	movs	r3, #22
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	2001      	movs	r0, #1
 800b2dc:	e7e7      	b.n	800b2ae <_raise_r+0x12>
 800b2de:	2400      	movs	r4, #0
 800b2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	4798      	blx	r3
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7e0      	b.n	800b2ae <_raise_r+0x12>

0800b2ec <raise>:
 800b2ec:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <raise+0xc>)
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	f7ff bfd3 	b.w	800b29c <_raise_r>
 800b2f6:	bf00      	nop
 800b2f8:	20000048 	.word	0x20000048

0800b2fc <_kill_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	; (800b31c <_kill_r+0x20>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f7f7 fbb1 	bl	8002a70 <_kill>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d102      	bne.n	800b318 <_kill_r+0x1c>
 800b312:	682b      	ldr	r3, [r5, #0]
 800b314:	b103      	cbz	r3, 800b318 <_kill_r+0x1c>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	bf00      	nop
 800b31c:	200004b0 	.word	0x200004b0

0800b320 <_getpid_r>:
 800b320:	f7f7 bb9e 	b.w	8002a60 <_getpid>

0800b324 <__sread>:
 800b324:	b510      	push	{r4, lr}
 800b326:	460c      	mov	r4, r1
 800b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32c:	f000 f894 	bl	800b458 <_read_r>
 800b330:	2800      	cmp	r0, #0
 800b332:	bfab      	itete	ge
 800b334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b336:	89a3      	ldrhlt	r3, [r4, #12]
 800b338:	181b      	addge	r3, r3, r0
 800b33a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b33e:	bfac      	ite	ge
 800b340:	6563      	strge	r3, [r4, #84]	; 0x54
 800b342:	81a3      	strhlt	r3, [r4, #12]
 800b344:	bd10      	pop	{r4, pc}

0800b346 <__swrite>:
 800b346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34a:	461f      	mov	r7, r3
 800b34c:	898b      	ldrh	r3, [r1, #12]
 800b34e:	05db      	lsls	r3, r3, #23
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4616      	mov	r6, r2
 800b356:	d505      	bpl.n	800b364 <__swrite+0x1e>
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	2302      	movs	r3, #2
 800b35e:	2200      	movs	r2, #0
 800b360:	f000 f868 	bl	800b434 <_lseek_r>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b36a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	4632      	mov	r2, r6
 800b372:	463b      	mov	r3, r7
 800b374:	4628      	mov	r0, r5
 800b376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37a:	f000 b817 	b.w	800b3ac <_write_r>

0800b37e <__sseek>:
 800b37e:	b510      	push	{r4, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b386:	f000 f855 	bl	800b434 <_lseek_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	bf15      	itete	ne
 800b390:	6560      	strne	r0, [r4, #84]	; 0x54
 800b392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b39a:	81a3      	strheq	r3, [r4, #12]
 800b39c:	bf18      	it	ne
 800b39e:	81a3      	strhne	r3, [r4, #12]
 800b3a0:	bd10      	pop	{r4, pc}

0800b3a2 <__sclose>:
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 b813 	b.w	800b3d0 <_close_r>
	...

0800b3ac <_write_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	; (800b3cc <_write_r+0x20>)
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f7f7 fb8f 	bl	8002ade <_write>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_write_r+0x1e>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_write_r+0x1e>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	200004b0 	.word	0x200004b0

0800b3d0 <_close_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d06      	ldr	r5, [pc, #24]	; (800b3ec <_close_r+0x1c>)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7f7 fb9b 	bl	8002b16 <_close>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_close_r+0x1a>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_close_r+0x1a>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	200004b0 	.word	0x200004b0

0800b3f0 <_fstat_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4d07      	ldr	r5, [pc, #28]	; (800b410 <_fstat_r+0x20>)
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	602b      	str	r3, [r5, #0]
 800b3fe:	f7f7 fb96 	bl	8002b2e <_fstat>
 800b402:	1c43      	adds	r3, r0, #1
 800b404:	d102      	bne.n	800b40c <_fstat_r+0x1c>
 800b406:	682b      	ldr	r3, [r5, #0]
 800b408:	b103      	cbz	r3, 800b40c <_fstat_r+0x1c>
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	bd38      	pop	{r3, r4, r5, pc}
 800b40e:	bf00      	nop
 800b410:	200004b0 	.word	0x200004b0

0800b414 <_isatty_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d06      	ldr	r5, [pc, #24]	; (800b430 <_isatty_r+0x1c>)
 800b418:	2300      	movs	r3, #0
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	f7f7 fb95 	bl	8002b4e <_isatty>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_isatty_r+0x1a>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_isatty_r+0x1a>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	200004b0 	.word	0x200004b0

0800b434 <_lseek_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	; (800b454 <_lseek_r+0x20>)
 800b438:	4604      	mov	r4, r0
 800b43a:	4608      	mov	r0, r1
 800b43c:	4611      	mov	r1, r2
 800b43e:	2200      	movs	r2, #0
 800b440:	602a      	str	r2, [r5, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	f7f7 fb8e 	bl	8002b64 <_lseek>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_lseek_r+0x1e>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_lseek_r+0x1e>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	200004b0 	.word	0x200004b0

0800b458 <_read_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d07      	ldr	r5, [pc, #28]	; (800b478 <_read_r+0x20>)
 800b45c:	4604      	mov	r4, r0
 800b45e:	4608      	mov	r0, r1
 800b460:	4611      	mov	r1, r2
 800b462:	2200      	movs	r2, #0
 800b464:	602a      	str	r2, [r5, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	f7f7 fb1c 	bl	8002aa4 <_read>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_read_r+0x1e>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_read_r+0x1e>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	200004b0 	.word	0x200004b0

0800b47c <_init>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	bf00      	nop
 800b480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b482:	bc08      	pop	{r3}
 800b484:	469e      	mov	lr, r3
 800b486:	4770      	bx	lr

0800b488 <_fini>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	bf00      	nop
 800b48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48e:	bc08      	pop	{r3}
 800b490:	469e      	mov	lr, r3
 800b492:	4770      	bx	lr
