
Vetrovnik_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a93c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d30  0801ab40  0801ab40  0002ab40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e870  0801e870  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801e870  0801e870  0002e870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e878  0801e878  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e878  0801e878  0002e878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e87c  0801e87c  0002e87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801e880  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c94  20000234  0801eab4  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ec8  0801eab4  00036ec8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004367d  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000793b  00000000  00000000  000738df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  0007b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb0  00000000  00000000  0007d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036d1a  00000000  00000000  0007f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035879  00000000  00000000  000b5f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a097  00000000  00000000  000eb80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002058a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bf0  00000000  00000000  002058f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000234 	.word	0x20000234
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ab24 	.word	0x0801ab24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000238 	.word	0x20000238
 800023c:	0801ab24 	.word	0x0801ab24

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <Controller_Real_time_update>:
* Output         : None
* Return         : None
*******************************************************************************/

void Controller_Real_time_update()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	  *  u_k        = Controller output, goes to  PWM_FAN=(int)u_k
	  *  TIM2->CCR1 = PWM_FAN;  (Controller output PWM-duty [8000-11000])
	  * */


	  if(select==0)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <Controller_Real_time_update+0x34>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <Controller_Real_time_update+0x12>
  	   {
		  PID_Controller();
 80009dc:	f000 f814 	bl	8000a08 <PID_Controller>
	  {
		  sprintf(Buffer_data,"%.2f %.2f %.2f %.2f\n",ref,dist_f,velocity_f,u_k);
		  HAL_UART_Transmit(&huart3, Buffer_data, strlen(Buffer_data), 10);
	  }
	  */
}
 80009e0:	e00d      	b.n	80009fe <Controller_Real_time_update+0x2e>
	   else if (select==1)
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <Controller_Real_time_update+0x34>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <Controller_Real_time_update+0x20>
		   SUPER_TWISTED_CONTROLLER();
 80009ea:	f000 f905 	bl	8000bf8 <SUPER_TWISTED_CONTROLLER>
}
 80009ee:	e006      	b.n	80009fe <Controller_Real_time_update+0x2e>
	  }else if (select==2)
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Controller_Real_time_update+0x34>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d002      	beq.n	80009fe <Controller_Real_time_update+0x2e>
    	  select=0;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <Controller_Real_time_update+0x34>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000250 	.word	0x20000250

08000a08 <PID_Controller>:
*******************************************************************************/



void PID_Controller()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	   /* Reference filter  */
	     reference_filter();
 8000a0c:	f002 fc80 	bl	8003310 <reference_filter>
	
       error=ref_f-dist_f;
 8000a10:	4b61      	ldr	r3, [pc, #388]	; (8000b98 <PID_Controller+0x190>)
 8000a12:	ed93 7a00 	vldr	s14, [r3]
 8000a16:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <PID_Controller+0x194>)
 8000a18:	edd3 7a00 	vldr	s15, [r3]
 8000a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a20:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <PID_Controller+0x198>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]

	  	/* PID regulator */
		    /* Proportional part */
			P = Kp * error;
 8000a26:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <PID_Controller+0x19c>)
 8000a28:	ed93 7a00 	vldr	s14, [r3]
 8000a2c:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <PID_Controller+0x198>)
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
 8000a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a36:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <PID_Controller+0x1a0>)
 8000a38:	edc3 7a00 	vstr	s15, [r3]

			/* Integral part */
			I =   I + 1/(Ti) * error * Ts; //Integracija
 8000a3c:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <PID_Controller+0x1a4>)
 8000a3e:	edd3 7a00 	vldr	s15, [r3]
 8000a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a4a:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <PID_Controller+0x198>)
 8000a4c:	edd3 7a00 	vldr	s15, [r3]
 8000a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a54:	4b56      	ldr	r3, [pc, #344]	; (8000bb0 <PID_Controller+0x1a8>)
 8000a56:	edd3 7a00 	vldr	s15, [r3]
 8000a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <PID_Controller+0x1ac>)
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a68:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <PID_Controller+0x1ac>)
 8000a6a:	edc3 7a00 	vstr	s15, [r3]

			/* Differential part */
			D =    Td/Ts * (error - error_k_1);
 8000a6e:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <PID_Controller+0x1b0>)
 8000a70:	edd3 6a00 	vldr	s13, [r3]
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <PID_Controller+0x1a8>)
 8000a76:	edd3 7a00 	vldr	s15, [r3]
 8000a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <PID_Controller+0x198>)
 8000a80:	edd3 6a00 	vldr	s13, [r3]
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <PID_Controller+0x1b4>)
 8000a86:	edd3 7a00 	vldr	s15, [r3]
 8000a8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <PID_Controller+0x1b8>)
 8000a94:	edc3 7a00 	vstr	s15, [r3]
				  error_k_1=error;
 8000a98:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <PID_Controller+0x198>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a47      	ldr	r2, [pc, #284]	; (8000bbc <PID_Controller+0x1b4>)
 8000a9e:	6013      	str	r3, [r2, #0]

	        /* PID-output*/
  			u_k = P  + I  + D;
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <PID_Controller+0x1a0>)
 8000aa2:	ed93 7a00 	vldr	s14, [r3]
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <PID_Controller+0x1ac>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ab0:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <PID_Controller+0x1b8>)
 8000ab2:	edd3 7a00 	vldr	s15, [r3]
 8000ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aba:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <PID_Controller+0x1bc>)
 8000abc:	edc3 7a00 	vstr	s15, [r3]
	  

     /* Controller limiter */
	   if (u_k>130)
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <PID_Controller+0x1bc>)
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000bc8 <PID_Controller+0x1c0>
 8000aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad2:	dd03      	ble.n	8000adc <PID_Controller+0xd4>
		 {
		     u_k=130;
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <PID_Controller+0x1bc>)
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <PID_Controller+0x1c4>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e00c      	b.n	8000af6 <PID_Controller+0xee>
			 
		 }else if(u_k<-130)
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <PID_Controller+0x1bc>)
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000bd0 <PID_Controller+0x1c8>
 8000ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d502      	bpl.n	8000af6 <PID_Controller+0xee>
		 {
		    u_k=-130;
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <PID_Controller+0x1bc>)
 8000af2:	4a38      	ldr	r2, [pc, #224]	; (8000bd4 <PID_Controller+0x1cc>)
 8000af4:	601a      	str	r2, [r3, #0]
		 }
		 
		 
	    /* Controller out to PWM  span [8000-11000]*/
	    PWM_FAN=PWM_FAN_offst + (uint16_t) gain * u_k;
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <PID_Controller+0x1d0>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <PID_Controller+0x1d4>)
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0c:	ee17 3a90 	vmov	r3, s15
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <PID_Controller+0x1bc>)
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2c:	ee17 3a90 	vmov	r3, s15
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <PID_Controller+0x1d8>)
 8000b34:	801a      	strh	r2, [r3, #0]
  		TIM2->CCR1=PWM_FAN;  //ON CHANNEL 1 //PA0
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <PID_Controller+0x1d8>)
 8000b38:	881a      	ldrh	r2, [r3, #0]
 8000b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
     


     /* Safety -  */
       if (dist_f>920)
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <PID_Controller+0x194>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000be4 <PID_Controller+0x1dc>
 8000b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	dc00      	bgt.n	8000b56 <PID_Controller+0x14e>
		  I=0;Id=0;error=0;error_k_1=0;
		  controller_on=0; //Turn off controller
		  ref=300;
	  }

}
 8000b54:	e01e      	b.n	8000b94 <PID_Controller+0x18c>
		  PWM_FAN=8000; //Turn off the blower
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <PID_Controller+0x1d8>)
 8000b58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b5c:	801a      	strh	r2, [r3, #0]
  		  TIM2->CCR1=8000;
 8000b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
		  I=0;Id=0;error=0;error_k_1=0;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <PID_Controller+0x1ac>)
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <PID_Controller+0x1e0>)
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <PID_Controller+0x198>)
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <PID_Controller+0x1b4>)
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
		  controller_on=0; //Turn off controller
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <PID_Controller+0x1e4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
		  ref=300;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <PID_Controller+0x1e8>)
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <PID_Controller+0x1ec>)
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002b8 	.word	0x200002b8
 8000b9c:	200002c8 	.word	0x200002c8
 8000ba0:	20000260 	.word	0x20000260
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000254 	.word	0x20000254
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000024 	.word	0x20000024
 8000bb4:	20000258 	.word	0x20000258
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	20000264 	.word	0x20000264
 8000bc0:	2000025c 	.word	0x2000025c
 8000bc4:	2000026c 	.word	0x2000026c
 8000bc8:	43020000 	.word	0x43020000
 8000bcc:	43020000 	.word	0x43020000
 8000bd0:	c3020000 	.word	0xc3020000
 8000bd4:	c3020000 	.word	0xc3020000
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	20000020 	.word	0x20000020
 8000be4:	44660000 	.word	0x44660000
 8000be8:	20000268 	.word	0x20000268
 8000bec:	200002a0 	.word	0x200002a0
 8000bf0:	2000002c 	.word	0x2000002c
 8000bf4:	43960000 	.word	0x43960000

08000bf8 <SUPER_TWISTED_CONTROLLER>:
float sigma_ABS=0,sigma_sqrt;
float dref=0,ref_f_k_1=0;
float w_k=0,w_k_1=0,dw;

void SUPER_TWISTED_CONTROLLER() //SUPER TWISTED CONTROLLER
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	ed2d 8b02 	vpush	{d8}
 8000bfe:	af00      	add	r7, sp, #0

    //Reference filter
	     reference_filter();
 8000c00:	f002 fb86 	bl	8003310 <reference_filter>

      dref= (ref_f-ref_f_k_1)/Ts;
 8000c04:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <SUPER_TWISTED_CONTROLLER+0x184>)
 8000c06:	ed93 7a00 	vldr	s14, [r3]
 8000c0a:	4b5d      	ldr	r3, [pc, #372]	; (8000d80 <SUPER_TWISTED_CONTROLLER+0x188>)
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
 8000c10:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c14:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <SUPER_TWISTED_CONTROLLER+0x18c>)
 8000c16:	ed93 7a00 	vldr	s14, [r3]
 8000c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1e:	4b5a      	ldr	r3, [pc, #360]	; (8000d88 <SUPER_TWISTED_CONTROLLER+0x190>)
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	    ref_f_k_1=ref_f;
 8000c24:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <SUPER_TWISTED_CONTROLLER+0x184>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a55      	ldr	r2, [pc, #340]	; (8000d80 <SUPER_TWISTED_CONTROLLER+0x188>)
 8000c2a:	6013      	str	r3, [r2, #0]
	
	    //Sliding variable 
	   sigma=(1*(dref - velocity_f) + c *(ref_f-dist_f)); //Convert to the meter
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <SUPER_TWISTED_CONTROLLER+0x190>)
 8000c2e:	ed93 7a00 	vldr	s14, [r3]
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <SUPER_TWISTED_CONTROLLER+0x194>)
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c3c:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <SUPER_TWISTED_CONTROLLER+0x184>)
 8000c3e:	edd3 6a00 	vldr	s13, [r3]
 8000c42:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <SUPER_TWISTED_CONTROLLER+0x198>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c4c:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <SUPER_TWISTED_CONTROLLER+0x19c>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5a:	4b4f      	ldr	r3, [pc, #316]	; (8000d98 <SUPER_TWISTED_CONTROLLER+0x1a0>)
 8000c5c:	edc3 7a00 	vstr	s15, [r3]
	
	   //Integration
	  dw =  k2 * sgn(sigma); 
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <SUPER_TWISTED_CONTROLLER+0x1a0>)
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	f002 fc85 	bl	8003578 <sgn>
 8000c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8000c72:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <SUPER_TWISTED_CONTROLLER+0x1a4>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7c:	4b48      	ldr	r3, [pc, #288]	; (8000da0 <SUPER_TWISTED_CONTROLLER+0x1a8>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
      w_k = w_k_1 + Ts * dw;  //Integration
 8000c82:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <SUPER_TWISTED_CONTROLLER+0x18c>)
 8000c84:	ed93 7a00 	vldr	s14, [r3]
 8000c88:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <SUPER_TWISTED_CONTROLLER+0x1a8>)
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c92:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <SUPER_TWISTED_CONTROLLER+0x1ac>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9c:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <SUPER_TWISTED_CONTROLLER+0x1b0>)
 8000c9e:	edc3 7a00 	vstr	s15, [r3]
      w_k_1 = w_k;
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <SUPER_TWISTED_CONTROLLER+0x1b0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <SUPER_TWISTED_CONTROLLER+0x1ac>)
 8000ca8:	6013      	str	r3, [r2, #0]

	
		sigma_ABS = ABS(sigma);
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <SUPER_TWISTED_CONTROLLER+0x1a0>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f002 fc86 	bl	80035c4 <ABS>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
 8000cbc:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <SUPER_TWISTED_CONTROLLER+0x1b4>)
 8000cbe:	edc3 7a00 	vstr	s15, [r3]
	  sigma_sqrt=sqrt(sigma_ABS);
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <SUPER_TWISTED_CONTROLLER+0x1b4>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8000cd0:	f019 fefa 	bl	801aac8 <sqrt>
 8000cd4:	eeb0 7b40 	vmov.f64	d7, d0
 8000cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <SUPER_TWISTED_CONTROLLER+0x1b8>)
 8000cde:	edc3 7a00 	vstr	s15, [r3]
	
	  u_k =  k1 *  sigma_sqrt * sgn(sigma) + w_k;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <SUPER_TWISTED_CONTROLLER+0x1bc>)
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <SUPER_TWISTED_CONTROLLER+0x1b8>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000cf2:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <SUPER_TWISTED_CONTROLLER+0x1a0>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f002 fc3c 	bl	8003578 <sgn>
 8000d00:	eef0 7a40 	vmov.f32	s15, s0
 8000d04:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SUPER_TWISTED_CONTROLLER+0x1b0>)
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <SUPER_TWISTED_CONTROLLER+0x1c0>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]
	
 //Output 3200 to 6400 nominal 3880
	    PWM_FAN=PWM_FAN_offst + (int)u_k;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <SUPER_TWISTED_CONTROLLER+0x1c0>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d22:	ee17 3a90 	vmov	r3, s15
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <SUPER_TWISTED_CONTROLLER+0x1c4>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <SUPER_TWISTED_CONTROLLER+0x1c8>)
 8000d32:	801a      	strh	r2, [r3, #0]
  		TIM2->CCR1=PWM_FAN;  //ON CHANNEL 1 max 20000 //PA0
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <SUPER_TWISTED_CONTROLLER+0x1c8>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
			
			
		 if (dist_f>940)
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <SUPER_TWISTED_CONTROLLER+0x198>)
 8000d40:	edd3 7a00 	vldr	s15, [r3]
 8000d44:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000dc4 <SUPER_TWISTED_CONTROLLER+0x1cc>
 8000d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	dc00      	bgt.n	8000d54 <SUPER_TWISTED_CONTROLLER+0x15c>
  		TIM2->CCR1=PWM_FAN;
			controller_on=0; //Turn off controller
			ref=200;
		 }	
     
}
 8000d52:	e00e      	b.n	8000d72 <SUPER_TWISTED_CONTROLLER+0x17a>
		  PWM_FAN=PWM_FAN_offst;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <SUPER_TWISTED_CONTROLLER+0x1c4>)
 8000d56:	881a      	ldrh	r2, [r3, #0]
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <SUPER_TWISTED_CONTROLLER+0x1c8>)
 8000d5a:	801a      	strh	r2, [r3, #0]
  		TIM2->CCR1=PWM_FAN;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <SUPER_TWISTED_CONTROLLER+0x1c8>)
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
			controller_on=0; //Turn off controller
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SUPER_TWISTED_CONTROLLER+0x1d0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
			ref=200;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <SUPER_TWISTED_CONTROLLER+0x1d4>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <SUPER_TWISTED_CONTROLLER+0x1d8>)
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	ecbd 8b02 	vpop	{d8}
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200002b8 	.word	0x200002b8
 8000d80:	2000027c 	.word	0x2000027c
 8000d84:	20000024 	.word	0x20000024
 8000d88:	20000278 	.word	0x20000278
 8000d8c:	200002e0 	.word	0x200002e0
 8000d90:	200002c8 	.word	0x200002c8
 8000d94:	20000014 	.word	0x20000014
 8000d98:	20000270 	.word	0x20000270
 8000d9c:	2000001c 	.word	0x2000001c
 8000da0:	200004d4 	.word	0x200004d4
 8000da4:	20000284 	.word	0x20000284
 8000da8:	20000280 	.word	0x20000280
 8000dac:	20000274 	.word	0x20000274
 8000db0:	200004d0 	.word	0x200004d0
 8000db4:	20000018 	.word	0x20000018
 8000db8:	2000026c 	.word	0x2000026c
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000020 	.word	0x20000020
 8000dc4:	446b0000 	.word	0x446b0000
 8000dc8:	200002a0 	.word	0x200002a0
 8000dcc:	2000002c 	.word	0x2000002c
 8000dd0:	43480000 	.word	0x43480000

08000dd4 <Serial_read_main_Vetrovnik>:
extern char Buffer_data[64];
extern float Kp, Ti, Td;
/***************************************************************************************************/
/***************************************************************************************************/
/* Read with serial interrupt --------> called from 'void USART2_IRQHandler(void)' ---------------------------------*/
void Serial_read_main_Vetrovnik(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0


	  ReceiveData();
 8000dd8:	f000 f81c 	bl	8000e14 <ReceiveData>

	  if( newData == true)
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <Serial_read_main_Vetrovnik+0x38>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d111      	bne.n	8000e08 <Serial_read_main_Vetrovnik+0x34>
	  	{

		  LD1(1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <Serial_read_main_Vetrovnik+0x3c>)
 8000dea:	f004 fc43 	bl	8005674 <HAL_GPIO_WritePin>
		  checkAlarm();
 8000dee:	f000 fb3f 	bl	8001470 <checkAlarm>
	      ParseData();
 8000df2:	f000 f849 	bl	8000e88 <ParseData>
	      dispatchCommand();
 8000df6:	f000 f8e7 	bl	8000fc8 <dispatchCommand>
	      CleanData();
 8000dfa:	f000 faad 	bl	8001358 <CleanData>
	      LD1(0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <Serial_read_main_Vetrovnik+0x3c>)
 8000e04:	f004 fc36 	bl	8005674 <HAL_GPIO_WritePin>
	  	}



}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000288 	.word	0x20000288
 8000e10:	40020400 	.word	0x40020400

08000e14 <ReceiveData>:


/***************************************************************************************************/
/* Receive function */
void ReceiveData()
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	/*-- Receive single character -- */
	  RX_data=USART3->RDR;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <ReceiveData+0x60>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <ReceiveData+0x64>)
 8000e20:	701a      	strb	r2, [r3, #0]

    /*-- Receive data 13-CR  10-LF new line -- */
	  if ((RX_data != '&') && (RX_data != 13) && (RX_data != 10) && (buffer_index < 64)) {   // (RX_data != 13) && (RX_data != 10)&&(buffer_index < 64)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ReceiveData+0x64>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b26      	cmp	r3, #38	; 0x26
 8000e28:	d017      	beq.n	8000e5a <ReceiveData+0x46>
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <ReceiveData+0x64>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b0d      	cmp	r3, #13
 8000e30:	d013      	beq.n	8000e5a <ReceiveData+0x46>
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <ReceiveData+0x64>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	d00f      	beq.n	8000e5a <ReceiveData+0x46>
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <ReceiveData+0x68>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e40:	dc0b      	bgt.n	8000e5a <ReceiveData+0x46>
	      Buffer[buffer_index] = RX_data;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <ReceiveData+0x68>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <ReceiveData+0x64>)
 8000e48:	7811      	ldrb	r1, [r2, #0]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <ReceiveData+0x6c>)
 8000e4c:	54d1      	strb	r1, [r2, r3]
	      buffer_index++;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <ReceiveData+0x68>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <ReceiveData+0x68>)
 8000e56:	6013      	str	r3, [r2, #0]
           if(buffer_index!=0)
	        {newData = true;}
	    }


}
 8000e58:	e006      	b.n	8000e68 <ReceiveData+0x54>
           if(buffer_index!=0)
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <ReceiveData+0x68>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <ReceiveData+0x54>
	        {newData = true;}
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <ReceiveData+0x70>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40004800 	.word	0x40004800
 8000e78:	200004dc 	.word	0x200004dc
 8000e7c:	2000028c 	.word	0x2000028c
 8000e80:	200004e0 	.word	0x200004e0
 8000e84:	20000288 	.word	0x20000288

08000e88 <ParseData>:

/***************************************************************************************************/
/* Parse function */
void ParseData()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

	 /*-- Parse received data with 'SPACE' character --*/

		  //HAL_UART_Transmit(&huart2, &Buffer, buffer_index, 10); //Received data

            for(int i=0;i<buffer_index;i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	e02c      	b.n	8000eee <ParseData+0x66>
            {
                     if(Buffer[i]!=32)  //Separate first command with space
 8000e94:	4a45      	ldr	r2, [pc, #276]	; (8000fac <ParseData+0x124>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b20      	cmp	r3, #32
 8000e9e:	d02c      	beq.n	8000efa <ParseData+0x72>
                     {
							  //UpperCase
							  if(Buffer[i]>96 && Buffer[i]<123) //lowerCase characters
 8000ea0:	4a42      	ldr	r2, [pc, #264]	; (8000fac <ParseData+0x124>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b60      	cmp	r3, #96	; 0x60
 8000eaa:	d910      	bls.n	8000ece <ParseData+0x46>
 8000eac:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <ParseData+0x124>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b7a      	cmp	r3, #122	; 0x7a
 8000eb6:	d80a      	bhi.n	8000ece <ParseData+0x46>
							  {
								  cmd[cmd_length]=Buffer[i]-32;
 8000eb8:	4a3c      	ldr	r2, [pc, #240]	; (8000fac <ParseData+0x124>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <ParseData+0x128>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3a20      	subs	r2, #32
 8000ec6:	b2d1      	uxtb	r1, r2
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <ParseData+0x12c>)
 8000eca:	54d1      	strb	r1, [r2, r3]
 8000ecc:	e007      	b.n	8000ede <ParseData+0x56>
							  } else
							  {
								  cmd[cmd_length]=Buffer[i];
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <ParseData+0x128>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4936      	ldr	r1, [pc, #216]	; (8000fac <ParseData+0x124>)
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	440a      	add	r2, r1
 8000ed8:	7811      	ldrb	r1, [r2, #0]
 8000eda:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <ParseData+0x12c>)
 8000edc:	54d1      	strb	r1, [r2, r3]
							  }
							  	  	  cmd_length++;
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <ParseData+0x128>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a32      	ldr	r2, [pc, #200]	; (8000fb0 <ParseData+0x128>)
 8000ee6:	6013      	str	r3, [r2, #0]
            for(int i=0;i<buffer_index;i++)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <ParseData+0x130>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbcd      	blt.n	8000e94 <ParseData+0xc>
 8000ef8:	e000      	b.n	8000efc <ParseData+0x74>

                     }else
                     {
                    	 	 break;
 8000efa:	bf00      	nop
                     }
            }

          /*-- Parse received number after command string and 'SPACE character'--*/
		 if(cmd_length!=buffer_index){
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <ParseData+0x128>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <ParseData+0x130>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d03a      	beq.n	8000f7e <ParseData+0xf6>
				 for(int i=cmd_length+1;i<buffer_index;i++)
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <ParseData+0x128>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	e030      	b.n	8000f74 <ParseData+0xec>
				 {
					 if( (Buffer[i]<47 || Buffer[i]>58) && Buffer[i]!=46) //46='.' ASCII numbers=[47  58]
 8000f12:	4a26      	ldr	r2, [pc, #152]	; (8000fac <ParseData+0x124>)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1c:	d905      	bls.n	8000f2a <ParseData+0xa2>
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <ParseData+0x124>)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b3a      	cmp	r3, #58	; 0x3a
 8000f28:	d90a      	bls.n	8000f40 <ParseData+0xb8>
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <ParseData+0x124>)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b2e      	cmp	r3, #46	; 0x2e
 8000f34:	d004      	beq.n	8000f40 <ParseData+0xb8>
					 {

						 if(val_length!=0)
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <ParseData+0x134>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d017      	beq.n	8000f6e <ParseData+0xe6>
							  break;
 8000f3e:	e01e      	b.n	8000f7e <ParseData+0xf6>

					 }else
					 {
						 if(val_length==0 && Buffer[i]==46)
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <ParseData+0x134>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <ParseData+0xcc>
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <ParseData+0x124>)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2e      	cmp	r3, #46	; 0x2e
 8000f52:	d014      	beq.n	8000f7e <ParseData+0xf6>
							 break;
						 else
						 {
							value_str[val_length]=Buffer[i];
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <ParseData+0x134>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4914      	ldr	r1, [pc, #80]	; (8000fac <ParseData+0x124>)
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	440a      	add	r2, r1
 8000f5e:	7811      	ldrb	r1, [r2, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <ParseData+0x138>)
 8000f62:	54d1      	strb	r1, [r2, r3]
							val_length++;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <ParseData+0x134>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <ParseData+0x134>)
 8000f6c:	6013      	str	r3, [r2, #0]
				 for(int i=cmd_length+1;i<buffer_index;i++)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <ParseData+0x130>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbc9      	blt.n	8000f12 <ParseData+0x8a>

				 }
		 }//END IF

		 /*--Convert to float*/
		 if (val_length!=0)
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <ParseData+0x134>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d009      	beq.n	8000f9a <ParseData+0x112>
		 {
			 val=strtof(value_str,NULL);
 8000f86:	2100      	movs	r1, #0
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <ParseData+0x138>)
 8000f8a:	f016 fd61 	bl	8017a50 <strtof>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <ParseData+0x13c>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
		 {
			 val=0.0;
		 }


}/*END OF FUNCTION*/
 8000f98:	e003      	b.n	8000fa2 <ParseData+0x11a>
			 val=0.0;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <ParseData+0x13c>)
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
}/*END OF FUNCTION*/
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200004e0 	.word	0x200004e0
 8000fb0:	20000294 	.word	0x20000294
 8000fb4:	20000530 	.word	0x20000530
 8000fb8:	2000028c 	.word	0x2000028c
 8000fbc:	20000298 	.word	0x20000298
 8000fc0:	20000520 	.word	0x20000520
 8000fc4:	20000290 	.word	0x20000290

08000fc8 <dispatchCommand>:


/***************************************************************************************************/
/*Dispatch Command*/
void dispatchCommand(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af06      	add	r7, sp, #24
	char command_msg[30];

  if (memcmp(cmd ,"START",5)==0) {   //Start real time
 8000fce:	2205      	movs	r2, #5
 8000fd0:	49ad      	ldr	r1, [pc, #692]	; (8001288 <dispatchCommand+0x2c0>)
 8000fd2:	48ae      	ldr	r0, [pc, #696]	; (800128c <dispatchCommand+0x2c4>)
 8000fd4:	f015 f830 	bl	8016038 <memcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d106      	bne.n	8000fec <dispatchCommand+0x24>
     controller_on=1; //Start Controller
 8000fde:	4bac      	ldr	r3, [pc, #688]	; (8001290 <dispatchCommand+0x2c8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
    sendResponse("Start");
 8000fe4:	48ab      	ldr	r0, [pc, #684]	; (8001294 <dispatchCommand+0x2cc>)
 8000fe6:	f000 f9e5 	bl	80013b4 <sendResponse>
	 }
	 else if (cmd_length > 0) {
		//sendResponse(cmd);
	 }

}
 8000fea:	e1a5      	b.n	8001338 <dispatchCommand+0x370>
  else if (memcmp(cmd ,"STOP",4)==0) {   //STOP real time
 8000fec:	2204      	movs	r2, #4
 8000fee:	49aa      	ldr	r1, [pc, #680]	; (8001298 <dispatchCommand+0x2d0>)
 8000ff0:	48a6      	ldr	r0, [pc, #664]	; (800128c <dispatchCommand+0x2c4>)
 8000ff2:	f015 f821 	bl	8016038 <memcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <dispatchCommand+0x42>
	  controller_on=0; //Stop Controller
 8000ffc:	4ba4      	ldr	r3, [pc, #656]	; (8001290 <dispatchCommand+0x2c8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
      sendResponse("Stop");
 8001002:	48a6      	ldr	r0, [pc, #664]	; (800129c <dispatchCommand+0x2d4>)
 8001004:	f000 f9d6 	bl	80013b4 <sendResponse>
}
 8001008:	e196      	b.n	8001338 <dispatchCommand+0x370>
   } else if (memcmp(cmd ,"REF",3)==0) {//Reference value for temp1
 800100a:	2203      	movs	r2, #3
 800100c:	49a4      	ldr	r1, [pc, #656]	; (80012a0 <dispatchCommand+0x2d8>)
 800100e:	489f      	ldr	r0, [pc, #636]	; (800128c <dispatchCommand+0x2c4>)
 8001010:	f015 f812 	bl	8016038 <memcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12a      	bne.n	8001070 <dispatchCommand+0xa8>
	   if(val_length!=0)
 800101a:	4ba2      	ldr	r3, [pc, #648]	; (80012a4 <dispatchCommand+0x2dc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d01e      	beq.n	8001060 <dispatchCommand+0x98>
				ref=val;
 8001022:	4ba1      	ldr	r3, [pc, #644]	; (80012a8 <dispatchCommand+0x2e0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4aa1      	ldr	r2, [pc, #644]	; (80012ac <dispatchCommand+0x2e4>)
 8001028:	6013      	str	r3, [r2, #0]
				if(ref<100.0)
 800102a:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <dispatchCommand+0x2e4>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80012b0 <dispatchCommand+0x2e8>
 8001034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	d503      	bpl.n	8001046 <dispatchCommand+0x7e>
						ref=100.0;
 800103e:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <dispatchCommand+0x2e4>)
 8001040:	4a9c      	ldr	r2, [pc, #624]	; (80012b4 <dispatchCommand+0x2ec>)
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e00c      	b.n	8001060 <dispatchCommand+0x98>
					}else if(ref>800.0)
 8001046:	4b99      	ldr	r3, [pc, #612]	; (80012ac <dispatchCommand+0x2e4>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80012b8 <dispatchCommand+0x2f0>
 8001050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	dd02      	ble.n	8001060 <dispatchCommand+0x98>
						ref=800.0;
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <dispatchCommand+0x2e4>)
 800105c:	4a97      	ldr	r2, [pc, #604]	; (80012bc <dispatchCommand+0x2f4>)
 800105e:	601a      	str	r2, [r3, #0]
	   sendFloatResponse(ref);
 8001060:	4b92      	ldr	r3, [pc, #584]	; (80012ac <dispatchCommand+0x2e4>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f000 f9c9 	bl	8001400 <sendFloatResponse>
}
 800106e:	e163      	b.n	8001338 <dispatchCommand+0x370>
  } else if (memcmp(cmd ,"KP",2)==0) {//Reference value for temp1
 8001070:	2202      	movs	r2, #2
 8001072:	4993      	ldr	r1, [pc, #588]	; (80012c0 <dispatchCommand+0x2f8>)
 8001074:	4885      	ldr	r0, [pc, #532]	; (800128c <dispatchCommand+0x2c4>)
 8001076:	f014 ffdf 	bl	8016038 <memcmp>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d129      	bne.n	80010d4 <dispatchCommand+0x10c>
	  if(val_length!=0)
 8001080:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <dispatchCommand+0x2dc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01d      	beq.n	80010c4 <dispatchCommand+0xfc>
				Kp=val;  //Kp setting of PID controller
 8001088:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <dispatchCommand+0x2e0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a8d      	ldr	r2, [pc, #564]	; (80012c4 <dispatchCommand+0x2fc>)
 800108e:	6013      	str	r3, [r2, #0]
				if(Kp<0.0)
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <dispatchCommand+0x2fc>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d504      	bpl.n	80010aa <dispatchCommand+0xe2>
					Kp=0.0;
 80010a0:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <dispatchCommand+0x2fc>)
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e00c      	b.n	80010c4 <dispatchCommand+0xfc>
				}else if(Kp>10.0)
 80010aa:	4b86      	ldr	r3, [pc, #536]	; (80012c4 <dispatchCommand+0x2fc>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	dd02      	ble.n	80010c4 <dispatchCommand+0xfc>
					Kp=10.0;
 80010be:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <dispatchCommand+0x2fc>)
 80010c0:	4a81      	ldr	r2, [pc, #516]	; (80012c8 <dispatchCommand+0x300>)
 80010c2:	601a      	str	r2, [r3, #0]
	  sendFloatResponse(Kp);
 80010c4:	4b7f      	ldr	r3, [pc, #508]	; (80012c4 <dispatchCommand+0x2fc>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	f000 f997 	bl	8001400 <sendFloatResponse>
}
 80010d2:	e131      	b.n	8001338 <dispatchCommand+0x370>
   }else if (memcmp(cmd ,"TI",2)==0) {//Reference value for temp1
 80010d4:	2202      	movs	r2, #2
 80010d6:	497d      	ldr	r1, [pc, #500]	; (80012cc <dispatchCommand+0x304>)
 80010d8:	486c      	ldr	r0, [pc, #432]	; (800128c <dispatchCommand+0x2c4>)
 80010da:	f014 ffad 	bl	8016038 <memcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d12c      	bne.n	800113e <dispatchCommand+0x176>
	   if(val_length!=0)
 80010e4:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <dispatchCommand+0x2dc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <dispatchCommand+0x166>
			   Ti=val;  //Ti setting of PID controller
 80010ec:	4b6e      	ldr	r3, [pc, #440]	; (80012a8 <dispatchCommand+0x2e0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a77      	ldr	r2, [pc, #476]	; (80012d0 <dispatchCommand+0x308>)
 80010f2:	6013      	str	r3, [r2, #0]
				if(Ti<0.01)
 80010f4:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <dispatchCommand+0x308>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001280 <dispatchCommand+0x2b8>
 8001102:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d503      	bpl.n	8001114 <dispatchCommand+0x14c>
					Ti=0.01;
 800110c:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <dispatchCommand+0x308>)
 800110e:	4a71      	ldr	r2, [pc, #452]	; (80012d4 <dispatchCommand+0x30c>)
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e00c      	b.n	800112e <dispatchCommand+0x166>
				}else if(Kp>1400.0)
 8001114:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <dispatchCommand+0x2fc>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80012d8 <dispatchCommand+0x310>
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd02      	ble.n	800112e <dispatchCommand+0x166>
					Ti=1400.0;
 8001128:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <dispatchCommand+0x308>)
 800112a:	4a6c      	ldr	r2, [pc, #432]	; (80012dc <dispatchCommand+0x314>)
 800112c:	601a      	str	r2, [r3, #0]
 	   sendFloatResponse(Ti);
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <dispatchCommand+0x308>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	f000 f962 	bl	8001400 <sendFloatResponse>
}
 800113c:	e0fc      	b.n	8001338 <dispatchCommand+0x370>
  else if (memcmp(cmd ,"TD",2)==0) {//Reference value for temp1
 800113e:	2202      	movs	r2, #2
 8001140:	4967      	ldr	r1, [pc, #412]	; (80012e0 <dispatchCommand+0x318>)
 8001142:	4852      	ldr	r0, [pc, #328]	; (800128c <dispatchCommand+0x2c4>)
 8001144:	f014 ff78 	bl	8016038 <memcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d129      	bne.n	80011a2 <dispatchCommand+0x1da>
	  if(val_length!=0)
 800114e:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <dispatchCommand+0x2dc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01d      	beq.n	8001192 <dispatchCommand+0x1ca>
	       Td=val;  //Kp setting of PID controller
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <dispatchCommand+0x2e0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <dispatchCommand+0x31c>)
 800115c:	6013      	str	r3, [r2, #0]
				if(Td<0)
 800115e:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <dispatchCommand+0x31c>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d504      	bpl.n	8001178 <dispatchCommand+0x1b0>
					Td=0;
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <dispatchCommand+0x31c>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e00c      	b.n	8001192 <dispatchCommand+0x1ca>
				}else if(Td>3.0)
 8001178:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <dispatchCommand+0x31c>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd02      	ble.n	8001192 <dispatchCommand+0x1ca>
					Td=3.0;
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <dispatchCommand+0x31c>)
 800118e:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <dispatchCommand+0x320>)
 8001190:	601a      	str	r2, [r3, #0]
	  	sendFloatResponse(Td);
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <dispatchCommand+0x31c>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f000 f930 	bl	8001400 <sendFloatResponse>
}
 80011a0:	e0ca      	b.n	8001338 <dispatchCommand+0x370>
    }else if(memcmp(cmd ,"PWM",3)==0)
 80011a2:	2203      	movs	r2, #3
 80011a4:	4951      	ldr	r1, [pc, #324]	; (80012ec <dispatchCommand+0x324>)
 80011a6:	4839      	ldr	r0, [pc, #228]	; (800128c <dispatchCommand+0x2c4>)
 80011a8:	f014 ff46 	bl	8016038 <memcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d12c      	bne.n	800120c <dispatchCommand+0x244>
    	if(val_length!=0)
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <dispatchCommand+0x2dc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01d      	beq.n	80011f6 <dispatchCommand+0x22e>
    		PWM_FAN=(int)val;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <dispatchCommand+0x2e0>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	ee17 3a90 	vmov	r3, s15
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <dispatchCommand+0x328>)
 80011cc:	801a      	strh	r2, [r3, #0]
    				if(PWM_FAN<8000)
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <dispatchCommand+0x328>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80011d6:	d204      	bcs.n	80011e2 <dispatchCommand+0x21a>
    						PWM_FAN=8000;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <dispatchCommand+0x328>)
 80011da:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011de:	801a      	strh	r2, [r3, #0]
 80011e0:	e009      	b.n	80011f6 <dispatchCommand+0x22e>
    					}else if(PWM_FAN>8900)
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <dispatchCommand+0x328>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	f242 22c4 	movw	r2, #8900	; 0x22c4
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d903      	bls.n	80011f6 <dispatchCommand+0x22e>
    						PWM_FAN=8900;
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <dispatchCommand+0x328>)
 80011f0:	f242 22c4 	movw	r2, #8900	; 0x22c4
 80011f4:	801a      	strh	r2, [r3, #0]
    	sendFloatResponse(PWM_FAN);
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <dispatchCommand+0x328>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f000 f8fb 	bl	8001400 <sendFloatResponse>
}
 800120a:	e095      	b.n	8001338 <dispatchCommand+0x370>
    }else if(memcmp(cmd ,"PAR",3)==0) //Send current Controller parameters
 800120c:	2203      	movs	r2, #3
 800120e:	4939      	ldr	r1, [pc, #228]	; (80012f4 <dispatchCommand+0x32c>)
 8001210:	481e      	ldr	r0, [pc, #120]	; (800128c <dispatchCommand+0x2c4>)
 8001212:	f014 ff11 	bl	8016038 <memcmp>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d175      	bne.n	8001308 <dispatchCommand+0x340>
    	USART3_busy_flag=1;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <dispatchCommand+0x330>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    	sprintf(Buffer_data,"P %.2f %.2f %.2f %.2f\n",ref,Kp,Ti,Td);
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <dispatchCommand+0x2e4>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <dispatchCommand+0x2fc>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <dispatchCommand+0x308>)
 8001238:	edd3 6a00 	vldr	s13, [r3]
 800123c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <dispatchCommand+0x31c>)
 8001242:	edd3 5a00 	vldr	s11, [r3]
 8001246:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800124a:	ed8d 5b04 	vstr	d5, [sp, #16]
 800124e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001252:	ed8d 7b00 	vstr	d7, [sp]
 8001256:	ec53 2b14 	vmov	r2, r3, d4
 800125a:	4928      	ldr	r1, [pc, #160]	; (80012fc <dispatchCommand+0x334>)
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <dispatchCommand+0x338>)
 800125e:	f015 fdcf 	bl	8016e00 <siprintf>
    	HAL_UART_Transmit(&huart3, Buffer_data, strlen(Buffer_data), 10);
 8001262:	4827      	ldr	r0, [pc, #156]	; (8001300 <dispatchCommand+0x338>)
 8001264:	f7fe ffec 	bl	8000240 <strlen>
 8001268:	4603      	mov	r3, r0
 800126a:	b29a      	uxth	r2, r3
 800126c:	230a      	movs	r3, #10
 800126e:	4924      	ldr	r1, [pc, #144]	; (8001300 <dispatchCommand+0x338>)
 8001270:	4824      	ldr	r0, [pc, #144]	; (8001304 <dispatchCommand+0x33c>)
 8001272:	f007 fddf 	bl	8008e34 <HAL_UART_Transmit>
    	USART3_busy_flag=0;
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <dispatchCommand+0x330>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	e05c      	b.n	8001338 <dispatchCommand+0x370>
 800127e:	bf00      	nop
 8001280:	47ae147b 	.word	0x47ae147b
 8001284:	3f847ae1 	.word	0x3f847ae1
 8001288:	0801ab40 	.word	0x0801ab40
 800128c:	20000530 	.word	0x20000530
 8001290:	200002a0 	.word	0x200002a0
 8001294:	0801ab48 	.word	0x0801ab48
 8001298:	0801ab50 	.word	0x0801ab50
 800129c:	0801ab58 	.word	0x0801ab58
 80012a0:	0801ab60 	.word	0x0801ab60
 80012a4:	20000298 	.word	0x20000298
 80012a8:	20000290 	.word	0x20000290
 80012ac:	2000002c 	.word	0x2000002c
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	44480000 	.word	0x44480000
 80012bc:	44480000 	.word	0x44480000
 80012c0:	0801ab64 	.word	0x0801ab64
 80012c4:	20000008 	.word	0x20000008
 80012c8:	41200000 	.word	0x41200000
 80012cc:	0801ab68 	.word	0x0801ab68
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	3c23d70a 	.word	0x3c23d70a
 80012d8:	44af0000 	.word	0x44af0000
 80012dc:	44af0000 	.word	0x44af0000
 80012e0:	0801ab6c 	.word	0x0801ab6c
 80012e4:	20000010 	.word	0x20000010
 80012e8:	40400000 	.word	0x40400000
 80012ec:	0801ab70 	.word	0x0801ab70
 80012f0:	20000020 	.word	0x20000020
 80012f4:	0801ab74 	.word	0x0801ab74
 80012f8:	2000029c 	.word	0x2000029c
 80012fc:	0801ab78 	.word	0x0801ab78
 8001300:	20000490 	.word	0x20000490
 8001304:	200005f8 	.word	0x200005f8
    else if (memcmp(cmd ,"VER",3)==0) {
 8001308:	2203      	movs	r2, #3
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <dispatchCommand+0x378>)
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <dispatchCommand+0x37c>)
 800130e:	f014 fe93 	bl	8016038 <memcmp>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <dispatchCommand+0x358>
    sendResponse("TCLab Firmware - NUCLEO ARM 767 WindSystem");
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <dispatchCommand+0x380>)
 800131a:	f000 f84b 	bl	80013b4 <sendResponse>
}
 800131e:	e00b      	b.n	8001338 <dispatchCommand+0x370>
	else if (memcmp(cmd ,"X",1)==0) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <dispatchCommand+0x37c>)
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <dispatchCommand+0x384>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d105      	bne.n	8001338 <dispatchCommand+0x370>
		controller_on=0; //Stop Controller
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <dispatchCommand+0x388>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		sendResponse("Stop");
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <dispatchCommand+0x38c>)
 8001334:	f000 f83e 	bl	80013b4 <sendResponse>
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0801ab90 	.word	0x0801ab90
 8001344:	20000530 	.word	0x20000530
 8001348:	0801ab94 	.word	0x0801ab94
 800134c:	0801abc0 	.word	0x0801abc0
 8001350:	200002a0 	.word	0x200002a0
 8001354:	0801ab58 	.word	0x0801ab58

08001358 <CleanData>:


/****************************************************************************************************/
/* Clean function */
void CleanData()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	/*Clean buffers*/
	memset(Buffer, 0, sizeof(Buffer));
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	2100      	movs	r1, #0
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <CleanData+0x40>)
 8001362:	f014 fe9f 	bl	80160a4 <memset>
	memset(value_str, 0, sizeof(value_str));
 8001366:	220f      	movs	r2, #15
 8001368:	2100      	movs	r1, #0
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <CleanData+0x44>)
 800136c:	f014 fe9a 	bl	80160a4 <memset>
	memset(cmd, 0, sizeof(cmd));
 8001370:	220f      	movs	r2, #15
 8001372:	2100      	movs	r1, #0
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <CleanData+0x48>)
 8001376:	f014 fe95 	bl	80160a4 <memset>

    /*Reset counters*/
	cmd_length=0;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <CleanData+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <CleanData+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	val_length = 0;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <CleanData+0x54>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
	newData = false;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <CleanData+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200004e0 	.word	0x200004e0
 800139c:	20000520 	.word	0x20000520
 80013a0:	20000530 	.word	0x20000530
 80013a4:	20000294 	.word	0x20000294
 80013a8:	2000028c 	.word	0x2000028c
 80013ac:	20000298 	.word	0x20000298
 80013b0:	20000288 	.word	0x20000288

080013b4 <sendResponse>:
/****************************************************************************************************/
/****************************************************************************************************/
/*SUPORT FUNCTIONS*/

/* Send response */
void sendResponse(char msg[]) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    int len=strlen(msg);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7fe ff3f 	bl	8000240 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	60fb      	str	r3, [r7, #12]

    USART3_busy_flag=1;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <sendResponse+0x40>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, msg, len, 10);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	230a      	movs	r3, #10
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <sendResponse+0x44>)
 80013d6:	f007 fd2d 	bl	8008e34 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, "\n\r", 2, 10);
 80013da:	230a      	movs	r3, #10
 80013dc:	2202      	movs	r2, #2
 80013de:	4907      	ldr	r1, [pc, #28]	; (80013fc <sendResponse+0x48>)
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <sendResponse+0x44>)
 80013e2:	f007 fd27 	bl	8008e34 <HAL_UART_Transmit>
	USART3_busy_flag=0;
 80013e6:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <sendResponse+0x40>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000029c 	.word	0x2000029c
 80013f8:	200005f8 	.word	0x200005f8
 80013fc:	0801abc4 	.word	0x0801abc4

08001400 <sendFloatResponse>:

void sendFloatResponse(float num)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a01 	vstr	s0, [r7, #4]
	USART3_busy_flag=1;
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <sendFloatResponse+0x64>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
	char sendFloatResponse_msg[10];
	int  num_INT=0, len;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]

	num_INT=(int)num;
 8001414:	edd7 7a01 	vldr	s15, [r7, #4]
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 3a90 	vmov	r3, s15
 8001420:	61fb      	str	r3, [r7, #28]
	sprintf(sendFloatResponse_msg,"%.2f\n\r",num);
 8001422:	edd7 7a01 	vldr	s15, [r7, #4]
 8001426:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800142a:	f107 000c 	add.w	r0, r7, #12
 800142e:	ec53 2b17 	vmov	r2, r3, d7
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <sendFloatResponse+0x68>)
 8001434:	f015 fce4 	bl	8016e00 <siprintf>
	len=strlen(sendFloatResponse_msg);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe feff 	bl	8000240 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	61bb      	str	r3, [r7, #24]
	HAL_UART_Transmit(&huart3, &sendFloatResponse_msg, len, 10);
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	b29a      	uxth	r2, r3
 800144a:	f107 010c 	add.w	r1, r7, #12
 800144e:	230a      	movs	r3, #10
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <sendFloatResponse+0x6c>)
 8001452:	f007 fcef 	bl	8008e34 <HAL_UART_Transmit>
	USART3_busy_flag=0;
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <sendFloatResponse+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000029c 	.word	0x2000029c
 8001468:	0801abc8 	.word	0x0801abc8
 800146c:	200005f8 	.word	0x200005f8

08001470 <checkAlarm>:


/* Heater 2 function */
uint8_t temp_alarm=0;
void checkAlarm(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0



}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <readByte>:
        *data = b;
    }
    return count;
}

int8_t readByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af02      	add	r7, sp, #8
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	72fb      	strb	r3, [r7, #11]
 800148c:	4613      	mov	r3, r2
 800148e:	72bb      	strb	r3, [r7, #10]
    return readBytes(handler, devAddr, regAddr, 1, data, timeout);
 8001490:	7aba      	ldrb	r2, [r7, #10]
 8001492:	7af9      	ldrb	r1, [r7, #11]
 8001494:	8b3b      	ldrh	r3, [r7, #24]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f805 	bl	80014ae <readBytes>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <readBytes>:

int8_t readBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout){
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b088      	sub	sp, #32
 80014b2:	af04      	add	r7, sp, #16
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	4608      	mov	r0, r1
 80014b8:	4611      	mov	r1, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	70fb      	strb	r3, [r7, #3]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70bb      	strb	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
	int8_t count = length;
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(handler, devAddr<<1, (uint16_t)regAddr, 1, data, (uint16_t)length, (uint32_t)timeout);
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b299      	uxth	r1, r3
 80014d4:	78bb      	ldrb	r3, [r7, #2]
 80014d6:	b298      	uxth	r0, r3
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	8bba      	ldrh	r2, [r7, #28]
 80014de:	9202      	str	r2, [sp, #8]
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	4602      	mov	r2, r0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f004 fc84 	bl	8005df8 <HAL_I2C_Mem_Read>
	return count;
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <readWord>:

int8_t readWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	72fb      	strb	r3, [r7, #11]
 800150a:	4613      	mov	r3, r2
 800150c:	72bb      	strb	r3, [r7, #10]
	int8_t count = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	75fb      	strb	r3, [r7, #23]
	uint8_t temp[4];
	readBytes(handler, devAddr, regAddr, 2, (uint8_t*)temp, timeout);
 8001512:	7aba      	ldrb	r2, [r7, #10]
 8001514:	7af9      	ldrb	r1, [r7, #11]
 8001516:	8c3b      	ldrh	r3, [r7, #32]
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2302      	movs	r3, #2
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ffc3 	bl	80014ae <readBytes>
	*data = (((uint16_t)temp[0])<<8) | (temp[1]);
 8001528:	7c3b      	ldrb	r3, [r7, #16]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7c7b      	ldrb	r3, [r7, #17]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21b      	sxth	r3, r3
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	801a      	strh	r2, [r3, #0]
	return count;
 800153c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <writeByte>:
    } else {
        return false;
    }
}

bool writeByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af02      	add	r7, sp, #8
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4603      	mov	r3, r0
 8001558:	70fb      	strb	r3, [r7, #3]
 800155a:	460b      	mov	r3, r1
 800155c:	70bb      	strb	r3, [r7, #2]
 800155e:	4613      	mov	r3, r2
 8001560:	707b      	strb	r3, [r7, #1]
    return writeBytes(handler, devAddr, regAddr, 1, &data);
 8001562:	78ba      	ldrb	r2, [r7, #2]
 8001564:	78f9      	ldrb	r1, [r7, #3]
 8001566:	1c7b      	adds	r3, r7, #1
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f805 	bl	800157c <writeBytes>
 8001572:	4603      	mov	r3, r0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <writeBytes>:

bool writeBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	460b      	mov	r3, r1
 8001590:	70bb      	strb	r3, [r7, #2]
 8001592:	4613      	mov	r3, r2
 8001594:	707b      	strb	r3, [r7, #1]
	uint8_t status = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(handler, devAddr<<1, (uint16_t)regAddr,1,data, (uint16_t)length, (uint32_t)100);
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	b29b      	uxth	r3, r3
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	b299      	uxth	r1, r3
 80015a2:	78bb      	ldrb	r3, [r7, #2]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	787b      	ldrb	r3, [r7, #1]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2064      	movs	r0, #100	; 0x64
 80015ac:	9002      	str	r0, [sp, #8]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f004 fb0a 	bl	8005bd0 <HAL_I2C_Mem_Write>
	return status == 0;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <writeWord>:
bool writeWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t data){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	803b      	strh	r3, [r7, #0]
	uint8_t towrite[2];
	towrite[0]=(uint8_t)data>>8 & 0xFF; //MSB
 80015ea:	2300      	movs	r3, #0
 80015ec:	733b      	strb	r3, [r7, #12]
	towrite[1]=(uint8_t)data & 0xFF; //LSB
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	737b      	strb	r3, [r7, #13]
	writeBytes(handler, devAddr, regAddr, 2,(uint8_t*)towrite);
 80015f4:	78ba      	ldrb	r2, [r7, #2]
 80015f6:	78f9      	ldrb	r1, [r7, #3]
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffbb 	bl	800157c <writeBytes>
	return true;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <write32Bits>:
bool write32Bits(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint32_t data){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	72fb      	strb	r3, [r7, #11]
 800161e:	4613      	mov	r3, r2
 8001620:	72bb      	strb	r3, [r7, #10]
	uint8_t towrite[4];
	towrite[0]=(uint8_t)data>>24 & 0xFF; //MSB
 8001622:	2300      	movs	r3, #0
 8001624:	753b      	strb	r3, [r7, #20]
	towrite[1]=(uint8_t)data>>16 & 0xFF;
 8001626:	2300      	movs	r3, #0
 8001628:	757b      	strb	r3, [r7, #21]
	towrite[2]=(uint8_t)data>>8 & 0xFF;
 800162a:	2300      	movs	r3, #0
 800162c:	75bb      	strb	r3, [r7, #22]
	towrite[3]=(uint8_t)data & 0xFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	75fb      	strb	r3, [r7, #23]
	writeBytes(handler, devAddr, regAddr, 4,(uint8_t*)towrite);
 8001634:	7aba      	ldrb	r2, [r7, #10]
 8001636:	7af9      	ldrb	r1, [r7, #11]
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2304      	movs	r3, #4
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff ff9b 	bl	800157c <writeBytes>
	return true;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <init_VL53L0X>:
	
extern I2C_HandleTypeDef hi2c4; //SELECT proper I2C !!!!!!!! //OCTOBER 2019 AS
extern VL53L0X sensor1;
		
void init_VL53L0X() //OCTOBER 2019 AS
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
				// Setup 	VL53L0X	
				 setup_VL53L0X(&sensor1);		
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <init_VL53L0X+0x88>)
 8001656:	f000 f84b 	bl	80016f0 <setup_VL53L0X>
				 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_RESET); //shut down the VL53L0X sensor XSHUT-PIN.
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001660:	481e      	ldr	r0, [pc, #120]	; (80016dc <init_VL53L0X+0x8c>)
 8001662:	f004 f807 	bl	8005674 <HAL_GPIO_WritePin>
         HAL_Delay(100);
 8001666:	2064      	movs	r0, #100	; 0x64
 8001668:	f002 fbf8 	bl	8003e5c <HAL_Delay>
         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11,GPIO_PIN_SET); //start up the sensor.
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001672:	481a      	ldr	r0, [pc, #104]	; (80016dc <init_VL53L0X+0x8c>)
 8001674:	f003 fffe 	bl	8005674 <HAL_GPIO_WritePin>
         HAL_Delay(24);
 8001678:	2018      	movs	r0, #24
 800167a:	f002 fbef 	bl	8003e5c <HAL_Delay>
	
										//Sensor initialization
					if(!init(&sensor1,true)) //attempt to initialise it with the necessary settings for normal operation. Returns 0 if fail, 1 if success.
 800167e:	2101      	movs	r1, #1
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <init_VL53L0X+0x88>)
 8001682:	f000 f849 	bl	8001718 <init>
 8001686:	4603      	mov	r3, r0
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <init_VL53L0X+0x4c>
					{
									sprintf(msg,"Failed to initialize\r\n");
 8001692:	4913      	ldr	r1, [pc, #76]	; (80016e0 <init_VL53L0X+0x90>)
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <init_VL53L0X+0x94>)
 8001696:	f015 fbb3 	bl	8016e00 <siprintf>
 800169a:	e003      	b.n	80016a4 <init_VL53L0X+0x54>
					}
					else
					{
									sprintf(msg,"Successfully initialized\r\n");
 800169c:	4912      	ldr	r1, [pc, #72]	; (80016e8 <init_VL53L0X+0x98>)
 800169e:	4811      	ldr	r0, [pc, #68]	; (80016e4 <init_VL53L0X+0x94>)
 80016a0:	f015 fbae 	bl	8016e00 <siprintf>
					}

					setTimeout(&sensor1,500);
 80016a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <init_VL53L0X+0x88>)
 80016aa:	f000 fee9 	bl	8002480 <setTimeout>


					setVcselPulsePeriod(&sensor1,VcselPeriodPreRange, 18);    //  VcselPeriodPreRange:  12 to 18 (initialized default: 14)
 80016ae:	2212      	movs	r2, #18
 80016b0:	2100      	movs	r1, #0
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <init_VL53L0X+0x88>)
 80016b4:	f000 fcc2 	bl	800203c <setVcselPulsePeriod>
					setVcselPulsePeriod(&sensor1,VcselPeriodFinalRange, 14);  //  VcselPeriodFinalRange: 8 to 14 (initialized default: 10)
 80016b8:	220e      	movs	r2, #14
 80016ba:	2101      	movs	r1, #1
 80016bc:	4806      	ldr	r0, [pc, #24]	; (80016d8 <init_VL53L0X+0x88>)
 80016be:	f000 fcbd 	bl	800203c <setVcselPulsePeriod>
					startContinuous(&sensor1,0);	
 80016c2:	2100      	movs	r1, #0
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <init_VL53L0X+0x88>)
 80016c6:	f000 fe56 	bl	8002376 <startContinuous>
					#if defined HIGH_SPEED
					 // reduce timing budget to 20 ms (default is about 33 ms)
					 setMeasurementTimingBudget(&sensor1,20000);
					#elif defined HIGH_ACCURACY
					 // increase timing budget to 200 ms
					 setMeasurementTimingBudget(&sensor1,200000);
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <init_VL53L0X+0x9c>)
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <init_VL53L0X+0x88>)
 80016ce:	f000 fbb5 	bl	8001e3c <setMeasurementTimingBudget>
					#endif

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000778 	.word	0x20000778
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	0801abd0 	.word	0x0801abd0
 80016e4:	20000564 	.word	0x20000564
 80016e8:	0801abe8 	.word	0x0801abe8
 80016ec:	00030d40 	.word	0x00030d40

080016f0 <setup_VL53L0X>:




void setup_VL53L0X(VL53L0X * lidar){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  lidar->address=0x29;//ADDRESS_DEFAULT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2229      	movs	r2, #41	; 0x29
 80016fc:	701a      	strb	r2, [r3, #0]
  lidar->io_timeout=0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	805a      	strh	r2, [r3, #2]
  lidar->did_timeout=false;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	711a      	strb	r2, [r3, #4]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool init(VL53L0X * lidar,bool io_2v8)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <init+0x26>
  {
    writeReg(lidar,VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 800172a:	2189      	movs	r1, #137	; 0x89
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fb17 	bl	8001d60 <readReg>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	2189      	movs	r1, #137	; 0x89
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fac9 	bl	8001cd0 <writeReg>
      readReg(lidar,(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01)); // set bit 0
  }

  // "Set I2C standard mode"
  writeReg(lidar,0x88, 0x00);
 800173e:	2200      	movs	r2, #0
 8001740:	2188      	movs	r1, #136	; 0x88
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fac4 	bl	8001cd0 <writeReg>

  writeReg(lidar,0x80, 0x01);
 8001748:	2201      	movs	r2, #1
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fabf 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001752:	2201      	movs	r2, #1
 8001754:	21ff      	movs	r1, #255	; 0xff
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 faba 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x00);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fab5 	bl	8001cd0 <writeReg>
  lidar->stop_variable = readReg(lidar,0x91);
 8001766:	2191      	movs	r1, #145	; 0x91
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 faf9 	bl	8001d60 <readReg>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	721a      	strb	r2, [r3, #8]
  //snprintf(msg,sizeof(msg),"Stop variable is: 0x%X , should be 0x%X\r\n",lidar->stop_variable,readReg(lidar,0x91));
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  writeReg(lidar,0x00, 0x01);
 8001776:	2201      	movs	r2, #1
 8001778:	2100      	movs	r1, #0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 faa8 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8001780:	2200      	movs	r2, #0
 8001782:	21ff      	movs	r1, #255	; 0xff
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 faa3 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x80, 0x00);
 800178a:	2200      	movs	r2, #0
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fa9e 	bl	8001cd0 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(lidar,MSRC_CONFIG_CONTROL, readReg(lidar,MSRC_CONFIG_CONTROL) | 0x12);
 8001794:	2160      	movs	r1, #96	; 0x60
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fae2 	bl	8001d60 <readReg>
 800179c:	4603      	mov	r3, r0
 800179e:	f043 0312 	orr.w	r3, r3, #18
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	2160      	movs	r1, #96	; 0x60
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa91 	bl	8001cd0 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(lidar,0.25);
 80017ae:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fb0c 	bl	8001dd0 <setSignalRateLimit>
  //setSignalRateLimit(lidar,0.1);

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	2101      	movs	r1, #1
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fa87 	bl	8001cd0 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(lidar,&spad_count, &spad_type_is_aperture)) { return false; }
 80017c2:	f107 0213 	add.w	r2, r7, #19
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fe77 	bl	80024c0 <getSpadInfo>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <init+0xca>
 80017de:	2300      	movs	r3, #0
 80017e0:	e271      	b.n	8001cc6 <init+0x5ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80017e2:	f107 020c 	add.w	r2, r7, #12
 80017e6:	2306      	movs	r3, #6
 80017e8:	21b0      	movs	r1, #176	; 0xb0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f001 f8cc 	bl	8002988 <readMulti>
  //sprintf(msg_2,"Spads: 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X",ref_spad_map[0],ref_spad_map[1],ref_spad_map[2],ref_spad_map[3],ref_spad_map[4],ref_spad_map[5]);
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)


  writeReg(lidar,0xFF, 0x01);
 80017f0:	2201      	movs	r2, #1
 80017f2:	21ff      	movs	r1, #255	; 0xff
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa6b 	bl	8001cd0 <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80017fa:	2200      	movs	r2, #0
 80017fc:	214f      	movs	r1, #79	; 0x4f
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fa66 	bl	8001cd0 <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001804:	222c      	movs	r2, #44	; 0x2c
 8001806:	214e      	movs	r1, #78	; 0x4e
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fa61 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 800180e:	2200      	movs	r2, #0
 8001810:	21ff      	movs	r1, #255	; 0xff
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fa5c 	bl	8001cd0 <writeReg>
  writeReg(lidar,GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001818:	22b4      	movs	r2, #180	; 0xb4
 800181a:	21b6      	movs	r1, #182	; 0xb6
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fa57 	bl	8001cd0 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001822:	7cfb      	ldrb	r3, [r7, #19]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <init+0x114>
 8001828:	230c      	movs	r3, #12
 800182a:	e000      	b.n	800182e <init+0x116>
 800182c:	2300      	movs	r3, #0
 800182e:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	75bb      	strb	r3, [r7, #22]
 8001838:	e056      	b.n	80018e8 <init+0x1d0>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 800183a:	7dba      	ldrb	r2, [r7, #22]
 800183c:	7d7b      	ldrb	r3, [r7, #21]
 800183e:	429a      	cmp	r2, r3
 8001840:	d303      	bcc.n	800184a <init+0x132>
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	7dfa      	ldrb	r2, [r7, #23]
 8001846:	429a      	cmp	r2, r3
 8001848:	d128      	bne.n	800189c <init+0x184>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 7));
 800184a:	7dbb      	ldrb	r3, [r7, #22]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	b2dc      	uxtb	r4, r3
 8001850:	4623      	mov	r3, r4
 8001852:	f107 0218 	add.w	r2, r7, #24
 8001856:	4413      	add	r3, r2
 8001858:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800185c:	b258      	sxtb	r0, r3
 800185e:	7dba      	ldrb	r2, [r7, #22]
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <init+0x180>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	1ad1      	subs	r1, r2, r3
 8001868:	0849      	lsrs	r1, r1, #1
 800186a:	440b      	add	r3, r1
 800186c:	0899      	lsrs	r1, r3, #2
 800186e:	460b      	mov	r3, r1
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a5b      	subs	r3, r3, r1
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	4093      	lsls	r3, r2
 800187e:	b25b      	sxtb	r3, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	b25b      	sxtb	r3, r3
 8001884:	4003      	ands	r3, r0
 8001886:	b25a      	sxtb	r2, r3
 8001888:	4623      	mov	r3, r4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f107 0118 	add.w	r1, r7, #24
 8001890:	440b      	add	r3, r1
 8001892:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001896:	e020      	b.n	80018da <init+0x1c2>
 8001898:	24924925 	.word	0x24924925
    }
    else if ((ref_spad_map[i / 8] >> (i % 7)) & 0x1)
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f107 0218 	add.w	r2, r7, #24
 80018a6:	4413      	add	r3, r2
 80018a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80018ac:	4618      	mov	r0, r3
 80018ae:	7dba      	ldrb	r2, [r7, #22]
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <init+0x1cc>)
 80018b2:	fba3 1302 	umull	r1, r3, r3, r2
 80018b6:	1ad1      	subs	r1, r2, r3
 80018b8:	0849      	lsrs	r1, r1, #1
 80018ba:	440b      	add	r3, r1
 80018bc:	0899      	lsrs	r1, r3, #2
 80018be:	460b      	mov	r3, r1
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	fa40 f303 	asr.w	r3, r0, r3
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <init+0x1c2>
    {
      spads_enabled++;
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	3301      	adds	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 80018da:	7dbb      	ldrb	r3, [r7, #22]
 80018dc:	3301      	adds	r3, #1
 80018de:	75bb      	strb	r3, [r7, #22]
 80018e0:	e002      	b.n	80018e8 <init+0x1d0>
 80018e2:	bf00      	nop
 80018e4:	24924925 	.word	0x24924925
 80018e8:	7dbb      	ldrb	r3, [r7, #22]
 80018ea:	2b2f      	cmp	r3, #47	; 0x2f
 80018ec:	d9a5      	bls.n	800183a <init+0x122>
    }
  }

  writeMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80018ee:	f107 020c 	add.w	r2, r7, #12
 80018f2:	2306      	movs	r3, #6
 80018f4:	21b0      	movs	r1, #176	; 0xb0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 f86a 	bl	80029d0 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(lidar,0xFF, 0x01);
 80018fc:	2201      	movs	r2, #1
 80018fe:	21ff      	movs	r1, #255	; 0xff
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f9e5 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f9e0 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001910:	2200      	movs	r2, #0
 8001912:	21ff      	movs	r1, #255	; 0xff
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9db 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x09, 0x00);
 800191a:	2200      	movs	r2, #0
 800191c:	2109      	movs	r1, #9
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f9d6 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x10, 0x00);
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f9d1 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x11, 0x00);
 800192e:	2200      	movs	r2, #0
 8001930:	2111      	movs	r1, #17
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f9cc 	bl	8001cd0 <writeReg>

  writeReg(lidar,0x24, 0x01);
 8001938:	2201      	movs	r2, #1
 800193a:	2124      	movs	r1, #36	; 0x24
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9c7 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x25, 0xFF);
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	2125      	movs	r1, #37	; 0x25
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f9c2 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x75, 0x00);
 800194c:	2200      	movs	r2, #0
 800194e:	2175      	movs	r1, #117	; 0x75
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f9bd 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001956:	2201      	movs	r2, #1
 8001958:	21ff      	movs	r1, #255	; 0xff
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f9b8 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x4E, 0x2C);
 8001960:	222c      	movs	r2, #44	; 0x2c
 8001962:	214e      	movs	r1, #78	; 0x4e
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f9b3 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x48, 0x00);
 800196a:	2200      	movs	r2, #0
 800196c:	2148      	movs	r1, #72	; 0x48
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9ae 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x30, 0x20);
 8001974:	2220      	movs	r2, #32
 8001976:	2130      	movs	r1, #48	; 0x30
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f9a9 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 800197e:	2200      	movs	r2, #0
 8001980:	21ff      	movs	r1, #255	; 0xff
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f9a4 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x30, 0x09);
 8001988:	2209      	movs	r2, #9
 800198a:	2130      	movs	r1, #48	; 0x30
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f99f 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x54, 0x00);
 8001992:	2200      	movs	r2, #0
 8001994:	2154      	movs	r1, #84	; 0x54
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f99a 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x31, 0x04);
 800199c:	2204      	movs	r2, #4
 800199e:	2131      	movs	r1, #49	; 0x31
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f995 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x32, 0x03);
 80019a6:	2203      	movs	r2, #3
 80019a8:	2132      	movs	r1, #50	; 0x32
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f990 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x40, 0x83);
 80019b0:	2283      	movs	r2, #131	; 0x83
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f98b 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x46, 0x25);
 80019ba:	2225      	movs	r2, #37	; 0x25
 80019bc:	2146      	movs	r1, #70	; 0x46
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f986 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x60, 0x00);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2160      	movs	r1, #96	; 0x60
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f981 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x27, 0x00);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2127      	movs	r1, #39	; 0x27
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f97c 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x50, 0x06);
 80019d8:	2206      	movs	r2, #6
 80019da:	2150      	movs	r1, #80	; 0x50
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f977 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x51, 0x00);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2151      	movs	r1, #81	; 0x51
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f972 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x52, 0x96);
 80019ec:	2296      	movs	r2, #150	; 0x96
 80019ee:	2152      	movs	r1, #82	; 0x52
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f96d 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x56, 0x08);
 80019f6:	2208      	movs	r2, #8
 80019f8:	2156      	movs	r1, #86	; 0x56
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f968 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x57, 0x30);
 8001a00:	2230      	movs	r2, #48	; 0x30
 8001a02:	2157      	movs	r1, #87	; 0x57
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f963 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x61, 0x00);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2161      	movs	r1, #97	; 0x61
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f95e 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x62, 0x00);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2162      	movs	r1, #98	; 0x62
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f959 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x64, 0x00);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2164      	movs	r1, #100	; 0x64
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f954 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x65, 0x00);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2165      	movs	r1, #101	; 0x65
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f94f 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x66, 0xA0);
 8001a32:	22a0      	movs	r2, #160	; 0xa0
 8001a34:	2166      	movs	r1, #102	; 0x66
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f94a 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	21ff      	movs	r1, #255	; 0xff
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f945 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x22, 0x32);
 8001a46:	2232      	movs	r2, #50	; 0x32
 8001a48:	2122      	movs	r1, #34	; 0x22
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f940 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x47, 0x14);
 8001a50:	2214      	movs	r2, #20
 8001a52:	2147      	movs	r1, #71	; 0x47
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f93b 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x49, 0xFF);
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	2149      	movs	r1, #73	; 0x49
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f936 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x4A, 0x00);
 8001a64:	2200      	movs	r2, #0
 8001a66:	214a      	movs	r1, #74	; 0x4a
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f931 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	21ff      	movs	r1, #255	; 0xff
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f92c 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x7A, 0x0A);
 8001a78:	220a      	movs	r2, #10
 8001a7a:	217a      	movs	r1, #122	; 0x7a
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f927 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x7B, 0x00);
 8001a82:	2200      	movs	r2, #0
 8001a84:	217b      	movs	r1, #123	; 0x7b
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f922 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x78, 0x21);
 8001a8c:	2221      	movs	r2, #33	; 0x21
 8001a8e:	2178      	movs	r1, #120	; 0x78
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f91d 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001a96:	2201      	movs	r2, #1
 8001a98:	21ff      	movs	r1, #255	; 0xff
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f918 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x23, 0x34);
 8001aa0:	2234      	movs	r2, #52	; 0x34
 8001aa2:	2123      	movs	r1, #35	; 0x23
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f913 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x42, 0x00);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2142      	movs	r1, #66	; 0x42
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f90e 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x44, 0xFF);
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	2144      	movs	r1, #68	; 0x44
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f909 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x45, 0x26);
 8001abe:	2226      	movs	r2, #38	; 0x26
 8001ac0:	2145      	movs	r1, #69	; 0x45
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f904 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x46, 0x05);
 8001ac8:	2205      	movs	r2, #5
 8001aca:	2146      	movs	r1, #70	; 0x46
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8ff 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x40, 0x40);
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8fa 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x0E, 0x06);
 8001adc:	2206      	movs	r2, #6
 8001ade:	210e      	movs	r1, #14
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8f5 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x20, 0x1A);
 8001ae6:	221a      	movs	r2, #26
 8001ae8:	2120      	movs	r1, #32
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8f0 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x43, 0x40);
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	2143      	movs	r1, #67	; 0x43
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8eb 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001afa:	2200      	movs	r2, #0
 8001afc:	21ff      	movs	r1, #255	; 0xff
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8e6 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x34, 0x03);
 8001b04:	2203      	movs	r2, #3
 8001b06:	2134      	movs	r1, #52	; 0x34
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8e1 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x35, 0x44);
 8001b0e:	2244      	movs	r2, #68	; 0x44
 8001b10:	2135      	movs	r1, #53	; 0x35
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8dc 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	21ff      	movs	r1, #255	; 0xff
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8d7 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x31, 0x04);
 8001b22:	2204      	movs	r2, #4
 8001b24:	2131      	movs	r1, #49	; 0x31
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8d2 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x4B, 0x09);
 8001b2c:	2209      	movs	r2, #9
 8001b2e:	214b      	movs	r1, #75	; 0x4b
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8cd 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x4C, 0x05);
 8001b36:	2205      	movs	r2, #5
 8001b38:	214c      	movs	r1, #76	; 0x4c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8c8 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x4D, 0x04);
 8001b40:	2204      	movs	r2, #4
 8001b42:	214d      	movs	r1, #77	; 0x4d
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f8c3 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	21ff      	movs	r1, #255	; 0xff
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8be 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x44, 0x00);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2144      	movs	r1, #68	; 0x44
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8b9 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x45, 0x20);
 8001b5e:	2220      	movs	r2, #32
 8001b60:	2145      	movs	r1, #69	; 0x45
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8b4 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x47, 0x08);
 8001b68:	2208      	movs	r2, #8
 8001b6a:	2147      	movs	r1, #71	; 0x47
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8af 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x48, 0x28);
 8001b72:	2228      	movs	r2, #40	; 0x28
 8001b74:	2148      	movs	r1, #72	; 0x48
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8aa 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x67, 0x00);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2167      	movs	r1, #103	; 0x67
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8a5 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x70, 0x04);
 8001b86:	2204      	movs	r2, #4
 8001b88:	2170      	movs	r1, #112	; 0x70
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8a0 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x71, 0x01);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2171      	movs	r1, #113	; 0x71
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f89b 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x72, 0xFE);
 8001b9a:	22fe      	movs	r2, #254	; 0xfe
 8001b9c:	2172      	movs	r1, #114	; 0x72
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f896 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x76, 0x00);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2176      	movs	r1, #118	; 0x76
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f891 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x77, 0x00);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2177      	movs	r1, #119	; 0x77
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f88c 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	21ff      	movs	r1, #255	; 0xff
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f887 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x0D, 0x01);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	210d      	movs	r1, #13
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f882 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	21ff      	movs	r1, #255	; 0xff
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f87d 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x80, 0x01);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2180      	movs	r1, #128	; 0x80
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f878 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x01, 0xF8);
 8001be0:	22f8      	movs	r2, #248	; 0xf8
 8001be2:	2101      	movs	r1, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f873 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001bea:	2201      	movs	r2, #1
 8001bec:	21ff      	movs	r1, #255	; 0xff
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f86e 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x8E, 0x01);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	218e      	movs	r1, #142	; 0x8e
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f869 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2100      	movs	r1, #0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f864 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	21ff      	movs	r1, #255	; 0xff
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f85f 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f85a 	bl	8001cd0 <writeReg>


  writeReg(lidar,SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	210a      	movs	r1, #10
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f855 	bl	8001cd0 <writeReg>
  writeReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH, readReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001c26:	2184      	movs	r1, #132	; 0x84
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f899 	bl	8001d60 <readReg>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f023 0310 	bic.w	r3, r3, #16
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	2184      	movs	r1, #132	; 0x84
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f848 	bl	8001cd0 <writeReg>
  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001c40:	2201      	movs	r2, #1
 8001c42:	210b      	movs	r1, #11
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f843 	bl	8001cd0 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  lidar->measurement_timing_budget_us = getMeasurementTimingBudget(lidar);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f98f 	bl	8001f6e <getMeasurementTimingBudget>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60da      	str	r2, [r3, #12]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001c56:	22e8      	movs	r2, #232	; 0xe8
 8001c58:	2101      	movs	r1, #1
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f838 	bl	8001cd0 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8e8 	bl	8001e3c <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f82d 	bl	8001cd0 <writeReg>
  if (!performSingleRefCalibration(lidar,0x40)) { return false; }
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fdf1 	bl	8002860 <performSingleRefCalibration>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <init+0x576>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e01b      	b.n	8001cc6 <init+0x5ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001c8e:	2202      	movs	r2, #2
 8001c90:	2101      	movs	r1, #1
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f81c 	bl	8001cd0 <writeReg>
  if (!performSingleRefCalibration(lidar,0x00)) { return false; }
 8001c98:	2100      	movs	r1, #0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fde0 	bl	8002860 <performSingleRefCalibration>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <init+0x598>
 8001cac:	2300      	movs	r3, #0
 8001cae:	e00a      	b.n	8001cc6 <init+0x5ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001cb0:	22e8      	movs	r2, #232	; 0xe8
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f80b 	bl	8001cd0 <writeReg>

  // VL53L0X_PerformRefCalibration() end
  setTimeout(lidar,500);
 8001cba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fbde 	bl	8002480 <setTimeout>

  return true;
 8001cc4:	2301      	movs	r3, #1


}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop

08001cd0 <writeReg>:

// Write an 8-bit register
void writeReg(VL53L0X * lidar,uint8_t reg, uint8_t value)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	70bb      	strb	r3, [r7, #2]
	writeByte(I2C,lidar->address,reg,value);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7819      	ldrb	r1, [r3, #0]
 8001ce4:	78bb      	ldrb	r3, [r7, #2]
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <writeReg+0x2c>)
 8001cea:	f7ff fc2d 	bl	8001548 <writeByte>
	lidar->last_status = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	741a      	strb	r2, [r3, #16]
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200005ac 	.word	0x200005ac

08001d00 <writeReg16Bit>:



// Write a 16-bit register
void writeReg16Bit(VL53L0X * lidar,uint8_t reg, uint16_t value)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	803b      	strh	r3, [r7, #0]
  writeWord(I2C,lidar->address,reg,value);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7819      	ldrb	r1, [r3, #0]
 8001d14:	883b      	ldrh	r3, [r7, #0]
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <writeReg16Bit+0x2c>)
 8001d1a:	f7ff fc59 	bl	80015d0 <writeWord>
  lidar->last_status = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	741a      	strb	r2, [r3, #16]
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200005ac 	.word	0x200005ac

08001d30 <writeReg32Bit>:

// Write a 32-bit register
void writeReg32Bit(VL53L0X * lidar,uint8_t reg, uint32_t value)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	72fb      	strb	r3, [r7, #11]
  write32Bits(I2C,lidar->address,reg,value);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	7819      	ldrb	r1, [r3, #0]
 8001d42:	7afa      	ldrb	r2, [r7, #11]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <writeReg32Bit+0x2c>)
 8001d48:	f7ff fc62 	bl	8001610 <write32Bits>
  lidar->last_status = 0;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	741a      	strb	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200005ac 	.word	0x200005ac

08001d60 <readReg>:

// Read an 8-bit register
uint8_t readReg(VL53L0X * lidar,uint8_t reg)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  readByte(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7819      	ldrb	r1, [r3, #0]
 8001d70:	f107 030f 	add.w	r3, r7, #15
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d7a:	9000      	str	r0, [sp, #0]
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <readReg+0x34>)
 8001d7e:	f7ff fb7e 	bl	800147e <readByte>

  lidar->last_status = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	741a      	strb	r2, [r3, #16]
  return value;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200005ac 	.word	0x200005ac

08001d98 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(VL53L0X * lidar,uint8_t reg)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  readWord(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7819      	ldrb	r1, [r3, #0]
 8001da8:	f107 030e 	add.w	r3, r7, #14
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001db2:	9000      	str	r0, [sp, #0]
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <readReg16Bit+0x34>)
 8001db6:	f7ff fba1 	bl	80014fc <readWord>

  lidar->last_status = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	741a      	strb	r2, [r3, #16]
  return value;
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200005ac 	.word	0x200005ac

08001dd0 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(VL53L0X * lidar,float limit_Mcps)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	ed87 0a00 	vstr	s0, [r7]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001ddc:	edd7 7a00 	vldr	s15, [r7]
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d40a      	bmi.n	8001e00 <setSignalRateLimit+0x30>
 8001dea:	edd7 7a00 	vldr	s15, [r7]
 8001dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001df2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001e30 <setSignalRateLimit+0x60>
 8001df6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	dd01      	ble.n	8001e04 <setSignalRateLimit+0x34>
 8001e00:	2300      	movs	r3, #0
 8001e02:	e010      	b.n	8001e26 <setSignalRateLimit+0x56>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(lidar,FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001e04:	edd7 7a00 	vldr	s15, [r7]
 8001e08:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e38 <setSignalRateLimit+0x68>
 8001e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e14:	ee17 3a90 	vmov	r3, s15
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2144      	movs	r1, #68	; 0x44
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff6e 	bl	8001d00 <writeReg16Bit>
  return true;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0a3d70a4 	.word	0x0a3d70a4
 8001e34:	407fffd7 	.word	0x407fffd7
 8001e38:	43000000 	.word	0x43000000

08001e3c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(VL53L0X * lidar,uint32_t budget_us)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b092      	sub	sp, #72	; 0x48
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001e46:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8001e4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 8001e4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e52:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001e54:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001e58:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 8001e5a:	f240 234e 	movw	r3, #590	; 0x24e
 8001e5e:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 8001e60:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001e64:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001e66:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001e6a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001e6c:	f240 2326 	movw	r3, #550	; 0x226
 8001e70:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8001e72:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d201      	bcs.n	8001e84 <setMeasurementTimingBudget+0x48>
 8001e80:	2300      	movs	r3, #0
 8001e82:	e070      	b.n	8001f66 <setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001e84:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001e88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e8a:	4413      	add	r3, r2
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(lidar,&enables);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fbb3 	bl	8002600 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 8001e9a:	f107 020c 	add.w	r2, r7, #12
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fbf6 	bl	8002696 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001eb6:	4413      	add	r3, r2
 8001eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eba:	4413      	add	r3, r2
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8001ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed0:	4413      	add	r3, r2
 8001ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed4:	e009      	b.n	8001eea <setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 8001ed6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ee2:	4413      	add	r3, r2
 8001ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ee6:	4413      	add	r3, r2
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8001eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef6:	4413      	add	r3, r2
 8001ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001efa:	4413      	add	r3, r2
 8001efc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8001efe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02e      	beq.n	8001f64 <setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 8001f06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f0a:	4413      	add	r3, r2
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8001f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d901      	bls.n	8001f1a <setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e025      	b.n	8001f66 <setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001f22:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f2a:	f000 fc7f 	bl	800282c <timeoutMicrosecondsToMclks>
 8001f2e:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001f3c:	8a7a      	ldrh	r2, [r7, #18]
 8001f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f42:	4413      	add	r3, r2
 8001f44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fc22 	bl	8002796 <encodeTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	2171      	movs	r1, #113	; 0x71
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fed1 	bl	8001d00 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	60da      	str	r2, [r3, #12]
  }
  return true;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3748      	adds	r7, #72	; 0x48
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(VL53L0X * lidar)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b08e      	sub	sp, #56	; 0x38
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001f76:	f240 7376 	movw	r3, #1910	; 0x776
 8001f7a:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8001f7c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f80:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8001f82:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001f86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8001f88:	f240 234e 	movw	r3, #590	; 0x24e
 8001f8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 8001f8e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001f92:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8001f94:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001f98:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 8001f9a:	f240 2326 	movw	r3, #550	; 0x226
 8001f9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001fa0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001fa2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001fa4:	4413      	add	r3, r2
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34

  getSequenceStepEnables(lidar,&enables);
 8001fa8:	f107 0320 	add.w	r3, r7, #32
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb26 	bl	8002600 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 8001fb4:	f107 0208 	add.w	r2, r7, #8
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fb69 	bl	8002696 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fd0:	4413      	add	r3, r2
 8001fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd4:	4413      	add	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 8001fd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fe4:	4413      	add	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	4413      	add	r3, r2
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
 8001fee:	e009      	b.n	8002004 <getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 8001ff0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ffc:	4413      	add	r3, r2
 8001ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002000:	4413      	add	r3, r2
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 8002004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002010:	4413      	add	r3, r2
 8002012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002014:	4413      	add	r3, r2
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8002018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002024:	4413      	add	r3, r2
 8002026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002028:	4413      	add	r3, r2
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002030:	60da      	str	r2, [r3, #12]
  return budget_us;
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002034:	4618      	mov	r0, r3
 8002036:	3738      	adds	r7, #56	; 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type, uint8_t period_pclks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
 8002048:	4613      	mov	r3, r2
 800204a:	70bb      	strb	r3, [r7, #2]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800204c:	78bb      	ldrb	r3, [r7, #2]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fc70 	bl	8002934 <encodeVcselPeriod>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(lidar,&enables);
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 facd 	bl	8002600 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 8002066:	f107 0208 	add.w	r2, r7, #8
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb10 	bl	8002696 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d165      	bne.n	8002148 <setVcselPulsePeriod+0x10c>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800207c:	78bb      	ldrb	r3, [r7, #2]
 800207e:	3b0c      	subs	r3, #12
 8002080:	2b06      	cmp	r3, #6
 8002082:	d829      	bhi.n	80020d8 <setVcselPulsePeriod+0x9c>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <setVcselPulsePeriod+0x50>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020d9 	.word	0x080020d9
 8002094:	080020b5 	.word	0x080020b5
 8002098:	080020d9 	.word	0x080020d9
 800209c:	080020c1 	.word	0x080020c1
 80020a0:	080020d9 	.word	0x080020d9
 80020a4:	080020cd 	.word	0x080020cd
    {
      case 12:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80020a8:	2218      	movs	r2, #24
 80020aa:	2157      	movs	r1, #87	; 0x57
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fe0f 	bl	8001cd0 <writeReg>
        break;
 80020b2:	e013      	b.n	80020dc <setVcselPulsePeriod+0xa0>

      case 14:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80020b4:	2230      	movs	r2, #48	; 0x30
 80020b6:	2157      	movs	r1, #87	; 0x57
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe09 	bl	8001cd0 <writeReg>
        break;
 80020be:	e00d      	b.n	80020dc <setVcselPulsePeriod+0xa0>

      case 16:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	2157      	movs	r1, #87	; 0x57
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fe03 	bl	8001cd0 <writeReg>
        break;
 80020ca:	e007      	b.n	80020dc <setVcselPulsePeriod+0xa0>

      case 18:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80020cc:	2250      	movs	r2, #80	; 0x50
 80020ce:	2157      	movs	r1, #87	; 0x57
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fdfd 	bl	8001cd0 <writeReg>
        break;
 80020d6:	e001      	b.n	80020dc <setVcselPulsePeriod+0xa0>

      default:
        // invalid period
        return false;
 80020d8:	2300      	movs	r3, #0
 80020da:	e123      	b.n	8002324 <setVcselPulsePeriod+0x2e8>
    }
    writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80020dc:	2208      	movs	r2, #8
 80020de:	2156      	movs	r1, #86	; 0x56
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fdf5 	bl	8001cd0 <writeReg>

    // apply new VCSEL period
    writeReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80020e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ea:	461a      	mov	r2, r3
 80020ec:	2150      	movs	r1, #80	; 0x50
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fdee 	bl	8001cd0 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	78ba      	ldrb	r2, [r7, #2]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fb96 	bl	800282c <timeoutMicrosecondsToMclks>
 8002100:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8002102:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fb45 	bl	8002796 <encodeTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	2151      	movs	r1, #81	; 0x51
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fdf4 	bl	8001d00 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	78ba      	ldrb	r2, [r7, #2]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb84 	bl	800282c <timeoutMicrosecondsToMclks>
 8002124:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8002126:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 8002128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d804      	bhi.n	800213a <setVcselPulsePeriod+0xfe>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8002130:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002132:	b2db      	uxtb	r3, r3
    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 8002134:	3b01      	subs	r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	e000      	b.n	800213c <setVcselPulsePeriod+0x100>
 800213a:	23ff      	movs	r3, #255	; 0xff
 800213c:	461a      	mov	r2, r3
 800213e:	2146      	movs	r1, #70	; 0x46
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fdc5 	bl	8001cd0 <writeReg>
 8002146:	e0cf      	b.n	80022e8 <setVcselPulsePeriod+0x2ac>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b01      	cmp	r3, #1
 800214c:	f040 80ca 	bne.w	80022e4 <setVcselPulsePeriod+0x2a8>
  {
    switch (period_pclks)
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	3b08      	subs	r3, #8
 8002154:	2b06      	cmp	r3, #6
 8002156:	f200 80a1 	bhi.w	800229c <setVcselPulsePeriod+0x260>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <setVcselPulsePeriod+0x124>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	0800217d 	.word	0x0800217d
 8002164:	0800229d 	.word	0x0800229d
 8002168:	080021c5 	.word	0x080021c5
 800216c:	0800229d 	.word	0x0800229d
 8002170:	0800220d 	.word	0x0800220d
 8002174:	0800229d 	.word	0x0800229d
 8002178:	08002255 	.word	0x08002255
    {
      case 8:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800217c:	2210      	movs	r2, #16
 800217e:	2148      	movs	r1, #72	; 0x48
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fda5 	bl	8001cd0 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002186:	2208      	movs	r2, #8
 8002188:	2147      	movs	r1, #71	; 0x47
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fda0 	bl	8001cd0 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8002190:	2202      	movs	r2, #2
 8002192:	2132      	movs	r1, #50	; 0x32
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fd9b 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800219a:	220c      	movs	r2, #12
 800219c:	2130      	movs	r1, #48	; 0x30
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fd96 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 80021a4:	2201      	movs	r2, #1
 80021a6:	21ff      	movs	r1, #255	; 0xff
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fd91 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x30);
 80021ae:	2230      	movs	r2, #48	; 0x30
 80021b0:	2130      	movs	r1, #48	; 0x30
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fd8c 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 80021b8:	2200      	movs	r2, #0
 80021ba:	21ff      	movs	r1, #255	; 0xff
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fd87 	bl	8001cd0 <writeReg>
        break;
 80021c2:	e06d      	b.n	80022a0 <setVcselPulsePeriod+0x264>

      case 10:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80021c4:	2228      	movs	r2, #40	; 0x28
 80021c6:	2148      	movs	r1, #72	; 0x48
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fd81 	bl	8001cd0 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80021ce:	2208      	movs	r2, #8
 80021d0:	2147      	movs	r1, #71	; 0x47
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fd7c 	bl	8001cd0 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80021d8:	2203      	movs	r2, #3
 80021da:	2132      	movs	r1, #50	; 0x32
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fd77 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80021e2:	2209      	movs	r2, #9
 80021e4:	2130      	movs	r1, #48	; 0x30
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fd72 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 80021ec:	2201      	movs	r2, #1
 80021ee:	21ff      	movs	r1, #255	; 0xff
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fd6d 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 80021f6:	2220      	movs	r2, #32
 80021f8:	2130      	movs	r1, #48	; 0x30
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fd68 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8002200:	2200      	movs	r2, #0
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff fd63 	bl	8001cd0 <writeReg>
        break;
 800220a:	e049      	b.n	80022a0 <setVcselPulsePeriod+0x264>

      case 12:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 800220c:	2238      	movs	r2, #56	; 0x38
 800220e:	2148      	movs	r1, #72	; 0x48
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fd5d 	bl	8001cd0 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002216:	2208      	movs	r2, #8
 8002218:	2147      	movs	r1, #71	; 0x47
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fd58 	bl	8001cd0 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002220:	2203      	movs	r2, #3
 8002222:	2132      	movs	r1, #50	; 0x32
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fd53 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 800222a:	2208      	movs	r2, #8
 800222c:	2130      	movs	r1, #48	; 0x30
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fd4e 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8002234:	2201      	movs	r2, #1
 8002236:	21ff      	movs	r1, #255	; 0xff
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd49 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 800223e:	2220      	movs	r2, #32
 8002240:	2130      	movs	r1, #48	; 0x30
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fd44 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8002248:	2200      	movs	r2, #0
 800224a:	21ff      	movs	r1, #255	; 0xff
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fd3f 	bl	8001cd0 <writeReg>
        break;
 8002252:	e025      	b.n	80022a0 <setVcselPulsePeriod+0x264>

      case 14:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8002254:	2248      	movs	r2, #72	; 0x48
 8002256:	2148      	movs	r1, #72	; 0x48
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fd39 	bl	8001cd0 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800225e:	2208      	movs	r2, #8
 8002260:	2147      	movs	r1, #71	; 0x47
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fd34 	bl	8001cd0 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002268:	2203      	movs	r2, #3
 800226a:	2132      	movs	r1, #50	; 0x32
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fd2f 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8002272:	2207      	movs	r2, #7
 8002274:	2130      	movs	r1, #48	; 0x30
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fd2a 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 800227c:	2201      	movs	r2, #1
 800227e:	21ff      	movs	r1, #255	; 0xff
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fd25 	bl	8001cd0 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 8002286:	2220      	movs	r2, #32
 8002288:	2130      	movs	r1, #48	; 0x30
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fd20 	bl	8001cd0 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8002290:	2200      	movs	r2, #0
 8002292:	21ff      	movs	r1, #255	; 0xff
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fd1b 	bl	8001cd0 <writeReg>
        break;
 800229a:	e001      	b.n	80022a0 <setVcselPulsePeriod+0x264>

      default:
        // invalid period
        return false;
 800229c:	2300      	movs	r3, #0
 800229e:	e041      	b.n	8002324 <setVcselPulsePeriod+0x2e8>
    }

    // apply new VCSEL period
    writeReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80022a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a4:	461a      	mov	r2, r3
 80022a6:	2170      	movs	r1, #112	; 0x70
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fd11 	bl	8001cd0 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	78ba      	ldrb	r2, [r7, #2]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fab9 	bl	800282c <timeoutMicrosecondsToMclks>
 80022ba:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 80022bc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 80022be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <setVcselPulsePeriod+0x292>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 80022c6:	89fa      	ldrh	r2, [r7, #14]
 80022c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022ca:	4413      	add	r3, r2
 80022cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80022ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fa60 	bl	8002796 <encodeTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	2171      	movs	r1, #113	; 0x71
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fd0f 	bl	8001d00 <writeReg16Bit>
 80022e2:	e001      	b.n	80022e8 <setVcselPulsePeriod+0x2ac>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e01d      	b.n	8002324 <setVcselPulsePeriod+0x2e8>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fda4 	bl	8001e3c <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 80022f4:	2101      	movs	r1, #1
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fd32 	bl	8001d60 <readReg>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002302:	2202      	movs	r2, #2
 8002304:	2101      	movs	r1, #1
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fce2 	bl	8001cd0 <writeReg>
  performSingleRefCalibration(lidar,0x0);
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 faa6 	bl	8002860 <performSingleRefCalibration>
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002318:	461a      	mov	r2, r3
 800231a:	2101      	movs	r1, #1
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fcd7 	bl	8001cd0 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3730      	adds	r7, #48	; 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD));
 800233e:	2150      	movs	r1, #80	; 0x50
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fd0d 	bl	8001d60 <readReg>
 8002346:	4603      	mov	r3, r0
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fae3 	bl	8002914 <decodeVcselPeriod>
 800234e:	4603      	mov	r3, r0
 8002350:	e00d      	b.n	800236e <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d109      	bne.n	800236c <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8002358:	2170      	movs	r1, #112	; 0x70
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fd00 	bl	8001d60 <readReg>
 8002360:	4603      	mov	r3, r0
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fad6 	bl	8002914 <decodeVcselPeriod>
 8002368:	4603      	mov	r3, r0
 800236a:	e000      	b.n	800236e <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 800236c:	23ff      	movs	r3, #255	; 0xff
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void startContinuous(VL53L0X * lidar,uint32_t period_ms)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  writeReg(lidar,0x80, 0x01);
 8002380:	2201      	movs	r2, #1
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fca3 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 800238a:	2201      	movs	r2, #1
 800238c:	21ff      	movs	r1, #255	; 0xff
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fc9e 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fc99 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x91, lidar->stop_variable);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7a1b      	ldrb	r3, [r3, #8]
 80023a2:	461a      	mov	r2, r3
 80023a4:	2191      	movs	r1, #145	; 0x91
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fc92 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x01);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2100      	movs	r1, #0
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fc8d 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 80023b6:	2200      	movs	r2, #0
 80023b8:	21ff      	movs	r1, #255	; 0xff
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fc88 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x80, 0x00);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fc83 	bl	8001cd0 <writeReg>

  if (period_ms != 0)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d018      	beq.n	8002402 <startContinuous+0x8c>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin
    uint16_t osc_calibrate_val = readReg16Bit(lidar,OSC_CALIBRATE_VAL);
 80023d0:	21f8      	movs	r1, #248	; 0xf8
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fce0 	bl	8001d98 <readReg16Bit>
 80023d8:	4603      	mov	r3, r0
 80023da:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <startContinuous+0x76>
    {
      period_ms *= osc_calibrate_val;
 80023e2:	89fa      	ldrh	r2, [r7, #14]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	603b      	str	r3, [r7, #0]
    }

    writeReg32Bit(lidar,SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	2104      	movs	r1, #4
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fc9d 	bl	8001d30 <writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(lidar,SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80023f6:	2204      	movs	r2, #4
 80023f8:	2100      	movs	r1, #0
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fc68 	bl	8001cd0 <writeReg>
    // continuous back-to-back mode
	//snprintf(msg_1,sizeof(msg),"Starting continuous...\r\n");
	//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
    writeReg(lidar,SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8002400:	e004      	b.n	800240c <startContinuous+0x96>
    writeReg(lidar,SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8002402:	2202      	movs	r2, #2
 8002404:	2100      	movs	r1, #0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fc62 	bl	8001cd0 <writeReg>
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t readRangeContinuousMillimeters(VL53L0X * lidar)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  startTimeout(lidar);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa52 	bl	80028c6 <startTimeout>

  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002422:	e00b      	b.n	800243c <readRangeContinuousMillimeters+0x28>
  {
    if (checkTimeoutExpired(lidar))
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa5c 	bl	80028e2 <checkTimeoutExpired>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <readRangeContinuousMillimeters+0x28>
    {
      lidar->did_timeout = true;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	711a      	strb	r2, [r3, #4]
      return 65535;
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243a:	e01d      	b.n	8002478 <readRangeContinuousMillimeters+0x64>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800243c:	2113      	movs	r1, #19
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fc8e 	bl	8001d60 <readReg>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ea      	beq.n	8002424 <readRangeContinuousMillimeters+0x10>
  }


  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(lidar,RESULT_RANGE_STATUS + 10);
 800244e:	211e      	movs	r1, #30
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fca1 	bl	8001d98 <readReg16Bit>
 8002456:	4603      	mov	r3, r0
 8002458:	81fb      	strh	r3, [r7, #14]

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 800245a:	2201      	movs	r2, #1
 800245c:	210b      	movs	r1, #11
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fc36 	bl	8001cd0 <writeReg>
  if (timeoutOccurred(lidar))
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f81a 	bl	800249e <timeoutOccurred>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <readRangeContinuousMillimeters+0x62>
    {
      range = 0x1FFE;
 8002470:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002474:	81fb      	strh	r3, [r7, #14]
    }

  return range;
 8002476:	89fb      	ldrh	r3, [r7, #14]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <setTimeout>:

  return readRangeContinuousMillimeters(lidar);
}

void setTimeout(VL53L0X * lidar,uint16_t timeout)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
	lidar->io_timeout = timeout;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	805a      	strh	r2, [r3, #2]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <timeoutOccurred>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool timeoutOccurred(VL53L0X * lidar)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  bool tmp = lidar->did_timeout;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	73fb      	strb	r3, [r7, #15]
  lidar->did_timeout = false;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	711a      	strb	r2, [r3, #4]
  return tmp;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(VL53L0X * lidar,uint8_t * count, bool * type_is_aperture)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  writeReg(lidar,0x80, 0x01);
 80024cc:	2201      	movs	r2, #1
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fbfd 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 80024d6:	2201      	movs	r2, #1
 80024d8:	21ff      	movs	r1, #255	; 0xff
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff fbf8 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x00);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fbf3 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x06);
 80024ea:	2206      	movs	r2, #6
 80024ec:	21ff      	movs	r1, #255	; 0xff
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff fbee 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83) | 0x04);
 80024f4:	2183      	movs	r1, #131	; 0x83
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fc32 	bl	8001d60 <readReg>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	2183      	movs	r1, #131	; 0x83
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fbe1 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x07);
 800250e:	2207      	movs	r2, #7
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fbdc 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x81, 0x01);
 8002518:	2201      	movs	r2, #1
 800251a:	2181      	movs	r1, #129	; 0x81
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fbd7 	bl	8001cd0 <writeReg>

  writeReg(lidar,0x80, 0x01);
 8002522:	2201      	movs	r2, #1
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fbd2 	bl	8001cd0 <writeReg>

  writeReg(lidar,0x94, 0x6b);
 800252c:	226b      	movs	r2, #107	; 0x6b
 800252e:	2194      	movs	r1, #148	; 0x94
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fbcd 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x83, 0x00);
 8002536:	2200      	movs	r2, #0
 8002538:	2183      	movs	r1, #131	; 0x83
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fbc8 	bl	8001cd0 <writeReg>
  startTimeout(lidar);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f9c0 	bl	80028c6 <startTimeout>
  while (readReg(lidar,0x83) == 0x00)
 8002546:	e007      	b.n	8002558 <getSpadInfo+0x98>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f9ca 	bl	80028e2 <checkTimeoutExpired>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <getSpadInfo+0x98>
 8002554:	2300      	movs	r3, #0
 8002556:	e04f      	b.n	80025f8 <getSpadInfo+0x138>
  while (readReg(lidar,0x83) == 0x00)
 8002558:	2183      	movs	r1, #131	; 0x83
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff fc00 	bl	8001d60 <readReg>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <getSpadInfo+0x88>
  }
  writeReg(lidar,0x83, 0x01);
 8002566:	2201      	movs	r2, #1
 8002568:	2183      	movs	r1, #131	; 0x83
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff fbb0 	bl	8001cd0 <writeReg>
  tmp = readReg(lidar,0x92);
 8002570:	2192      	movs	r1, #146	; 0x92
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fbf4 	bl	8001d60 <readReg>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2da      	uxtb	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	701a      	strb	r2, [r3, #0]

  writeReg(lidar,0x81, 0x00);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2181      	movs	r1, #129	; 0x81
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fb93 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x06);
 80025aa:	2206      	movs	r2, #6
 80025ac:	21ff      	movs	r1, #255	; 0xff
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff fb8e 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83)  & ~0x04);
 80025b4:	2183      	movs	r1, #131	; 0x83
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff fbd2 	bl	8001d60 <readReg>
 80025bc:	4603      	mov	r3, r0
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	2183      	movs	r1, #131	; 0x83
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff fb81 	bl	8001cd0 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 80025ce:	2201      	movs	r2, #1
 80025d0:	21ff      	movs	r1, #255	; 0xff
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff fb7c 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x00, 0x01);
 80025d8:	2201      	movs	r2, #1
 80025da:	2100      	movs	r1, #0
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fb77 	bl	8001cd0 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 80025e2:	2200      	movs	r2, #0
 80025e4:	21ff      	movs	r1, #255	; 0xff
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fb72 	bl	8001cd0 <writeReg>
  writeReg(lidar,0x80, 0x00);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff fb6d 	bl	8001cd0 <writeReg>

  return true;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(VL53L0X * lidar,SequenceStepEnables * enables)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 800260a:	2101      	movs	r1, #1
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fba7 	bl	8001d60 <readReg>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2da      	uxtb	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2da      	uxtb	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2da      	uxtb	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2da      	uxtb	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	09db      	lsrs	r3, r3, #7
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2da      	uxtb	r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	711a      	strb	r2, [r3, #4]
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(VL53L0X * lidar,SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodPreRange);
 80026a2:	2100      	movs	r1, #0
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fe41 	bl	800232c <getVcselPulsePeriod>
 80026aa:	4603      	mov	r3, r0
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80026b2:	2146      	movs	r1, #70	; 0x46
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fb53 	bl	8001d60 <readReg>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f000 f88c 	bl	80027f0 <timeoutMclksToMicroseconds>
 80026d8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80026de:	2151      	movs	r1, #81	; 0x51
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fb59 	bl	8001d98 <readReg16Bit>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f840 	bl	800276e <decodeTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 f874 	bl	80027f0 <timeoutMclksToMicroseconds>
 8002708:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodFinalRange);
 800270e:	2101      	movs	r1, #1
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fe0b 	bl	800232c <getVcselPulsePeriod>
 8002716:	4603      	mov	r3, r0
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800271e:	2171      	movs	r1, #113	; 0x71
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff fb39 	bl	8001d98 <readReg16Bit>
 8002726:	4603      	mov	r3, r0
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f820 	bl	800276e <decodeTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	891a      	ldrh	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	88db      	ldrh	r3, [r3, #6]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f848 	bl	80027f0 <timeoutMclksToMicroseconds>
 8002760:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	0a12      	lsrs	r2, r2, #8
 8002780:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002782:	4093      	lsls	r3, r2
 8002784:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002786:	3301      	adds	r3, #1
 8002788:	b29b      	uxth	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d018      	beq.n	80027e0 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80027b4:	e005      	b.n	80027c2 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	3301      	adds	r3, #1
 80027c0:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f4      	bne.n	80027b6 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	e000      	b.n	80027e2 <encodeTimeout+0x4c>
  }
  else { return 0; }
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	80fb      	strh	r3, [r7, #6]
 80027fc:	4613      	mov	r3, r2
 80027fe:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002800:	797b      	ldrb	r3, [r7, #5]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f8a6 	bl	8002954 <calcMacroPeriod>
 8002808:	60f8      	str	r0, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	fb02 f203 	mul.w	r2, r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <timeoutMclksToMicroseconds+0x38>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	099b      	lsrs	r3, r3, #6
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f88a 	bl	8002954 <calcMacroPeriod>
 8002840:	60f8      	str	r0, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002848:	fb02 f203 	mul.w	r2, r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(VL53L0X * lidar,uint8_t vhv_init_byte)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  writeReg(lidar,SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fa29 	bl	8001cd0 <writeReg>

  startTimeout(lidar);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f821 	bl	80028c6 <startTimeout>
  
  
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002884:	e007      	b.n	8002896 <performSingleRefCalibration+0x36>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f82b 	bl	80028e2 <checkTimeoutExpired>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <performSingleRefCalibration+0x36>
 8002892:	2300      	movs	r3, #0
 8002894:	e013      	b.n	80028be <performSingleRefCalibration+0x5e>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002896:	2113      	movs	r1, #19
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fa61 	bl	8001d60 <readReg>
 800289e:	4603      	mov	r3, r0
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <performSingleRefCalibration+0x26>
  }

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 80028a8:	2201      	movs	r2, #1
 80028aa:	210b      	movs	r1, #11
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fa0f 	bl	8001cd0 <writeReg>

  writeReg(lidar,SYSRANGE_START, 0x00);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fa0a 	bl	8001cd0 <writeReg>

  return true;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <startTimeout>:


void startTimeout(VL53L0X * lidar)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	lidar->timeout_start_ms = HAL_GetTick();
 80028ce:	f001 fab9 	bl	8003e44 <HAL_GetTick>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	80da      	strh	r2, [r3, #6]
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <checkTimeoutExpired>:

// Check if timeout is enabled (set to nonzero value) and has expired
bool checkTimeoutExpired(VL53L0X * lidar)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	if (lidar->io_timeout > 0 && (HAL_GetTick() - lidar->timeout_start_ms) > lidar->io_timeout)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	885b      	ldrh	r3, [r3, #2]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <checkTimeoutExpired+0x28>
 80028f2:	f001 faa7 	bl	8003e44 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	88db      	ldrh	r3, [r3, #6]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	8852      	ldrh	r2, [r2, #2]
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <checkTimeoutExpired+0x28>
		{
			return true;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <checkTimeoutExpired+0x2a>
		}
	else
	{
		return false;
 800290a:	2300      	movs	r3, #0
	}
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <decodeVcselPeriod>:

// Decode VCSEL (vertical cavity surface emitting laser) pulse period in PCLKs
// from register value
// based on VL53L0X_decode_vcsel_period()
uint8_t decodeVcselPeriod(uint8_t reg_val)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
	return (((reg_val) + 1) << 1);
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	3301      	adds	r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <encodeVcselPeriod>:

// Encode VCSEL pulse period register value from period in PCLKs
// based on VL53L0X_encode_vcsel_period()
uint8_t encodeVcselPeriod(uint8_t period_pclks)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	return (((period_pclks) >> 1) - 1);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b2db      	uxtb	r3, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <calcMacroPeriod>:

// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
uint32_t calcMacroPeriod(uint8_t vcsel_period_pclks)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	return ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <calcMacroPeriod+0x2c>)
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <calcMacroPeriod+0x30>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	003a2f00 	.word	0x003a2f00
 8002984:	10624dd3 	.word	0x10624dd3

08002988 <readMulti>:
				_Error_Handler(__FILE__, __LINE__);
			}
}

void readMulti(VL53L0X * lidar,uint8_t reg, uint8_t * dst, uint8_t count)
 {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	461a      	mov	r2, r3
 8002994:	460b      	mov	r3, r1
 8002996:	72fb      	strb	r3, [r7, #11]
 8002998:	4613      	mov	r3, r2
 800299a:	72bb      	strb	r3, [r7, #10]
     /* Send register address */
     if (HAL_I2C_Master_Transmit(&hi2c4, SLAVE_ADDRESS<<1, &reg, 1, 1000) != HAL_OK)
 800299c:	f107 020b 	add.w	r2, r7, #11
 80029a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2301      	movs	r3, #1
 80029a8:	2152      	movs	r1, #82	; 0x52
 80029aa:	4808      	ldr	r0, [pc, #32]	; (80029cc <readMulti+0x44>)
 80029ac:	f002 ff26 	bl	80057fc <HAL_I2C_Master_Transmit>
            // _Error_Handler(__FILE__, __LINE__);
         }
       }

     /* Receive multiple byte */
     if (HAL_I2C_Master_Receive(&hi2c4, ((SLAVE_ADDRESS <<1) | 0x01), dst, count, 1000) != HAL_OK)
 80029b0:	7abb      	ldrb	r3, [r7, #10]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029b8:	9200      	str	r2, [sp, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	2153      	movs	r1, #83	; 0x53
 80029be:	4803      	ldr	r0, [pc, #12]	; (80029cc <readMulti+0x44>)
 80029c0:	f003 f810 	bl	80059e4 <HAL_I2C_Master_Receive>
       {
          //_Error_Handler(__FILE__, __LINE__);
       }
 }
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200005ac 	.word	0x200005ac

080029d0 <writeMulti>:

 void writeMulti(VL53L0X * lidar,uint8_t reg, uint8_t* src, uint8_t count)
 {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af04      	add	r7, sp, #16
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	460b      	mov	r3, r1
 80029de:	72fb      	strb	r3, [r7, #11]
 80029e0:	4613      	mov	r3, r2
 80029e2:	72bb      	strb	r3, [r7, #10]
          /* Try to transmit via I2C */
         if(HAL_I2C_Mem_Write(&hi2c4, SLAVE_ADDRESS<<1, reg, reg>0xFF ? I2C_MEMADD_SIZE_16BIT : I2C_MEMADD_SIZE_8BIT, src, count, 1000) != HAL_OK)
 80029e4:	7afb      	ldrb	r3, [r7, #11]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	7abb      	ldrb	r3, [r7, #10]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029f0:	9102      	str	r1, [sp, #8]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	2152      	movs	r1, #82	; 0x52
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <writeMulti+0x3c>)
 80029fe:	f003 f8e7 	bl	8005bd0 <HAL_I2C_Mem_Write>
             {
                //_Error_Handler(__FILE__, __LINE__);
             }

 }
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200005ac 	.word	0x200005ac

08002a10 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
#endif
  
  if(netif_is_link_up(netif))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01e      	beq.n	8002a68 <ethernetif_notify_conn_changed+0x58>
  {
#ifdef USE_LCD
    LCD_UsrLog ("The network cable is now connected \n");
#else
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0); //RED OFF
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a30:	4816      	ldr	r0, [pc, #88]	; (8002a8c <ethernetif_notify_conn_changed+0x7c>)
 8002a32:	f002 fe1f 	bl	8005674 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1); //GREEN ON
 8002a36:	2201      	movs	r2, #1
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4814      	ldr	r0, [pc, #80]	; (8002a8c <ethernetif_notify_conn_changed+0x7c>)
 8002a3c:	f002 fe1a 	bl	8005674 <HAL_GPIO_WritePin>
    
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    IP_ADDR4(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <ethernetif_notify_conn_changed+0x80>)
 8002a42:	617b      	str	r3, [r7, #20]
    IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8002a44:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a48:	613b      	str	r3, [r7, #16]
    IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3); 
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <ethernetif_notify_conn_changed+0x84>)
 8002a4c:	60fb      	str	r3, [r7, #12]
    
    netif_set_addr(netif, &ipaddr , &netmask, &gw);   
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	f107 0210 	add.w	r2, r7, #16
 8002a56:	f107 0114 	add.w	r1, r7, #20
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f008 fb7c 	bl	800b158 <netif_set_addr>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#endif
#endif /* USE_DHCP */
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);     
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f008 fbd3 	bl	800b20c <netif_set_up>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0); //GREEN OFF
//    BSP_LED_Off(LED1);
//    BSP_LED_On(LED2);
#endif /* USE_LCD */    
  }
}
 8002a66:	e00d      	b.n	8002a84 <ethernetif_notify_conn_changed+0x74>
    netif_set_down(netif);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f008 fc3b 	bl	800b2e4 <netif_set_down>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1); //RED ON
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a74:	4805      	ldr	r0, [pc, #20]	; (8002a8c <ethernetif_notify_conn_changed+0x7c>)
 8002a76:	f002 fdfd 	bl	8005674 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0); //GREEN OFF
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4803      	ldr	r0, [pc, #12]	; (8002a8c <ethernetif_notify_conn_changed+0x7c>)
 8002a80:	f002 fdf8 	bl	8005674 <HAL_GPIO_WritePin>
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	5001a8c0 	.word	0x5001a8c0
 8002a94:	0101a8c0 	.word	0x0101a8c0

08002a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a9c:	f001 f981 	bl	8003da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa0:	f000 f87a 	bl	8002b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa4:	f000 fa72 	bl	8002f8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002aa8:	f000 fa40 	bl	8002f2c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8002aac:	f007 fa14 	bl	8009ed8 <MX_LWIP_Init>
  MX_I2C4_Init();
 8002ab0:	f000 f8e4 	bl	8002c7c <MX_I2C4_Init>
  MX_TIM3_Init();
 8002ab4:	f000 f99a 	bl	8002dec <MX_TIM3_Init>
  MX_TIM5_Init();
 8002ab8:	f000 f9e8 	bl	8002e8c <MX_TIM5_Init>
  MX_TIM2_Init();
 8002abc:	f000 f91e 	bl	8002cfc <MX_TIM2_Init>
		IP address - lwip.c, main.h

		*/

		//USART_Send_Str("WindTunnel with UDP-lwIP CUBE IDE!\n\r");
		HAL_UART_Transmit(&huart3, "WINDSystem\n\r", 12, 10);
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	492b      	ldr	r1, [pc, #172]	; (8002b74 <main+0xdc>)
 8002ac6:	482c      	ldr	r0, [pc, #176]	; (8002b78 <main+0xe0>)
 8002ac8:	f006 f9b4 	bl	8008e34 <HAL_UART_Transmit>

		 /* Setup TOF VL53L0X */
		 init_VL53L0X();
 8002acc:	f7fe fdc0 	bl	8001650 <init_VL53L0X>

		 /* ENABLE INTERRUPTs */
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <main+0xe0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <main+0xe0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0220 	orr.w	r2, r2, #32
 8002ade:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8002ae0:	4826      	ldr	r0, [pc, #152]	; (8002b7c <main+0xe4>)
 8002ae2:	f004 ffeb 	bl	8007abc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim5);
 8002ae6:	4826      	ldr	r0, [pc, #152]	; (8002b80 <main+0xe8>)
 8002ae8:	f004 ffe8 	bl	8007abc <HAL_TIM_Base_Start_IT>

		/*Enable PWM on PA0 Ch1 TIM2*/
	    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);  //PA0
 8002aec:	2100      	movs	r1, #0
 8002aee:	4825      	ldr	r0, [pc, #148]	; (8002b84 <main+0xec>)
 8002af0:	f005 f8be 	bl	8007c70 <HAL_TIM_PWM_Start>
		TIM2->CCR1=8000; //PWM out imas 9600 PA0
 8002af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 8002afe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b02:	f001 f9ab 	bl	8003e5c <HAL_Delay>
		HAL_UART_Transmit(&huart3, "Ready\n\r", 7, 10);
 8002b06:	230a      	movs	r3, #10
 8002b08:	2207      	movs	r2, #7
 8002b0a:	491f      	ldr	r1, [pc, #124]	; (8002b88 <main+0xf0>)
 8002b0c:	481a      	ldr	r0, [pc, #104]	; (8002b78 <main+0xe0>)
 8002b0e:	f006 f991 	bl	8008e34 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //GREEN ON
 8002b12:	2200      	movs	r2, #0
 8002b14:	2101      	movs	r1, #1
 8002b16:	481d      	ldr	r0, [pc, #116]	; (8002b8c <main+0xf4>)
 8002b18:	f002 fdac 	bl	8005674 <HAL_GPIO_WritePin>

	  /* Handle timeouts */
	 	//	sys_check_timeouts();

	 					 /* Button press  */
			if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1 && flag_udp==0)
 8002b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b20:	481b      	ldr	r0, [pc, #108]	; (8002b90 <main+0xf8>)
 8002b22:	f002 fd8f 	bl	8005644 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10d      	bne.n	8002b48 <main+0xb0>
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <main+0xfc>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <main+0xb0>
			{
				HAL_GPIO_WritePin(GPIOB,LD3_Pin,1); flag_udp=1; //RED ON
 8002b34:	2201      	movs	r2, #1
 8002b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3a:	4814      	ldr	r0, [pc, #80]	; (8002b8c <main+0xf4>)
 8002b3c:	f002 fd9a 	bl	8005674 <HAL_GPIO_WritePin>
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <main+0xfc>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e014      	b.n	8002b72 <main+0xda>
				//udp_send_custum();
			}
			else if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==0 && flag_udp==1)
 8002b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b4c:	4810      	ldr	r0, [pc, #64]	; (8002b90 <main+0xf8>)
 8002b4e:	f002 fd79 	bl	8005644 <HAL_GPIO_ReadPin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e1      	bne.n	8002b1c <main+0x84>
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <main+0xfc>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d1dd      	bne.n	8002b1c <main+0x84>
			{
				HAL_GPIO_WritePin(GPIOB,LD3_Pin,0); flag_udp=0; //RED OFF
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <main+0xf4>)
 8002b68:	f002 fd84 	bl	8005674 <HAL_GPIO_WritePin>
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <main+0xfc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin)==1 && flag_udp==0)
 8002b72:	e7d3      	b.n	8002b1c <main+0x84>
 8002b74:	0801ac1c 	.word	0x0801ac1c
 8002b78:	200005f8 	.word	0x200005f8
 8002b7c:	200006c8 	.word	0x200006c8
 8002b80:	2000067c 	.word	0x2000067c
 8002b84:	2000078c 	.word	0x2000078c
 8002b88:	0801ac2c 	.word	0x0801ac2c
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	2000029d 	.word	0x2000029d

08002b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b094      	sub	sp, #80	; 0x50
 8002b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	2234      	movs	r2, #52	; 0x34
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f013 fa7c 	bl	80160a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bbc:	f003 fdee 	bl	800679c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6413      	str	r3, [r2, #64]	; 0x40
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <SystemClock_Config+0xdc>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <SystemClock_Config+0xe0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <SystemClock_Config+0xe0>)
 8002be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <SystemClock_Config+0xe0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bfc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002c0c:	2360      	movs	r3, #96	; 0x60
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c10:	2302      	movs	r3, #2
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c14:	2304      	movs	r3, #4
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fe1b 	bl	800685c <HAL_RCC_OscConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c2c:	f000 fa86 	bl	800313c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c30:	f003 fdc4 	bl	80067bc <HAL_PWREx_EnableOverDrive>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c3a:	f000 fa7f 	bl	800313c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3e:	230f      	movs	r3, #15
 8002c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c42:	2302      	movs	r3, #2
 8002c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	2103      	movs	r1, #3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f8ac 	bl	8006db8 <HAL_RCC_ClockConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002c66:	f000 fa69 	bl	800313c <Error_Handler>
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3750      	adds	r7, #80	; 0x50
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000

08002c7c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <MX_I2C4_Init+0x78>)
 8002c84:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <MX_I2C4_Init+0x7c>)
 8002c8a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002cb8:	f002 fd10 	bl	80056dc <HAL_I2C_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002cc2:	f000 fa3b 	bl	800313c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002cca:	f003 fccf 	bl	800666c <HAL_I2CEx_ConfigAnalogFilter>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002cd4:	f000 fa32 	bl	800313c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_I2C4_Init+0x74>)
 8002cdc:	f003 fd11 	bl	8006702 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002ce6:	f000 fa29 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200005ac 	.word	0x200005ac
 8002cf4:	40006000 	.word	0x40006000
 8002cf8:	20303e5d 	.word	0x20303e5d

08002cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08e      	sub	sp, #56	; 0x38
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	611a      	str	r2, [r3, #16]
 8002d2a:	615a      	str	r2, [r3, #20]
 8002d2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d38:	220c      	movs	r2, #12
 8002d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d44:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d56:	4824      	ldr	r0, [pc, #144]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d58:	f004 fe58 	bl	8007a0c <HAL_TIM_Base_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d62:	f000 f9eb 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d70:	4619      	mov	r1, r3
 8002d72:	481d      	ldr	r0, [pc, #116]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d74:	f005 faaa 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d7e:	f000 f9dd 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d82:	4819      	ldr	r0, [pc, #100]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002d84:	f004 ff12 	bl	8007bac <HAL_TIM_PWM_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d8e:	f000 f9d5 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4811      	ldr	r0, [pc, #68]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002da2:	f005 ff4d 	bl	8008c40 <HAL_TIMEx_MasterConfigSynchronization>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002dac:	f000 f9c6 	bl	800313c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db0:	2360      	movs	r3, #96	; 0x60
 8002db2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002dca:	f005 f96b 	bl	80080a4 <HAL_TIM_PWM_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002dd4:	f000 f9b2 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dd8:	4803      	ldr	r0, [pc, #12]	; (8002de8 <MX_TIM2_Init+0xec>)
 8002dda:	f000 fcf5 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 8002dde:	bf00      	nop
 8002de0:	3738      	adds	r7, #56	; 0x38
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000078c 	.word	0x2000078c

08002dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df2:	f107 0310 	add.w	r3, r7, #16
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e0c:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <MX_TIM3_Init+0x9c>)
 8002e0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e12:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e32:	4814      	ldr	r0, [pc, #80]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e34:	f004 fdea 	bl	8007a0c <HAL_TIM_Base_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002e3e:	f000 f97d 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e50:	f005 fa3c 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002e5a:	f000 f96f 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <MX_TIM3_Init+0x98>)
 8002e6c:	f005 fee8 	bl	8008c40 <HAL_TIMEx_MasterConfigSynchronization>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002e76:	f000 f961 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200006c8 	.word	0x200006c8
 8002e88:	40000400 	.word	0x40000400

08002e8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002eac:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <MX_TIM5_Init+0x9c>)
 8002eae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4999;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002eb2:	f241 3287 	movw	r2, #4999	; 0x1387
 8002eb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 950;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002ec0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002ec4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ed2:	4814      	ldr	r0, [pc, #80]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002ed4:	f004 fd9a 	bl	8007a0c <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002ede:	f000 f92d 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002ef0:	f005 f9ec 	bl	80082cc <HAL_TIM_ConfigClockSource>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002efa:	f000 f91f 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f06:	1d3b      	adds	r3, r7, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <MX_TIM5_Init+0x98>)
 8002f0c:	f005 fe98 	bl	8008c40 <HAL_TIMEx_MasterConfigSynchronization>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002f16:	f000 f911 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f1a:	bf00      	nop
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000067c 	.word	0x2000067c
 8002f28:	40000c00 	.word	0x40000c00

08002f2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <MX_USART3_UART_Init+0x5c>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f62:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_USART3_UART_Init+0x58>)
 8002f70:	f005 ff12 	bl	8008d98 <HAL_UART_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f7a:	f000 f8df 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200005f8 	.word	0x200005f8
 8002f88:	40004800 	.word	0x40004800

08002f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa2:	4b60      	ldr	r3, [pc, #384]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fba:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a59      	ldr	r2, [pc, #356]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b54      	ldr	r3, [pc, #336]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a53      	ldr	r2, [pc, #332]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <MX_GPIO_Init+0x198>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a4d      	ldr	r2, [pc, #308]	; (8003124 <MX_GPIO_Init+0x198>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <MX_GPIO_Init+0x198>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003002:	4b48      	ldr	r3, [pc, #288]	; (8003124 <MX_GPIO_Init+0x198>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a47      	ldr	r2, [pc, #284]	; (8003124 <MX_GPIO_Init+0x198>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b45      	ldr	r3, [pc, #276]	; (8003124 <MX_GPIO_Init+0x198>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <MX_GPIO_Init+0x198>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a41      	ldr	r2, [pc, #260]	; (8003124 <MX_GPIO_Init+0x198>)
 8003020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <MX_GPIO_Init+0x198>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	f244 0181 	movw	r1, #16513	; 0x4081
 8003038:	483b      	ldr	r0, [pc, #236]	; (8003128 <MX_GPIO_Init+0x19c>)
 800303a:	f002 fb1b 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 800303e:	2200      	movs	r2, #0
 8003040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003044:	4839      	ldr	r0, [pc, #228]	; (800312c <MX_GPIO_Init+0x1a0>)
 8003046:	f002 fb15 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	4838      	ldr	r0, [pc, #224]	; (8003130 <MX_GPIO_Init+0x1a4>)
 8003050:	f002 fb10 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800305a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800305e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	4832      	ldr	r0, [pc, #200]	; (8003134 <MX_GPIO_Init+0x1a8>)
 800306c:	f002 f93e 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003070:	f244 0381 	movw	r3, #16513	; 0x4081
 8003074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	2301      	movs	r3, #1
 8003078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	4827      	ldr	r0, [pc, #156]	; (8003128 <MX_GPIO_Init+0x19c>)
 800308a:	f002 f92f 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 800308e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	4619      	mov	r1, r3
 80030a6:	4821      	ldr	r0, [pc, #132]	; (800312c <MX_GPIO_Init+0x1a0>)
 80030a8:	f002 f920 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b0:	2301      	movs	r3, #1
 80030b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	481b      	ldr	r0, [pc, #108]	; (8003130 <MX_GPIO_Init+0x1a4>)
 80030c4:	f002 f912 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4815      	ldr	r0, [pc, #84]	; (8003130 <MX_GPIO_Init+0x1a4>)
 80030dc:	f002 f906 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80030e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80030e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ee:	2303      	movs	r3, #3
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030f2:	230a      	movs	r3, #10
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	480e      	ldr	r0, [pc, #56]	; (8003138 <MX_GPIO_Init+0x1ac>)
 80030fe:	f002 f8f5 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4808      	ldr	r0, [pc, #32]	; (8003138 <MX_GPIO_Init+0x1ac>)
 8003118:	f002 f8e8 	bl	80052ec <HAL_GPIO_Init>

}
 800311c:	bf00      	nop
 800311e:	3730      	adds	r7, #48	; 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	40020400 	.word	0x40020400
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40021800 	.word	0x40021800
 8003134:	40020800 	.word	0x40020800
 8003138:	40020000 	.word	0x40020000

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <Real_time>:
float dist_f=0,dist_f_k=0,dist_f_k_1=0;
uint16_t dist_in_k_1=0, dist_old=0, dist_real=0;
float velocity_diff=0,velocity_f=0, velocity_f_k_1=0,velocity_k_1=0;

void Real_time()
{
 800314c:	b580      	push	{r7, lr}
 800314e:	ed2d 8b02 	vpush	{d8}
 8003152:	af00      	add	r7, sp, #0
   
  //Read ToF
	
		 
		  dist_real=readRangeContinuousMillimeters(&sensor1); //Read time 1.3ms
 8003154:	485f      	ldr	r0, [pc, #380]	; (80032d4 <Real_time+0x188>)
 8003156:	f7ff f95d 	bl	8002414 <readRangeContinuousMillimeters>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <Real_time+0x18c>)
 8003160:	801a      	strh	r2, [r3, #0]
	    
	     if( dist_real>8000) //I2c problem!!
 8003162:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <Real_time+0x18c>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800316a:	d904      	bls.n	8003176 <Real_time+0x2a>
			 {
			   dist=dist_old;
 800316c:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <Real_time+0x190>)
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <Real_time+0x194>)
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	e007      	b.n	8003186 <Real_time+0x3a>
			 }else{
			 
				 dist=dist_real;
 8003176:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <Real_time+0x18c>)
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <Real_time+0x194>)
 800317c:	801a      	strh	r2, [r3, #0]
			   dist_old=dist;
 800317e:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <Real_time+0x194>)
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	4b56      	ldr	r3, [pc, #344]	; (80032dc <Real_time+0x190>)
 8003184:	801a      	strh	r2, [r3, #0]
				 
			 }
	
	      //Filter sampling time
	     dist_f_k = exp((double) pole_filter * Tsf ) *dist_f_k_1 + (1-exp((double) pole_filter * Tsf ))*(double)dist_in_k_1;
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <Real_time+0x198>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003190:	4b55      	ldr	r3, [pc, #340]	; (80032e8 <Real_time+0x19c>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800319e:	eeb0 0b47 	vmov.f64	d0, d7
 80031a2:	f017 fb55 	bl	801a850 <exp>
 80031a6:	eeb0 6b40 	vmov.f64	d6, d0
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <Real_time+0x1a0>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <Real_time+0x198>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <Real_time+0x19c>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031d0:	eeb0 0b47 	vmov.f64	d0, d7
 80031d4:	f017 fb3c 	bl	801a850 <exp>
 80031d8:	eeb0 7b40 	vmov.f64	d7, d0
 80031dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80031e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <Real_time+0x1a4>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80031f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031f4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80031f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031fc:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <Real_time+0x1a8>)
 80031fe:	edc3 7a00 	vstr	s15, [r3]
	   
			 
			 //HIGH PASS FILTER - DIFFERENTIATOR
			 velocity_diff = (dist_f_k - dist_f_k_1)/Tsf;
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <Real_time+0x1a8>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	4b38      	ldr	r3, [pc, #224]	; (80032ec <Real_time+0x1a0>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <Real_time+0x19c>)
 8003214:	ed93 7a00 	vldr	s14, [r3]
 8003218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <Real_time+0x1ac>)
 800321e:	edc3 7a00 	vstr	s15, [r3]
			 velocity_f= exp((double) pole_filter_velocity * Tsf ) *velocity_f_k_1 + (1-exp((double) pole_filter_velocity * Tsf ))*(double)velocity_k_1;
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <Real_time+0x1b0>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <Real_time+0x19c>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003236:	ee26 7b07 	vmul.f64	d7, d6, d7
 800323a:	eeb0 0b47 	vmov.f64	d0, d7
 800323e:	f017 fb07 	bl	801a850 <exp>
 8003242:	eeb0 6b40 	vmov.f64	d6, d0
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <Real_time+0x1b4>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003250:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <Real_time+0x1b0>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <Real_time+0x19c>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003268:	ee26 7b07 	vmul.f64	d7, d6, d7
 800326c:	eeb0 0b47 	vmov.f64	d0, d7
 8003270:	f017 faee 	bl	801a850 <exp>
 8003274:	eeb0 7b40 	vmov.f64	d7, d0
 8003278:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800327c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <Real_time+0x1b8>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800328a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800328e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003292:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <Real_time+0x1bc>)
 8003298:	edc3 7a00 	vstr	s15, [r3]
			 
			 
       SMC_Differenciator();	
 800329c:	f000 f8c8 	bl	8003430 <SMC_Differenciator>
			
			  //Time shift for distance 
       dist_f_k_1= dist_f_k;   
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <Real_time+0x1a8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a11      	ldr	r2, [pc, #68]	; (80032ec <Real_time+0x1a0>)
 80032a6:	6013      	str	r3, [r2, #0]
       dist_in_k_1 = dist;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <Real_time+0x194>)
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <Real_time+0x1a4>)
 80032ae:	801a      	strh	r2, [r3, #0]
	     dist_f=dist_f_k;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <Real_time+0x1a8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <Real_time+0x1c0>)
 80032b6:	6013      	str	r3, [r2, #0]

			 
			 //Time shift for velocity
			 velocity_f_k_1=velocity_f;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <Real_time+0x1bc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <Real_time+0x1b4>)
 80032be:	6013      	str	r3, [r2, #0]
			 velocity_k_1  = velocity_diff;
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <Real_time+0x1ac>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <Real_time+0x1b8>)
 80032c6:	6013      	str	r3, [r2, #0]
			 //LD1(0);
      //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //Toggle green


}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	ecbd 8b02 	vpop	{d8}
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000778 	.word	0x20000778
 80032d8:	200002d8 	.word	0x200002d8
 80032dc:	200002d6 	.word	0x200002d6
 80032e0:	200007d8 	.word	0x200007d8
 80032e4:	20000030 	.word	0x20000030
 80032e8:	20000038 	.word	0x20000038
 80032ec:	200002d0 	.word	0x200002d0
 80032f0:	200002d4 	.word	0x200002d4
 80032f4:	200002cc 	.word	0x200002cc
 80032f8:	200002dc 	.word	0x200002dc
 80032fc:	20000034 	.word	0x20000034
 8003300:	200002e4 	.word	0x200002e4
 8003304:	200002e8 	.word	0x200002e8
 8003308:	200002e0 	.word	0x200002e0
 800330c:	200002c8 	.word	0x200002c8

08003310 <reference_filter>:
* Return         : None
*******************************************************************************/


void reference_filter()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	ed2d 8b02 	vpush	{d8}
 8003316:	af00      	add	r7, sp, #0

// Input
ref_in_k = ref;
 8003318:	4b3a      	ldr	r3, [pc, #232]	; (8003404 <reference_filter+0xf4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <reference_filter+0xf8>)
 800331e:	6013      	str	r3, [r2, #0]
//Filter	
ref_f = exp((double) pole_ref_filter * Ts ) *ref_angle_k_1 + (1-exp((double) pole_ref_filter * Ts ))*ref_in_k_1;
 8003320:	4b3a      	ldr	r3, [pc, #232]	; (800340c <reference_filter+0xfc>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <reference_filter+0x100>)
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003334:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003338:	eeb0 0b47 	vmov.f64	d0, d7
 800333c:	f017 fa88 	bl	801a850 <exp>
 8003340:	eeb0 6b40 	vmov.f64	d6, d0
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <reference_filter+0x104>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800334e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <reference_filter+0xfc>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800335c:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <reference_filter+0x100>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003366:	ee26 7b07 	vmul.f64	d7, d6, d7
 800336a:	eeb0 0b47 	vmov.f64	d0, d7
 800336e:	f017 fa6f 	bl	801a850 <exp>
 8003372:	eeb0 7b40 	vmov.f64	d7, d0
 8003376:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800337a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <reference_filter+0x108>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003388:	ee26 7b07 	vmul.f64	d7, d6, d7
 800338c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003390:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <reference_filter+0x10c>)
 8003396:	edc3 7a00 	vstr	s15, [r3]

	//First derivatieve
	xd= (ref_f - ref_angle_k_1)/Ts;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <reference_filter+0x10c>)
 800339c:	ed93 7a00 	vldr	s14, [r3]
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <reference_filter+0x104>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <reference_filter+0x100>)
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <reference_filter+0x110>)
 80033b6:	edc3 7a00 	vstr	s15, [r3]
	
	//Second derivative
	xdd= (xd - xd_k_1)/Ts;	
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <reference_filter+0x110>)
 80033bc:	ed93 7a00 	vldr	s14, [r3]
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <reference_filter+0x114>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <reference_filter+0x100>)
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <reference_filter+0x118>)
 80033d6:	edc3 7a00 	vstr	s15, [r3]
	
	//time shift -convolution
	ref_angle_k_1 = ref_f;	
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <reference_filter+0x10c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <reference_filter+0x104>)
 80033e0:	6013      	str	r3, [r2, #0]
	ref_in_k_1 = ref_in_k;
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <reference_filter+0xf8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <reference_filter+0x108>)
 80033e8:	6013      	str	r3, [r2, #0]
	
	xd_k_1 = xd;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <reference_filter+0x110>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <reference_filter+0x114>)
 80033f0:	6013      	str	r3, [r2, #0]
	xdd_k_1 = xdd;
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <reference_filter+0x118>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a0d      	ldr	r2, [pc, #52]	; (800342c <reference_filter+0x11c>)
 80033f8:	6013      	str	r3, [r2, #0]
	
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	ecbd 8b02 	vpop	{d8}
 8003402:	bd80      	pop	{r7, pc}
 8003404:	2000002c 	.word	0x2000002c
 8003408:	200002c0 	.word	0x200002c0
 800340c:	20000028 	.word	0x20000028
 8003410:	20000024 	.word	0x20000024
 8003414:	200002bc 	.word	0x200002bc
 8003418:	200002c4 	.word	0x200002c4
 800341c:	200002b8 	.word	0x200002b8
 8003420:	200002a8 	.word	0x200002a8
 8003424:	200002b0 	.word	0x200002b0
 8003428:	200002ac 	.word	0x200002ac
 800342c:	200002b4 	.word	0x200002b4

08003430 <SMC_Differenciator>:
float esti_error=0,estimated_high=0,estimated_high_k_1,z1_k=0,z1_k_1=0,dz1=0;
float velocity_estimated=0,velocity=0;
float lam1=25,lam2=15;

void SMC_Differenciator()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	ed2d 8b02 	vpush	{d8}
 8003436:	af00      	add	r7, sp, #0



    esti_error=  estimated_high - dist_f;
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <SMC_Differenciator+0x118>)
 800343a:	ed93 7a00 	vldr	s14, [r3]
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <SMC_Differenciator+0x11c>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <SMC_Differenciator+0x120>)
 800344a:	edc3 7a00 	vstr	s15, [r3]
	
	 
    dz1=  -1.0 * lam2 * sgn( esti_error);
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <SMC_Differenciator+0x124>)
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003458:	eeb1 8b47 	vneg.f64	d8, d7
 800345c:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <SMC_Differenciator+0x120>)
 800345e:	edd3 7a00 	vldr	s15, [r3]
 8003462:	eeb0 0a67 	vmov.f32	s0, s15
 8003466:	f000 f887 	bl	8003578 <sgn>
 800346a:	eef0 7a40 	vmov.f32	s15, s0
 800346e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003472:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003476:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <SMC_Differenciator+0x128>)
 800347c:	edc3 7a00 	vstr	s15, [r3]
	  z1_k = z1_k_1  + Ts * dz1; //Integration
 8003480:	4b36      	ldr	r3, [pc, #216]	; (800355c <SMC_Differenciator+0x12c>)
 8003482:	ed93 7a00 	vldr	s14, [r3]
 8003486:	4b34      	ldr	r3, [pc, #208]	; (8003558 <SMC_Differenciator+0x128>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003490:	4b33      	ldr	r3, [pc, #204]	; (8003560 <SMC_Differenciator+0x130>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	4b32      	ldr	r3, [pc, #200]	; (8003564 <SMC_Differenciator+0x134>)
 800349c:	edc3 7a00 	vstr	s15, [r3]
    z1_k_1 = z1_k;
 80034a0:	4b30      	ldr	r3, [pc, #192]	; (8003564 <SMC_Differenciator+0x134>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <SMC_Differenciator+0x130>)
 80034a6:	6013      	str	r3, [r2, #0]
    
	
	
    velocity_estimated = -1.0 * lam1  * sqrt(ABS(esti_error)) * sgn(esti_error) + z1_k;
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <SMC_Differenciator+0x138>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034b2:	eeb1 8b47 	vneg.f64	d8, d7
 80034b6:	4b26      	ldr	r3, [pc, #152]	; (8003550 <SMC_Differenciator+0x120>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eeb0 0a67 	vmov.f32	s0, s15
 80034c0:	f000 f880 	bl	80035c4 <ABS>
 80034c4:	eef0 7a40 	vmov.f32	s15, s0
 80034c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034cc:	eeb0 0b47 	vmov.f64	d0, d7
 80034d0:	f017 fafa 	bl	801aac8 <sqrt>
 80034d4:	eeb0 7b40 	vmov.f64	d7, d0
 80034d8:	ee28 8b07 	vmul.f64	d8, d8, d7
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <SMC_Differenciator+0x120>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	eeb0 0a67 	vmov.f32	s0, s15
 80034e6:	f000 f847 	bl	8003578 <sgn>
 80034ea:	eef0 7a40 	vmov.f32	s15, s0
 80034ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034f2:	ee28 6b07 	vmul.f64	d6, d8, d7
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <SMC_Differenciator+0x134>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003500:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <SMC_Differenciator+0x13c>)
 800350a:	edc3 7a00 	vstr	s15, [r3]
	
	  // Integration
	   estimated_high = estimated_high_k_1 + Ts * velocity_estimated ;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <SMC_Differenciator+0x12c>)
 8003510:	ed93 7a00 	vldr	s14, [r3]
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <SMC_Differenciator+0x13c>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <SMC_Differenciator+0x140>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <SMC_Differenciator+0x118>)
 800352a:	edc3 7a00 	vstr	s15, [r3]
     estimated_high_k_1 = estimated_high;
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <SMC_Differenciator+0x118>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <SMC_Differenciator+0x140>)
 8003534:	6013      	str	r3, [r2, #0]
	
	    velocity=velocity_estimated;
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <SMC_Differenciator+0x13c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <SMC_Differenciator+0x144>)
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	ecbd 8b02 	vpop	{d8}
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200002f0 	.word	0x200002f0
 800354c:	200002c8 	.word	0x200002c8
 8003550:	200002ec 	.word	0x200002ec
 8003554:	20000040 	.word	0x20000040
 8003558:	200002fc 	.word	0x200002fc
 800355c:	20000024 	.word	0x20000024
 8003560:	200002f8 	.word	0x200002f8
 8003564:	200002f4 	.word	0x200002f4
 8003568:	2000003c 	.word	0x2000003c
 800356c:	20000300 	.word	0x20000300
 8003570:	200007dc 	.word	0x200007dc
 8003574:	20000304 	.word	0x20000304

08003578 <sgn>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
float sgn(float sigma)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	ed87 0a01 	vstr	s0, [r7, #4]

     if(sigma>0)
 8003582:	edd7 7a01 	vldr	s15, [r7, #4]
 8003586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	dd02      	ble.n	8003596 <sgn+0x1e>
		 {
		    return 1.0;
 8003590:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003594:	e00a      	b.n	80035ac <sgn+0x34>
		 }else if(sigma<0)
 8003596:	edd7 7a01 	vldr	s15, [r7, #4]
 800359a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	d501      	bpl.n	80035a8 <sgn+0x30>
     {
		    return -1.0;
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <sgn+0x48>)
 80035a6:	e001      	b.n	80035ac <sgn+0x34>
		 }else
		 {
		   return 0.0;
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	ee07 3a90 	vmov	s15, r3
		 }
		 
}
 80035b0:	eeb0 0a67 	vmov.f32	s0, s15
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	bf800000 	.word	0xbf800000

080035c4 <ABS>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
float ABS(float sigma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	ed87 0a01 	vstr	s0, [r7, #4]

     if(sigma>0)
 80035ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80035d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	dd02      	ble.n	80035e2 <ABS+0x1e>
		 {
		    return sigma;
 80035dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80035e0:	e011      	b.n	8003606 <ABS+0x42>
		 }else if(sigma<0)
 80035e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80035e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d508      	bpl.n	8003602 <ABS+0x3e>
     {
		    return -1.0 * sigma;
 80035f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035fc:	eef1 7a67 	vneg.f32	s15, s15
 8003600:	e001      	b.n	8003606 <ABS+0x42>
		 }else
       return 0;
 8003602:	eddf 7a04 	vldr	s15, [pc, #16]	; 8003614 <ABS+0x50>
}
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	00000000 	.word	0x00000000

08003618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_MspInit+0x44>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_MspInit+0x44>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_MspInit+0x44>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x44>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x44>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x44>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0ae      	sub	sp, #184	; 0xb8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	2290      	movs	r2, #144	; 0x90
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f012 fd0f 	bl	80160a4 <memset>
  if(hi2c->Instance==I2C4)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a22      	ldr	r2, [pc, #136]	; (8003714 <HAL_I2C_MspInit+0xb4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d13d      	bne.n	800370c <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 fd8b 	bl	80071bc <HAL_RCCEx_PeriphCLKConfig>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80036ac:	f7ff fd46 	bl	800313c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 80036b6:	f043 0308 	orr.w	r3, r3, #8
 80036ba:	6313      	str	r3, [r2, #48]	; 0x30
 80036bc:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80036c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d0:	2312      	movs	r3, #18
 80036d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80036e2:	2304      	movs	r3, #4
 80036e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ec:	4619      	mov	r1, r3
 80036ee:	480b      	ldr	r0, [pc, #44]	; (800371c <HAL_I2C_MspInit+0xbc>)
 80036f0:	f001 fdfc 	bl	80052ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_I2C_MspInit+0xb8>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800370c:	bf00      	nop
 800370e:	37b8      	adds	r7, #184	; 0xb8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40006000 	.word	0x40006000
 8003718:	40023800 	.word	0x40023800
 800371c:	40020c00 	.word	0x40020c00

08003720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d10c      	bne.n	800374c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800374a:	e032      	b.n	80037b2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIM_Base_MspInit+0xa0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d114      	bne.n	8003780 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2102      	movs	r1, #2
 8003772:	201d      	movs	r0, #29
 8003774:	f000 fc71 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003778:	201d      	movs	r0, #29
 800377a:	f000 fc8a 	bl	8004092 <HAL_NVIC_EnableIRQ>
}
 800377e:	e018      	b.n	80037b2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_TIM_Base_MspInit+0xa4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d113      	bne.n	80037b2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_TIM_Base_MspInit+0x9c>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2101      	movs	r1, #1
 80037a6:	2032      	movs	r0, #50	; 0x32
 80037a8:	f000 fc57 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037ac:	2032      	movs	r0, #50	; 0x32
 80037ae:	f000 fc70 	bl	8004092 <HAL_NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000c00 	.word	0x40000c00

080037c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d11b      	bne.n	8003822 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_TIM_MspPostInit+0x64>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_TIM_MspPostInit+0x64>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_TIM_MspPostInit+0x64>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003802:	2301      	movs	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003812:	2301      	movs	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	4619      	mov	r1, r3
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <HAL_TIM_MspPostInit+0x68>)
 800381e:	f001 fd65 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003822:	bf00      	nop
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40020000 	.word	0x40020000

08003834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0ae      	sub	sp, #184	; 0xb8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	2290      	movs	r2, #144	; 0x90
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f012 fc25 	bl	80160a4 <memset>
  if(huart->Instance==USART3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <HAL_UART_MspInit+0xc4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d144      	bne.n	80038ee <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003868:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800386a:	2300      	movs	r3, #0
 800386c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fca2 	bl	80071bc <HAL_RCCEx_PeriphCLKConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800387e:	f7ff fc5d 	bl	800313c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <HAL_UART_MspInit+0xc8>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <HAL_UART_MspInit+0xc8>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <HAL_UART_MspInit+0xc8>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_UART_MspInit+0xc8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_UART_MspInit+0xc8>)
 80038a0:	f043 0308 	orr.w	r3, r3, #8
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_UART_MspInit+0xc8>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038cc:	2307      	movs	r3, #7
 80038ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4809      	ldr	r0, [pc, #36]	; (8003900 <HAL_UART_MspInit+0xcc>)
 80038da:	f001 fd07 	bl	80052ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2100      	movs	r1, #0
 80038e2:	2027      	movs	r0, #39	; 0x27
 80038e4:	f000 fbb9 	bl	800405a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038e8:	2027      	movs	r0, #39	; 0x27
 80038ea:	f000 fbd2 	bl	8004092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	37b8      	adds	r7, #184	; 0xb8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40004800 	.word	0x40004800
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020c00 	.word	0x40020c00

08003904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003916:	e7fe      	b.n	8003916 <HardFault_Handler+0x4>

08003918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800391c:	e7fe      	b.n	800391c <MemManage_Handler+0x4>

0800391e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003922:	e7fe      	b.n	8003922 <BusFault_Handler+0x4>

08003924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <UsageFault_Handler+0x4>

0800392a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003958:	f000 fa60 	bl	8003e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}

08003960 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <TIM3_IRQHandler+0x1c>)
 8003966:	f004 fa7d 	bl	8007e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
   Real_time(); //ToF measurments
 800396a:	f7ff fbef 	bl	800314c <Real_time>
   HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	4803      	ldr	r0, [pc, #12]	; (8003980 <TIM3_IRQHandler+0x20>)
 8003972:	f001 fe98 	bl	80056a6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200006c8 	.word	0x200006c8
 8003980:	40020400 	.word	0x40020400

08003984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003988:	4803      	ldr	r0, [pc, #12]	; (8003998 <USART3_IRQHandler+0x14>)
 800398a:	f005 fae7 	bl	8008f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  Serial_read_main_Vetrovnik(); //EXTERN function
 800398e:	f7fd fa21 	bl	8000dd4 <Serial_read_main_Vetrovnik>

  /* USER CODE END USART3_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200005f8 	.word	0x200005f8

0800399c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039a2:	4850      	ldr	r0, [pc, #320]	; (8003ae4 <TIM5_IRQHandler+0x148>)
 80039a4:	f004 fa5e 	bl	8007e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
 80039a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ac:	484e      	ldr	r0, [pc, #312]	; (8003ae8 <TIM5_IRQHandler+0x14c>)
 80039ae:	f001 fe7a 	bl	80056a6 <HAL_GPIO_TogglePin>
			  if(ref<100)
 80039b2:	4b4e      	ldr	r3, [pc, #312]	; (8003aec <TIM5_IRQHandler+0x150>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003af0 <TIM5_IRQHandler+0x154>
 80039bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c4:	d502      	bpl.n	80039cc <TIM5_IRQHandler+0x30>
				 {
				   ref=100;
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <TIM5_IRQHandler+0x150>)
 80039c8:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <TIM5_IRQHandler+0x158>)
 80039ca:	601a      	str	r2, [r3, #0]
				 }


			 if (controller_on==1)
 80039cc:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <TIM5_IRQHandler+0x15c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <TIM5_IRQHandler+0x44>
			 {
				 Controller_Real_time_update(); // Controller real time function
 80039d4:	f7fc fffc 	bl	80009d0 <Controller_Real_time_update>

				 controller_on_flag=1;
 80039d8:	4b48      	ldr	r3, [pc, #288]	; (8003afc <TIM5_IRQHandler+0x160>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e03b      	b.n	8003a58 <TIM5_IRQHandler+0xbc>
			 } else
			 {
                  if(controller_on_flag==1)
 80039e0:	4b46      	ldr	r3, [pc, #280]	; (8003afc <TIM5_IRQHandler+0x160>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <TIM5_IRQHandler+0x5a>
                  {
                	  PWM_FAN=8000; //Reset ESC after turn off the controller function
 80039e8:	4b45      	ldr	r3, [pc, #276]	; (8003b00 <TIM5_IRQHandler+0x164>)
 80039ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80039ee:	801a      	strh	r2, [r3, #0]
                	  controller_on_flag=0;
 80039f0:	4b42      	ldr	r3, [pc, #264]	; (8003afc <TIM5_IRQHandler+0x160>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
                  }

				 //Reset controller
				 ref_f=0;I=0;Id=0;
 80039f6:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <TIM5_IRQHandler+0x168>)
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <TIM5_IRQHandler+0x16c>)
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <TIM5_IRQHandler+0x170>)
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
				 ref_f=0,ref_angle_k_1=0,ref_in_k=0,ref_in_k_1=0;
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <TIM5_IRQHandler+0x168>)
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <TIM5_IRQHandler+0x174>)
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <TIM5_IRQHandler+0x178>)
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <TIM5_IRQHandler+0x17c>)
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
				 xd=0,xdd=0,error_k_1=0;
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <TIM5_IRQHandler+0x180>)
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <TIM5_IRQHandler+0x184>)
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <TIM5_IRQHandler+0x188>)
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
				 u_k=0;
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <TIM5_IRQHandler+0x18c>)
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
//				 }else if(PWM_FAN>2000)
//				 {
//				   PWM_FAN=2000;
//				 }

			   TIM2->CCR1=PWM_FAN;
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <TIM5_IRQHandler+0x164>)
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34


			 }

			  //Send current state data over USART3
			  if(USART3_busy_flag==0)
 8003a58:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <TIM5_IRQHandler+0x190>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d13e      	bne.n	8003ade <TIM5_IRQHandler+0x142>
			  {
				  sprintf(Buffer_data,"D %.2f %.2f %.2f %.2f %.2f %.2f %.2f \n",ref,dist_f,velocity_f,u_k,Kp,Ti,Td);
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <TIM5_IRQHandler+0x150>)
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 8003a6a:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <TIM5_IRQHandler+0x194>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <TIM5_IRQHandler+0x198>)
 8003a76:	edd3 6a00 	vldr	s13, [r3]
 8003a7a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <TIM5_IRQHandler+0x18c>)
 8003a80:	edd3 5a00 	vldr	s11, [r3]
 8003a84:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <TIM5_IRQHandler+0x19c>)
 8003a8a:	edd3 4a00 	vldr	s9, [r3]
 8003a8e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <TIM5_IRQHandler+0x1a0>)
 8003a94:	edd3 3a00 	vldr	s7, [r3]
 8003a98:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <TIM5_IRQHandler+0x1a4>)
 8003a9e:	edd3 2a00 	vldr	s5, [r3]
 8003aa2:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8003aa6:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8003aaa:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003aae:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003ab2:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003ab6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003aba:	ed8d 7b00 	vstr	d7, [sp]
 8003abe:	ec53 2b11 	vmov	r2, r3, d1
 8003ac2:	4920      	ldr	r1, [pc, #128]	; (8003b44 <TIM5_IRQHandler+0x1a8>)
 8003ac4:	4820      	ldr	r0, [pc, #128]	; (8003b48 <TIM5_IRQHandler+0x1ac>)
 8003ac6:	f013 f99b 	bl	8016e00 <siprintf>
				  HAL_UART_Transmit(&huart3, Buffer_data, strlen(Buffer_data), 10);
 8003aca:	481f      	ldr	r0, [pc, #124]	; (8003b48 <TIM5_IRQHandler+0x1ac>)
 8003acc:	f7fc fbb8 	bl	8000240 <strlen>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	230a      	movs	r3, #10
 8003ad6:	491c      	ldr	r1, [pc, #112]	; (8003b48 <TIM5_IRQHandler+0x1ac>)
 8003ad8:	481c      	ldr	r0, [pc, #112]	; (8003b4c <TIM5_IRQHandler+0x1b0>)
 8003ada:	f005 f9ab 	bl	8008e34 <HAL_UART_Transmit>
			  }
  /* USER CODE END TIM5_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000067c 	.word	0x2000067c
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	2000002c 	.word	0x2000002c
 8003af0:	42c80000 	.word	0x42c80000
 8003af4:	42c80000 	.word	0x42c80000
 8003af8:	200002a0 	.word	0x200002a0
 8003afc:	200002a4 	.word	0x200002a4
 8003b00:	20000020 	.word	0x20000020
 8003b04:	200002b8 	.word	0x200002b8
 8003b08:	20000258 	.word	0x20000258
 8003b0c:	20000268 	.word	0x20000268
 8003b10:	200002bc 	.word	0x200002bc
 8003b14:	200002c0 	.word	0x200002c0
 8003b18:	200002c4 	.word	0x200002c4
 8003b1c:	200002a8 	.word	0x200002a8
 8003b20:	200002ac 	.word	0x200002ac
 8003b24:	20000264 	.word	0x20000264
 8003b28:	2000026c 	.word	0x2000026c
 8003b2c:	2000029c 	.word	0x2000029c
 8003b30:	200002c8 	.word	0x200002c8
 8003b34:	200002e0 	.word	0x200002e0
 8003b38:	20000008 	.word	0x20000008
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	20000010 	.word	0x20000010
 8003b44:	0801ac34 	.word	0x0801ac34
 8003b48:	20000490 	.word	0x20000490
 8003b4c:	200005f8 	.word	0x200005f8

08003b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
	return 1;
 8003b54:	2301      	movs	r3, #1
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_kill>:

int _kill(int pid, int sig)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <_kill+0x20>)
 8003b6c:	2216      	movs	r2, #22
 8003b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20006eb8 	.word	0x20006eb8

08003b84 <_exit>:

void _exit (int status)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe5 	bl	8003b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b96:	e7fe      	b.n	8003b96 <_exit+0x12>

08003b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e00a      	b.n	8003bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003baa:	f3af 8000 	nop.w
 8003bae:	4601      	mov	r1, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	60ba      	str	r2, [r7, #8]
 8003bb6:	b2ca      	uxtb	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf0      	blt.n	8003baa <_read+0x12>
	}

return len;
 8003bc8:	687b      	ldr	r3, [r7, #4]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e009      	b.n	8003bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf1      	blt.n	8003be4 <_write+0x12>
	}
	return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_close>:

int _close(int file)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
	return -1;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c32:	605a      	str	r2, [r3, #4]
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_isatty>:

int _isatty(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	return 1;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
	return 0;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d205      	bcs.n	8003cb0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <_sbrk+0x6c>)
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	20080000 	.word	0x20080000
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	20000308 	.word	0x20000308
 8003cdc:	20006ec8 	.word	0x20006ec8
 8003ce0:	20006eb8 	.word	0x20006eb8

08003ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <SystemInit+0x5c>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <SystemInit+0x5c>)
 8003cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <SystemInit+0x60>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <SystemInit+0x60>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <SystemInit+0x60>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <SystemInit+0x60>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	490d      	ldr	r1, [pc, #52]	; (8003d44 <SystemInit+0x60>)
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <SystemInit+0x64>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <SystemInit+0x60>)
 8003d18:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <SystemInit+0x68>)
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <SystemInit+0x60>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <SystemInit+0x60>)
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <SystemInit+0x60>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SystemInit+0x5c>)
 8003d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d34:	609a      	str	r2, [r3, #8]
#endif
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000ed00 	.word	0xe000ed00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	fef6ffff 	.word	0xfef6ffff
 8003d4c:	24003010 	.word	0x24003010

08003d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d56:	e003      	b.n	8003d60 <LoopCopyDataInit>

08003d58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d5e:	3104      	adds	r1, #4

08003d60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d68:	d3f6      	bcc.n	8003d58 <CopyDataInit>
  ldr  r2, =_sbss
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d6c:	e002      	b.n	8003d74 <LoopFillZerobss>

08003d6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d70:	f842 3b04 	str.w	r3, [r2], #4

08003d74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d78:	d3f9      	bcc.n	8003d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d7a:	f7ff ffb3 	bl	8003ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f012 f937 	bl	8015ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d82:	f7fe fe89 	bl	8002a98 <main>
  bx  lr    
 8003d86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d88:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003d8c:	0801e880 	.word	0x0801e880
  ldr  r0, =_sdata
 8003d90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d94:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8003d98:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8003d9c:	20006ec8 	.word	0x20006ec8

08003da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da0:	e7fe      	b.n	8003da0 <ADC_IRQHandler>

08003da2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da6:	2003      	movs	r0, #3
 8003da8:	f000 f94c 	bl	8004044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dac:	2000      	movs	r0, #0
 8003dae:	f000 f805 	bl	8003dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003db2:	f7ff fc31 	bl	8003618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_InitTick+0x54>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_InitTick+0x58>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f967 	bl	80040ae <HAL_SYSTICK_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e00e      	b.n	8003e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d80a      	bhi.n	8003e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df0:	2200      	movs	r2, #0
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	f000 f92f 	bl	800405a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dfc:	4a06      	ldr	r2, [pc, #24]	; (8003e18 <HAL_InitTick+0x5c>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20000044 	.word	0x20000044
 8003e14:	2000004c 	.word	0x2000004c
 8003e18:	20000048 	.word	0x20000048

08003e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000004c 	.word	0x2000004c
 8003e40:	200007e0 	.word	0x200007e0

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	200007e0 	.word	0x200007e0

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff ffee 	bl	8003e44 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d005      	beq.n	8003e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_Delay+0x44>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e82:	bf00      	nop
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d8f7      	bhi.n	8003e84 <HAL_Delay+0x28>
  {
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000004c 	.word	0x2000004c

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	60d3      	str	r3, [r2, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	05fa0000 	.word	0x05fa0000

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db0a      	blt.n	8003f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	490c      	ldr	r1, [pc, #48]	; (8003f90 <__NVIC_SetPriority+0x4c>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	440b      	add	r3, r1
 8003f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f6c:	e00a      	b.n	8003f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4908      	ldr	r1, [pc, #32]	; (8003f94 <__NVIC_SetPriority+0x50>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	0112      	lsls	r2, r2, #4
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0307 	rsb	r3, r3, #7
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf28      	it	cs
 8003fb6:	2304      	movcs	r3, #4
 8003fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d902      	bls.n	8003fc8 <NVIC_EncodePriority+0x30>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3b03      	subs	r3, #3
 8003fc6:	e000      	b.n	8003fca <NVIC_EncodePriority+0x32>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43d9      	mvns	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	4313      	orrs	r3, r2
         );
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3b01      	subs	r3, #1
 800400c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004010:	d301      	bcc.n	8004016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004012:	2301      	movs	r3, #1
 8004014:	e00f      	b.n	8004036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <SysTick_Config+0x40>)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401e:	210f      	movs	r1, #15
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	f7ff ff8e 	bl	8003f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <SysTick_Config+0x40>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <SysTick_Config+0x40>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010

08004044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff29 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800406c:	f7ff ff3e 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff ff8e 	bl	8003f98 <NVIC_EncodePriority>
 800407c:	4602      	mov	r2, r0
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	4611      	mov	r1, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff5d 	bl	8003f44 <__NVIC_SetPriority>
}
 800408a:	bf00      	nop
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff31 	bl	8003f08 <__NVIC_EnableIRQ>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffa2 	bl	8004000 <SysTick_Config>
 80040bc:	4603      	mov	r3, r0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040d4:	f7ff feb6 	bl	8003e44 <HAL_GetTick>
 80040d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e052      	b.n	800419e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0216 	bic.w	r2, r2, #22
 8004106:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004116:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <HAL_DMA_Abort+0x62>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0208 	bic.w	r2, r2, #8
 8004136:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004148:	e013      	b.n	8004172 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800414a:	f7ff fe7b 	bl	8003e44 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b05      	cmp	r3, #5
 8004156:	d90c      	bls.n	8004172 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2203      	movs	r2, #3
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e015      	b.n	800419e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e4      	bne.n	800414a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	223f      	movs	r2, #63	; 0x3f
 8004186:	409a      	lsls	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00c      	b.n	80041de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2205      	movs	r2, #5
 80041c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80041fc:	4ba9      	ldr	r3, [pc, #676]	; (80044a4 <HAL_ETH_Init+0x2b8>)
 80041fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e181      	b.n	8004516 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f005 fe9c 	bl	8009f64 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422c:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <HAL_ETH_Init+0x2bc>)
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	4a9d      	ldr	r2, [pc, #628]	; (80044a8 <HAL_ETH_Init+0x2bc>)
 8004232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004236:	6453      	str	r3, [r2, #68]	; 0x44
 8004238:	4b9b      	ldr	r3, [pc, #620]	; (80044a8 <HAL_ETH_Init+0x2bc>)
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004244:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_ETH_Init+0x2c0>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a98      	ldr	r2, [pc, #608]	; (80044ac <HAL_ETH_Init+0x2c0>)
 800424a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800424e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004250:	4b96      	ldr	r3, [pc, #600]	; (80044ac <HAL_ETH_Init+0x2c0>)
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4994      	ldr	r1, [pc, #592]	; (80044ac <HAL_ETH_Init+0x2c0>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004274:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004276:	f7ff fde5 	bl	8003e44 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800427c:	e011      	b.n	80042a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800427e:	f7ff fde1 	bl	8003e44 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800428c:	d909      	bls.n	80042a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e139      	b.n	8004516 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e4      	bne.n	800427e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f023 031c 	bic.w	r3, r3, #28
 80042c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042c4:	f002 ff46 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 80042c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	4a78      	ldr	r2, [pc, #480]	; (80044b0 <HAL_ETH_Init+0x2c4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d908      	bls.n	80042e4 <HAL_ETH_Init+0xf8>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <HAL_ETH_Init+0x2c8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d804      	bhi.n	80042e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e027      	b.n	8004334 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4a73      	ldr	r2, [pc, #460]	; (80044b4 <HAL_ETH_Init+0x2c8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d908      	bls.n	80042fe <HAL_ETH_Init+0x112>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4a6d      	ldr	r2, [pc, #436]	; (80044a4 <HAL_ETH_Init+0x2b8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d204      	bcs.n	80042fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f043 030c 	orr.w	r3, r3, #12
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e01a      	b.n	8004334 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4a68      	ldr	r2, [pc, #416]	; (80044a4 <HAL_ETH_Init+0x2b8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d303      	bcc.n	800430e <HAL_ETH_Init+0x122>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4a6b      	ldr	r2, [pc, #428]	; (80044b8 <HAL_ETH_Init+0x2cc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d911      	bls.n	8004332 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4a69      	ldr	r2, [pc, #420]	; (80044b8 <HAL_ETH_Init+0x2cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d908      	bls.n	8004328 <HAL_ETH_Init+0x13c>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4a68      	ldr	r2, [pc, #416]	; (80044bc <HAL_ETH_Init+0x2d0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d804      	bhi.n	8004328 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e005      	b.n	8004334 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f043 0310 	orr.w	r3, r3, #16
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e000      	b.n	8004334 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004332:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800433c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb14 	bl	8004970 <HAL_ETH_WritePHYRegister>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004352:	6939      	ldr	r1, [r7, #16]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fcc9 	bl	8004cec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0d7      	b.n	8004516 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004366:	20ff      	movs	r0, #255	; 0xff
 8004368:	f7ff fd78 	bl	8003e5c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a5 	beq.w	80044c0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7ff fd65 	bl	8003e44 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	461a      	mov	r2, r3
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa8b 	bl	80048a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800438a:	f7ff fd5b 	bl	8003e44 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d90f      	bls.n	80043bc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80043a0:	6939      	ldr	r1, [r7, #16]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fca2 	bl	8004cec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0ac      	b.n	8004516 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0da      	beq.n	800437c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80043c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043ca:	2100      	movs	r1, #0
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 facf 	bl	8004970 <HAL_ETH_WritePHYRegister>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043dc:	6939      	ldr	r1, [r7, #16]
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fc84 	bl	8004cec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80043ec:	2301      	movs	r3, #1
 80043ee:	e092      	b.n	8004516 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80043f0:	f7ff fd28 	bl	8003e44 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	461a      	mov	r2, r3
 80043fc:	2101      	movs	r1, #1
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa4e 	bl	80048a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004404:	f7ff fd1e 	bl	8003e44 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d90f      	bls.n	8004436 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800441a:	6939      	ldr	r1, [r7, #16]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fc65 	bl	8004cec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e06f      	b.n	8004516 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0da      	beq.n	80043f6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	461a      	mov	r2, r3
 8004446:	2110      	movs	r1, #16
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fa29 	bl	80048a0 <HAL_ETH_ReadPHYRegister>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004458:	6939      	ldr	r1, [r7, #16]
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fc46 	bl	8004cec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004468:	2301      	movs	r3, #1
 800446a:	e054      	b.n	8004516 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	e002      	b.n	8004486 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	e035      	b.n	8004504 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e030      	b.n	8004504 <HAL_ETH_Init+0x318>
 80044a2:	bf00      	nop
 80044a4:	03938700 	.word	0x03938700
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40013800 	.word	0x40013800
 80044b0:	01312cff 	.word	0x01312cff
 80044b4:	02160ebf 	.word	0x02160ebf
 80044b8:	05f5e0ff 	.word	0x05f5e0ff
 80044bc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044d0:	4313      	orrs	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	2100      	movs	r1, #0
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fa49 	bl	8004970 <HAL_ETH_WritePHYRegister>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fbfe 	bl	8004cec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e00c      	b.n	8004516 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80044fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004500:	f7ff fcac 	bl	8003e5c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fbf0 	bl	8004cec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop

08004520 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_ETH_DMATxDescListInit+0x20>
 800453c:	2302      	movs	r3, #2
 800453e:	e052      	b.n	80045e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e030      	b.n	80045be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	015b      	lsls	r3, r3, #5
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	4413      	add	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800456c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3b01      	subs	r3, #1
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	d208      	bcs.n	80045b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	015b      	lsls	r3, r3, #5
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4413      	add	r3, r2
 80045aa:	461a      	mov	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e002      	b.n	80045b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3301      	adds	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d3ca      	bcc.n	800455c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	f241 0310 	movw	r3, #4112	; 0x1010
 80045d0:	440b      	add	r3, r1
 80045d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_ETH_DMARxDescListInit+0x20>
 800460e:	2302      	movs	r3, #2
 8004610:	e056      	b.n	80046c0 <HAL_ETH_DMARxDescListInit+0xce>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e034      	b.n	8004698 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	015b      	lsls	r3, r3, #5
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800463e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004646:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	461a      	mov	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	3b01      	subs	r3, #1
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	429a      	cmp	r2, r3
 8004678:	d208      	bcs.n	800468c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	3301      	adds	r3, #1
 800467e:	015b      	lsls	r3, r3, #5
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4413      	add	r3, r2
 8004684:	461a      	mov	r2, r3
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e002      	b.n	8004692 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d3c6      	bcc.n	800462e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	f241 030c 	movw	r3, #4108	; 0x100c
 80046aa:	440b      	add	r3, r1
 80046ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_ETH_TransmitFrame+0x24>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0cd      	b.n	800488c <HAL_ETH_TransmitFrame+0x1c0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004716:	2301      	movs	r3, #1
 8004718:	e0b8      	b.n	800488c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da09      	bge.n	8004738 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2212      	movs	r2, #18
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0a9      	b.n	800488c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800473e:	4293      	cmp	r3, r2
 8004740:	d915      	bls.n	800476e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	4a54      	ldr	r2, [pc, #336]	; (8004898 <HAL_ETH_TransmitFrame+0x1cc>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	4b51      	ldr	r3, [pc, #324]	; (8004898 <HAL_ETH_TransmitFrame+0x1cc>)
 8004752:	fba3 1302 	umull	r1, r3, r3, r2
 8004756:	0a9b      	lsrs	r3, r3, #10
 8004758:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e001      	b.n	8004772 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d11c      	bne.n	80047b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004786:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004792:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80047a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80047b0:	e04b      	b.n	800484a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e044      	b.n	8004842 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d116      	bne.n	8004820 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004800:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_ETH_TransmitFrame+0x1d0>)
 8004806:	fb02 f203 	mul.w	r2, r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4413      	add	r3, r2
 800480e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004812:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800481e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800482e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3301      	adds	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	429a      	cmp	r2, r3
 8004848:	d3b6      	bcc.n	80047b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004852:	4413      	add	r3, r2
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f241 0314 	movw	r3, #4116	; 0x1014
 8004866:	4413      	add	r3, r2
 8004868:	2204      	movs	r2, #4
 800486a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	f241 0304 	movw	r3, #4100	; 0x1004
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	ac02b00b 	.word	0xac02b00b
 800489c:	fffffa0c 	.word	0xfffffa0c

080048a0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	460b      	mov	r3, r1
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b82      	cmp	r3, #130	; 0x82
 80048c0:	d101      	bne.n	80048c6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
 80048c4:	e050      	b.n	8004968 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2282      	movs	r2, #130	; 0x82
 80048ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 031c 	and.w	r3, r3, #28
 80048dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8a1b      	ldrh	r3, [r3, #16]
 80048e2:	02db      	lsls	r3, r3, #11
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80048ec:	897b      	ldrh	r3, [r7, #10]
 80048ee:	019b      	lsls	r3, r3, #6
 80048f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 0302 	bic.w	r3, r3, #2
 8004900:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004912:	f7ff fa97 	bl	8003e44 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004918:	e015      	b.n	8004946 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800491a:	f7ff fa93 	bl	8003e44 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d309      	bcc.n	800493e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e014      	b.n	8004968 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e4      	bne.n	800491a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	b29b      	uxth	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	460b      	mov	r3, r1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b42      	cmp	r3, #66	; 0x42
 8004990:	d101      	bne.n	8004996 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
 8004994:	e04e      	b.n	8004a34 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2242      	movs	r2, #66	; 0x42
 800499a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 031c 	and.w	r3, r3, #28
 80049ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8a1b      	ldrh	r3, [r3, #16]
 80049b2:	02db      	lsls	r3, r3, #11
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80049bc:	897b      	ldrh	r3, [r7, #10]
 80049be:	019b      	lsls	r3, r3, #6
 80049c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80049ec:	f7ff fa2a 	bl	8003e44 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049f2:	e015      	b.n	8004a20 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80049f4:	f7ff fa26 	bl	8003e44 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d309      	bcc.n	8004a18 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e00d      	b.n	8004a34 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e4      	bne.n	80049f4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_ETH_Start+0x16>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e01f      	b.n	8004a92 <HAL_ETH_Start+0x56>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb44 	bl	80050f0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb7b 	bl	8005164 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fc12 	bl	8005298 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fbaf 	bl	80051d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fbdc 	bl	8005238 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ETH_Stop+0x16>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e01f      	b.n	8004af0 <HAL_ETH_Stop+0x56>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fba1 	bl	8005208 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fbce 	bl	8005268 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb66 	bl	800519e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fbe0 	bl	8005298 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fb26 	bl	800512a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_ETH_ConfigMAC+0x1c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e0e4      	b.n	8004cde <HAL_ETH_ConfigMAC+0x1e6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80b1 	beq.w	8004c8e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <HAL_ETH_ConfigMAC+0x1f0>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004b44:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004b4a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004b50:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004b56:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004b5c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004b62:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004b68:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004b6e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004b74:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004b7a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004b80:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004b86:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f7ff f95c 	bl	8003e5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004bb4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004bba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004bc0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004bc6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004bcc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004bd2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004bde:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004be0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f7ff f936 	bl	8003e5c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c00:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c0a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004c28:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004c2e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004c34:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004c3a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004c40:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7ff f8ff 	bl	8003e5c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f7ff f8ec 	bl	8003e5c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	61da      	str	r2, [r3, #28]
 8004c8c:	e01e      	b.n	8004ccc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004c9c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f7ff f8cc 	bl	8003e5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	ff20810f 	.word	0xff20810f

08004cec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b0b0      	sub	sp, #192	; 0xc0
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d08:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d36:	663b      	str	r3, [r7, #96]	; 0x60
 8004d38:	e001      	b.n	8004d3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004d58:	2340      	movs	r3, #64	; 0x40
 8004d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004dc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004dc4:	4bab      	ldr	r3, [pc, #684]	; (8005074 <ETH_MACDMAConfig+0x388>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004dd0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004dd4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004dd8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004dde:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004de2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004de6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004dec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004df0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004df4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004df8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004dfc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004e00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004e02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e20:	2001      	movs	r0, #1
 8004e22:	f7ff f81b 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e2e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e34:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004e38:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004e3e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004e44:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004e4a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004e54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004e5c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e5e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f7fe fff6 	bl	8003e5c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e78:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e82:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004e8c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004e98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e9c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eaa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004eb0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004eb6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004ebc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004ec2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004ec8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004eca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004edc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7fe ffb7 	bl	8003e5c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ef6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004ef8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004efc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f12:	2001      	movs	r0, #1
 8004f14:	f7fe ffa2 	bl	8003e5c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f20:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f2a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f34:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004f46:	2304      	movs	r3, #4
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f60:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	f241 0318 	movw	r3, #4120	; 0x1018
 8004f76:	4413      	add	r3, r2
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f82:	4b3d      	ldr	r3, [pc, #244]	; (8005078 <ETH_MACDMAConfig+0x38c>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004f8a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004f8c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004f8e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004f90:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004f92:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004f94:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004f96:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004f98:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004f9a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004f9c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004f9e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004fa2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004fa6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004faa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fc4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fce:	4413      	add	r3, r2
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7fe ff40 	bl	8003e5c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004ff0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004ff4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004ff8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004ffc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005002:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005006:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005024:	2001      	movs	r0, #1
 8005026:	f7fe ff19 	bl	8003e5c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005032:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005036:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10d      	bne.n	800505c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	f241 031c 	movw	r3, #4124	; 0x101c
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6811      	ldr	r1, [r2, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <ETH_MACDMAConfig+0x390>)
 8005052:	431a      	orrs	r2, r3
 8005054:	f241 031c 	movw	r3, #4124	; 0x101c
 8005058:	440b      	add	r3, r1
 800505a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	461a      	mov	r2, r3
 8005062:	2100      	movs	r1, #0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f80b 	bl	8005080 <ETH_MACAddressConfig>
}
 800506a:	bf00      	nop
 800506c:	37c0      	adds	r7, #192	; 0xc0
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	ff20810f 	.word	0xff20810f
 8005078:	f8de3f23 	.word	0xf8de3f23
 800507c:	00010040 	.word	0x00010040

08005080 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3305      	adds	r3, #5
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	3204      	adds	r2, #4
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <ETH_MACAddressConfig+0x68>)
 80050a2:	4413      	add	r3, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3303      	adds	r3, #3
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3302      	adds	r3, #2
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3301      	adds	r3, #1
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	4313      	orrs	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <ETH_MACAddressConfig+0x6c>)
 80050d2:	4413      	add	r3, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6013      	str	r3, [r2, #0]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40028040 	.word	0x40028040
 80050ec:	40028044 	.word	0x40028044

080050f0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005114:	2001      	movs	r0, #1
 8005116:	f7fe fea1 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0208 	bic.w	r2, r2, #8
 8005144:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800514e:	2001      	movs	r0, #1
 8005150:	f7fe fe84 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0204 	orr.w	r2, r2, #4
 800517e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005188:	2001      	movs	r0, #1
 800518a:	f7fe fe67 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051c2:	2001      	movs	r0, #1
 80051c4:	f7fe fe4a 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]
}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80051e8:	4413      	add	r3, r2
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6811      	ldr	r1, [r2, #0]
 80051f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80051f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80051f8:	440b      	add	r3, r1
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	f241 0318 	movw	r3, #4120	; 0x1018
 8005218:	4413      	add	r3, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6811      	ldr	r1, [r2, #0]
 8005220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005224:	f241 0318 	movw	r3, #4120	; 0x1018
 8005228:	440b      	add	r3, r1
 800522a:	601a      	str	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	f241 0318 	movw	r3, #4120	; 0x1018
 8005248:	4413      	add	r3, r2
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6811      	ldr	r1, [r2, #0]
 8005250:	f043 0202 	orr.w	r2, r3, #2
 8005254:	f241 0318 	movw	r3, #4120	; 0x1018
 8005258:	440b      	add	r3, r1
 800525a:	601a      	str	r2, [r3, #0]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	f241 0318 	movw	r3, #4120	; 0x1018
 8005278:	4413      	add	r3, r2
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	f023 0202 	bic.w	r2, r3, #2
 8005284:	f241 0318 	movw	r3, #4120	; 0x1018
 8005288:	440b      	add	r3, r1
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6811      	ldr	r1, [r2, #0]
 80052b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80052bc:	440b      	add	r3, r1
 80052be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052ce:	2001      	movs	r0, #1
 80052d0:	f7fe fdc4 	bl	8003e5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f241 0318 	movw	r3, #4120	; 0x1018
 80052de:	440b      	add	r3, r1
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	e175      	b.n	80055f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800530c:	2201      	movs	r2, #1
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	f040 8164 	bne.w	80055f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b01      	cmp	r3, #1
 8005334:	d005      	beq.n	8005342 <HAL_GPIO_Init+0x56>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d130      	bne.n	80053a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	2203      	movs	r2, #3
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005378:	2201      	movs	r2, #1
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 0201 	and.w	r2, r3, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d017      	beq.n	80053e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d123      	bne.n	8005434 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	08da      	lsrs	r2, r3, #3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3208      	adds	r2, #8
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	220f      	movs	r2, #15
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	08da      	lsrs	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3208      	adds	r2, #8
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	2203      	movs	r2, #3
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0203 	and.w	r2, r3, #3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4313      	orrs	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80be 	beq.w	80055f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005476:	4b66      	ldr	r3, [pc, #408]	; (8005610 <HAL_GPIO_Init+0x324>)
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_GPIO_Init+0x324>)
 800547c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005480:	6453      	str	r3, [r2, #68]	; 0x44
 8005482:	4b63      	ldr	r3, [pc, #396]	; (8005610 <HAL_GPIO_Init+0x324>)
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800548e:	4a61      	ldr	r2, [pc, #388]	; (8005614 <HAL_GPIO_Init+0x328>)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	3302      	adds	r3, #2
 8005496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	220f      	movs	r2, #15
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a58      	ldr	r2, [pc, #352]	; (8005618 <HAL_GPIO_Init+0x32c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d037      	beq.n	800552a <HAL_GPIO_Init+0x23e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a57      	ldr	r2, [pc, #348]	; (800561c <HAL_GPIO_Init+0x330>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d031      	beq.n	8005526 <HAL_GPIO_Init+0x23a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a56      	ldr	r2, [pc, #344]	; (8005620 <HAL_GPIO_Init+0x334>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <HAL_GPIO_Init+0x236>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a55      	ldr	r2, [pc, #340]	; (8005624 <HAL_GPIO_Init+0x338>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d025      	beq.n	800551e <HAL_GPIO_Init+0x232>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a54      	ldr	r2, [pc, #336]	; (8005628 <HAL_GPIO_Init+0x33c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01f      	beq.n	800551a <HAL_GPIO_Init+0x22e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a53      	ldr	r2, [pc, #332]	; (800562c <HAL_GPIO_Init+0x340>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d019      	beq.n	8005516 <HAL_GPIO_Init+0x22a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a52      	ldr	r2, [pc, #328]	; (8005630 <HAL_GPIO_Init+0x344>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_GPIO_Init+0x226>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a51      	ldr	r2, [pc, #324]	; (8005634 <HAL_GPIO_Init+0x348>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00d      	beq.n	800550e <HAL_GPIO_Init+0x222>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a50      	ldr	r2, [pc, #320]	; (8005638 <HAL_GPIO_Init+0x34c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <HAL_GPIO_Init+0x21e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a4f      	ldr	r2, [pc, #316]	; (800563c <HAL_GPIO_Init+0x350>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d101      	bne.n	8005506 <HAL_GPIO_Init+0x21a>
 8005502:	2309      	movs	r3, #9
 8005504:	e012      	b.n	800552c <HAL_GPIO_Init+0x240>
 8005506:	230a      	movs	r3, #10
 8005508:	e010      	b.n	800552c <HAL_GPIO_Init+0x240>
 800550a:	2308      	movs	r3, #8
 800550c:	e00e      	b.n	800552c <HAL_GPIO_Init+0x240>
 800550e:	2307      	movs	r3, #7
 8005510:	e00c      	b.n	800552c <HAL_GPIO_Init+0x240>
 8005512:	2306      	movs	r3, #6
 8005514:	e00a      	b.n	800552c <HAL_GPIO_Init+0x240>
 8005516:	2305      	movs	r3, #5
 8005518:	e008      	b.n	800552c <HAL_GPIO_Init+0x240>
 800551a:	2304      	movs	r3, #4
 800551c:	e006      	b.n	800552c <HAL_GPIO_Init+0x240>
 800551e:	2303      	movs	r3, #3
 8005520:	e004      	b.n	800552c <HAL_GPIO_Init+0x240>
 8005522:	2302      	movs	r3, #2
 8005524:	e002      	b.n	800552c <HAL_GPIO_Init+0x240>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_GPIO_Init+0x240>
 800552a:	2300      	movs	r3, #0
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	f002 0203 	and.w	r2, r2, #3
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	4093      	lsls	r3, r2
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4313      	orrs	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800553c:	4935      	ldr	r1, [pc, #212]	; (8005614 <HAL_GPIO_Init+0x328>)
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	3302      	adds	r3, #2
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800554a:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <HAL_GPIO_Init+0x354>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800556e:	4a34      	ldr	r2, [pc, #208]	; (8005640 <HAL_GPIO_Init+0x354>)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_GPIO_Init+0x354>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005598:	4a29      	ldr	r2, [pc, #164]	; (8005640 <HAL_GPIO_Init+0x354>)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800559e:	4b28      	ldr	r3, [pc, #160]	; (8005640 <HAL_GPIO_Init+0x354>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <HAL_GPIO_Init+0x354>)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_GPIO_Init+0x354>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055ec:	4a14      	ldr	r2, [pc, #80]	; (8005640 <HAL_GPIO_Init+0x354>)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b0f      	cmp	r3, #15
 80055fc:	f67f ae86 	bls.w	800530c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	3724      	adds	r7, #36	; 0x24
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40023800 	.word	0x40023800
 8005614:	40013800 	.word	0x40013800
 8005618:	40020000 	.word	0x40020000
 800561c:	40020400 	.word	0x40020400
 8005620:	40020800 	.word	0x40020800
 8005624:	40020c00 	.word	0x40020c00
 8005628:	40021000 	.word	0x40021000
 800562c:	40021400 	.word	0x40021400
 8005630:	40021800 	.word	0x40021800
 8005634:	40021c00 	.word	0x40021c00
 8005638:	40022000 	.word	0x40022000
 800563c:	40022400 	.word	0x40022400
 8005640:	40013c00 	.word	0x40013c00

08005644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	887b      	ldrh	r3, [r7, #2]
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	e001      	b.n	8005666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005684:	787b      	ldrb	r3, [r7, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005690:	e003      	b.n	800569a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	041a      	lsls	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056b8:	887a      	ldrh	r2, [r7, #2]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4013      	ands	r3, r2
 80056be:	041a      	lsls	r2, r3, #16
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43d9      	mvns	r1, r3
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	400b      	ands	r3, r1
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	619a      	str	r2, [r3, #24]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e07f      	b.n	80057ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fd ffac 	bl	8003660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2224      	movs	r2, #36	; 0x24
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800572c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800573c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d107      	bne.n	8005756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	e006      	b.n	8005764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d104      	bne.n	8005776 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_I2C_Init+0x11c>)
 8005782:	430b      	orrs	r3, r1
 8005784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	02008000 	.word	0x02008000

080057fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	461a      	mov	r2, r3
 8005808:	460b      	mov	r3, r1
 800580a:	817b      	strh	r3, [r7, #10]
 800580c:	4613      	mov	r3, r2
 800580e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 80da 	bne.w	80059d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_I2C_Master_Transmit+0x30>
 8005828:	2302      	movs	r3, #2
 800582a:	e0d3      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005834:	f7fe fb06 	bl	8003e44 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2319      	movs	r3, #25
 8005840:	2201      	movs	r2, #1
 8005842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fcbc 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0be      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	; 0x21
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2210      	movs	r2, #16
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	893a      	ldrh	r2, [r7, #8]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	2bff      	cmp	r3, #255	; 0xff
 8005886:	d90e      	bls.n	80058a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005892:	b2da      	uxtb	r2, r3
 8005894:	8979      	ldrh	r1, [r7, #10]
 8005896:	4b51      	ldr	r3, [pc, #324]	; (80059dc <HAL_I2C_Master_Transmit+0x1e0>)
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 feb2 	bl	8006608 <I2C_TransferConfig>
 80058a4:	e06c      	b.n	8005980 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	8979      	ldrh	r1, [r7, #10]
 80058b8:	4b48      	ldr	r3, [pc, #288]	; (80059dc <HAL_I2C_Master_Transmit+0x1e0>)
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fea1 	bl	8006608 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80058c6:	e05b      	b.n	8005980 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	6a39      	ldr	r1, [r7, #32]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fcb9 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e07b      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d034      	beq.n	8005980 <HAL_I2C_Master_Transmit+0x184>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d130      	bne.n	8005980 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fc4b 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04d      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2bff      	cmp	r3, #255	; 0xff
 8005940:	d90e      	bls.n	8005960 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594c:	b2da      	uxtb	r2, r3
 800594e:	8979      	ldrh	r1, [r7, #10]
 8005950:	2300      	movs	r3, #0
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fe55 	bl	8006608 <I2C_TransferConfig>
 800595e:	e00f      	b.n	8005980 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596e:	b2da      	uxtb	r2, r3
 8005970:	8979      	ldrh	r1, [r7, #10]
 8005972:	2300      	movs	r3, #0
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fe44 	bl	8006608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d19e      	bne.n	80058c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	6a39      	ldr	r1, [r7, #32]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fc98 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e01a      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2220      	movs	r2, #32
 80059a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6859      	ldr	r1, [r3, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80059b2:	400b      	ands	r3, r1
 80059b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	80002000 	.word	0x80002000
 80059e0:	fe00e800 	.word	0xfe00e800

080059e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	461a      	mov	r2, r3
 80059f0:	460b      	mov	r3, r1
 80059f2:	817b      	strh	r3, [r7, #10]
 80059f4:	4613      	mov	r3, r2
 80059f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80db 	bne.w	8005bbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2C_Master_Receive+0x30>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0d4      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a1c:	f7fe fa12 	bl	8003e44 <HAL_GetTick>
 8005a20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2319      	movs	r3, #25
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fbc8 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e0bf      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2222      	movs	r2, #34	; 0x22
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	893a      	ldrh	r2, [r7, #8]
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2bff      	cmp	r3, #255	; 0xff
 8005a6e:	d90e      	bls.n	8005a8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	22ff      	movs	r2, #255	; 0xff
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	8979      	ldrh	r1, [r7, #10]
 8005a7e:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fdbe 	bl	8006608 <I2C_TransferConfig>
 8005a8c:	e06d      	b.n	8005b6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	8979      	ldrh	r1, [r7, #10]
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fdad 	bl	8006608 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005aae:	e05c      	b.n	8005b6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	6a39      	ldr	r1, [r7, #32]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fc41 	bl	800633c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e07c      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d034      	beq.n	8005b6a <HAL_I2C_Master_Receive+0x186>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d130      	bne.n	8005b6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fb56 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e04d      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2bff      	cmp	r3, #255	; 0xff
 8005b2a:	d90e      	bls.n	8005b4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fd60 	bl	8006608 <I2C_TransferConfig>
 8005b48:	e00f      	b.n	8005b6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	8979      	ldrh	r1, [r7, #10]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fd4f 	bl	8006608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d19d      	bne.n	8005ab0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	6a39      	ldr	r1, [r7, #32]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fba3 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e01a      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_I2C_Master_Receive+0x1e8>)
 8005b9c:	400b      	ands	r3, r1
 8005b9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	80002400 	.word	0x80002400
 8005bcc:	fe00e800 	.word	0xfe00e800

08005bd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	4608      	mov	r0, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	817b      	strh	r3, [r7, #10]
 8005be2:	460b      	mov	r3, r1
 8005be4:	813b      	strh	r3, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	f040 80f9 	bne.w	8005dea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_I2C_Mem_Write+0x34>
 8005bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0ed      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_I2C_Mem_Write+0x4e>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0e6      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c26:	f7fe f90d 	bl	8003e44 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2319      	movs	r3, #25
 8005c32:	2201      	movs	r2, #1
 8005c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fac3 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0d1      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2221      	movs	r2, #33	; 0x21
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2240      	movs	r2, #64	; 0x40
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c70:	88f8      	ldrh	r0, [r7, #6]
 8005c72:	893a      	ldrh	r2, [r7, #8]
 8005c74:	8979      	ldrh	r1, [r7, #10]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4603      	mov	r3, r0
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f9d3 	bl	800602c <I2C_RequestMemoryWrite>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0a9      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2bff      	cmp	r3, #255	; 0xff
 8005ca0:	d90e      	bls.n	8005cc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	8979      	ldrh	r1, [r7, #10]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fca5 	bl	8006608 <I2C_TransferConfig>
 8005cbe:	e00f      	b.n	8005ce0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	8979      	ldrh	r1, [r7, #10]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fc94 	bl	8006608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 faad 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e07b      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d034      	beq.n	8005d98 <HAL_I2C_Mem_Write+0x1c8>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d130      	bne.n	8005d98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fa3f 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e04d      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2bff      	cmp	r3, #255	; 0xff
 8005d58:	d90e      	bls.n	8005d78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	8979      	ldrh	r1, [r7, #10]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fc49 	bl	8006608 <I2C_TransferConfig>
 8005d76:	e00f      	b.n	8005d98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	8979      	ldrh	r1, [r7, #10]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fc38 	bl	8006608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d19e      	bne.n	8005ce0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fa8c 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e01a      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <HAL_I2C_Mem_Write+0x224>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	fe00e800 	.word	0xfe00e800

08005df8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	817b      	strh	r3, [r7, #10]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	813b      	strh	r3, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	f040 80fd 	bne.w	800601a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x34>
 8005e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0f1      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_I2C_Mem_Read+0x4e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e0ea      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e4e:	f7fd fff9 	bl	8003e44 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2319      	movs	r3, #25
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f9af 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0d5      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2222      	movs	r2, #34	; 0x22
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2240      	movs	r2, #64	; 0x40
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e98:	88f8      	ldrh	r0, [r7, #6]
 8005e9a:	893a      	ldrh	r2, [r7, #8]
 8005e9c:	8979      	ldrh	r1, [r7, #10]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f913 	bl	80060d4 <I2C_RequestMemoryRead>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0ad      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2bff      	cmp	r3, #255	; 0xff
 8005ec8:	d90e      	bls.n	8005ee8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	8979      	ldrh	r1, [r7, #10]
 8005ed8:	4b52      	ldr	r3, [pc, #328]	; (8006024 <HAL_I2C_Mem_Read+0x22c>)
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb91 	bl	8006608 <I2C_TransferConfig>
 8005ee6:	e00f      	b.n	8005f08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	8979      	ldrh	r1, [r7, #10]
 8005efa:	4b4a      	ldr	r3, [pc, #296]	; (8006024 <HAL_I2C_Mem_Read+0x22c>)
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 fb80 	bl	8006608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2104      	movs	r1, #4
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f956 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e07c      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d034      	beq.n	8005fc8 <HAL_I2C_Mem_Read+0x1d0>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d130      	bne.n	8005fc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2180      	movs	r1, #128	; 0x80
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f927 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e04d      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2bff      	cmp	r3, #255	; 0xff
 8005f88:	d90e      	bls.n	8005fa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	22ff      	movs	r2, #255	; 0xff
 8005f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	8979      	ldrh	r1, [r7, #10]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fb31 	bl	8006608 <I2C_TransferConfig>
 8005fa6:	e00f      	b.n	8005fc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	8979      	ldrh	r1, [r7, #10]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fb20 	bl	8006608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d19a      	bne.n	8005f08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f974 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e01a      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2220      	movs	r2, #32
 8005fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_I2C_Mem_Read+0x230>)
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	80002400 	.word	0x80002400
 8006028:	fe00e800 	.word	0xfe00e800

0800602c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4603      	mov	r3, r0
 800603c:	817b      	strh	r3, [r7, #10]
 800603e:	460b      	mov	r3, r1
 8006040:	813b      	strh	r3, [r7, #8]
 8006042:	4613      	mov	r3, r2
 8006044:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	8979      	ldrh	r1, [r7, #10]
 800604c:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <I2C_RequestMemoryWrite+0xa4>)
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fad7 	bl	8006608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f8f0 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e02c      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d105      	bne.n	8006080 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
 800607e:	e015      	b.n	80060ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b29b      	uxth	r3, r3
 8006086:	b2da      	uxtb	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f8d6 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e012      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2200      	movs	r2, #0
 80060b4:	2180      	movs	r1, #128	; 0x80
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f884 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	80002000 	.word	0x80002000

080060d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	817b      	strh	r3, [r7, #10]
 80060e6:	460b      	mov	r3, r1
 80060e8:	813b      	strh	r3, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	8979      	ldrh	r1, [r7, #10]
 80060f4:	4b20      	ldr	r3, [pc, #128]	; (8006178 <I2C_RequestMemoryRead+0xa4>)
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fa84 	bl	8006608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	69b9      	ldr	r1, [r7, #24]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f89d 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e02c      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d105      	bne.n	8006126 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
 8006124:	e015      	b.n	8006152 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006126:	893b      	ldrh	r3, [r7, #8]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	b29b      	uxth	r3, r3
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	69b9      	ldr	r1, [r7, #24]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f883 	bl	8006244 <I2C_WaitOnTXISFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e012      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2200      	movs	r2, #0
 800615a:	2140      	movs	r1, #64	; 0x40
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f831 	bl	80061c4 <I2C_WaitOnFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	80002000 	.word	0x80002000

0800617c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d103      	bne.n	800619a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d007      	beq.n	80061b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	619a      	str	r2, [r3, #24]
  }
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d4:	e022      	b.n	800621c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d01e      	beq.n	800621c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061de:	f7fd fe31 	bl	8003e44 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d113      	bne.n	800621c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e00f      	b.n	800623c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4013      	ands	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	429a      	cmp	r2, r3
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	429a      	cmp	r2, r3
 8006238:	d0cd      	beq.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006250:	e02c      	b.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f8ea 	bl	8006430 <I2C_IsErrorOccurred>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e02a      	b.n	80062bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d01e      	beq.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fd fde9 	bl	8003e44 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d113      	bne.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d1cb      	bne.n	8006252 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d0:	e028      	b.n	8006324 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f8aa 	bl	8006430 <I2C_IsErrorOccurred>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e026      	b.n	8006334 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fd fdad 	bl	8003e44 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d113      	bne.n	8006324 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e007      	b.n	8006334 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d1cf      	bne.n	80062d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006348:	e064      	b.n	8006414 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f86e 	bl	8006430 <I2C_IsErrorOccurred>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e062      	b.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d138      	bne.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d105      	bne.n	8006386 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e04e      	b.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b10      	cmp	r3, #16
 8006392:	d107      	bne.n	80063a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2210      	movs	r2, #16
 800639a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2204      	movs	r2, #4
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
 80063a2:	e002      	b.n	80063aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2220      	movs	r2, #32
 80063b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6859      	ldr	r1, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80063be:	400b      	ands	r3, r1
 80063c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e022      	b.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fd fd31 	bl	8003e44 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10f      	bne.n	8006414 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	f043 0220 	orr.w	r2, r3, #32
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e007      	b.n	8006424 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d193      	bne.n	800634a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	fe00e800 	.word	0xfe00e800

08006430 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d075      	beq.n	8006548 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2210      	movs	r2, #16
 8006462:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006464:	e056      	b.n	8006514 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d052      	beq.n	8006514 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fd fce9 	bl	8003e44 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <I2C_IsErrorOccurred+0x54>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d147      	bne.n	8006514 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006496:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a6:	d12e      	bne.n	8006506 <I2C_IsErrorOccurred+0xd6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ae:	d02a      	beq.n	8006506 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d027      	beq.n	8006506 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064c6:	f7fd fcbd 	bl	8003e44 <HAL_GetTick>
 80064ca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064cc:	e01b      	b.n	8006506 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064ce:	f7fd fcb9 	bl	8003e44 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b19      	cmp	r3, #25
 80064da:	d914      	bls.n	8006506 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e0:	f043 0220 	orr.w	r2, r3, #32
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b20      	cmp	r3, #32
 8006512:	d1dc      	bne.n	80064ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b20      	cmp	r3, #32
 8006520:	d003      	beq.n	800652a <I2C_IsErrorOccurred+0xfa>
 8006522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006526:	2b00      	cmp	r3, #0
 8006528:	d09d      	beq.n	8006466 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800652a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2220      	movs	r2, #32
 8006538:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f043 0304 	orr.w	r3, r3, #4
 8006540:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	f043 0308 	orr.w	r3, r3, #8
 8006582:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800658c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01c      	beq.n	80065f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fddc 	bl	800617c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <I2C_IsErrorOccurred+0x1d4>)
 80065d0:	400b      	ands	r3, r1
 80065d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	431a      	orrs	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80065f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3728      	adds	r7, #40	; 0x28
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	fe00e800 	.word	0xfe00e800

08006608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	817b      	strh	r3, [r7, #10]
 8006616:	4613      	mov	r3, r2
 8006618:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006620:	7a7b      	ldrb	r3, [r7, #9]
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006628:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4313      	orrs	r3, r2
 8006632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006636:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	0d5b      	lsrs	r3, r3, #21
 8006642:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <I2C_TransferConfig+0x60>)
 8006648:	430b      	orrs	r3, r1
 800664a:	43db      	mvns	r3, r3
 800664c:	ea02 0103 	and.w	r1, r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	03ff63ff 	.word	0x03ff63ff

0800666c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b20      	cmp	r3, #32
 8006680:	d138      	bne.n	80066f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800668c:	2302      	movs	r3, #2
 800668e:	e032      	b.n	80066f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b20      	cmp	r3, #32
 8006716:	d139      	bne.n	800678c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006722:	2302      	movs	r3, #2
 8006724:	e033      	b.n	800678e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2224      	movs	r2, #36	; 0x24
 8006732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40007000 	.word	0x40007000

080067bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_PWREx_EnableOverDrive+0x98>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	4a22      	ldr	r2, [pc, #136]	; (8006854 <HAL_PWREx_EnableOverDrive+0x98>)
 80067cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d0:	6413      	str	r3, [r2, #64]	; 0x40
 80067d2:	4b20      	ldr	r3, [pc, #128]	; (8006854 <HAL_PWREx_EnableOverDrive+0x98>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067de:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ea:	f7fd fb2b 	bl	8003e44 <HAL_GetTick>
 80067ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067f0:	e009      	b.n	8006806 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067f2:	f7fd fb27 	bl	8003e44 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006800:	d901      	bls.n	8006806 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e022      	b.n	800684c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d1ee      	bne.n	80067f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a0f      	ldr	r2, [pc, #60]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 800681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006820:	f7fd fb10 	bl	8003e44 <HAL_GetTick>
 8006824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006826:	e009      	b.n	800683c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006828:	f7fd fb0c 	bl	8003e44 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006836:	d901      	bls.n	800683c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e007      	b.n	800684c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_PWREx_EnableOverDrive+0x9c>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006848:	d1ee      	bne.n	8006828 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40023800 	.word	0x40023800
 8006858:	40007000 	.word	0x40007000

0800685c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e29b      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8087 	beq.w	800698e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006880:	4b96      	ldr	r3, [pc, #600]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b04      	cmp	r3, #4
 800688a:	d00c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688c:	4b93      	ldr	r3, [pc, #588]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b08      	cmp	r3, #8
 8006896:	d112      	bne.n	80068be <HAL_RCC_OscConfig+0x62>
 8006898:	4b90      	ldr	r3, [pc, #576]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a4:	d10b      	bne.n	80068be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a6:	4b8d      	ldr	r3, [pc, #564]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d06c      	beq.n	800698c <HAL_RCC_OscConfig+0x130>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d168      	bne.n	800698c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e275      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x7a>
 80068c8:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a83      	ldr	r2, [pc, #524]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e02e      	b.n	8006934 <HAL_RCC_OscConfig+0xd8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x9c>
 80068de:	4b7f      	ldr	r3, [pc, #508]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a7e      	ldr	r2, [pc, #504]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7b      	ldr	r2, [pc, #492]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80068f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e01d      	b.n	8006934 <HAL_RCC_OscConfig+0xd8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0xc0>
 8006902:	4b76      	ldr	r3, [pc, #472]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a75      	ldr	r2, [pc, #468]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b73      	ldr	r3, [pc, #460]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a72      	ldr	r2, [pc, #456]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e00b      	b.n	8006934 <HAL_RCC_OscConfig+0xd8>
 800691c:	4b6f      	ldr	r3, [pc, #444]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6e      	ldr	r2, [pc, #440]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800692e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fd fa82 	bl	8003e44 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006944:	f7fd fa7e 	bl	8003e44 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b64      	cmp	r3, #100	; 0x64
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e229      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0xe8>
 8006962:	e014      	b.n	800698e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fd fa6e 	bl	8003e44 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800696c:	f7fd fa6a 	bl	8003e44 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b64      	cmp	r3, #100	; 0x64
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e215      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697e:	4b57      	ldr	r3, [pc, #348]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x110>
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800698c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d069      	beq.n	8006a6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800699a:	4b50      	ldr	r3, [pc, #320]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069a6:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d11c      	bne.n	80069ec <HAL_RCC_OscConfig+0x190>
 80069b2:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d116      	bne.n	80069ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x17a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e1e9      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d6:	4b41      	ldr	r3, [pc, #260]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	493d      	ldr	r1, [pc, #244]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ea:	e040      	b.n	8006a6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d023      	beq.n	8006a3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a38      	ldr	r2, [pc, #224]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fd fa20 	bl	8003e44 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a08:	f7fd fa1c 	bl	8003e44 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e1c7      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a1a:	4b30      	ldr	r3, [pc, #192]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a26:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4929      	ldr	r1, [pc, #164]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]
 8006a3a:	e018      	b.n	8006a6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3c:	4b27      	ldr	r3, [pc, #156]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a26      	ldr	r2, [pc, #152]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fd f9fc 	bl	8003e44 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fd f9f8 	bl	8003e44 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e1a3      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d038      	beq.n	8006aec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d019      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b16      	ldr	r3, [pc, #88]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a86:	4a15      	ldr	r2, [pc, #84]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8e:	f7fd f9d9 	bl	8003e44 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a96:	f7fd f9d5 	bl	8003e44 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e180      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x23a>
 8006ab4:	e01a      	b.n	8006aec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aba:	4a08      	ldr	r2, [pc, #32]	; (8006adc <HAL_RCC_OscConfig+0x280>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac2:	f7fd f9bf 	bl	8003e44 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac8:	e00a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aca:	f7fd f9bb 	bl	8003e44 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d903      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e166      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
 8006adc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ae0:	4b92      	ldr	r3, [pc, #584]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ee      	bne.n	8006aca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80a4 	beq.w	8006c42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afa:	4b8c      	ldr	r3, [pc, #560]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b06:	4b89      	ldr	r3, [pc, #548]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4a88      	ldr	r2, [pc, #544]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6413      	str	r3, [r2, #64]	; 0x40
 8006b12:	4b86      	ldr	r3, [pc, #536]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b22:	4b83      	ldr	r3, [pc, #524]	; (8006d30 <HAL_RCC_OscConfig+0x4d4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b2e:	4b80      	ldr	r3, [pc, #512]	; (8006d30 <HAL_RCC_OscConfig+0x4d4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a7f      	ldr	r2, [pc, #508]	; (8006d30 <HAL_RCC_OscConfig+0x4d4>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fd f983 	bl	8003e44 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fd f97f 	bl	8003e44 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e12a      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b54:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <HAL_RCC_OscConfig+0x4d4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <HAL_RCC_OscConfig+0x31a>
 8006b68:	4b70      	ldr	r3, [pc, #448]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a6f      	ldr	r2, [pc, #444]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b6e:	f043 0301 	orr.w	r3, r3, #1
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	e02d      	b.n	8006bd2 <HAL_RCC_OscConfig+0x376>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x33c>
 8006b7e:	4b6b      	ldr	r3, [pc, #428]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	4a6a      	ldr	r2, [pc, #424]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8a:	4b68      	ldr	r3, [pc, #416]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	4a67      	ldr	r2, [pc, #412]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	6713      	str	r3, [r2, #112]	; 0x70
 8006b96:	e01c      	b.n	8006bd2 <HAL_RCC_OscConfig+0x376>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d10c      	bne.n	8006bba <HAL_RCC_OscConfig+0x35e>
 8006ba0:	4b62      	ldr	r3, [pc, #392]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	4a61      	ldr	r2, [pc, #388]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70
 8006bac:	4b5f      	ldr	r3, [pc, #380]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	4a5e      	ldr	r2, [pc, #376]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb8:	e00b      	b.n	8006bd2 <HAL_RCC_OscConfig+0x376>
 8006bba:	4b5c      	ldr	r3, [pc, #368]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	4a5b      	ldr	r2, [pc, #364]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc6:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d015      	beq.n	8006c06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bda:	f7fd f933 	bl	8003e44 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	e00a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be2:	f7fd f92f 	bl	8003e44 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e0d8      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	4b4c      	ldr	r3, [pc, #304]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0ee      	beq.n	8006be2 <HAL_RCC_OscConfig+0x386>
 8006c04:	e014      	b.n	8006c30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c06:	f7fd f91d 	bl	8003e44 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fd f919 	bl	8003e44 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0c2      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	4b41      	ldr	r3, [pc, #260]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ee      	bne.n	8006c0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d105      	bne.n	8006c42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c36:	4b3d      	ldr	r3, [pc, #244]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	4a3c      	ldr	r2, [pc, #240]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80ae 	beq.w	8006da8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c4c:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 030c 	and.w	r3, r3, #12
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d06d      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d14b      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c60:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a31      	ldr	r2, [pc, #196]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fd f8ea 	bl	8003e44 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fd f8e6 	bl	8003e44 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e091      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c86:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	019b      	lsls	r3, r3, #6
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	3b01      	subs	r3, #1
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	061b      	lsls	r3, r3, #24
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	071b      	lsls	r3, r3, #28
 8006cbe:	491b      	ldr	r1, [pc, #108]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fd f8b8 	bl	8003e44 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fd f8b4 	bl	8003e44 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e05f      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x47c>
 8006cf6:	e057      	b.n	8006da8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a0b      	ldr	r2, [pc, #44]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fd f89e 	bl	8003e44 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0c:	f7fd f89a 	bl	8003e44 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e045      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <HAL_RCC_OscConfig+0x4d0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x4b0>
 8006d2a:	e03d      	b.n	8006da8 <HAL_RCC_OscConfig+0x54c>
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d34:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <HAL_RCC_OscConfig+0x558>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d030      	beq.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d129      	bne.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d122      	bne.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d64:	4013      	ands	r3, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d119      	bne.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d10f      	bne.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d107      	bne.n	8006da4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d001      	beq.n	8006da8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023800 	.word	0x40023800

08006db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0d0      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b6a      	ldr	r3, [pc, #424]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d910      	bls.n	8006e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b67      	ldr	r3, [pc, #412]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f023 020f 	bic.w	r2, r3, #15
 8006de6:	4965      	ldr	r1, [pc, #404]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b63      	ldr	r3, [pc, #396]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0b8      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d020      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e18:	4b59      	ldr	r3, [pc, #356]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4a58      	ldr	r2, [pc, #352]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e30:	4b53      	ldr	r3, [pc, #332]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4a52      	ldr	r2, [pc, #328]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e3c:	4b50      	ldr	r3, [pc, #320]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	494d      	ldr	r1, [pc, #308]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d040      	beq.n	8006edc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d107      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b47      	ldr	r3, [pc, #284]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d115      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e07f      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7a:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e073      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8a:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06b      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e9a:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f023 0203 	bic.w	r2, r3, #3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4936      	ldr	r1, [pc, #216]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fc ffca 	bl	8003e44 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb2:	e00a      	b.n	8006eca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb4:	f7fc ffc6 	bl	8003e44 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e053      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 020c 	and.w	r2, r3, #12
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1eb      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006edc:	4b27      	ldr	r3, [pc, #156]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d210      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 020f 	bic.w	r2, r3, #15
 8006ef2:	4922      	ldr	r1, [pc, #136]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b20      	ldr	r3, [pc, #128]	; (8006f7c <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d001      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e032      	b.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4916      	ldr	r1, [pc, #88]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	490e      	ldr	r1, [pc, #56]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f4a:	f000 f821 	bl	8006f90 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_RCC_ClockConfig+0x1c8>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490a      	ldr	r1, [pc, #40]	; (8006f84 <HAL_RCC_ClockConfig+0x1cc>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <HAL_RCC_ClockConfig+0x1d0>)
 8006f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <HAL_RCC_ClockConfig+0x1d4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc ff26 	bl	8003dbc <HAL_InitTick>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40023c00 	.word	0x40023c00
 8006f80:	40023800 	.word	0x40023800
 8006f84:	0801d9dc 	.word	0x0801d9dc
 8006f88:	20000044 	.word	0x20000044
 8006f8c:	20000048 	.word	0x20000048

08006f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fa8:	4b67      	ldr	r3, [pc, #412]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 030c 	and.w	r3, r3, #12
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d00d      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	f200 80bd 	bhi.w	8007134 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d003      	beq.n	8006fca <HAL_RCC_GetSysClockFreq+0x3a>
 8006fc2:	e0b7      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fc4:	4b61      	ldr	r3, [pc, #388]	; (800714c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fc6:	60bb      	str	r3, [r7, #8]
      break;
 8006fc8:	e0b7      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fca:	4b61      	ldr	r3, [pc, #388]	; (8007150 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006fcc:	60bb      	str	r3, [r7, #8]
      break;
 8006fce:	e0b4      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd0:	4b5d      	ldr	r3, [pc, #372]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fda:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d04d      	beq.n	8007082 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fe6:	4b58      	ldr	r3, [pc, #352]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	099b      	lsrs	r3, r3, #6
 8006fec:	461a      	mov	r2, r3
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	ea02 0800 	and.w	r8, r2, r0
 8006ffe:	ea03 0901 	and.w	r9, r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	014b      	lsls	r3, r1, #5
 8007010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007014:	0142      	lsls	r2, r0, #5
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	ebb0 0008 	subs.w	r0, r0, r8
 800701e:	eb61 0109 	sbc.w	r1, r1, r9
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	018b      	lsls	r3, r1, #6
 800702c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007030:	0182      	lsls	r2, r0, #6
 8007032:	1a12      	subs	r2, r2, r0
 8007034:	eb63 0301 	sbc.w	r3, r3, r1
 8007038:	f04f 0000 	mov.w	r0, #0
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	00d9      	lsls	r1, r3, #3
 8007042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007046:	00d0      	lsls	r0, r2, #3
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	eb12 0208 	adds.w	r2, r2, r8
 8007050:	eb43 0309 	adc.w	r3, r3, r9
 8007054:	f04f 0000 	mov.w	r0, #0
 8007058:	f04f 0100 	mov.w	r1, #0
 800705c:	0259      	lsls	r1, r3, #9
 800705e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007062:	0250      	lsls	r0, r2, #9
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4610      	mov	r0, r2
 800706a:	4619      	mov	r1, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	461a      	mov	r2, r3
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	f7f9 faf8 	bl	8000668 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4613      	mov	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e04a      	b.n	8007118 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007082:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	461a      	mov	r2, r3
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007092:	f04f 0100 	mov.w	r1, #0
 8007096:	ea02 0400 	and.w	r4, r2, r0
 800709a:	ea03 0501 	and.w	r5, r3, r1
 800709e:	4620      	mov	r0, r4
 80070a0:	4629      	mov	r1, r5
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	014b      	lsls	r3, r1, #5
 80070ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070b0:	0142      	lsls	r2, r0, #5
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	1b00      	subs	r0, r0, r4
 80070b8:	eb61 0105 	sbc.w	r1, r1, r5
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	018b      	lsls	r3, r1, #6
 80070c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070ca:	0182      	lsls	r2, r0, #6
 80070cc:	1a12      	subs	r2, r2, r0
 80070ce:	eb63 0301 	sbc.w	r3, r3, r1
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f04f 0100 	mov.w	r1, #0
 80070da:	00d9      	lsls	r1, r3, #3
 80070dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070e0:	00d0      	lsls	r0, r2, #3
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	1912      	adds	r2, r2, r4
 80070e8:	eb45 0303 	adc.w	r3, r5, r3
 80070ec:	f04f 0000 	mov.w	r0, #0
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	0299      	lsls	r1, r3, #10
 80070f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070fa:	0290      	lsls	r0, r2, #10
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	461a      	mov	r2, r3
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f7f9 faac 	bl	8000668 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4613      	mov	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	3301      	adds	r3, #1
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	60bb      	str	r3, [r7, #8]
      break;
 8007132:	e002      	b.n	800713a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007136:	60bb      	str	r3, [r7, #8]
      break;
 8007138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713a:	68bb      	ldr	r3, [r7, #8]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	00f42400 	.word	0x00f42400
 8007150:	007a1200 	.word	0x007a1200

08007154 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007158:	4b03      	ldr	r3, [pc, #12]	; (8007168 <HAL_RCC_GetHCLKFreq+0x14>)
 800715a:	681b      	ldr	r3, [r3, #0]
}
 800715c:	4618      	mov	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000044 	.word	0x20000044

0800716c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007170:	f7ff fff0 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8007174:	4602      	mov	r2, r0
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	0a9b      	lsrs	r3, r3, #10
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	4903      	ldr	r1, [pc, #12]	; (8007190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007182:	5ccb      	ldrb	r3, [r1, r3]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40023800 	.word	0x40023800
 8007190:	0801d9ec 	.word	0x0801d9ec

08007194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007198:	f7ff ffdc 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0b5b      	lsrs	r3, r3, #13
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4903      	ldr	r1, [pc, #12]	; (80071b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40023800 	.word	0x40023800
 80071b8:	0801d9ec 	.word	0x0801d9ec

080071bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d012      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071e4:	4b69      	ldr	r3, [pc, #420]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4a68      	ldr	r2, [pc, #416]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071ee:	6093      	str	r3, [r2, #8]
 80071f0:	4b66      	ldr	r3, [pc, #408]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	4964      	ldr	r1, [pc, #400]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007206:	2301      	movs	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d017      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007216:	4b5d      	ldr	r3, [pc, #372]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007224:	4959      	ldr	r1, [pc, #356]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007234:	d101      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007242:	2301      	movs	r3, #1
 8007244:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d017      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007252:	4b4e      	ldr	r3, [pc, #312]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	494a      	ldr	r1, [pc, #296]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007270:	d101      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800727e:	2301      	movs	r3, #1
 8007280:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 808b 	beq.w	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072a0:	4b3a      	ldr	r3, [pc, #232]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	4a39      	ldr	r2, [pc, #228]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	6413      	str	r3, [r2, #64]	; 0x40
 80072ac:	4b37      	ldr	r3, [pc, #220]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072b8:	4b35      	ldr	r3, [pc, #212]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a34      	ldr	r2, [pc, #208]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c4:	f7fc fdbe 	bl	8003e44 <HAL_GetTick>
 80072c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072cc:	f7fc fdba 	bl	8003e44 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b64      	cmp	r3, #100	; 0x64
 80072d8:	d901      	bls.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e38f      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072de:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072ea:	4b28      	ldr	r3, [pc, #160]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d035      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d02e      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007310:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007312:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	4a1a      	ldr	r2, [pc, #104]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007328:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800732a:	4a18      	ldr	r2, [pc, #96]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007330:	4b16      	ldr	r3, [pc, #88]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d114      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fc fd82 	bl	8003e44 <HAL_GetTick>
 8007340:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007342:	e00a      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007344:	f7fc fd7e 	bl	8003e44 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007352:	4293      	cmp	r3, r2
 8007354:	d901      	bls.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e351      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0ee      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007372:	d111      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007382:	400b      	ands	r3, r1
 8007384:	4901      	ldr	r1, [pc, #4]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]
 800738a:	e00b      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800738c:	40023800 	.word	0x40023800
 8007390:	40007000 	.word	0x40007000
 8007394:	0ffffcff 	.word	0x0ffffcff
 8007398:	4bb3      	ldr	r3, [pc, #716]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4ab2      	ldr	r2, [pc, #712]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800739e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073a2:	6093      	str	r3, [r2, #8]
 80073a4:	4bb0      	ldr	r3, [pc, #704]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b0:	49ad      	ldr	r1, [pc, #692]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073c2:	4ba9      	ldr	r3, [pc, #676]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c8:	4aa7      	ldr	r2, [pc, #668]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073d2:	4ba5      	ldr	r3, [pc, #660]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	49a2      	ldr	r1, [pc, #648]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073f0:	4b9d      	ldr	r3, [pc, #628]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073fe:	499a      	ldr	r1, [pc, #616]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007412:	4b95      	ldr	r3, [pc, #596]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007420:	4991      	ldr	r1, [pc, #580]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007434:	4b8c      	ldr	r3, [pc, #560]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007442:	4989      	ldr	r1, [pc, #548]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007456:	4b84      	ldr	r3, [pc, #528]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007464:	4980      	ldr	r1, [pc, #512]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007478:	4b7b      	ldr	r3, [pc, #492]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	f023 0203 	bic.w	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	4978      	ldr	r1, [pc, #480]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800749a:	4b73      	ldr	r3, [pc, #460]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a0:	f023 020c 	bic.w	r2, r3, #12
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a8:	496f      	ldr	r1, [pc, #444]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074bc:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ca:	4967      	ldr	r1, [pc, #412]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074de:	4b62      	ldr	r3, [pc, #392]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	495e      	ldr	r1, [pc, #376]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007500:	4b59      	ldr	r3, [pc, #356]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	4956      	ldr	r1, [pc, #344]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007522:	4b51      	ldr	r3, [pc, #324]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007528:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	494d      	ldr	r1, [pc, #308]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00a      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007544:	4b48      	ldr	r3, [pc, #288]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	4945      	ldr	r1, [pc, #276]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007566:	4b40      	ldr	r3, [pc, #256]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007574:	493c      	ldr	r1, [pc, #240]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007576:	4313      	orrs	r3, r2
 8007578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007588:	4b37      	ldr	r3, [pc, #220]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007596:	4934      	ldr	r1, [pc, #208]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d011      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075aa:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b8:	492b      	ldr	r1, [pc, #172]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c8:	d101      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075ca:	2301      	movs	r3, #1
 80075cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075da:	2301      	movs	r3, #1
 80075dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f8:	491b      	ldr	r1, [pc, #108]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800760c:	4b16      	ldr	r3, [pc, #88]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761c:	4912      	ldr	r1, [pc, #72]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007630:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007636:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007640:	4909      	ldr	r1, [pc, #36]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00f      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007654:	4b04      	ldr	r3, [pc, #16]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800765a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	e002      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800
 800766c:	4986      	ldr	r1, [pc, #536]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007680:	4b81      	ldr	r3, [pc, #516]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007686:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007690:	497d      	ldr	r1, [pc, #500]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d006      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80d6 	beq.w	8007858 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076ac:	4b76      	ldr	r3, [pc, #472]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a75      	ldr	r2, [pc, #468]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fc fbc4 	bl	8003e44 <HAL_GetTick>
 80076bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076c0:	f7fc fbc0 	bl	8003e44 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e195      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076d2:	4b6d      	ldr	r3, [pc, #436]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d021      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d11d      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076f2:	4b65      	ldr	r3, [pc, #404]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007700:	4b61      	ldr	r3, [pc, #388]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	019a      	lsls	r2, r3, #6
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	4958      	ldr	r1, [pc, #352]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007742:	d00a      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02e      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007758:	d129      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800775a:	4b4b      	ldr	r3, [pc, #300]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800775c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007760:	0c1b      	lsrs	r3, r3, #16
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007768:	4b47      	ldr	r3, [pc, #284]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	019a      	lsls	r2, r3, #6
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	061b      	lsls	r3, r3, #24
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	071b      	lsls	r3, r3, #28
 800778e:	493e      	ldr	r1, [pc, #248]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007796:	4b3c      	ldr	r3, [pc, #240]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800779c:	f023 021f 	bic.w	r2, r3, #31
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4938      	ldr	r1, [pc, #224]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01d      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077ba:	4b33      	ldr	r3, [pc, #204]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c0:	0e1b      	lsrs	r3, r3, #24
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077c8:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ce:	0f1b      	lsrs	r3, r3, #28
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	019a      	lsls	r2, r3, #6
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	041b      	lsls	r3, r3, #16
 80077e2:	431a      	orrs	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	061b      	lsls	r3, r3, #24
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	071b      	lsls	r3, r3, #28
 80077ee:	4926      	ldr	r1, [pc, #152]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d011      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	019a      	lsls	r2, r3, #6
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	061b      	lsls	r3, r3, #24
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	071b      	lsls	r3, r3, #28
 800781e:	491a      	ldr	r1, [pc, #104]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007820:	4313      	orrs	r3, r2
 8007822:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a17      	ldr	r2, [pc, #92]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800782c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007832:	f7fc fb07 	bl	8003e44 <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007838:	e008      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800783a:	f7fc fb03 	bl	8003e44 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b64      	cmp	r3, #100	; 0x64
 8007846:	d901      	bls.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e0d8      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0f0      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b01      	cmp	r3, #1
 800785c:	f040 80ce 	bne.w	80079fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007860:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a08      	ldr	r2, [pc, #32]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800786a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786c:	f7fc faea 	bl	8003e44 <HAL_GetTick>
 8007870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007872:	e00b      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007874:	f7fc fae6 	bl	8003e44 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b64      	cmp	r3, #100	; 0x64
 8007880:	d904      	bls.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e0bb      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007886:	bf00      	nop
 8007888:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800788c:	4b5e      	ldr	r3, [pc, #376]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007898:	d0ec      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02e      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d12a      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078c2:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078d0:	4b4d      	ldr	r3, [pc, #308]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d6:	0f1b      	lsrs	r3, r3, #28
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	019a      	lsls	r2, r3, #6
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	061b      	lsls	r3, r3, #24
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	071b      	lsls	r3, r3, #28
 80078f6:	4944      	ldr	r1, [pc, #272]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078fe:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007904:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	493d      	ldr	r1, [pc, #244]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d022      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800792c:	d11d      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800792e:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007934:	0e1b      	lsrs	r3, r3, #24
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800793c:	4b32      	ldr	r3, [pc, #200]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007942:	0f1b      	lsrs	r3, r3, #28
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	019a      	lsls	r2, r3, #6
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	041b      	lsls	r3, r3, #16
 8007956:	431a      	orrs	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	071b      	lsls	r3, r3, #28
 8007962:	4929      	ldr	r1, [pc, #164]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d028      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797c:	0e1b      	lsrs	r3, r3, #24
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	019a      	lsls	r2, r3, #6
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	431a      	orrs	r2, r3
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	071b      	lsls	r3, r3, #28
 80079aa:	4917      	ldr	r1, [pc, #92]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4911      	ldr	r1, [pc, #68]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d4:	f7fc fa36 	bl	8003e44 <HAL_GetTick>
 80079d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079da:	e008      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079dc:	f7fc fa32 	bl	8003e44 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b64      	cmp	r3, #100	; 0x64
 80079e8:	d901      	bls.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e007      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fa:	d1ef      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023800 	.word	0x40023800

08007a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e049      	b.n	8007ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fb fe74 	bl	8003720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f000 fd3a 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d001      	beq.n	8007ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e054      	b.n	8007b7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d022      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d01d      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a22      	ldr	r2, [pc, #136]	; (8007b90 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d018      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00e      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <HAL_TIM_Base_Start_IT+0xe0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d009      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x80>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d115      	bne.n	8007b68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <HAL_TIM_Base_Start_IT+0xec>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b06      	cmp	r3, #6
 8007b4c:	d015      	beq.n	8007b7a <HAL_TIM_Base_Start_IT+0xbe>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b54:	d011      	beq.n	8007b7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	e008      	b.n	8007b7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e000      	b.n	8007b7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40000400 	.word	0x40000400
 8007b94:	40000800 	.word	0x40000800
 8007b98:	40000c00 	.word	0x40000c00
 8007b9c:	40010400 	.word	0x40010400
 8007ba0:	40014000 	.word	0x40014000
 8007ba4:	40001800 	.word	0x40001800
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e049      	b.n	8007c52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f841 	bl	8007c5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f000 fc6a 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <HAL_TIM_PWM_Start+0x24>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	bf14      	ite	ne
 8007c8c:	2301      	movne	r3, #1
 8007c8e:	2300      	moveq	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	e03c      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d109      	bne.n	8007cae <HAL_TIM_PWM_Start+0x3e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	bf14      	ite	ne
 8007ca6:	2301      	movne	r3, #1
 8007ca8:	2300      	moveq	r3, #0
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	e02f      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d109      	bne.n	8007cc8 <HAL_TIM_PWM_Start+0x58>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	bf14      	ite	ne
 8007cc0:	2301      	movne	r3, #1
 8007cc2:	2300      	moveq	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	e022      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b0c      	cmp	r3, #12
 8007ccc:	d109      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0x72>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	e015      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d109      	bne.n	8007cfc <HAL_TIM_PWM_Start+0x8c>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	bf14      	ite	ne
 8007cf4:	2301      	movne	r3, #1
 8007cf6:	2300      	moveq	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e008      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e092      	b.n	8007e3c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xb6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d24:	e023      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xc6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d34:	e01b      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xd6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d44:	e013      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0xe6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d54:	e00b      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start+0xf6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d64:	e003      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2201      	movs	r2, #1
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 ff3c 	bl	8008bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a30      	ldr	r2, [pc, #192]	; (8007e44 <HAL_TIM_PWM_Start+0x1d4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIM_PWM_Start+0x120>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2f      	ldr	r2, [pc, #188]	; (8007e48 <HAL_TIM_PWM_Start+0x1d8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIM_PWM_Start+0x124>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_TIM_PWM_Start+0x126>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <HAL_TIM_PWM_Start+0x1d4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d01d      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a22      	ldr	r2, [pc, #136]	; (8007e4c <HAL_TIM_PWM_Start+0x1dc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <HAL_TIM_PWM_Start+0x1e0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1f      	ldr	r2, [pc, #124]	; (8007e54 <HAL_TIM_PWM_Start+0x1e4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a19      	ldr	r2, [pc, #100]	; (8007e48 <HAL_TIM_PWM_Start+0x1d8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1b      	ldr	r2, [pc, #108]	; (8007e58 <HAL_TIM_PWM_Start+0x1e8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x18a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a19      	ldr	r2, [pc, #100]	; (8007e5c <HAL_TIM_PWM_Start+0x1ec>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d115      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	4b17      	ldr	r3, [pc, #92]	; (8007e60 <HAL_TIM_PWM_Start+0x1f0>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	d015      	beq.n	8007e38 <HAL_TIM_PWM_Start+0x1c8>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e12:	d011      	beq.n	8007e38 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e24:	e008      	b.n	8007e38 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0201 	orr.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e000      	b.n	8007e3a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40001800 	.word	0x40001800
 8007e60:	00010007 	.word	0x00010007

08007e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d122      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d11b      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0202 	mvn.w	r2, #2
 8007e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 faee 	bl	8008488 <HAL_TIM_IC_CaptureCallback>
 8007eac:	e005      	b.n	8007eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fae0 	bl	8008474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 faf1 	bl	800849c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d122      	bne.n	8007f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d11b      	bne.n	8007f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0204 	mvn.w	r2, #4
 8007ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fac4 	bl	8008488 <HAL_TIM_IC_CaptureCallback>
 8007f00:	e005      	b.n	8007f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fab6 	bl	8008474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fac7 	bl	800849c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d122      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0308 	and.w	r3, r3, #8
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d11b      	bne.n	8007f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0208 	mvn.w	r2, #8
 8007f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa9a 	bl	8008488 <HAL_TIM_IC_CaptureCallback>
 8007f54:	e005      	b.n	8007f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa8c 	bl	8008474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fa9d 	bl	800849c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0310 	and.w	r3, r3, #16
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d122      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d11b      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0210 	mvn.w	r2, #16
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2208      	movs	r2, #8
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa70 	bl	8008488 <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa62 	bl	8008474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa73 	bl	800849c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d107      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0201 	mvn.w	r2, #1
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa3c 	bl	8008460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d10e      	bne.n	8008014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d107      	bne.n	8008014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800800c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 feae 	bl	8008d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008022:	d10e      	bne.n	8008042 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d107      	bne.n	8008042 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800803a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fea1 	bl	8008d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	2b40      	cmp	r3, #64	; 0x40
 800804e:	d10e      	bne.n	800806e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d107      	bne.n	800806e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fa21 	bl	80084b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b20      	cmp	r3, #32
 800807a:	d10e      	bne.n	800809a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b20      	cmp	r3, #32
 8008088:	d107      	bne.n	800809a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f06f 0220 	mvn.w	r2, #32
 8008092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fe61 	bl	8008d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080be:	2302      	movs	r3, #2
 80080c0:	e0ff      	b.n	80082c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b14      	cmp	r3, #20
 80080ce:	f200 80f0 	bhi.w	80082b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	080082b3 	.word	0x080082b3
 80080e0:	080082b3 	.word	0x080082b3
 80080e4:	080082b3 	.word	0x080082b3
 80080e8:	0800816d 	.word	0x0800816d
 80080ec:	080082b3 	.word	0x080082b3
 80080f0:	080082b3 	.word	0x080082b3
 80080f4:	080082b3 	.word	0x080082b3
 80080f8:	080081af 	.word	0x080081af
 80080fc:	080082b3 	.word	0x080082b3
 8008100:	080082b3 	.word	0x080082b3
 8008104:	080082b3 	.word	0x080082b3
 8008108:	080081ef 	.word	0x080081ef
 800810c:	080082b3 	.word	0x080082b3
 8008110:	080082b3 	.word	0x080082b3
 8008114:	080082b3 	.word	0x080082b3
 8008118:	08008231 	.word	0x08008231
 800811c:	080082b3 	.word	0x080082b3
 8008120:	080082b3 	.word	0x080082b3
 8008124:	080082b3 	.word	0x080082b3
 8008128:	08008271 	.word	0x08008271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fa66 	bl	8008604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0208 	orr.w	r2, r2, #8
 8008146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0204 	bic.w	r2, r2, #4
 8008156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6999      	ldr	r1, [r3, #24]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	619a      	str	r2, [r3, #24]
      break;
 800816a:	e0a5      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fab8 	bl	80086e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6999      	ldr	r1, [r3, #24]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	021a      	lsls	r2, r3, #8
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	619a      	str	r2, [r3, #24]
      break;
 80081ac:	e084      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fb0f 	bl	80087d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69da      	ldr	r2, [r3, #28]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0208 	orr.w	r2, r2, #8
 80081c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0204 	bic.w	r2, r2, #4
 80081d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69d9      	ldr	r1, [r3, #28]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	61da      	str	r2, [r3, #28]
      break;
 80081ec:	e064      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fb65 	bl	80088c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69d9      	ldr	r1, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	021a      	lsls	r2, r3, #8
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	61da      	str	r2, [r3, #28]
      break;
 800822e:	e043      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fb9c 	bl	8008974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0208 	orr.w	r2, r2, #8
 800824a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0204 	bic.w	r2, r2, #4
 800825a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800826e:	e023      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fbce 	bl	8008a18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800828a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	021a      	lsls	r2, r3, #8
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082b0:	e002      	b.n	80082b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	75fb      	strb	r3, [r7, #23]
      break;
 80082b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop

080082cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0b4      	b.n	8008452 <HAL_TIM_ConfigClockSource+0x186>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	4b56      	ldr	r3, [pc, #344]	; (800845c <HAL_TIM_ConfigClockSource+0x190>)
 8008304:	4013      	ands	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800830e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008320:	d03e      	beq.n	80083a0 <HAL_TIM_ConfigClockSource+0xd4>
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008326:	f200 8087 	bhi.w	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	f000 8086 	beq.w	800843e <HAL_TIM_ConfigClockSource+0x172>
 8008332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008336:	d87f      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008338:	2b70      	cmp	r3, #112	; 0x70
 800833a:	d01a      	beq.n	8008372 <HAL_TIM_ConfigClockSource+0xa6>
 800833c:	2b70      	cmp	r3, #112	; 0x70
 800833e:	d87b      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008340:	2b60      	cmp	r3, #96	; 0x60
 8008342:	d050      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x11a>
 8008344:	2b60      	cmp	r3, #96	; 0x60
 8008346:	d877      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008348:	2b50      	cmp	r3, #80	; 0x50
 800834a:	d03c      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0xfa>
 800834c:	2b50      	cmp	r3, #80	; 0x50
 800834e:	d873      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008350:	2b40      	cmp	r3, #64	; 0x40
 8008352:	d058      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0x13a>
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d86f      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008358:	2b30      	cmp	r3, #48	; 0x30
 800835a:	d064      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 800835c:	2b30      	cmp	r3, #48	; 0x30
 800835e:	d86b      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008360:	2b20      	cmp	r3, #32
 8008362:	d060      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d867      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d05c      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 800836c:	2b10      	cmp	r3, #16
 800836e:	d05a      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0x15a>
 8008370:	e062      	b.n	8008438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6899      	ldr	r1, [r3, #8]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f000 fc17 	bl	8008bb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	609a      	str	r2, [r3, #8]
      break;
 800839e:	e04f      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	6899      	ldr	r1, [r3, #8]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f000 fc00 	bl	8008bb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083c2:	609a      	str	r2, [r3, #8]
      break;
 80083c4:	e03c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f000 fb74 	bl	8008ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2150      	movs	r1, #80	; 0x50
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fbcd 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 80083e4:	e02c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6859      	ldr	r1, [r3, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f000 fb93 	bl	8008b1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2160      	movs	r1, #96	; 0x60
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fbbd 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 8008404:	e01c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6859      	ldr	r1, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	461a      	mov	r2, r3
 8008414:	f000 fb54 	bl	8008ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2140      	movs	r1, #64	; 0x40
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fbad 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 8008424:	e00c      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f000 fba4 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 8008436:	e003      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
      break;
 800843c:	e000      	b.n	8008440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800843e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	fffeff88 	.word	0xfffeff88

08008460 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a40      	ldr	r2, [pc, #256]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e2:	d00f      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a3d      	ldr	r2, [pc, #244]	; (80085dc <TIM_Base_SetConfig+0x118>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00b      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a3c      	ldr	r2, [pc, #240]	; (80085e0 <TIM_Base_SetConfig+0x11c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a3b      	ldr	r2, [pc, #236]	; (80085e4 <TIM_Base_SetConfig+0x120>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a3a      	ldr	r2, [pc, #232]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d108      	bne.n	8008516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a2f      	ldr	r2, [pc, #188]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d02b      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008524:	d027      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a2c      	ldr	r2, [pc, #176]	; (80085dc <TIM_Base_SetConfig+0x118>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d023      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a2b      	ldr	r2, [pc, #172]	; (80085e0 <TIM_Base_SetConfig+0x11c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01f      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2a      	ldr	r2, [pc, #168]	; (80085e4 <TIM_Base_SetConfig+0x120>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01b      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a29      	ldr	r2, [pc, #164]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d017      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a28      	ldr	r2, [pc, #160]	; (80085ec <TIM_Base_SetConfig+0x128>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d013      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a27      	ldr	r2, [pc, #156]	; (80085f0 <TIM_Base_SetConfig+0x12c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00f      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <TIM_Base_SetConfig+0x130>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00b      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a25      	ldr	r2, [pc, #148]	; (80085f8 <TIM_Base_SetConfig+0x134>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d007      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a24      	ldr	r2, [pc, #144]	; (80085fc <TIM_Base_SetConfig+0x138>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d003      	beq.n	8008576 <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a23      	ldr	r2, [pc, #140]	; (8008600 <TIM_Base_SetConfig+0x13c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d108      	bne.n	8008588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a0a      	ldr	r2, [pc, #40]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_Base_SetConfig+0xf8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d103      	bne.n	80085c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	615a      	str	r2, [r3, #20]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800
 80085f8:	40001800 	.word	0x40001800
 80085fc:	40001c00 	.word	0x40001c00
 8008600:	40002000 	.word	0x40002000

08008604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0201 	bic.w	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <TIM_OC1_SetConfig+0xd8>)
 8008630:	4013      	ands	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f023 0302 	bic.w	r3, r3, #2
 800864c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <TIM_OC1_SetConfig+0xdc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_OC1_SetConfig+0x64>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a20      	ldr	r2, [pc, #128]	; (80086e4 <TIM_OC1_SetConfig+0xe0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d10c      	bne.n	8008682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f023 0308 	bic.w	r3, r3, #8
 800866e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 0304 	bic.w	r3, r3, #4
 8008680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a16      	ldr	r2, [pc, #88]	; (80086e0 <TIM_OC1_SetConfig+0xdc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_OC1_SetConfig+0x8e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a15      	ldr	r2, [pc, #84]	; (80086e4 <TIM_OC1_SetConfig+0xe0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d111      	bne.n	80086b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	621a      	str	r2, [r3, #32]
}
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	fffeff8f 	.word	0xfffeff8f
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40010400 	.word	0x40010400

080086e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f023 0210 	bic.w	r2, r3, #16
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4b2e      	ldr	r3, [pc, #184]	; (80087cc <TIM_OC2_SetConfig+0xe4>)
 8008714:	4013      	ands	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800871e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0320 	bic.w	r3, r3, #32
 8008732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a23      	ldr	r2, [pc, #140]	; (80087d0 <TIM_OC2_SetConfig+0xe8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_OC2_SetConfig+0x68>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a22      	ldr	r2, [pc, #136]	; (80087d4 <TIM_OC2_SetConfig+0xec>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10d      	bne.n	800876c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4313      	orrs	r3, r2
 8008762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <TIM_OC2_SetConfig+0xe8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <TIM_OC2_SetConfig+0x94>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a17      	ldr	r2, [pc, #92]	; (80087d4 <TIM_OC2_SetConfig+0xec>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d113      	bne.n	80087a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4313      	orrs	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	feff8fff 	.word	0xfeff8fff
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40010400 	.word	0x40010400

080087d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4b2d      	ldr	r3, [pc, #180]	; (80088b8 <TIM_OC3_SetConfig+0xe0>)
 8008804:	4013      	ands	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0303 	bic.w	r3, r3, #3
 800880e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	021b      	lsls	r3, r3, #8
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a22      	ldr	r2, [pc, #136]	; (80088bc <TIM_OC3_SetConfig+0xe4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d003      	beq.n	800883e <TIM_OC3_SetConfig+0x66>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <TIM_OC3_SetConfig+0xe8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d10d      	bne.n	800885a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a17      	ldr	r2, [pc, #92]	; (80088bc <TIM_OC3_SetConfig+0xe4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_OC3_SetConfig+0x92>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <TIM_OC3_SetConfig+0xe8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d113      	bne.n	8008892 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	fffeff8f 	.word	0xfffeff8f
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400

080088c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <TIM_OC4_SetConfig+0xa4>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4313      	orrs	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800890e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a13      	ldr	r2, [pc, #76]	; (800896c <TIM_OC4_SetConfig+0xa8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC4_SetConfig+0x68>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a12      	ldr	r2, [pc, #72]	; (8008970 <TIM_OC4_SetConfig+0xac>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d109      	bne.n	8008940 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	019b      	lsls	r3, r3, #6
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	feff8fff 	.word	0xfeff8fff
 800896c:	40010000 	.word	0x40010000
 8008970:	40010400 	.word	0x40010400

08008974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <TIM_OC5_SetConfig+0x98>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a12      	ldr	r2, [pc, #72]	; (8008a10 <TIM_OC5_SetConfig+0x9c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC5_SetConfig+0x5e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a11      	ldr	r2, [pc, #68]	; (8008a14 <TIM_OC5_SetConfig+0xa0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d109      	bne.n	80089e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	621a      	str	r2, [r3, #32]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	fffeff8f 	.word	0xfffeff8f
 8008a10:	40010000 	.word	0x40010000
 8008a14:	40010400 	.word	0x40010400

08008a18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <TIM_OC6_SetConfig+0x9c>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	051b      	lsls	r3, r3, #20
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <TIM_OC6_SetConfig+0xa0>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_OC6_SetConfig+0x60>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a12      	ldr	r2, [pc, #72]	; (8008abc <TIM_OC6_SetConfig+0xa4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d109      	bne.n	8008a8c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	029b      	lsls	r3, r3, #10
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	feff8fff 	.word	0xfeff8fff
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40010400 	.word	0x40010400

08008ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f023 0201 	bic.w	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f023 030a 	bic.w	r3, r3, #10
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f023 0210 	bic.w	r2, r3, #16
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	031b      	lsls	r3, r3, #12
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f043 0307 	orr.w	r3, r3, #7
 8008ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	609a      	str	r2, [r3, #8]
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	021a      	lsls	r2, r3, #8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	609a      	str	r2, [r3, #8]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2201      	movs	r2, #1
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a1a      	ldr	r2, [r3, #32]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	43db      	mvns	r3, r3
 8008c16:	401a      	ands	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1a      	ldr	r2, [r3, #32]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 031f 	and.w	r3, r3, #31
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e06d      	b.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a30      	ldr	r2, [pc, #192]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d004      	beq.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a2f      	ldr	r2, [pc, #188]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d108      	bne.n	8008c9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d022      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cca:	d01d      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1d      	ldr	r2, [pc, #116]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d018      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d013      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a1a      	ldr	r2, [pc, #104]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00e      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a15      	ldr	r2, [pc, #84]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d009      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d004      	beq.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d10c      	bne.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	40010000 	.word	0x40010000
 8008d44:	40010400 	.word	0x40010400
 8008d48:	40000400 	.word	0x40000400
 8008d4c:	40000800 	.word	0x40000800
 8008d50:	40000c00 	.word	0x40000c00
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40001800 	.word	0x40001800

08008d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e040      	b.n	8008e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fa fd3a 	bl	8003834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2224      	movs	r2, #36	; 0x24
 8008dc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0201 	bic.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fbca 	bl	8009570 <UART_SetConfig>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e022      	b.n	8008e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fe20 	bl	8009a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0201 	orr.w	r2, r2, #1
 8008e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fea7 	bl	8009b78 <UART_CheckIdleState>
 8008e2a:	4603      	mov	r3, r0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08a      	sub	sp, #40	; 0x28
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	f040 8081 	bne.w	8008f50 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_UART_Transmit+0x26>
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e079      	b.n	8008f52 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Transmit+0x38>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e072      	b.n	8008f52 <HAL_UART_Transmit+0x11e>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2221      	movs	r2, #33	; 0x21
 8008e80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e82:	f7fa ffdf 	bl	8003e44 <HAL_GetTick>
 8008e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	88fa      	ldrh	r2, [r7, #6]
 8008e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea0:	d108      	bne.n	8008eb4 <HAL_UART_Transmit+0x80>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	e003      	b.n	8008ebc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008ec4:	e02c      	b.n	8008f20 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2180      	movs	r1, #128	; 0x80
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fe9a 	bl	8009c0a <UART_WaitOnFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e038      	b.n	8008f52 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ef4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	3302      	adds	r3, #2
 8008efa:	61bb      	str	r3, [r7, #24]
 8008efc:	e007      	b.n	8008f0e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1cc      	bne.n	8008ec6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	2140      	movs	r1, #64	; 0x40
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 fe67 	bl	8009c0a <UART_WaitOnFlagUntilTimeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e005      	b.n	8008f52 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e000      	b.n	8008f52 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008f50:	2302      	movs	r3, #2
  }
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b0ba      	sub	sp, #232	; 0xe8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f86:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d115      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00f      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d009      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 82a4 	beq.w	8009502 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	4798      	blx	r3
      }
      return;
 8008fc2:	e29e      	b.n	8009502 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8117 	beq.w	80091fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008fda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008fde:	4b85      	ldr	r3, [pc, #532]	; (80091f4 <HAL_UART_IRQHandler+0x298>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 810a 	beq.w	80091fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d011      	beq.n	8009018 <HAL_UART_IRQHandler+0xbc>
 8008ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800900e:	f043 0201 	orr.w	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d011      	beq.n	8009048 <HAL_UART_IRQHandler+0xec>
 8009024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2202      	movs	r2, #2
 8009036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800903e:	f043 0204 	orr.w	r2, r3, #4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d011      	beq.n	8009078 <HAL_UART_IRQHandler+0x11c>
 8009054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2204      	movs	r2, #4
 8009066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800906e:	f043 0202 	orr.w	r2, r3, #2
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d017      	beq.n	80090b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d105      	bne.n	800909c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009094:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2208      	movs	r2, #8
 80090a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090aa:	f043 0208 	orr.w	r2, r3, #8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <HAL_UART_IRQHandler+0x18a>
 80090c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00c      	beq.n	80090e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090dc:	f043 0220 	orr.w	r2, r3, #32
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 820a 	beq.w	8009506 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80090f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d005      	beq.n	800913e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009136:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800913a:	2b00      	cmp	r3, #0
 800913c:	d04f      	beq.n	80091de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fe27 	bl	8009d92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d141      	bne.n	80091d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800916c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800917e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800918a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1d9      	bne.n	8009152 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d013      	beq.n	80091ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091aa:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <HAL_UART_IRQHandler+0x29c>)
 80091ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fa fff7 	bl	80041a6 <HAL_DMA_Abort_IT>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d017      	beq.n	80091ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091cc:	e00f      	b.n	80091ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f9ae 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d4:	e00b      	b.n	80091ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f9aa 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	e007      	b.n	80091ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f9a6 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80091ec:	e18b      	b.n	8009506 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ee:	bf00      	nop
    return;
 80091f0:	e189      	b.n	8009506 <HAL_UART_IRQHandler+0x5aa>
 80091f2:	bf00      	nop
 80091f4:	04000120 	.word	0x04000120
 80091f8:	08009e59 	.word	0x08009e59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009200:	2b01      	cmp	r3, #1
 8009202:	f040 8144 	bne.w	800948e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 813d 	beq.w	800948e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8136 	beq.w	800948e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2210      	movs	r2, #16
 8009228:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009234:	2b40      	cmp	r3, #64	; 0x40
 8009236:	f040 80b2 	bne.w	800939e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009246:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 815d 	beq.w	800950a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800925a:	429a      	cmp	r2, r3
 800925c:	f080 8155 	bcs.w	800950a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009274:	f000 8085 	beq.w	8009382 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800928c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1da      	bne.n	8009278 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e1      	bne.n	80092c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800930e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e3      	bne.n	80092fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009352:	f023 0310 	bic.w	r3, r3, #16
 8009356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009364:	65bb      	str	r3, [r7, #88]	; 0x58
 8009366:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800936a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e4      	bne.n	8009342 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fea2 	bl	80040c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800938e:	b29b      	uxth	r3, r3
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	b29b      	uxth	r3, r3
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8d4 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800939c:	e0b5      	b.n	800950a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 80a7 	beq.w	800950e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80093c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 80a2 	beq.w	800950e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093ec:	647b      	str	r3, [r7, #68]	; 0x44
 80093ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e4      	bne.n	80093ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3308      	adds	r3, #8
 8009406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	623b      	str	r3, [r7, #32]
   return(result);
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009424:	633a      	str	r2, [r7, #48]	; 0x30
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800942a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e3      	bne.n	8009400 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	60fb      	str	r3, [r7, #12]
   return(result);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0310 	bic.w	r3, r3, #16
 800945e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	69b9      	ldr	r1, [r7, #24]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	617b      	str	r3, [r7, #20]
   return(result);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e4      	bne.n	800944a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f85c 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800948c:	e03f      	b.n	800950e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <HAL_UART_IRQHandler+0x55c>
 800949a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800949e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80094ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f853 	bl	800955c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094b6:	e02d      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00e      	beq.n	80094e2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01c      	beq.n	8009512 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
    }
    return;
 80094e0:	e017      	b.n	8009512 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d012      	beq.n	8009514 <HAL_UART_IRQHandler+0x5b8>
 80094ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00c      	beq.n	8009514 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcc2 	bl	8009e84 <UART_EndTransmit_IT>
    return;
 8009500:	e008      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
      return;
 8009502:	bf00      	nop
 8009504:	e006      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
    return;
 8009506:	bf00      	nop
 8009508:	e004      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
      return;
 800950a:	bf00      	nop
 800950c:	e002      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
      return;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <HAL_UART_IRQHandler+0x5b8>
    return;
 8009512:	bf00      	nop
  }

}
 8009514:	37e8      	adds	r7, #232	; 0xe8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop

0800951c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4ba7      	ldr	r3, [pc, #668]	; (8009838 <UART_SetConfig+0x2c8>)
 800959c:	4013      	ands	r3, r2
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	6979      	ldr	r1, [r7, #20]
 80095a4:	430b      	orrs	r3, r1
 80095a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	430a      	orrs	r2, r1
 80095e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a95      	ldr	r2, [pc, #596]	; (800983c <UART_SetConfig+0x2cc>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d120      	bne.n	800962e <UART_SetConfig+0xbe>
 80095ec:	4b94      	ldr	r3, [pc, #592]	; (8009840 <UART_SetConfig+0x2d0>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d816      	bhi.n	8009628 <UART_SetConfig+0xb8>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <UART_SetConfig+0x90>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	0800961d 	.word	0x0800961d
 8009608:	08009617 	.word	0x08009617
 800960c:	08009623 	.word	0x08009623
 8009610:	2301      	movs	r3, #1
 8009612:	77fb      	strb	r3, [r7, #31]
 8009614:	e14f      	b.n	80098b6 <UART_SetConfig+0x346>
 8009616:	2302      	movs	r3, #2
 8009618:	77fb      	strb	r3, [r7, #31]
 800961a:	e14c      	b.n	80098b6 <UART_SetConfig+0x346>
 800961c:	2304      	movs	r3, #4
 800961e:	77fb      	strb	r3, [r7, #31]
 8009620:	e149      	b.n	80098b6 <UART_SetConfig+0x346>
 8009622:	2308      	movs	r3, #8
 8009624:	77fb      	strb	r3, [r7, #31]
 8009626:	e146      	b.n	80098b6 <UART_SetConfig+0x346>
 8009628:	2310      	movs	r3, #16
 800962a:	77fb      	strb	r3, [r7, #31]
 800962c:	e143      	b.n	80098b6 <UART_SetConfig+0x346>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a84      	ldr	r2, [pc, #528]	; (8009844 <UART_SetConfig+0x2d4>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d132      	bne.n	800969e <UART_SetConfig+0x12e>
 8009638:	4b81      	ldr	r3, [pc, #516]	; (8009840 <UART_SetConfig+0x2d0>)
 800963a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800963e:	f003 030c 	and.w	r3, r3, #12
 8009642:	2b0c      	cmp	r3, #12
 8009644:	d828      	bhi.n	8009698 <UART_SetConfig+0x128>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <UART_SetConfig+0xdc>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	08009681 	.word	0x08009681
 8009650:	08009699 	.word	0x08009699
 8009654:	08009699 	.word	0x08009699
 8009658:	08009699 	.word	0x08009699
 800965c:	0800968d 	.word	0x0800968d
 8009660:	08009699 	.word	0x08009699
 8009664:	08009699 	.word	0x08009699
 8009668:	08009699 	.word	0x08009699
 800966c:	08009687 	.word	0x08009687
 8009670:	08009699 	.word	0x08009699
 8009674:	08009699 	.word	0x08009699
 8009678:	08009699 	.word	0x08009699
 800967c:	08009693 	.word	0x08009693
 8009680:	2300      	movs	r3, #0
 8009682:	77fb      	strb	r3, [r7, #31]
 8009684:	e117      	b.n	80098b6 <UART_SetConfig+0x346>
 8009686:	2302      	movs	r3, #2
 8009688:	77fb      	strb	r3, [r7, #31]
 800968a:	e114      	b.n	80098b6 <UART_SetConfig+0x346>
 800968c:	2304      	movs	r3, #4
 800968e:	77fb      	strb	r3, [r7, #31]
 8009690:	e111      	b.n	80098b6 <UART_SetConfig+0x346>
 8009692:	2308      	movs	r3, #8
 8009694:	77fb      	strb	r3, [r7, #31]
 8009696:	e10e      	b.n	80098b6 <UART_SetConfig+0x346>
 8009698:	2310      	movs	r3, #16
 800969a:	77fb      	strb	r3, [r7, #31]
 800969c:	e10b      	b.n	80098b6 <UART_SetConfig+0x346>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a69      	ldr	r2, [pc, #420]	; (8009848 <UART_SetConfig+0x2d8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d120      	bne.n	80096ea <UART_SetConfig+0x17a>
 80096a8:	4b65      	ldr	r3, [pc, #404]	; (8009840 <UART_SetConfig+0x2d0>)
 80096aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096b2:	2b30      	cmp	r3, #48	; 0x30
 80096b4:	d013      	beq.n	80096de <UART_SetConfig+0x16e>
 80096b6:	2b30      	cmp	r3, #48	; 0x30
 80096b8:	d814      	bhi.n	80096e4 <UART_SetConfig+0x174>
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	d009      	beq.n	80096d2 <UART_SetConfig+0x162>
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d810      	bhi.n	80096e4 <UART_SetConfig+0x174>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <UART_SetConfig+0x15c>
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d006      	beq.n	80096d8 <UART_SetConfig+0x168>
 80096ca:	e00b      	b.n	80096e4 <UART_SetConfig+0x174>
 80096cc:	2300      	movs	r3, #0
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e0f1      	b.n	80098b6 <UART_SetConfig+0x346>
 80096d2:	2302      	movs	r3, #2
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e0ee      	b.n	80098b6 <UART_SetConfig+0x346>
 80096d8:	2304      	movs	r3, #4
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e0eb      	b.n	80098b6 <UART_SetConfig+0x346>
 80096de:	2308      	movs	r3, #8
 80096e0:	77fb      	strb	r3, [r7, #31]
 80096e2:	e0e8      	b.n	80098b6 <UART_SetConfig+0x346>
 80096e4:	2310      	movs	r3, #16
 80096e6:	77fb      	strb	r3, [r7, #31]
 80096e8:	e0e5      	b.n	80098b6 <UART_SetConfig+0x346>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a57      	ldr	r2, [pc, #348]	; (800984c <UART_SetConfig+0x2dc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d120      	bne.n	8009736 <UART_SetConfig+0x1c6>
 80096f4:	4b52      	ldr	r3, [pc, #328]	; (8009840 <UART_SetConfig+0x2d0>)
 80096f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009700:	d013      	beq.n	800972a <UART_SetConfig+0x1ba>
 8009702:	2bc0      	cmp	r3, #192	; 0xc0
 8009704:	d814      	bhi.n	8009730 <UART_SetConfig+0x1c0>
 8009706:	2b80      	cmp	r3, #128	; 0x80
 8009708:	d009      	beq.n	800971e <UART_SetConfig+0x1ae>
 800970a:	2b80      	cmp	r3, #128	; 0x80
 800970c:	d810      	bhi.n	8009730 <UART_SetConfig+0x1c0>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <UART_SetConfig+0x1a8>
 8009712:	2b40      	cmp	r3, #64	; 0x40
 8009714:	d006      	beq.n	8009724 <UART_SetConfig+0x1b4>
 8009716:	e00b      	b.n	8009730 <UART_SetConfig+0x1c0>
 8009718:	2300      	movs	r3, #0
 800971a:	77fb      	strb	r3, [r7, #31]
 800971c:	e0cb      	b.n	80098b6 <UART_SetConfig+0x346>
 800971e:	2302      	movs	r3, #2
 8009720:	77fb      	strb	r3, [r7, #31]
 8009722:	e0c8      	b.n	80098b6 <UART_SetConfig+0x346>
 8009724:	2304      	movs	r3, #4
 8009726:	77fb      	strb	r3, [r7, #31]
 8009728:	e0c5      	b.n	80098b6 <UART_SetConfig+0x346>
 800972a:	2308      	movs	r3, #8
 800972c:	77fb      	strb	r3, [r7, #31]
 800972e:	e0c2      	b.n	80098b6 <UART_SetConfig+0x346>
 8009730:	2310      	movs	r3, #16
 8009732:	77fb      	strb	r3, [r7, #31]
 8009734:	e0bf      	b.n	80098b6 <UART_SetConfig+0x346>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a45      	ldr	r2, [pc, #276]	; (8009850 <UART_SetConfig+0x2e0>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d125      	bne.n	800978c <UART_SetConfig+0x21c>
 8009740:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <UART_SetConfig+0x2d0>)
 8009742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800974a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974e:	d017      	beq.n	8009780 <UART_SetConfig+0x210>
 8009750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009754:	d817      	bhi.n	8009786 <UART_SetConfig+0x216>
 8009756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800975a:	d00b      	beq.n	8009774 <UART_SetConfig+0x204>
 800975c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009760:	d811      	bhi.n	8009786 <UART_SetConfig+0x216>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <UART_SetConfig+0x1fe>
 8009766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976a:	d006      	beq.n	800977a <UART_SetConfig+0x20a>
 800976c:	e00b      	b.n	8009786 <UART_SetConfig+0x216>
 800976e:	2300      	movs	r3, #0
 8009770:	77fb      	strb	r3, [r7, #31]
 8009772:	e0a0      	b.n	80098b6 <UART_SetConfig+0x346>
 8009774:	2302      	movs	r3, #2
 8009776:	77fb      	strb	r3, [r7, #31]
 8009778:	e09d      	b.n	80098b6 <UART_SetConfig+0x346>
 800977a:	2304      	movs	r3, #4
 800977c:	77fb      	strb	r3, [r7, #31]
 800977e:	e09a      	b.n	80098b6 <UART_SetConfig+0x346>
 8009780:	2308      	movs	r3, #8
 8009782:	77fb      	strb	r3, [r7, #31]
 8009784:	e097      	b.n	80098b6 <UART_SetConfig+0x346>
 8009786:	2310      	movs	r3, #16
 8009788:	77fb      	strb	r3, [r7, #31]
 800978a:	e094      	b.n	80098b6 <UART_SetConfig+0x346>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a30      	ldr	r2, [pc, #192]	; (8009854 <UART_SetConfig+0x2e4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d125      	bne.n	80097e2 <UART_SetConfig+0x272>
 8009796:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <UART_SetConfig+0x2d0>)
 8009798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800979c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097a4:	d017      	beq.n	80097d6 <UART_SetConfig+0x266>
 80097a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097aa:	d817      	bhi.n	80097dc <UART_SetConfig+0x26c>
 80097ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b0:	d00b      	beq.n	80097ca <UART_SetConfig+0x25a>
 80097b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b6:	d811      	bhi.n	80097dc <UART_SetConfig+0x26c>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <UART_SetConfig+0x254>
 80097bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c0:	d006      	beq.n	80097d0 <UART_SetConfig+0x260>
 80097c2:	e00b      	b.n	80097dc <UART_SetConfig+0x26c>
 80097c4:	2301      	movs	r3, #1
 80097c6:	77fb      	strb	r3, [r7, #31]
 80097c8:	e075      	b.n	80098b6 <UART_SetConfig+0x346>
 80097ca:	2302      	movs	r3, #2
 80097cc:	77fb      	strb	r3, [r7, #31]
 80097ce:	e072      	b.n	80098b6 <UART_SetConfig+0x346>
 80097d0:	2304      	movs	r3, #4
 80097d2:	77fb      	strb	r3, [r7, #31]
 80097d4:	e06f      	b.n	80098b6 <UART_SetConfig+0x346>
 80097d6:	2308      	movs	r3, #8
 80097d8:	77fb      	strb	r3, [r7, #31]
 80097da:	e06c      	b.n	80098b6 <UART_SetConfig+0x346>
 80097dc:	2310      	movs	r3, #16
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e069      	b.n	80098b6 <UART_SetConfig+0x346>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <UART_SetConfig+0x2e8>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d137      	bne.n	800985c <UART_SetConfig+0x2ec>
 80097ec:	4b14      	ldr	r3, [pc, #80]	; (8009840 <UART_SetConfig+0x2d0>)
 80097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097fa:	d017      	beq.n	800982c <UART_SetConfig+0x2bc>
 80097fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009800:	d817      	bhi.n	8009832 <UART_SetConfig+0x2c2>
 8009802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009806:	d00b      	beq.n	8009820 <UART_SetConfig+0x2b0>
 8009808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800980c:	d811      	bhi.n	8009832 <UART_SetConfig+0x2c2>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <UART_SetConfig+0x2aa>
 8009812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009816:	d006      	beq.n	8009826 <UART_SetConfig+0x2b6>
 8009818:	e00b      	b.n	8009832 <UART_SetConfig+0x2c2>
 800981a:	2300      	movs	r3, #0
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	e04a      	b.n	80098b6 <UART_SetConfig+0x346>
 8009820:	2302      	movs	r3, #2
 8009822:	77fb      	strb	r3, [r7, #31]
 8009824:	e047      	b.n	80098b6 <UART_SetConfig+0x346>
 8009826:	2304      	movs	r3, #4
 8009828:	77fb      	strb	r3, [r7, #31]
 800982a:	e044      	b.n	80098b6 <UART_SetConfig+0x346>
 800982c:	2308      	movs	r3, #8
 800982e:	77fb      	strb	r3, [r7, #31]
 8009830:	e041      	b.n	80098b6 <UART_SetConfig+0x346>
 8009832:	2310      	movs	r3, #16
 8009834:	77fb      	strb	r3, [r7, #31]
 8009836:	e03e      	b.n	80098b6 <UART_SetConfig+0x346>
 8009838:	efff69f3 	.word	0xefff69f3
 800983c:	40011000 	.word	0x40011000
 8009840:	40023800 	.word	0x40023800
 8009844:	40004400 	.word	0x40004400
 8009848:	40004800 	.word	0x40004800
 800984c:	40004c00 	.word	0x40004c00
 8009850:	40005000 	.word	0x40005000
 8009854:	40011400 	.word	0x40011400
 8009858:	40007800 	.word	0x40007800
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a71      	ldr	r2, [pc, #452]	; (8009a28 <UART_SetConfig+0x4b8>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d125      	bne.n	80098b2 <UART_SetConfig+0x342>
 8009866:	4b71      	ldr	r3, [pc, #452]	; (8009a2c <UART_SetConfig+0x4bc>)
 8009868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800986c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009870:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009874:	d017      	beq.n	80098a6 <UART_SetConfig+0x336>
 8009876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800987a:	d817      	bhi.n	80098ac <UART_SetConfig+0x33c>
 800987c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009880:	d00b      	beq.n	800989a <UART_SetConfig+0x32a>
 8009882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009886:	d811      	bhi.n	80098ac <UART_SetConfig+0x33c>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <UART_SetConfig+0x324>
 800988c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009890:	d006      	beq.n	80098a0 <UART_SetConfig+0x330>
 8009892:	e00b      	b.n	80098ac <UART_SetConfig+0x33c>
 8009894:	2300      	movs	r3, #0
 8009896:	77fb      	strb	r3, [r7, #31]
 8009898:	e00d      	b.n	80098b6 <UART_SetConfig+0x346>
 800989a:	2302      	movs	r3, #2
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e00a      	b.n	80098b6 <UART_SetConfig+0x346>
 80098a0:	2304      	movs	r3, #4
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e007      	b.n	80098b6 <UART_SetConfig+0x346>
 80098a6:	2308      	movs	r3, #8
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e004      	b.n	80098b6 <UART_SetConfig+0x346>
 80098ac:	2310      	movs	r3, #16
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e001      	b.n	80098b6 <UART_SetConfig+0x346>
 80098b2:	2310      	movs	r3, #16
 80098b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098be:	d15a      	bne.n	8009976 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80098c0:	7ffb      	ldrb	r3, [r7, #31]
 80098c2:	2b08      	cmp	r3, #8
 80098c4:	d827      	bhi.n	8009916 <UART_SetConfig+0x3a6>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <UART_SetConfig+0x35c>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	08009901 	.word	0x08009901
 80098d8:	08009917 	.word	0x08009917
 80098dc:	08009907 	.word	0x08009907
 80098e0:	08009917 	.word	0x08009917
 80098e4:	08009917 	.word	0x08009917
 80098e8:	08009917 	.word	0x08009917
 80098ec:	0800990f 	.word	0x0800990f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098f0:	f7fd fc3c 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 80098f4:	61b8      	str	r0, [r7, #24]
        break;
 80098f6:	e013      	b.n	8009920 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098f8:	f7fd fc4c 	bl	8007194 <HAL_RCC_GetPCLK2Freq>
 80098fc:	61b8      	str	r0, [r7, #24]
        break;
 80098fe:	e00f      	b.n	8009920 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009900:	4b4b      	ldr	r3, [pc, #300]	; (8009a30 <UART_SetConfig+0x4c0>)
 8009902:	61bb      	str	r3, [r7, #24]
        break;
 8009904:	e00c      	b.n	8009920 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009906:	f7fd fb43 	bl	8006f90 <HAL_RCC_GetSysClockFreq>
 800990a:	61b8      	str	r0, [r7, #24]
        break;
 800990c:	e008      	b.n	8009920 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800990e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009912:	61bb      	str	r3, [r7, #24]
        break;
 8009914:	e004      	b.n	8009920 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	77bb      	strb	r3, [r7, #30]
        break;
 800991e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d074      	beq.n	8009a10 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	005a      	lsls	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	085b      	lsrs	r3, r3, #1
 8009930:	441a      	add	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	fbb2 f3f3 	udiv	r3, r2, r3
 800993a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2b0f      	cmp	r3, #15
 8009940:	d916      	bls.n	8009970 <UART_SetConfig+0x400>
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009948:	d212      	bcs.n	8009970 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	b29b      	uxth	r3, r3
 800994e:	f023 030f 	bic.w	r3, r3, #15
 8009952:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	085b      	lsrs	r3, r3, #1
 8009958:	b29b      	uxth	r3, r3
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	b29a      	uxth	r2, r3
 8009960:	89fb      	ldrh	r3, [r7, #14]
 8009962:	4313      	orrs	r3, r2
 8009964:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	89fa      	ldrh	r2, [r7, #14]
 800996c:	60da      	str	r2, [r3, #12]
 800996e:	e04f      	b.n	8009a10 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	77bb      	strb	r3, [r7, #30]
 8009974:	e04c      	b.n	8009a10 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009976:	7ffb      	ldrb	r3, [r7, #31]
 8009978:	2b08      	cmp	r3, #8
 800997a:	d828      	bhi.n	80099ce <UART_SetConfig+0x45e>
 800997c:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <UART_SetConfig+0x414>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	080099cf 	.word	0x080099cf
 8009994:	080099bf 	.word	0x080099bf
 8009998:	080099cf 	.word	0x080099cf
 800999c:	080099cf 	.word	0x080099cf
 80099a0:	080099cf 	.word	0x080099cf
 80099a4:	080099c7 	.word	0x080099c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a8:	f7fd fbe0 	bl	800716c <HAL_RCC_GetPCLK1Freq>
 80099ac:	61b8      	str	r0, [r7, #24]
        break;
 80099ae:	e013      	b.n	80099d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099b0:	f7fd fbf0 	bl	8007194 <HAL_RCC_GetPCLK2Freq>
 80099b4:	61b8      	str	r0, [r7, #24]
        break;
 80099b6:	e00f      	b.n	80099d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b8:	4b1d      	ldr	r3, [pc, #116]	; (8009a30 <UART_SetConfig+0x4c0>)
 80099ba:	61bb      	str	r3, [r7, #24]
        break;
 80099bc:	e00c      	b.n	80099d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099be:	f7fd fae7 	bl	8006f90 <HAL_RCC_GetSysClockFreq>
 80099c2:	61b8      	str	r0, [r7, #24]
        break;
 80099c4:	e008      	b.n	80099d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ca:	61bb      	str	r3, [r7, #24]
        break;
 80099cc:	e004      	b.n	80099d8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	77bb      	strb	r3, [r7, #30]
        break;
 80099d6:	bf00      	nop
    }

    if (pclk != 0U)
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d018      	beq.n	8009a10 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	085a      	lsrs	r2, r3, #1
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	441a      	add	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b0f      	cmp	r3, #15
 80099f6:	d909      	bls.n	8009a0c <UART_SetConfig+0x49c>
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099fe:	d205      	bcs.n	8009a0c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	e001      	b.n	8009a10 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	40007c00 	.word	0x40007c00
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	00f42400 	.word	0x00f42400

08009a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	f003 0302 	and.w	r3, r3, #2
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	f003 0310 	and.w	r3, r3, #16
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01a      	beq.n	8009b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b32:	d10a      	bne.n	8009b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	605a      	str	r2, [r3, #4]
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b88:	f7fa f95c 	bl	8003e44 <HAL_GetTick>
 8009b8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d10e      	bne.n	8009bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f82d 	bl	8009c0a <UART_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e023      	b.n	8009c02 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d10e      	bne.n	8009be6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f817 	bl	8009c0a <UART_WaitOnFlagUntilTimeout>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e00d      	b.n	8009c02 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b09c      	sub	sp, #112	; 0x70
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	603b      	str	r3, [r7, #0]
 8009c16:	4613      	mov	r3, r2
 8009c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c1a:	e0a5      	b.n	8009d68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	f000 80a1 	beq.w	8009d68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c26:	f7fa f90d 	bl	8003e44 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d302      	bcc.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x32>
 8009c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d13e      	bne.n	8009cba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c50:	667b      	str	r3, [r7, #100]	; 0x64
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e6      	bne.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	f023 0301 	bic.w	r3, r3, #1
 8009c84:	663b      	str	r3, [r7, #96]	; 0x60
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e5      	bne.n	8009c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2220      	movs	r2, #32
 8009cac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e067      	b.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d04f      	beq.n	8009d68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cd6:	d147      	bne.n	8009d68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ce0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	e853 3f00 	ldrex	r3, [r3]
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d00:	637b      	str	r3, [r7, #52]	; 0x34
 8009d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e6      	bne.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	613b      	str	r3, [r7, #16]
   return(result);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f023 0301 	bic.w	r3, r3, #1
 8009d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3308      	adds	r3, #8
 8009d32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d34:	623a      	str	r2, [r7, #32]
 8009d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	6a3a      	ldr	r2, [r7, #32]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e5      	bne.n	8009d14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2220      	movs	r2, #32
 8009d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e010      	b.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69da      	ldr	r2, [r3, #28]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4013      	ands	r3, r2
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	bf0c      	ite	eq
 8009d78:	2301      	moveq	r3, #1
 8009d7a:	2300      	movne	r3, #0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	461a      	mov	r2, r3
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	f43f af4a 	beq.w	8009c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3770      	adds	r7, #112	; 0x70
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b095      	sub	sp, #84	; 0x54
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db8:	643b      	str	r3, [r7, #64]	; 0x40
 8009dba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e6      	bne.n	8009d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f023 0301 	bic.w	r3, r3, #1
 8009de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3308      	adds	r3, #8
 8009dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009df4:	e841 2300 	strex	r3, r2, [r1]
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e5      	bne.n	8009dcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d118      	bne.n	8009e3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f023 0310 	bic.w	r3, r3, #16
 8009e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	61bb      	str	r3, [r7, #24]
 8009e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6979      	ldr	r1, [r7, #20]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	613b      	str	r3, [r7, #16]
   return(result);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009e4c:	bf00      	nop
 8009e4e:	3754      	adds	r7, #84	; 0x54
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fb5a 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	61bb      	str	r3, [r7, #24]
 8009eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e6      	bne.n	8009e8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff fb26 	bl	800951c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed0:	bf00      	nop
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009ede:	f000 fb25 	bl	800a52c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <MX_LWIP_Init+0x70>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009ee8:	4b18      	ldr	r3, [pc, #96]	; (8009f4c <MX_LWIP_Init+0x74>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009eee:	4b18      	ldr	r3, [pc, #96]	; (8009f50 <MX_LWIP_Init+0x78>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009ef4:	4b17      	ldr	r3, [pc, #92]	; (8009f54 <MX_LWIP_Init+0x7c>)
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <MX_LWIP_Init+0x80>)
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	2300      	movs	r3, #0
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <MX_LWIP_Init+0x78>)
 8009f02:	4a12      	ldr	r2, [pc, #72]	; (8009f4c <MX_LWIP_Init+0x74>)
 8009f04:	4910      	ldr	r1, [pc, #64]	; (8009f48 <MX_LWIP_Init+0x70>)
 8009f06:	4815      	ldr	r0, [pc, #84]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f08:	f000 ffb6 	bl	800ae78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009f0c:	4813      	ldr	r0, [pc, #76]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f0e:	f001 f96d 	bl	800b1ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009f12:	4b12      	ldr	r3, [pc, #72]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009f18:	089b      	lsrs	r3, r3, #2
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009f24:	480d      	ldr	r0, [pc, #52]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f26:	f001 f971 	bl	800b20c <netif_set_up>
 8009f2a:	e002      	b.n	8009f32 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009f2c:	480b      	ldr	r0, [pc, #44]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f2e:	f001 f9d9 	bl	800b2e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009f32:	490b      	ldr	r1, [pc, #44]	; (8009f60 <MX_LWIP_Init+0x88>)
 8009f34:	4809      	ldr	r0, [pc, #36]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f36:	f001 fa07 	bl	800b348 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009f3a:	4808      	ldr	r0, [pc, #32]	; (8009f5c <MX_LWIP_Init+0x84>)
 8009f3c:	f008 fa9c 	bl	8012478 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009f40:	bf00      	nop
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	2000081c 	.word	0x2000081c
 8009f4c:	20000820 	.word	0x20000820
 8009f50:	20000824 	.word	0x20000824
 8009f54:	08015e45 	.word	0x08015e45
 8009f58:	0800a36d 	.word	0x0800a36d
 8009f5c:	200007e4 	.word	0x200007e4
 8009f60:	0800a3d9 	.word	0x0800a3d9

08009f64 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08e      	sub	sp, #56	; 0x38
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	609a      	str	r2, [r3, #8]
 8009f78:	60da      	str	r2, [r3, #12]
 8009f7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a4e      	ldr	r2, [pc, #312]	; (800a0bc <HAL_ETH_MspInit+0x158>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	f040 8096 	bne.w	800a0b4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009f88:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	4a4c      	ldr	r2, [pc, #304]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009f92:	6313      	str	r3, [r2, #48]	; 0x30
 8009f94:	4b4a      	ldr	r3, [pc, #296]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9c:	623b      	str	r3, [r7, #32]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	4b47      	ldr	r3, [pc, #284]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa4:	4a46      	ldr	r2, [pc, #280]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009faa:	6313      	str	r3, [r2, #48]	; 0x30
 8009fac:	4b44      	ldr	r3, [pc, #272]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4b41      	ldr	r3, [pc, #260]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	4a40      	ldr	r2, [pc, #256]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8009fc4:	4b3e      	ldr	r3, [pc, #248]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fd0:	4b3b      	ldr	r3, [pc, #236]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	4a3a      	ldr	r2, [pc, #232]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fd6:	f043 0304 	orr.w	r3, r3, #4
 8009fda:	6313      	str	r3, [r2, #48]	; 0x30
 8009fdc:	4b38      	ldr	r3, [pc, #224]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fe8:	4b35      	ldr	r3, [pc, #212]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	4a34      	ldr	r2, [pc, #208]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ff4:	4b32      	ldr	r3, [pc, #200]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	613b      	str	r3, [r7, #16]
 8009ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a000:	4b2f      	ldr	r3, [pc, #188]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	4a2e      	ldr	r2, [pc, #184]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a006:	f043 0302 	orr.w	r3, r3, #2
 800a00a:	6313      	str	r3, [r2, #48]	; 0x30
 800a00c:	4b2c      	ldr	r3, [pc, #176]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a018:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01c:	4a28      	ldr	r2, [pc, #160]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	6313      	str	r3, [r2, #48]	; 0x30
 800a024:	4b26      	ldr	r3, [pc, #152]	; (800a0c0 <HAL_ETH_MspInit+0x15c>)
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02c:	60bb      	str	r3, [r7, #8]
 800a02e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a030:	2332      	movs	r3, #50	; 0x32
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a034:	2302      	movs	r3, #2
 800a036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a03c:	2303      	movs	r3, #3
 800a03e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a040:	230b      	movs	r3, #11
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a048:	4619      	mov	r1, r3
 800a04a:	481e      	ldr	r0, [pc, #120]	; (800a0c4 <HAL_ETH_MspInit+0x160>)
 800a04c:	f7fb f94e 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a050:	2386      	movs	r3, #134	; 0x86
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a054:	2302      	movs	r3, #2
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a05c:	2303      	movs	r3, #3
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a060:	230b      	movs	r3, #11
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a068:	4619      	mov	r1, r3
 800a06a:	4817      	ldr	r0, [pc, #92]	; (800a0c8 <HAL_ETH_MspInit+0x164>)
 800a06c:	f7fb f93e 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a076:	2302      	movs	r3, #2
 800a078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a07e:	2303      	movs	r3, #3
 800a080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a082:	230b      	movs	r3, #11
 800a084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08a:	4619      	mov	r1, r3
 800a08c:	480f      	ldr	r0, [pc, #60]	; (800a0cc <HAL_ETH_MspInit+0x168>)
 800a08e:	f7fb f92d 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a092:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a098:	2302      	movs	r3, #2
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0a4:	230b      	movs	r3, #11
 800a0a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4808      	ldr	r0, [pc, #32]	; (800a0d0 <HAL_ETH_MspInit+0x16c>)
 800a0b0:	f7fb f91c 	bl	80052ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	3738      	adds	r7, #56	; 0x38
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40028000 	.word	0x40028000
 800a0c0:	40023800 	.word	0x40023800
 800a0c4:	40020800 	.word	0x40020800
 800a0c8:	40020000 	.word	0x40020000
 800a0cc:	40020400 	.word	0x40020400
 800a0d0:	40021800 	.word	0x40021800

0800a0d4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a0e0:	4b4d      	ldr	r3, [pc, #308]	; (800a218 <low_level_init+0x144>)
 800a0e2:	4a4e      	ldr	r2, [pc, #312]	; (800a21c <low_level_init+0x148>)
 800a0e4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a0e6:	4b4c      	ldr	r3, [pc, #304]	; (800a218 <low_level_init+0x144>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a0ec:	4b4a      	ldr	r3, [pc, #296]	; (800a218 <low_level_init+0x144>)
 800a0ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0f2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a0f4:	4b48      	ldr	r3, [pc, #288]	; (800a218 <low_level_init+0x144>)
 800a0f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0fa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a0fc:	4b46      	ldr	r3, [pc, #280]	; (800a218 <low_level_init+0x144>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a102:	2300      	movs	r3, #0
 800a104:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a106:	2380      	movs	r3, #128	; 0x80
 800a108:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a10a:	23e1      	movs	r3, #225	; 0xe1
 800a10c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a10e:	2300      	movs	r3, #0
 800a110:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a112:	2300      	movs	r3, #0
 800a114:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a116:	2300      	movs	r3, #0
 800a118:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a11a:	4a3f      	ldr	r2, [pc, #252]	; (800a218 <low_level_init+0x144>)
 800a11c:	f107 0308 	add.w	r3, r7, #8
 800a120:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a122:	4b3d      	ldr	r3, [pc, #244]	; (800a218 <low_level_init+0x144>)
 800a124:	2200      	movs	r2, #0
 800a126:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a128:	4b3b      	ldr	r3, [pc, #236]	; (800a218 <low_level_init+0x144>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a12e:	4b3a      	ldr	r3, [pc, #232]	; (800a218 <low_level_init+0x144>)
 800a130:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a134:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a136:	4838      	ldr	r0, [pc, #224]	; (800a218 <low_level_init+0x144>)
 800a138:	f7fa f858 	bl	80041ec <HAL_ETH_Init>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d108      	bne.n	800a158 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a14c:	f043 0304 	orr.w	r3, r3, #4
 800a150:	b2da      	uxtb	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a158:	2304      	movs	r3, #4
 800a15a:	4a31      	ldr	r2, [pc, #196]	; (800a220 <low_level_init+0x14c>)
 800a15c:	4931      	ldr	r1, [pc, #196]	; (800a224 <low_level_init+0x150>)
 800a15e:	482e      	ldr	r0, [pc, #184]	; (800a218 <low_level_init+0x144>)
 800a160:	f7fa f9de 	bl	8004520 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a164:	2304      	movs	r3, #4
 800a166:	4a30      	ldr	r2, [pc, #192]	; (800a228 <low_level_init+0x154>)
 800a168:	4930      	ldr	r1, [pc, #192]	; (800a22c <low_level_init+0x158>)
 800a16a:	482b      	ldr	r0, [pc, #172]	; (800a218 <low_level_init+0x144>)
 800a16c:	f7fa fa41 	bl	80045f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2206      	movs	r2, #6
 800a174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a178:	4b27      	ldr	r3, [pc, #156]	; (800a218 <low_level_init+0x144>)
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <low_level_init+0x144>)
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a190:	4b21      	ldr	r3, [pc, #132]	; (800a218 <low_level_init+0x144>)
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	789a      	ldrb	r2, [r3, #2]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a19c:	4b1e      	ldr	r3, [pc, #120]	; (800a218 <low_level_init+0x144>)
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	78da      	ldrb	r2, [r3, #3]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a1a8:	4b1b      	ldr	r3, [pc, #108]	; (800a218 <low_level_init+0x144>)
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	791a      	ldrb	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a1b4:	4b18      	ldr	r3, [pc, #96]	; (800a218 <low_level_init+0x144>)
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	795a      	ldrb	r2, [r3, #5]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a1c6:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1ce:	f043 030a 	orr.w	r3, r3, #10
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a1da:	480f      	ldr	r0, [pc, #60]	; (800a218 <low_level_init+0x144>)
 800a1dc:	f7fa fc2e 	bl	8004a3c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a1e0:	f107 0310 	add.w	r3, r7, #16
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	211d      	movs	r1, #29
 800a1e8:	480b      	ldr	r0, [pc, #44]	; (800a218 <low_level_init+0x144>)
 800a1ea:	f7fa fb59 	bl	80048a0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f043 030b 	orr.w	r3, r3, #11
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	211d      	movs	r1, #29
 800a1fc:	4806      	ldr	r0, [pc, #24]	; (800a218 <low_level_init+0x144>)
 800a1fe:	f7fa fbb7 	bl	8004970 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a202:	f107 0310 	add.w	r3, r7, #16
 800a206:	461a      	mov	r2, r3
 800a208:	211d      	movs	r1, #29
 800a20a:	4803      	ldr	r0, [pc, #12]	; (800a218 <low_level_init+0x144>)
 800a20c:	f7fa fb48 	bl	80048a0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a210:	bf00      	nop
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	200020f8 	.word	0x200020f8
 800a21c:	40028000 	.word	0x40028000
 800a220:	20002140 	.word	0x20002140
 800a224:	20000828 	.word	0x20000828
 800a228:	200008a8 	.word	0x200008a8
 800a22c:	20002078 	.word	0x20002078

0800a230 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	; 0x28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a23a:	4b4b      	ldr	r3, [pc, #300]	; (800a368 <low_level_output+0x138>)
 800a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a252:	4b45      	ldr	r3, [pc, #276]	; (800a368 <low_level_output+0x138>)
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	623b      	str	r3, [r7, #32]
 800a260:	e05a      	b.n	800a318 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	da03      	bge.n	800a272 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a26a:	23f8      	movs	r3, #248	; 0xf8
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a270:	e05c      	b.n	800a32c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	895b      	ldrh	r3, [r3, #10]
 800a276:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a27c:	e02f      	b.n	800a2de <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	18d0      	adds	r0, r2, r3
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	18d1      	adds	r1, r2, r3
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	461a      	mov	r2, r3
 800a296:	f00b fedd 	bl	8016054 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da03      	bge.n	800a2b0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a2a8:	23f8      	movs	r3, #248	; 0xf8
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a2ae:	e03d      	b.n	800a32c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a2c0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a2cc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a2d8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d8c8      	bhi.n	800a27e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	18d0      	adds	r0, r2, r3
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f00b fea9 	bl	8016054 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	623b      	str	r3, [r7, #32]
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1a1      	bne.n	800a262 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	4811      	ldr	r0, [pc, #68]	; (800a368 <low_level_output+0x138>)
 800a322:	f7fa f9d3 	bl	80046cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <low_level_output+0x138>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	f241 0314 	movw	r3, #4116	; 0x1014
 800a334:	4413      	add	r3, r2
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0320 	and.w	r3, r3, #32
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00d      	beq.n	800a35c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a340:	4b09      	ldr	r3, [pc, #36]	; (800a368 <low_level_output+0x138>)
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	f241 0314 	movw	r3, #4116	; 0x1014
 800a348:	4413      	add	r3, r2
 800a34a:	2220      	movs	r2, #32
 800a34c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <low_level_output+0x138>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	f241 0304 	movw	r3, #4100	; 0x1004
 800a356:	4413      	add	r3, r2
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a35c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a360:	4618      	mov	r0, r3
 800a362:	3728      	adds	r7, #40	; 0x28
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200020f8 	.word	0x200020f8

0800a36c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <ethernetif_init+0x1c>
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <ethernetif_init+0x48>)
 800a37c:	f240 2212 	movw	r2, #530	; 0x212
 800a380:	490d      	ldr	r1, [pc, #52]	; (800a3b8 <ethernetif_init+0x4c>)
 800a382:	480e      	ldr	r0, [pc, #56]	; (800a3bc <ethernetif_init+0x50>)
 800a384:	f00c fcde 	bl	8016d44 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2273      	movs	r2, #115	; 0x73
 800a38c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2274      	movs	r2, #116	; 0x74
 800a394:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <ethernetif_init+0x54>)
 800a39c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a08      	ldr	r2, [pc, #32]	; (800a3c4 <ethernetif_init+0x58>)
 800a3a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fe95 	bl	800a0d4 <low_level_init>

  return ERR_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	0801ac5c 	.word	0x0801ac5c
 800a3b8:	0801ac78 	.word	0x0801ac78
 800a3bc:	0801ac88 	.word	0x0801ac88
 800a3c0:	080142cd 	.word	0x080142cd
 800a3c4:	0800a231 	.word	0x0800a231

0800a3c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a3cc:	f7f9 fd3a 	bl	8003e44 <HAL_GetTick>
 800a3d0:	4603      	mov	r3, r0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d05d      	beq.n	800a4b6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a3fa:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03f      	beq.n	800a482 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a406:	2100      	movs	r1, #0
 800a408:	4830      	ldr	r0, [pc, #192]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a40a:	f7fa fab1 	bl	8004970 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a40e:	f7f9 fd19 	bl	8003e44 <HAL_GetTick>
 800a412:	4603      	mov	r3, r0
 800a414:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a416:	f107 0308 	add.w	r3, r7, #8
 800a41a:	461a      	mov	r2, r3
 800a41c:	2101      	movs	r1, #1
 800a41e:	482b      	ldr	r0, [pc, #172]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a420:	f7fa fa3e 	bl	80048a0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a424:	f7f9 fd0e 	bl	8003e44 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a432:	d828      	bhi.n	800a486 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0eb      	beq.n	800a416 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a43e:	f107 0308 	add.w	r3, r7, #8
 800a442:	461a      	mov	r2, r3
 800a444:	2110      	movs	r1, #16
 800a446:	4821      	ldr	r0, [pc, #132]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a448:	f7fa fa2a 	bl	80048a0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a456:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a45c:	60da      	str	r2, [r3, #12]
 800a45e:	e002      	b.n	800a466 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a460:	4b1a      	ldr	r3, [pc, #104]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a462:	2200      	movs	r2, #0
 800a464:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a470:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a472:	2200      	movs	r2, #0
 800a474:	609a      	str	r2, [r3, #8]
 800a476:	e016      	b.n	800a4a6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a478:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a47a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a47e:	609a      	str	r2, [r3, #8]
 800a480:	e011      	b.n	800a4a6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a482:	bf00      	nop
 800a484:	e000      	b.n	800a488 <ethernetif_update_config+0xb0>
          goto error;
 800a486:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a488:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a490:	4b0e      	ldr	r3, [pc, #56]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	085b      	lsrs	r3, r3, #1
 800a496:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a498:	4313      	orrs	r3, r2
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	461a      	mov	r2, r3
 800a49e:	2100      	movs	r1, #0
 800a4a0:	480a      	ldr	r0, [pc, #40]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a4a2:	f7fa fa65 	bl	8004970 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4808      	ldr	r0, [pc, #32]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a4aa:	f7fa fb25 	bl	8004af8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a4ae:	4807      	ldr	r0, [pc, #28]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a4b0:	f7fa fac4 	bl	8004a3c <HAL_ETH_Start>
 800a4b4:	e002      	b.n	800a4bc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <ethernetif_update_config+0xf4>)
 800a4b8:	f7fa faef 	bl	8004a9a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7f8 faa7 	bl	8002a10 <ethernetif_notify_conn_changed>
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	200020f8 	.word	0x200020f8

0800a4d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a4da:	88fb      	ldrh	r3, [r7, #6]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	b21a      	sxth	r2, r3
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	b21b      	sxth	r3, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	b21b      	sxth	r3, r3
 800a4ec:	b29b      	uxth	r3, r3
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	061a      	lsls	r2, r3, #24
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0a1b      	lsrs	r3, r3, #8
 800a514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	0e1b      	lsrs	r3, r3, #24
 800a51e:	4313      	orrs	r3, r2
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a536:	f000 f8d5 	bl	800a6e4 <mem_init>
  memp_init();
 800a53a:	f000 fbdb 	bl	800acf4 <memp_init>
  pbuf_init();
  netif_init();
 800a53e:	f000 fc93 	bl	800ae68 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a542:	f006 ff5f 	bl	8011404 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a546:	f001 fcfd 	bl	800bf44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a54a:	f006 ff13 	bl	8011374 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a562:	4b05      	ldr	r3, [pc, #20]	; (800a578 <ptr_to_mem+0x20>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	88fb      	ldrh	r3, [r7, #6]
 800a568:	4413      	add	r3, r2
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	2000030c 	.word	0x2000030c

0800a57c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <mem_to_ptr+0x20>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	b29b      	uxth	r3, r3
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	2000030c 	.word	0x2000030c

0800a5a0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a5a8:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <plug_holes+0x120>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d206      	bcs.n	800a5c0 <plug_holes+0x20>
 800a5b2:	4b44      	ldr	r3, [pc, #272]	; (800a6c4 <plug_holes+0x124>)
 800a5b4:	f240 12df 	movw	r2, #479	; 0x1df
 800a5b8:	4943      	ldr	r1, [pc, #268]	; (800a6c8 <plug_holes+0x128>)
 800a5ba:	4844      	ldr	r0, [pc, #272]	; (800a6cc <plug_holes+0x12c>)
 800a5bc:	f00c fbc2 	bl	8016d44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a5c0:	4b43      	ldr	r3, [pc, #268]	; (800a6d0 <plug_holes+0x130>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d306      	bcc.n	800a5d8 <plug_holes+0x38>
 800a5ca:	4b3e      	ldr	r3, [pc, #248]	; (800a6c4 <plug_holes+0x124>)
 800a5cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a5d0:	4940      	ldr	r1, [pc, #256]	; (800a6d4 <plug_holes+0x134>)
 800a5d2:	483e      	ldr	r0, [pc, #248]	; (800a6cc <plug_holes+0x12c>)
 800a5d4:	f00c fbb6 	bl	8016d44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	791b      	ldrb	r3, [r3, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <plug_holes+0x4e>
 800a5e0:	4b38      	ldr	r3, [pc, #224]	; (800a6c4 <plug_holes+0x124>)
 800a5e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a5e6:	493c      	ldr	r1, [pc, #240]	; (800a6d8 <plug_holes+0x138>)
 800a5e8:	4838      	ldr	r0, [pc, #224]	; (800a6cc <plug_holes+0x12c>)
 800a5ea:	f00c fbab 	bl	8016d44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5f6:	d906      	bls.n	800a606 <plug_holes+0x66>
 800a5f8:	4b32      	ldr	r3, [pc, #200]	; (800a6c4 <plug_holes+0x124>)
 800a5fa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a5fe:	4937      	ldr	r1, [pc, #220]	; (800a6dc <plug_holes+0x13c>)
 800a600:	4832      	ldr	r0, [pc, #200]	; (800a6cc <plug_holes+0x12c>)
 800a602:	f00c fb9f 	bl	8016d44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff ffa4 	bl	800a558 <ptr_to_mem>
 800a610:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	429a      	cmp	r2, r3
 800a618:	d024      	beq.n	800a664 <plug_holes+0xc4>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	791b      	ldrb	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d120      	bne.n	800a664 <plug_holes+0xc4>
 800a622:	4b2b      	ldr	r3, [pc, #172]	; (800a6d0 <plug_holes+0x130>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d01b      	beq.n	800a664 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a62c:	4b2c      	ldr	r3, [pc, #176]	; (800a6e0 <plug_holes+0x140>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	429a      	cmp	r2, r3
 800a634:	d102      	bne.n	800a63c <plug_holes+0x9c>
      lfree = mem;
 800a636:	4a2a      	ldr	r2, [pc, #168]	; (800a6e0 <plug_holes+0x140>)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	881a      	ldrh	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a64c:	d00a      	beq.n	800a664 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff ff80 	bl	800a558 <ptr_to_mem>
 800a658:	4604      	mov	r4, r0
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff ff8e 	bl	800a57c <mem_to_ptr>
 800a660:	4603      	mov	r3, r0
 800a662:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff ff75 	bl	800a558 <ptr_to_mem>
 800a66e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d01f      	beq.n	800a6b8 <plug_holes+0x118>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	791b      	ldrb	r3, [r3, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d11b      	bne.n	800a6b8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a680:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <plug_holes+0x140>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	429a      	cmp	r2, r3
 800a688:	d102      	bne.n	800a690 <plug_holes+0xf0>
      lfree = pmem;
 800a68a:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <plug_holes+0x140>)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	881a      	ldrh	r2, [r3, #0]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6a0:	d00a      	beq.n	800a6b8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ff56 	bl	800a558 <ptr_to_mem>
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	68b8      	ldr	r0, [r7, #8]
 800a6b0:	f7ff ff64 	bl	800a57c <mem_to_ptr>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd90      	pop	{r4, r7, pc}
 800a6c0:	2000030c 	.word	0x2000030c
 800a6c4:	0801acb0 	.word	0x0801acb0
 800a6c8:	0801ace0 	.word	0x0801ace0
 800a6cc:	0801acf8 	.word	0x0801acf8
 800a6d0:	20000310 	.word	0x20000310
 800a6d4:	0801ad20 	.word	0x0801ad20
 800a6d8:	0801ad3c 	.word	0x0801ad3c
 800a6dc:	0801ad58 	.word	0x0801ad58
 800a6e0:	20000314 	.word	0x20000314

0800a6e4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a6ea:	4b18      	ldr	r3, [pc, #96]	; (800a74c <mem_init+0x68>)
 800a6ec:	3303      	adds	r3, #3
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4b16      	ldr	r3, [pc, #88]	; (800a750 <mem_init+0x6c>)
 800a6f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a6f8:	4b15      	ldr	r3, [pc, #84]	; (800a750 <mem_init+0x6c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a704:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a712:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a716:	f7ff ff1f 	bl	800a558 <ptr_to_mem>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4a0d      	ldr	r2, [pc, #52]	; (800a754 <mem_init+0x70>)
 800a71e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a720:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <mem_init+0x70>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2201      	movs	r2, #1
 800a726:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <mem_init+0x70>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a730:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a732:	4b08      	ldr	r3, [pc, #32]	; (800a754 <mem_init+0x70>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a73a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <mem_init+0x6c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a05      	ldr	r2, [pc, #20]	; (800a758 <mem_init+0x74>)
 800a742:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20003928 	.word	0x20003928
 800a750:	2000030c 	.word	0x2000030c
 800a754:	20000310 	.word	0x20000310
 800a758:	20000314 	.word	0x20000314

0800a75c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff ff09 	bl	800a57c <mem_to_ptr>
 800a76a:	4603      	mov	r3, r0
 800a76c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fef0 	bl	800a558 <ptr_to_mem>
 800a778:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff feea 	bl	800a558 <ptr_to_mem>
 800a784:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a78e:	d818      	bhi.n	800a7c2 <mem_link_valid+0x66>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a798:	d813      	bhi.n	800a7c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a79e:	8afa      	ldrh	r2, [r7, #22]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d004      	beq.n	800a7ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	8afa      	ldrh	r2, [r7, #22]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d109      	bne.n	800a7c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7ae:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <mem_link_valid+0x74>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d006      	beq.n	800a7c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	885b      	ldrh	r3, [r3, #2]
 800a7bc:	8afa      	ldrh	r2, [r7, #22]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d001      	beq.n	800a7c6 <mem_link_valid+0x6a>
    return 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e000      	b.n	800a7c8 <mem_link_valid+0x6c>
  }
  return 1;
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000310 	.word	0x20000310

0800a7d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d04c      	beq.n	800a87c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a7ec:	4b25      	ldr	r3, [pc, #148]	; (800a884 <mem_free+0xb0>)
 800a7ee:	f240 2273 	movw	r2, #627	; 0x273
 800a7f2:	4925      	ldr	r1, [pc, #148]	; (800a888 <mem_free+0xb4>)
 800a7f4:	4825      	ldr	r0, [pc, #148]	; (800a88c <mem_free+0xb8>)
 800a7f6:	f00c faa5 	bl	8016d44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a7fa:	e040      	b.n	800a87e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3b08      	subs	r3, #8
 800a800:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a802:	4b23      	ldr	r3, [pc, #140]	; (800a890 <mem_free+0xbc>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d306      	bcc.n	800a81a <mem_free+0x46>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f103 020c 	add.w	r2, r3, #12
 800a812:	4b20      	ldr	r3, [pc, #128]	; (800a894 <mem_free+0xc0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d907      	bls.n	800a82a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a81a:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <mem_free+0xb0>)
 800a81c:	f240 227f 	movw	r2, #639	; 0x27f
 800a820:	491d      	ldr	r1, [pc, #116]	; (800a898 <mem_free+0xc4>)
 800a822:	481a      	ldr	r0, [pc, #104]	; (800a88c <mem_free+0xb8>)
 800a824:	f00c fa8e 	bl	8016d44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a828:	e029      	b.n	800a87e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	791b      	ldrb	r3, [r3, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d107      	bne.n	800a842 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <mem_free+0xb0>)
 800a834:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a838:	4918      	ldr	r1, [pc, #96]	; (800a89c <mem_free+0xc8>)
 800a83a:	4814      	ldr	r0, [pc, #80]	; (800a88c <mem_free+0xb8>)
 800a83c:	f00c fa82 	bl	8016d44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a840:	e01d      	b.n	800a87e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff ff8a 	bl	800a75c <mem_link_valid>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a84e:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <mem_free+0xb0>)
 800a850:	f240 2295 	movw	r2, #661	; 0x295
 800a854:	4912      	ldr	r1, [pc, #72]	; (800a8a0 <mem_free+0xcc>)
 800a856:	480d      	ldr	r0, [pc, #52]	; (800a88c <mem_free+0xb8>)
 800a858:	f00c fa74 	bl	8016d44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a85c:	e00f      	b.n	800a87e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <mem_free+0xd0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d202      	bcs.n	800a874 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a86e:	4a0d      	ldr	r2, [pc, #52]	; (800a8a4 <mem_free+0xd0>)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fe93 	bl	800a5a0 <plug_holes>
 800a87a:	e000      	b.n	800a87e <mem_free+0xaa>
    return;
 800a87c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	0801acb0 	.word	0x0801acb0
 800a888:	0801ad84 	.word	0x0801ad84
 800a88c:	0801acf8 	.word	0x0801acf8
 800a890:	2000030c 	.word	0x2000030c
 800a894:	20000310 	.word	0x20000310
 800a898:	0801ada8 	.word	0x0801ada8
 800a89c:	0801adc4 	.word	0x0801adc4
 800a8a0:	0801adec 	.word	0x0801adec
 800a8a4:	20000314 	.word	0x20000314

0800a8a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a8b4:	887b      	ldrh	r3, [r7, #2]
 800a8b6:	3303      	adds	r3, #3
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a8c0:	8bfb      	ldrh	r3, [r7, #30]
 800a8c2:	2b0b      	cmp	r3, #11
 800a8c4:	d801      	bhi.n	800a8ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a8ca:	8bfb      	ldrh	r3, [r7, #30]
 800a8cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8d0:	d803      	bhi.n	800a8da <mem_trim+0x32>
 800a8d2:	8bfa      	ldrh	r2, [r7, #30]
 800a8d4:	887b      	ldrh	r3, [r7, #2]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d201      	bcs.n	800a8de <mem_trim+0x36>
    return NULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e0cc      	b.n	800aa78 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a8de:	4b68      	ldr	r3, [pc, #416]	; (800aa80 <mem_trim+0x1d8>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d304      	bcc.n	800a8f2 <mem_trim+0x4a>
 800a8e8:	4b66      	ldr	r3, [pc, #408]	; (800aa84 <mem_trim+0x1dc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d306      	bcc.n	800a900 <mem_trim+0x58>
 800a8f2:	4b65      	ldr	r3, [pc, #404]	; (800aa88 <mem_trim+0x1e0>)
 800a8f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a8f8:	4964      	ldr	r1, [pc, #400]	; (800aa8c <mem_trim+0x1e4>)
 800a8fa:	4865      	ldr	r0, [pc, #404]	; (800aa90 <mem_trim+0x1e8>)
 800a8fc:	f00c fa22 	bl	8016d44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a900:	4b5f      	ldr	r3, [pc, #380]	; (800aa80 <mem_trim+0x1d8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	429a      	cmp	r2, r3
 800a908:	d304      	bcc.n	800a914 <mem_trim+0x6c>
 800a90a:	4b5e      	ldr	r3, [pc, #376]	; (800aa84 <mem_trim+0x1dc>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d301      	bcc.n	800a918 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	e0af      	b.n	800aa78 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3b08      	subs	r3, #8
 800a91c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a91e:	69b8      	ldr	r0, [r7, #24]
 800a920:	f7ff fe2c 	bl	800a57c <mem_to_ptr>
 800a924:	4603      	mov	r3, r0
 800a926:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	8afb      	ldrh	r3, [r7, #22]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	b29b      	uxth	r3, r3
 800a932:	3b08      	subs	r3, #8
 800a934:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a936:	8bfa      	ldrh	r2, [r7, #30]
 800a938:	8abb      	ldrh	r3, [r7, #20]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d906      	bls.n	800a94c <mem_trim+0xa4>
 800a93e:	4b52      	ldr	r3, [pc, #328]	; (800aa88 <mem_trim+0x1e0>)
 800a940:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a944:	4953      	ldr	r1, [pc, #332]	; (800aa94 <mem_trim+0x1ec>)
 800a946:	4852      	ldr	r0, [pc, #328]	; (800aa90 <mem_trim+0x1e8>)
 800a948:	f00c f9fc 	bl	8016d44 <iprintf>
  if (newsize > size) {
 800a94c:	8bfa      	ldrh	r2, [r7, #30]
 800a94e:	8abb      	ldrh	r3, [r7, #20]
 800a950:	429a      	cmp	r2, r3
 800a952:	d901      	bls.n	800a958 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	e08f      	b.n	800aa78 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a958:	8bfa      	ldrh	r2, [r7, #30]
 800a95a:	8abb      	ldrh	r3, [r7, #20]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d101      	bne.n	800a964 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	e089      	b.n	800aa78 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fdf5 	bl	800a558 <ptr_to_mem>
 800a96e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	791b      	ldrb	r3, [r3, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d13f      	bne.n	800a9f8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a980:	d106      	bne.n	800a990 <mem_trim+0xe8>
 800a982:	4b41      	ldr	r3, [pc, #260]	; (800aa88 <mem_trim+0x1e0>)
 800a984:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a988:	4943      	ldr	r1, [pc, #268]	; (800aa98 <mem_trim+0x1f0>)
 800a98a:	4841      	ldr	r0, [pc, #260]	; (800aa90 <mem_trim+0x1e8>)
 800a98c:	f00c f9da 	bl	8016d44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a996:	8afa      	ldrh	r2, [r7, #22]
 800a998:	8bfb      	ldrh	r3, [r7, #30]
 800a99a:	4413      	add	r3, r2
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3308      	adds	r3, #8
 800a9a0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a9a2:	4b3e      	ldr	r3, [pc, #248]	; (800aa9c <mem_trim+0x1f4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d106      	bne.n	800a9ba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7ff fdd2 	bl	800a558 <ptr_to_mem>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4a39      	ldr	r2, [pc, #228]	; (800aa9c <mem_trim+0x1f4>)
 800a9b8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff fdcb 	bl	800a558 <ptr_to_mem>
 800a9c2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	89ba      	ldrh	r2, [r7, #12]
 800a9ce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	8afa      	ldrh	r2, [r7, #22]
 800a9d4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	89fa      	ldrh	r2, [r7, #14]
 800a9da:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9e4:	d047      	beq.n	800aa76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff fdb4 	bl	800a558 <ptr_to_mem>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	89fb      	ldrh	r3, [r7, #14]
 800a9f4:	8053      	strh	r3, [r2, #2]
 800a9f6:	e03e      	b.n	800aa76 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a9f8:	8bfb      	ldrh	r3, [r7, #30]
 800a9fa:	f103 0214 	add.w	r2, r3, #20
 800a9fe:	8abb      	ldrh	r3, [r7, #20]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d838      	bhi.n	800aa76 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa04:	8afa      	ldrh	r2, [r7, #22]
 800aa06:	8bfb      	ldrh	r3, [r7, #30]
 800aa08:	4413      	add	r3, r2
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa18:	d106      	bne.n	800aa28 <mem_trim+0x180>
 800aa1a:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <mem_trim+0x1e0>)
 800aa1c:	f240 3216 	movw	r2, #790	; 0x316
 800aa20:	491d      	ldr	r1, [pc, #116]	; (800aa98 <mem_trim+0x1f0>)
 800aa22:	481b      	ldr	r0, [pc, #108]	; (800aa90 <mem_trim+0x1e8>)
 800aa24:	f00c f98e 	bl	8016d44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aa28:	89fb      	ldrh	r3, [r7, #14]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff fd94 	bl	800a558 <ptr_to_mem>
 800aa30:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aa32:	4b1a      	ldr	r3, [pc, #104]	; (800aa9c <mem_trim+0x1f4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d202      	bcs.n	800aa42 <mem_trim+0x19a>
      lfree = mem2;
 800aa3c:	4a17      	ldr	r2, [pc, #92]	; (800aa9c <mem_trim+0x1f4>)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2200      	movs	r2, #0
 800aa46:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	881a      	ldrh	r2, [r3, #0]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	8afa      	ldrh	r2, [r7, #22]
 800aa54:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	89fa      	ldrh	r2, [r7, #14]
 800aa5a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa64:	d007      	beq.n	800aa76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fd74 	bl	800a558 <ptr_to_mem>
 800aa70:	4602      	mov	r2, r0
 800aa72:	89fb      	ldrh	r3, [r7, #14]
 800aa74:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800aa76:	687b      	ldr	r3, [r7, #4]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3720      	adds	r7, #32
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	2000030c 	.word	0x2000030c
 800aa84:	20000310 	.word	0x20000310
 800aa88:	0801acb0 	.word	0x0801acb0
 800aa8c:	0801ae20 	.word	0x0801ae20
 800aa90:	0801acf8 	.word	0x0801acf8
 800aa94:	0801ae38 	.word	0x0801ae38
 800aa98:	0801ae58 	.word	0x0801ae58
 800aa9c:	20000314 	.word	0x20000314

0800aaa0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aaaa:	88fb      	ldrh	r3, [r7, #6]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <mem_malloc+0x14>
    return NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	e0d9      	b.n	800ac68 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	3303      	adds	r3, #3
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aac0:	8bbb      	ldrh	r3, [r7, #28]
 800aac2:	2b0b      	cmp	r3, #11
 800aac4:	d801      	bhi.n	800aaca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aac6:	230c      	movs	r3, #12
 800aac8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aaca:	8bbb      	ldrh	r3, [r7, #28]
 800aacc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aad0:	d803      	bhi.n	800aada <mem_malloc+0x3a>
 800aad2:	8bba      	ldrh	r2, [r7, #28]
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d201      	bcs.n	800aade <mem_malloc+0x3e>
    return NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	e0c4      	b.n	800ac68 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aade:	4b64      	ldr	r3, [pc, #400]	; (800ac70 <mem_malloc+0x1d0>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff fd4a 	bl	800a57c <mem_to_ptr>
 800aae8:	4603      	mov	r3, r0
 800aaea:	83fb      	strh	r3, [r7, #30]
 800aaec:	e0b4      	b.n	800ac58 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aaee:	8bfb      	ldrh	r3, [r7, #30]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fd31 	bl	800a558 <ptr_to_mem>
 800aaf6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	791b      	ldrb	r3, [r3, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f040 80a4 	bne.w	800ac4a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	8bfb      	ldrh	r3, [r7, #30]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	f1a3 0208 	sub.w	r2, r3, #8
 800ab10:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ab12:	429a      	cmp	r2, r3
 800ab14:	f0c0 8099 	bcc.w	800ac4a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	8bfb      	ldrh	r3, [r7, #30]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	f1a3 0208 	sub.w	r2, r3, #8
 800ab26:	8bbb      	ldrh	r3, [r7, #28]
 800ab28:	3314      	adds	r3, #20
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d333      	bcc.n	800ab96 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ab2e:	8bfa      	ldrh	r2, [r7, #30]
 800ab30:	8bbb      	ldrh	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	3308      	adds	r3, #8
 800ab38:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ab3a:	8a7b      	ldrh	r3, [r7, #18]
 800ab3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab40:	d106      	bne.n	800ab50 <mem_malloc+0xb0>
 800ab42:	4b4c      	ldr	r3, [pc, #304]	; (800ac74 <mem_malloc+0x1d4>)
 800ab44:	f240 3287 	movw	r2, #903	; 0x387
 800ab48:	494b      	ldr	r1, [pc, #300]	; (800ac78 <mem_malloc+0x1d8>)
 800ab4a:	484c      	ldr	r0, [pc, #304]	; (800ac7c <mem_malloc+0x1dc>)
 800ab4c:	f00c f8fa 	bl	8016d44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ab50:	8a7b      	ldrh	r3, [r7, #18]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7ff fd00 	bl	800a558 <ptr_to_mem>
 800ab58:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	881a      	ldrh	r2, [r3, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8bfa      	ldrh	r2, [r7, #30]
 800ab6c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	8a7a      	ldrh	r2, [r7, #18]
 800ab72:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2201      	movs	r2, #1
 800ab78:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab82:	d00b      	beq.n	800ab9c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff fce5 	bl	800a558 <ptr_to_mem>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	8a7b      	ldrh	r3, [r7, #18]
 800ab92:	8053      	strh	r3, [r2, #2]
 800ab94:	e002      	b.n	800ab9c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ab9c:	4b34      	ldr	r3, [pc, #208]	; (800ac70 <mem_malloc+0x1d0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d127      	bne.n	800abf6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800aba6:	4b32      	ldr	r3, [pc, #200]	; (800ac70 <mem_malloc+0x1d0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800abac:	e005      	b.n	800abba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff fcd0 	bl	800a558 <ptr_to_mem>
 800abb8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	791b      	ldrb	r3, [r3, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <mem_malloc+0x12c>
 800abc2:	4b2f      	ldr	r3, [pc, #188]	; (800ac80 <mem_malloc+0x1e0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d1f0      	bne.n	800abae <mem_malloc+0x10e>
          }
          lfree = cur;
 800abcc:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <mem_malloc+0x1d0>)
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800abd2:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <mem_malloc+0x1d0>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	4b2a      	ldr	r3, [pc, #168]	; (800ac80 <mem_malloc+0x1e0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d00b      	beq.n	800abf6 <mem_malloc+0x156>
 800abde:	4b24      	ldr	r3, [pc, #144]	; (800ac70 <mem_malloc+0x1d0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	791b      	ldrb	r3, [r3, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d006      	beq.n	800abf6 <mem_malloc+0x156>
 800abe8:	4b22      	ldr	r3, [pc, #136]	; (800ac74 <mem_malloc+0x1d4>)
 800abea:	f240 32b5 	movw	r2, #949	; 0x3b5
 800abee:	4925      	ldr	r1, [pc, #148]	; (800ac84 <mem_malloc+0x1e4>)
 800abf0:	4822      	ldr	r0, [pc, #136]	; (800ac7c <mem_malloc+0x1dc>)
 800abf2:	f00c f8a7 	bl	8016d44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800abf6:	8bba      	ldrh	r2, [r7, #28]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	3308      	adds	r3, #8
 800abfe:	4a20      	ldr	r2, [pc, #128]	; (800ac80 <mem_malloc+0x1e0>)
 800ac00:	6812      	ldr	r2, [r2, #0]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d906      	bls.n	800ac14 <mem_malloc+0x174>
 800ac06:	4b1b      	ldr	r3, [pc, #108]	; (800ac74 <mem_malloc+0x1d4>)
 800ac08:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ac0c:	491e      	ldr	r1, [pc, #120]	; (800ac88 <mem_malloc+0x1e8>)
 800ac0e:	481b      	ldr	r0, [pc, #108]	; (800ac7c <mem_malloc+0x1dc>)
 800ac10:	f00c f898 	bl	8016d44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d006      	beq.n	800ac2c <mem_malloc+0x18c>
 800ac1e:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <mem_malloc+0x1d4>)
 800ac20:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ac24:	4919      	ldr	r1, [pc, #100]	; (800ac8c <mem_malloc+0x1ec>)
 800ac26:	4815      	ldr	r0, [pc, #84]	; (800ac7c <mem_malloc+0x1dc>)
 800ac28:	f00c f88c 	bl	8016d44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d006      	beq.n	800ac44 <mem_malloc+0x1a4>
 800ac36:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <mem_malloc+0x1d4>)
 800ac38:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ac3c:	4914      	ldr	r1, [pc, #80]	; (800ac90 <mem_malloc+0x1f0>)
 800ac3e:	480f      	ldr	r0, [pc, #60]	; (800ac7c <mem_malloc+0x1dc>)
 800ac40:	f00c f880 	bl	8016d44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	3308      	adds	r3, #8
 800ac48:	e00e      	b.n	800ac68 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ac4a:	8bfb      	ldrh	r3, [r7, #30]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fc83 	bl	800a558 <ptr_to_mem>
 800ac52:	4603      	mov	r3, r0
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac58:	8bfa      	ldrh	r2, [r7, #30]
 800ac5a:	8bbb      	ldrh	r3, [r7, #28]
 800ac5c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ac60:	429a      	cmp	r2, r3
 800ac62:	f4ff af44 	bcc.w	800aaee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000314 	.word	0x20000314
 800ac74:	0801acb0 	.word	0x0801acb0
 800ac78:	0801ae58 	.word	0x0801ae58
 800ac7c:	0801acf8 	.word	0x0801acf8
 800ac80:	20000310 	.word	0x20000310
 800ac84:	0801ae6c 	.word	0x0801ae6c
 800ac88:	0801ae88 	.word	0x0801ae88
 800ac8c:	0801aeb8 	.word	0x0801aeb8
 800ac90:	0801aee8 	.word	0x0801aee8

0800ac94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	3303      	adds	r3, #3
 800acaa:	f023 0303 	bic.w	r3, r3, #3
 800acae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e011      	b.n	800acda <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	881b      	ldrh	r3, [r3, #0]
 800accc:	461a      	mov	r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	4413      	add	r3, r2
 800acd2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3301      	adds	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	885b      	ldrh	r3, [r3, #2]
 800acde:	461a      	mov	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4293      	cmp	r3, r2
 800ace4:	dbe7      	blt.n	800acb6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ace6:	bf00      	nop
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acfa:	2300      	movs	r3, #0
 800acfc:	80fb      	strh	r3, [r7, #6]
 800acfe:	e009      	b.n	800ad14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	4a08      	ldr	r2, [pc, #32]	; (800ad24 <memp_init+0x30>)
 800ad04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff ffc3 	bl	800ac94 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	3301      	adds	r3, #1
 800ad12:	80fb      	strh	r3, [r7, #6]
 800ad14:	88fb      	ldrh	r3, [r7, #6]
 800ad16:	2b08      	cmp	r3, #8
 800ad18:	d9f2      	bls.n	800ad00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	0801da60 	.word	0x0801da60

0800ad28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d012      	beq.n	800ad64 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	6812      	ldr	r2, [r2, #0]
 800ad46:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <do_memp_malloc_pool+0x38>
 800ad52:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <do_memp_malloc_pool+0x48>)
 800ad54:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ad58:	4906      	ldr	r1, [pc, #24]	; (800ad74 <do_memp_malloc_pool+0x4c>)
 800ad5a:	4807      	ldr	r0, [pc, #28]	; (800ad78 <do_memp_malloc_pool+0x50>)
 800ad5c:	f00b fff2 	bl	8016d44 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e000      	b.n	800ad66 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	0801af0c 	.word	0x0801af0c
 800ad74:	0801af3c 	.word	0x0801af3c
 800ad78:	0801af60 	.word	0x0801af60

0800ad7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d908      	bls.n	800ad9e <memp_malloc+0x22>
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <memp_malloc+0x3c>)
 800ad8e:	f240 1257 	movw	r2, #343	; 0x157
 800ad92:	490a      	ldr	r1, [pc, #40]	; (800adbc <memp_malloc+0x40>)
 800ad94:	480a      	ldr	r0, [pc, #40]	; (800adc0 <memp_malloc+0x44>)
 800ad96:	f00b ffd5 	bl	8016d44 <iprintf>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e008      	b.n	800adb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <memp_malloc+0x48>)
 800ada2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff ffbe 	bl	800ad28 <do_memp_malloc_pool>
 800adac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	0801af0c 	.word	0x0801af0c
 800adbc:	0801af9c 	.word	0x0801af9c
 800adc0:	0801af60 	.word	0x0801af60
 800adc4:	0801da60 	.word	0x0801da60

0800adc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d006      	beq.n	800adea <do_memp_free_pool+0x22>
 800addc:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <do_memp_free_pool+0x40>)
 800adde:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ade2:	490a      	ldr	r1, [pc, #40]	; (800ae0c <do_memp_free_pool+0x44>)
 800ade4:	480a      	ldr	r0, [pc, #40]	; (800ae10 <do_memp_free_pool+0x48>)
 800ade6:	f00b ffad 	bl	8016d44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	0801af0c 	.word	0x0801af0c
 800ae0c:	0801afbc 	.word	0x0801afbc
 800ae10:	0801af60 	.word	0x0801af60

0800ae14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	2b08      	cmp	r3, #8
 800ae24:	d907      	bls.n	800ae36 <memp_free+0x22>
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <memp_free+0x44>)
 800ae28:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ae2c:	490b      	ldr	r1, [pc, #44]	; (800ae5c <memp_free+0x48>)
 800ae2e:	480c      	ldr	r0, [pc, #48]	; (800ae60 <memp_free+0x4c>)
 800ae30:	f00b ff88 	bl	8016d44 <iprintf>
 800ae34:	e00c      	b.n	800ae50 <memp_free+0x3c>

  if (mem == NULL) {
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d008      	beq.n	800ae4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	4a09      	ldr	r2, [pc, #36]	; (800ae64 <memp_free+0x50>)
 800ae40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff ffbe 	bl	800adc8 <do_memp_free_pool>
 800ae4c:	e000      	b.n	800ae50 <memp_free+0x3c>
    return;
 800ae4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	0801af0c 	.word	0x0801af0c
 800ae5c:	0801afdc 	.word	0x0801afdc
 800ae60:	0801af60 	.word	0x0801af60
 800ae64:	0801da60 	.word	0x0801da60

0800ae68 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae6c:	bf00      	nop
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <netif_add+0x26>
 800ae8c:	4b5b      	ldr	r3, [pc, #364]	; (800affc <netif_add+0x184>)
 800ae8e:	f240 1227 	movw	r2, #295	; 0x127
 800ae92:	495b      	ldr	r1, [pc, #364]	; (800b000 <netif_add+0x188>)
 800ae94:	485b      	ldr	r0, [pc, #364]	; (800b004 <netif_add+0x18c>)
 800ae96:	f00b ff55 	bl	8016d44 <iprintf>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e0a9      	b.n	800aff2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <netif_add+0x3e>
 800aea4:	4b55      	ldr	r3, [pc, #340]	; (800affc <netif_add+0x184>)
 800aea6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aeaa:	4957      	ldr	r1, [pc, #348]	; (800b008 <netif_add+0x190>)
 800aeac:	4855      	ldr	r0, [pc, #340]	; (800b004 <netif_add+0x18c>)
 800aeae:	f00b ff49 	bl	8016d44 <iprintf>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e09d      	b.n	800aff2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aebc:	4b53      	ldr	r3, [pc, #332]	; (800b00c <netif_add+0x194>)
 800aebe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aec6:	4b51      	ldr	r3, [pc, #324]	; (800b00c <netif_add+0x194>)
 800aec8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aed0:	4b4e      	ldr	r3, [pc, #312]	; (800b00c <netif_add+0x194>)
 800aed2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4a49      	ldr	r2, [pc, #292]	; (800b010 <netif_add+0x198>)
 800aeea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3324      	adds	r3, #36	; 0x24
 800aefe:	2204      	movs	r2, #4
 800af00:	2100      	movs	r1, #0
 800af02:	4618      	mov	r0, r3
 800af04:	f00b f8ce 	bl	80160a4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a3a      	ldr	r2, [r7, #32]
 800af12:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800af14:	4b3f      	ldr	r3, [pc, #252]	; (800b014 <netif_add+0x19c>)
 800af16:	781a      	ldrb	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af22:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f914 	bl	800b158 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	4798      	blx	r3
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <netif_add+0xc8>
    return NULL;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e058      	b.n	800aff2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af46:	2bff      	cmp	r3, #255	; 0xff
 800af48:	d103      	bne.n	800af52 <netif_add+0xda>
        netif->num = 0;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af56:	4b30      	ldr	r3, [pc, #192]	; (800b018 <netif_add+0x1a0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	e02b      	b.n	800afb6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	429a      	cmp	r2, r3
 800af64:	d106      	bne.n	800af74 <netif_add+0xfc>
 800af66:	4b25      	ldr	r3, [pc, #148]	; (800affc <netif_add+0x184>)
 800af68:	f240 128b 	movw	r2, #395	; 0x18b
 800af6c:	492b      	ldr	r1, [pc, #172]	; (800b01c <netif_add+0x1a4>)
 800af6e:	4825      	ldr	r0, [pc, #148]	; (800b004 <netif_add+0x18c>)
 800af70:	f00b fee8 	bl	8016d44 <iprintf>
        num_netifs++;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	3301      	adds	r3, #1
 800af78:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2bff      	cmp	r3, #255	; 0xff
 800af7e:	dd06      	ble.n	800af8e <netif_add+0x116>
 800af80:	4b1e      	ldr	r3, [pc, #120]	; (800affc <netif_add+0x184>)
 800af82:	f240 128d 	movw	r2, #397	; 0x18d
 800af86:	4926      	ldr	r1, [pc, #152]	; (800b020 <netif_add+0x1a8>)
 800af88:	481e      	ldr	r0, [pc, #120]	; (800b004 <netif_add+0x18c>)
 800af8a:	f00b fedb 	bl	8016d44 <iprintf>
        if (netif2->num == netif->num) {
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d108      	bne.n	800afb0 <netif_add+0x138>
          netif->num++;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afa4:	3301      	adds	r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800afae:	e005      	b.n	800afbc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1d0      	bne.n	800af5e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1be      	bne.n	800af40 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afc8:	2bfe      	cmp	r3, #254	; 0xfe
 800afca:	d103      	bne.n	800afd4 <netif_add+0x15c>
    netif_num = 0;
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <netif_add+0x19c>)
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	e006      	b.n	800afe2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afda:	3301      	adds	r3, #1
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <netif_add+0x19c>)
 800afe0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afe2:	4b0d      	ldr	r3, [pc, #52]	; (800b018 <netif_add+0x1a0>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800afea:	4a0b      	ldr	r2, [pc, #44]	; (800b018 <netif_add+0x1a0>)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aff0:	68fb      	ldr	r3, [r7, #12]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	0801aff8 	.word	0x0801aff8
 800b000:	0801b08c 	.word	0x0801b08c
 800b004:	0801b048 	.word	0x0801b048
 800b008:	0801b0a8 	.word	0x0801b0a8
 800b00c:	0801dad4 	.word	0x0801dad4
 800b010:	0800b36b 	.word	0x0800b36b
 800b014:	2000033c 	.word	0x2000033c
 800b018:	20006e64 	.word	0x20006e64
 800b01c:	0801b0cc 	.word	0x0801b0cc
 800b020:	0801b0e0 	.word	0x0801b0e0

0800b024 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f002 facf 	bl	800d5d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f006 fe6f 	bl	8011d1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d106      	bne.n	800b068 <netif_do_set_ipaddr+0x20>
 800b05a:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <netif_do_set_ipaddr+0x88>)
 800b05c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b060:	491c      	ldr	r1, [pc, #112]	; (800b0d4 <netif_do_set_ipaddr+0x8c>)
 800b062:	481d      	ldr	r0, [pc, #116]	; (800b0d8 <netif_do_set_ipaddr+0x90>)
 800b064:	f00b fe6e 	bl	8016d44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <netif_do_set_ipaddr+0x34>
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <netif_do_set_ipaddr+0x88>)
 800b070:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b074:	4917      	ldr	r1, [pc, #92]	; (800b0d4 <netif_do_set_ipaddr+0x8c>)
 800b076:	4818      	ldr	r0, [pc, #96]	; (800b0d8 <netif_do_set_ipaddr+0x90>)
 800b078:	f00b fe64 	bl	8016d44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3304      	adds	r3, #4
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d01c      	beq.n	800b0c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3304      	adds	r3, #4
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b09a:	f107 0314 	add.w	r3, r7, #20
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff ffbf 	bl	800b024 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <netif_do_set_ipaddr+0x6a>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	e000      	b.n	800b0b4 <netif_do_set_ipaddr+0x6c>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f8d2 	bl	800b264 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0801aff8 	.word	0x0801aff8
 800b0d4:	0801b110 	.word	0x0801b110
 800b0d8:	0801b048 	.word	0x0801b048

0800b0dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3308      	adds	r3, #8
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d00a      	beq.n	800b10c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <netif_do_set_netmask+0x26>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	e000      	b.n	800b104 <netif_do_set_netmask+0x28>
 800b102:	2300      	movs	r3, #0
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	330c      	adds	r3, #12
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d00a      	beq.n	800b14a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <netif_do_set_gw+0x26>
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	e000      	b.n	800b142 <netif_do_set_gw+0x28>
 800b140:	2300      	movs	r3, #0
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b174:	4b1c      	ldr	r3, [pc, #112]	; (800b1e8 <netif_set_addr+0x90>)
 800b176:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b17e:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <netif_set_addr+0x90>)
 800b180:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b188:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <netif_set_addr+0x90>)
 800b18a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <netif_set_addr+0x42>
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <netif_set_addr+0x46>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <netif_set_addr+0x48>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d006      	beq.n	800b1b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7ff ff49 	bl	800b048 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7ff ff8e 	bl	800b0dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff ffa8 	bl	800b11a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b1d0:	f107 0310 	add.w	r3, r7, #16
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff ff35 	bl	800b048 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b1de:	bf00      	nop
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0801dad4 	.word	0x0801dad4

0800b1ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b1f4:	4a04      	ldr	r2, [pc, #16]	; (800b208 <netif_set_default+0x1c>)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	20006e68 	.word	0x20006e68

0800b20c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d107      	bne.n	800b22a <netif_set_up+0x1e>
 800b21a:	4b0f      	ldr	r3, [pc, #60]	; (800b258 <netif_set_up+0x4c>)
 800b21c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b220:	490e      	ldr	r1, [pc, #56]	; (800b25c <netif_set_up+0x50>)
 800b222:	480f      	ldr	r0, [pc, #60]	; (800b260 <netif_set_up+0x54>)
 800b224:	f00b fd8e 	bl	8016d44 <iprintf>
 800b228:	e013      	b.n	800b252 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10c      	bne.n	800b252 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b24a:	2103      	movs	r1, #3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f809 	bl	800b264 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	0801aff8 	.word	0x0801aff8
 800b25c:	0801b180 	.word	0x0801b180
 800b260:	0801b048 	.word	0x0801b048

0800b264 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <netif_issue_reports+0x20>
 800b276:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <netif_issue_reports+0x74>)
 800b278:	f240 326d 	movw	r2, #877	; 0x36d
 800b27c:	4917      	ldr	r1, [pc, #92]	; (800b2dc <netif_issue_reports+0x78>)
 800b27e:	4818      	ldr	r0, [pc, #96]	; (800b2e0 <netif_issue_reports+0x7c>)
 800b280:	f00b fd60 	bl	8016d44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b28a:	f003 0304 	and.w	r3, r3, #4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01e      	beq.n	800b2d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b298:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d017      	beq.n	800b2d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d013      	beq.n	800b2d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00e      	beq.n	800b2d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d007      	beq.n	800b2d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f009 faed 	bl	80148a8 <etharp_request>
 800b2ce:	e000      	b.n	800b2d2 <netif_issue_reports+0x6e>
    return;
 800b2d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	0801aff8 	.word	0x0801aff8
 800b2dc:	0801b19c 	.word	0x0801b19c
 800b2e0:	0801b048 	.word	0x0801b048

0800b2e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d107      	bne.n	800b302 <netif_set_down+0x1e>
 800b2f2:	4b12      	ldr	r3, [pc, #72]	; (800b33c <netif_set_down+0x58>)
 800b2f4:	f240 329b 	movw	r2, #923	; 0x39b
 800b2f8:	4911      	ldr	r1, [pc, #68]	; (800b340 <netif_set_down+0x5c>)
 800b2fa:	4812      	ldr	r0, [pc, #72]	; (800b344 <netif_set_down+0x60>)
 800b2fc:	f00b fd22 	bl	8016d44 <iprintf>
 800b300:	e019      	b.n	800b336 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d012      	beq.n	800b336 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b316:	f023 0301 	bic.w	r3, r3, #1
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b328:	f003 0308 	and.w	r3, r3, #8
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f008 fe73 	bl	801401c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	0801aff8 	.word	0x0801aff8
 800b340:	0801b1c0 	.word	0x0801b1c0
 800b344:	0801b048 	.word	0x0801b048

0800b348 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	61da      	str	r2, [r3, #28]
  }
}
 800b35e:	bf00      	nop
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b085      	sub	sp, #20
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b376:	f06f 030b 	mvn.w	r3, #11
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d013      	beq.n	800b3c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <netif_get_by_index+0x48>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	e00c      	b.n	800b3ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	79fa      	ldrb	r2, [r7, #7]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d101      	bne.n	800b3b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	e006      	b.n	800b3c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1ef      	bne.n	800b3a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20006e64 	.word	0x20006e64

0800b3d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b3d8:	4b03      	ldr	r3, [pc, #12]	; (800b3e8 <pbuf_pool_is_empty+0x14>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	20006e6c 	.word	0x20006e6c

0800b3ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	80fb      	strh	r3, [r7, #6]
 800b3fe:	4613      	mov	r3, r2
 800b400:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	88fa      	ldrh	r2, [r7, #6]
 800b412:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	88ba      	ldrh	r2, [r7, #4]
 800b418:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b41a:	8b3b      	ldrh	r3, [r7, #24]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	7f3a      	ldrb	r2, [r7, #28]
 800b426:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	73da      	strb	r2, [r3, #15]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af02      	add	r7, sp, #8
 800b446:	4603      	mov	r3, r0
 800b448:	71fb      	strb	r3, [r7, #7]
 800b44a:	460b      	mov	r3, r1
 800b44c:	80bb      	strh	r3, [r7, #4]
 800b44e:	4613      	mov	r3, r2
 800b450:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b456:	887b      	ldrh	r3, [r7, #2]
 800b458:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b45c:	d07f      	beq.n	800b55e <pbuf_alloc+0x11e>
 800b45e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b462:	f300 80c8 	bgt.w	800b5f6 <pbuf_alloc+0x1b6>
 800b466:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b46a:	d010      	beq.n	800b48e <pbuf_alloc+0x4e>
 800b46c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b470:	f300 80c1 	bgt.w	800b5f6 <pbuf_alloc+0x1b6>
 800b474:	2b01      	cmp	r3, #1
 800b476:	d002      	beq.n	800b47e <pbuf_alloc+0x3e>
 800b478:	2b41      	cmp	r3, #65	; 0x41
 800b47a:	f040 80bc 	bne.w	800b5f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b47e:	887a      	ldrh	r2, [r7, #2]
 800b480:	88bb      	ldrh	r3, [r7, #4]
 800b482:	4619      	mov	r1, r3
 800b484:	2000      	movs	r0, #0
 800b486:	f000 f8d1 	bl	800b62c <pbuf_alloc_reference>
 800b48a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b48c:	e0bd      	b.n	800b60a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b496:	88bb      	ldrh	r3, [r7, #4]
 800b498:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b49a:	2008      	movs	r0, #8
 800b49c:	f7ff fc6e 	bl	800ad7c <memp_malloc>
 800b4a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d109      	bne.n	800b4bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b4a8:	f7ff ff94 	bl	800b3d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b4b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4b4:	f000 faa8 	bl	800ba08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e0a7      	b.n	800b60c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4be:	3303      	adds	r3, #3
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f023 0303 	bic.w	r3, r3, #3
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	8b7a      	ldrh	r2, [r7, #26]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	bf28      	it	cs
 800b4d4:	4613      	movcs	r3, r2
 800b4d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4da:	3310      	adds	r3, #16
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	4413      	add	r3, r2
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	89f9      	ldrh	r1, [r7, #14]
 800b4ea:	8b7a      	ldrh	r2, [r7, #26]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	887b      	ldrh	r3, [r7, #2]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6938      	ldr	r0, [r7, #16]
 800b4fa:	f7ff ff77 	bl	800b3ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <pbuf_alloc+0xd8>
 800b50a:	4b42      	ldr	r3, [pc, #264]	; (800b614 <pbuf_alloc+0x1d4>)
 800b50c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b510:	4941      	ldr	r1, [pc, #260]	; (800b618 <pbuf_alloc+0x1d8>)
 800b512:	4842      	ldr	r0, [pc, #264]	; (800b61c <pbuf_alloc+0x1dc>)
 800b514:	f00b fc16 	bl	8016d44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b51a:	3303      	adds	r3, #3
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b524:	d106      	bne.n	800b534 <pbuf_alloc+0xf4>
 800b526:	4b3b      	ldr	r3, [pc, #236]	; (800b614 <pbuf_alloc+0x1d4>)
 800b528:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b52c:	493c      	ldr	r1, [pc, #240]	; (800b620 <pbuf_alloc+0x1e0>)
 800b52e:	483b      	ldr	r0, [pc, #236]	; (800b61c <pbuf_alloc+0x1dc>)
 800b530:	f00b fc08 	bl	8016d44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	627b      	str	r3, [r7, #36]	; 0x24
 800b53e:	e002      	b.n	800b546 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b54a:	8b7a      	ldrh	r2, [r7, #26]
 800b54c:	89fb      	ldrh	r3, [r7, #14]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b556:	8b7b      	ldrh	r3, [r7, #26]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d19e      	bne.n	800b49a <pbuf_alloc+0x5a>
      break;
 800b55c:	e055      	b.n	800b60a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b55e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b560:	3303      	adds	r3, #3
 800b562:	b29b      	uxth	r3, r3
 800b564:	f023 0303 	bic.w	r3, r3, #3
 800b568:	b29a      	uxth	r2, r3
 800b56a:	88bb      	ldrh	r3, [r7, #4]
 800b56c:	3303      	adds	r3, #3
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	b29b      	uxth	r3, r3
 800b576:	4413      	add	r3, r2
 800b578:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b57a:	8b3b      	ldrh	r3, [r7, #24]
 800b57c:	3310      	adds	r3, #16
 800b57e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b580:	8b3a      	ldrh	r2, [r7, #24]
 800b582:	88bb      	ldrh	r3, [r7, #4]
 800b584:	3303      	adds	r3, #3
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d306      	bcc.n	800b59c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b58e:	8afa      	ldrh	r2, [r7, #22]
 800b590:	88bb      	ldrh	r3, [r7, #4]
 800b592:	3303      	adds	r3, #3
 800b594:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b598:	429a      	cmp	r2, r3
 800b59a:	d201      	bcs.n	800b5a0 <pbuf_alloc+0x160>
        return NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	e035      	b.n	800b60c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b5a0:	8afb      	ldrh	r3, [r7, #22]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fa7c 	bl	800aaa0 <mem_malloc>
 800b5a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <pbuf_alloc+0x174>
        return NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e02b      	b.n	800b60c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b5b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5b6:	3310      	adds	r3, #16
 800b5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3303      	adds	r3, #3
 800b5be:	f023 0303 	bic.w	r3, r3, #3
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	88b9      	ldrh	r1, [r7, #4]
 800b5c6:	88ba      	ldrh	r2, [r7, #4]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	887b      	ldrh	r3, [r7, #2]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5d6:	f7ff ff09 	bl	800b3ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d010      	beq.n	800b608 <pbuf_alloc+0x1c8>
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <pbuf_alloc+0x1d4>)
 800b5e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b5ec:	490d      	ldr	r1, [pc, #52]	; (800b624 <pbuf_alloc+0x1e4>)
 800b5ee:	480b      	ldr	r0, [pc, #44]	; (800b61c <pbuf_alloc+0x1dc>)
 800b5f0:	f00b fba8 	bl	8016d44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b5f4:	e008      	b.n	800b608 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <pbuf_alloc+0x1d4>)
 800b5f8:	f240 1227 	movw	r2, #295	; 0x127
 800b5fc:	490a      	ldr	r1, [pc, #40]	; (800b628 <pbuf_alloc+0x1e8>)
 800b5fe:	4807      	ldr	r0, [pc, #28]	; (800b61c <pbuf_alloc+0x1dc>)
 800b600:	f00b fba0 	bl	8016d44 <iprintf>
      return NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	e001      	b.n	800b60c <pbuf_alloc+0x1cc>
      break;
 800b608:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3728      	adds	r7, #40	; 0x28
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	0801b228 	.word	0x0801b228
 800b618:	0801b258 	.word	0x0801b258
 800b61c:	0801b288 	.word	0x0801b288
 800b620:	0801b2b0 	.word	0x0801b2b0
 800b624:	0801b2e4 	.word	0x0801b2e4
 800b628:	0801b310 	.word	0x0801b310

0800b62c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af02      	add	r7, sp, #8
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	807b      	strh	r3, [r7, #2]
 800b638:	4613      	mov	r3, r2
 800b63a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b63c:	883b      	ldrh	r3, [r7, #0]
 800b63e:	2b41      	cmp	r3, #65	; 0x41
 800b640:	d009      	beq.n	800b656 <pbuf_alloc_reference+0x2a>
 800b642:	883b      	ldrh	r3, [r7, #0]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d006      	beq.n	800b656 <pbuf_alloc_reference+0x2a>
 800b648:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <pbuf_alloc_reference+0x5c>)
 800b64a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b64e:	490f      	ldr	r1, [pc, #60]	; (800b68c <pbuf_alloc_reference+0x60>)
 800b650:	480f      	ldr	r0, [pc, #60]	; (800b690 <pbuf_alloc_reference+0x64>)
 800b652:	f00b fb77 	bl	8016d44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b656:	2007      	movs	r0, #7
 800b658:	f7ff fb90 	bl	800ad7c <memp_malloc>
 800b65c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b664:	2300      	movs	r3, #0
 800b666:	e00b      	b.n	800b680 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b668:	8879      	ldrh	r1, [r7, #2]
 800b66a:	887a      	ldrh	r2, [r7, #2]
 800b66c:	2300      	movs	r3, #0
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	883b      	ldrh	r3, [r7, #0]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff feb7 	bl	800b3ec <pbuf_init_alloced_pbuf>
  return p;
 800b67e:	68fb      	ldr	r3, [r7, #12]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	0801b228 	.word	0x0801b228
 800b68c:	0801b32c 	.word	0x0801b32c
 800b690:	0801b288 	.word	0x0801b288

0800b694 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af02      	add	r7, sp, #8
 800b69a:	607b      	str	r3, [r7, #4]
 800b69c:	4603      	mov	r3, r0
 800b69e:	73fb      	strb	r3, [r7, #15]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	81bb      	strh	r3, [r7, #12]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b6ac:	8a7b      	ldrh	r3, [r7, #18]
 800b6ae:	3303      	adds	r3, #3
 800b6b0:	f023 0203 	bic.w	r2, r3, #3
 800b6b4:	89bb      	ldrh	r3, [r7, #12]
 800b6b6:	441a      	add	r2, r3
 800b6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d901      	bls.n	800b6c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e018      	b.n	800b6f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d007      	beq.n	800b6d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b6c8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ca:	3303      	adds	r3, #3
 800b6cc:	f023 0303 	bic.w	r3, r3, #3
 800b6d0:	6a3a      	ldr	r2, [r7, #32]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	e001      	b.n	800b6dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	89b9      	ldrh	r1, [r7, #12]
 800b6e0:	89ba      	ldrh	r2, [r7, #12]
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	897b      	ldrh	r3, [r7, #10]
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	6979      	ldr	r1, [r7, #20]
 800b6ee:	f7ff fe7d 	bl	800b3ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b6f2:	687b      	ldr	r3, [r7, #4]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <pbuf_realloc+0x20>
 800b70e:	4b3a      	ldr	r3, [pc, #232]	; (800b7f8 <pbuf_realloc+0xfc>)
 800b710:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b714:	4939      	ldr	r1, [pc, #228]	; (800b7fc <pbuf_realloc+0x100>)
 800b716:	483a      	ldr	r0, [pc, #232]	; (800b800 <pbuf_realloc+0x104>)
 800b718:	f00b fb14 	bl	8016d44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	891b      	ldrh	r3, [r3, #8]
 800b720:	887a      	ldrh	r2, [r7, #2]
 800b722:	429a      	cmp	r2, r3
 800b724:	d263      	bcs.n	800b7ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	891a      	ldrh	r2, [r3, #8]
 800b72a:	887b      	ldrh	r3, [r7, #2]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b730:	887b      	ldrh	r3, [r7, #2]
 800b732:	817b      	strh	r3, [r7, #10]
  q = p;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b738:	e018      	b.n	800b76c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	895b      	ldrh	r3, [r3, #10]
 800b73e:	897a      	ldrh	r2, [r7, #10]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	891a      	ldrh	r2, [r3, #8]
 800b748:	893b      	ldrh	r3, [r7, #8]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <pbuf_realloc+0x70>
 800b75e:	4b26      	ldr	r3, [pc, #152]	; (800b7f8 <pbuf_realloc+0xfc>)
 800b760:	f240 12af 	movw	r2, #431	; 0x1af
 800b764:	4927      	ldr	r1, [pc, #156]	; (800b804 <pbuf_realloc+0x108>)
 800b766:	4826      	ldr	r0, [pc, #152]	; (800b800 <pbuf_realloc+0x104>)
 800b768:	f00b faec 	bl	8016d44 <iprintf>
  while (rem_len > q->len) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	895b      	ldrh	r3, [r3, #10]
 800b770:	897a      	ldrh	r2, [r7, #10]
 800b772:	429a      	cmp	r2, r3
 800b774:	d8e1      	bhi.n	800b73a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	7b1b      	ldrb	r3, [r3, #12]
 800b77a:	f003 030f 	and.w	r3, r3, #15
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d121      	bne.n	800b7c6 <pbuf_realloc+0xca>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	895b      	ldrh	r3, [r3, #10]
 800b786:	897a      	ldrh	r2, [r7, #10]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d01c      	beq.n	800b7c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	7b5b      	ldrb	r3, [r3, #13]
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b00      	cmp	r3, #0
 800b796:	d116      	bne.n	800b7c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	897b      	ldrh	r3, [r7, #10]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff f87c 	bl	800a8a8 <mem_trim>
 800b7b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <pbuf_realloc+0xca>
 800b7b8:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <pbuf_realloc+0xfc>)
 800b7ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b7be:	4912      	ldr	r1, [pc, #72]	; (800b808 <pbuf_realloc+0x10c>)
 800b7c0:	480f      	ldr	r0, [pc, #60]	; (800b800 <pbuf_realloc+0x104>)
 800b7c2:	f00b fabf 	bl	8016d44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	897a      	ldrh	r2, [r7, #10]
 800b7ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	895a      	ldrh	r2, [r3, #10]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 f911 	bl	800ba08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e000      	b.n	800b7f0 <pbuf_realloc+0xf4>
    return;
 800b7ee:	bf00      	nop

}
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0801b228 	.word	0x0801b228
 800b7fc:	0801b340 	.word	0x0801b340
 800b800:	0801b288 	.word	0x0801b288
 800b804:	0801b358 	.word	0x0801b358
 800b808:	0801b370 	.word	0x0801b370

0800b80c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <pbuf_add_header_impl+0x22>
 800b820:	4b2b      	ldr	r3, [pc, #172]	; (800b8d0 <pbuf_add_header_impl+0xc4>)
 800b822:	f240 12df 	movw	r2, #479	; 0x1df
 800b826:	492b      	ldr	r1, [pc, #172]	; (800b8d4 <pbuf_add_header_impl+0xc8>)
 800b828:	482b      	ldr	r0, [pc, #172]	; (800b8d8 <pbuf_add_header_impl+0xcc>)
 800b82a:	f00b fa8b 	bl	8016d44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <pbuf_add_header_impl+0x30>
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83a:	d301      	bcc.n	800b840 <pbuf_add_header_impl+0x34>
    return 1;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e043      	b.n	800b8c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <pbuf_add_header_impl+0x3e>
    return 0;
 800b846:	2300      	movs	r3, #0
 800b848:	e03e      	b.n	800b8c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	891a      	ldrh	r2, [r3, #8]
 800b852:	8a7b      	ldrh	r3, [r7, #18]
 800b854:	4413      	add	r3, r2
 800b856:	b29b      	uxth	r3, r3
 800b858:	8a7a      	ldrh	r2, [r7, #18]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d901      	bls.n	800b862 <pbuf_add_header_impl+0x56>
    return 1;
 800b85e:	2301      	movs	r3, #1
 800b860:	e032      	b.n	800b8c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	7b1b      	ldrb	r3, [r3, #12]
 800b866:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b868:	8a3b      	ldrh	r3, [r7, #16]
 800b86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00c      	beq.n	800b88c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	425b      	negs	r3, r3
 800b87a:	4413      	add	r3, r2
 800b87c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3310      	adds	r3, #16
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	429a      	cmp	r2, r3
 800b886:	d20d      	bcs.n	800b8a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b888:	2301      	movs	r3, #1
 800b88a:	e01d      	b.n	800b8c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d006      	beq.n	800b8a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	425b      	negs	r3, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e001      	b.n	800b8a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e011      	b.n	800b8c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	895a      	ldrh	r2, [r3, #10]
 800b8ae:	8a7b      	ldrh	r3, [r7, #18]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	891a      	ldrh	r2, [r3, #8]
 800b8bc:	8a7b      	ldrh	r3, [r7, #18]
 800b8be:	4413      	add	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	0801b228 	.word	0x0801b228
 800b8d4:	0801b38c 	.word	0x0801b38c
 800b8d8:	0801b288 	.word	0x0801b288

0800b8dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff ff8e 	bl	800b80c <pbuf_add_header_impl>
 800b8f0:	4603      	mov	r3, r0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <pbuf_remove_header+0x1e>
 800b90c:	4b20      	ldr	r3, [pc, #128]	; (800b990 <pbuf_remove_header+0x94>)
 800b90e:	f240 224b 	movw	r2, #587	; 0x24b
 800b912:	4920      	ldr	r1, [pc, #128]	; (800b994 <pbuf_remove_header+0x98>)
 800b914:	4820      	ldr	r0, [pc, #128]	; (800b998 <pbuf_remove_header+0x9c>)
 800b916:	f00b fa15 	bl	8016d44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <pbuf_remove_header+0x2c>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b926:	d301      	bcc.n	800b92c <pbuf_remove_header+0x30>
    return 1;
 800b928:	2301      	movs	r3, #1
 800b92a:	e02c      	b.n	800b986 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <pbuf_remove_header+0x3a>
    return 0;
 800b932:	2300      	movs	r3, #0
 800b934:	e027      	b.n	800b986 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	895b      	ldrh	r3, [r3, #10]
 800b93e:	89fa      	ldrh	r2, [r7, #14]
 800b940:	429a      	cmp	r2, r3
 800b942:	d908      	bls.n	800b956 <pbuf_remove_header+0x5a>
 800b944:	4b12      	ldr	r3, [pc, #72]	; (800b990 <pbuf_remove_header+0x94>)
 800b946:	f240 2255 	movw	r2, #597	; 0x255
 800b94a:	4914      	ldr	r1, [pc, #80]	; (800b99c <pbuf_remove_header+0xa0>)
 800b94c:	4812      	ldr	r0, [pc, #72]	; (800b998 <pbuf_remove_header+0x9c>)
 800b94e:	f00b f9f9 	bl	8016d44 <iprintf>
 800b952:	2301      	movs	r3, #1
 800b954:	e017      	b.n	800b986 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	441a      	add	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	895a      	ldrh	r2, [r3, #10]
 800b96c:	89fb      	ldrh	r3, [r7, #14]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	b29a      	uxth	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	891a      	ldrh	r2, [r3, #8]
 800b97a:	89fb      	ldrh	r3, [r7, #14]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	b29a      	uxth	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	0801b228 	.word	0x0801b228
 800b994:	0801b38c 	.word	0x0801b38c
 800b998:	0801b288 	.word	0x0801b288
 800b99c:	0801b398 	.word	0x0801b398

0800b9a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	807b      	strh	r3, [r7, #2]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b9b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	da08      	bge.n	800b9ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b9b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9bc:	425b      	negs	r3, r3
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f7ff ff9b 	bl	800b8fc <pbuf_remove_header>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	e007      	b.n	800b9da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b9ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9ce:	787a      	ldrb	r2, [r7, #1]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7ff ff1a 	bl	800b80c <pbuf_add_header_impl>
 800b9d8:	4603      	mov	r3, r0
  }
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b9ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff ffd2 	bl	800b9a0 <pbuf_header_impl>
 800b9fc:	4603      	mov	r3, r0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10b      	bne.n	800ba2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <pbuf_free+0x22>
 800ba1c:	4b38      	ldr	r3, [pc, #224]	; (800bb00 <pbuf_free+0xf8>)
 800ba1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ba22:	4938      	ldr	r1, [pc, #224]	; (800bb04 <pbuf_free+0xfc>)
 800ba24:	4838      	ldr	r0, [pc, #224]	; (800bb08 <pbuf_free+0x100>)
 800ba26:	f00b f98d 	bl	8016d44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e063      	b.n	800baf6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba32:	e05c      	b.n	800baee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7b9b      	ldrb	r3, [r3, #14]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <pbuf_free+0x42>
 800ba3c:	4b30      	ldr	r3, [pc, #192]	; (800bb00 <pbuf_free+0xf8>)
 800ba3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ba42:	4932      	ldr	r1, [pc, #200]	; (800bb0c <pbuf_free+0x104>)
 800ba44:	4830      	ldr	r0, [pc, #192]	; (800bb08 <pbuf_free+0x100>)
 800ba46:	f00b f97d 	bl	8016d44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7b9b      	ldrb	r3, [r3, #14]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	739a      	strb	r2, [r3, #14]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7b9b      	ldrb	r3, [r3, #14]
 800ba5a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba5c:	7dbb      	ldrb	r3, [r7, #22]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d143      	bne.n	800baea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	7b1b      	ldrb	r3, [r3, #12]
 800ba6c:	f003 030f 	and.w	r3, r3, #15
 800ba70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	7b5b      	ldrb	r3, [r3, #13]
 800ba76:	f003 0302 	and.w	r3, r3, #2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d011      	beq.n	800baa2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <pbuf_free+0x90>
 800ba8a:	4b1d      	ldr	r3, [pc, #116]	; (800bb00 <pbuf_free+0xf8>)
 800ba8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ba90:	491f      	ldr	r1, [pc, #124]	; (800bb10 <pbuf_free+0x108>)
 800ba92:	481d      	ldr	r0, [pc, #116]	; (800bb08 <pbuf_free+0x100>)
 800ba94:	f00b f956 	bl	8016d44 <iprintf>
        pc->custom_free_function(p);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
 800baa0:	e01d      	b.n	800bade <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d104      	bne.n	800bab2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800baa8:	6879      	ldr	r1, [r7, #4]
 800baaa:	2008      	movs	r0, #8
 800baac:	f7ff f9b2 	bl	800ae14 <memp_free>
 800bab0:	e015      	b.n	800bade <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d104      	bne.n	800bac2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	2007      	movs	r0, #7
 800babc:	f7ff f9aa 	bl	800ae14 <memp_free>
 800bac0:	e00d      	b.n	800bade <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d103      	bne.n	800bad0 <pbuf_free+0xc8>
          mem_free(p);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7fe fe83 	bl	800a7d4 <mem_free>
 800bace:	e006      	b.n	800bade <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bad0:	4b0b      	ldr	r3, [pc, #44]	; (800bb00 <pbuf_free+0xf8>)
 800bad2:	f240 320f 	movw	r2, #783	; 0x30f
 800bad6:	490f      	ldr	r1, [pc, #60]	; (800bb14 <pbuf_free+0x10c>)
 800bad8:	480b      	ldr	r0, [pc, #44]	; (800bb08 <pbuf_free+0x100>)
 800bada:	f00b f933 	bl	8016d44 <iprintf>
        }
      }
      count++;
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	3301      	adds	r3, #1
 800bae2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	e001      	b.n	800baee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d19f      	bne.n	800ba34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	0801b228 	.word	0x0801b228
 800bb04:	0801b38c 	.word	0x0801b38c
 800bb08:	0801b288 	.word	0x0801b288
 800bb0c:	0801b3b8 	.word	0x0801b3b8
 800bb10:	0801b3d0 	.word	0x0801b3d0
 800bb14:	0801b3f4 	.word	0x0801b3f4

0800bb18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb24:	e005      	b.n	800bb32 <pbuf_clen+0x1a>
    ++len;
 800bb26:	89fb      	ldrh	r3, [r7, #14]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f6      	bne.n	800bb26 <pbuf_clen+0xe>
  }
  return len;
 800bb38:	89fb      	ldrh	r3, [r7, #14]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
	...

0800bb48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d010      	beq.n	800bb78 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7b9b      	ldrb	r3, [r3, #14]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7b9b      	ldrb	r3, [r3, #14]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <pbuf_ref+0x30>
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <pbuf_ref+0x38>)
 800bb6c:	f240 3242 	movw	r2, #834	; 0x342
 800bb70:	4904      	ldr	r1, [pc, #16]	; (800bb84 <pbuf_ref+0x3c>)
 800bb72:	4805      	ldr	r0, [pc, #20]	; (800bb88 <pbuf_ref+0x40>)
 800bb74:	f00b f8e6 	bl	8016d44 <iprintf>
  }
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0801b228 	.word	0x0801b228
 800bb84:	0801b408 	.word	0x0801b408
 800bb88:	0801b288 	.word	0x0801b288

0800bb8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <pbuf_cat+0x16>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d107      	bne.n	800bbb2 <pbuf_cat+0x26>
 800bba2:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <pbuf_cat+0x98>)
 800bba4:	f240 3259 	movw	r2, #857	; 0x359
 800bba8:	491f      	ldr	r1, [pc, #124]	; (800bc28 <pbuf_cat+0x9c>)
 800bbaa:	4820      	ldr	r0, [pc, #128]	; (800bc2c <pbuf_cat+0xa0>)
 800bbac:	f00b f8ca 	bl	8016d44 <iprintf>
 800bbb0:	e034      	b.n	800bc1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	e00a      	b.n	800bbce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	891a      	ldrh	r2, [r3, #8]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	891b      	ldrh	r3, [r3, #8]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f0      	bne.n	800bbb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	891a      	ldrh	r2, [r3, #8]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d006      	beq.n	800bbf0 <pbuf_cat+0x64>
 800bbe2:	4b10      	ldr	r3, [pc, #64]	; (800bc24 <pbuf_cat+0x98>)
 800bbe4:	f240 3262 	movw	r2, #866	; 0x362
 800bbe8:	4911      	ldr	r1, [pc, #68]	; (800bc30 <pbuf_cat+0xa4>)
 800bbea:	4810      	ldr	r0, [pc, #64]	; (800bc2c <pbuf_cat+0xa0>)
 800bbec:	f00b f8aa 	bl	8016d44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d006      	beq.n	800bc06 <pbuf_cat+0x7a>
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <pbuf_cat+0x98>)
 800bbfa:	f240 3263 	movw	r2, #867	; 0x363
 800bbfe:	490d      	ldr	r1, [pc, #52]	; (800bc34 <pbuf_cat+0xa8>)
 800bc00:	480a      	ldr	r0, [pc, #40]	; (800bc2c <pbuf_cat+0xa0>)
 800bc02:	f00b f89f 	bl	8016d44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	891a      	ldrh	r2, [r3, #8]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	891b      	ldrh	r3, [r3, #8]
 800bc0e:	4413      	add	r3, r2
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0801b228 	.word	0x0801b228
 800bc28:	0801b41c 	.word	0x0801b41c
 800bc2c:	0801b288 	.word	0x0801b288
 800bc30:	0801b454 	.word	0x0801b454
 800bc34:	0801b484 	.word	0x0801b484

0800bc38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff ffa1 	bl	800bb8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc4a:	6838      	ldr	r0, [r7, #0]
 800bc4c:	f7ff ff7c 	bl	800bb48 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	2300      	movs	r3, #0
 800bc68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d008      	beq.n	800bc82 <pbuf_copy+0x2a>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d005      	beq.n	800bc82 <pbuf_copy+0x2a>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	891a      	ldrh	r2, [r3, #8]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	891b      	ldrh	r3, [r3, #8]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d209      	bcs.n	800bc96 <pbuf_copy+0x3e>
 800bc82:	4b57      	ldr	r3, [pc, #348]	; (800bde0 <pbuf_copy+0x188>)
 800bc84:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bc88:	4956      	ldr	r1, [pc, #344]	; (800bde4 <pbuf_copy+0x18c>)
 800bc8a:	4857      	ldr	r0, [pc, #348]	; (800bde8 <pbuf_copy+0x190>)
 800bc8c:	f00b f85a 	bl	8016d44 <iprintf>
 800bc90:	f06f 030f 	mvn.w	r3, #15
 800bc94:	e09f      	b.n	800bdd6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	895b      	ldrh	r3, [r3, #10]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	895b      	ldrh	r3, [r3, #10]
 800bca4:	4619      	mov	r1, r3
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	1acb      	subs	r3, r1, r3
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d306      	bcc.n	800bcbc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	895b      	ldrh	r3, [r3, #10]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	e005      	b.n	800bcc8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	895b      	ldrh	r3, [r3, #10]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	18d0      	adds	r0, r2, r3
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f00a f9ba 	bl	8016054 <memcpy>
    offset_to += len;
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	4413      	add	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4413      	add	r3, r2
 800bcee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	895b      	ldrh	r3, [r3, #10]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d906      	bls.n	800bd0a <pbuf_copy+0xb2>
 800bcfc:	4b38      	ldr	r3, [pc, #224]	; (800bde0 <pbuf_copy+0x188>)
 800bcfe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bd02:	493a      	ldr	r1, [pc, #232]	; (800bdec <pbuf_copy+0x194>)
 800bd04:	4838      	ldr	r0, [pc, #224]	; (800bde8 <pbuf_copy+0x190>)
 800bd06:	f00b f81d 	bl	8016d44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	895b      	ldrh	r3, [r3, #10]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d906      	bls.n	800bd24 <pbuf_copy+0xcc>
 800bd16:	4b32      	ldr	r3, [pc, #200]	; (800bde0 <pbuf_copy+0x188>)
 800bd18:	f240 32da 	movw	r2, #986	; 0x3da
 800bd1c:	4934      	ldr	r1, [pc, #208]	; (800bdf0 <pbuf_copy+0x198>)
 800bd1e:	4832      	ldr	r0, [pc, #200]	; (800bde8 <pbuf_copy+0x190>)
 800bd20:	f00b f810 	bl	8016d44 <iprintf>
    if (offset_from >= p_from->len) {
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	895b      	ldrh	r3, [r3, #10]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d304      	bcc.n	800bd3a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	895b      	ldrh	r3, [r3, #10]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d114      	bne.n	800bd70 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10c      	bne.n	800bd70 <pbuf_copy+0x118>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d009      	beq.n	800bd70 <pbuf_copy+0x118>
 800bd5c:	4b20      	ldr	r3, [pc, #128]	; (800bde0 <pbuf_copy+0x188>)
 800bd5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bd62:	4924      	ldr	r1, [pc, #144]	; (800bdf4 <pbuf_copy+0x19c>)
 800bd64:	4820      	ldr	r0, [pc, #128]	; (800bde8 <pbuf_copy+0x190>)
 800bd66:	f00a ffed 	bl	8016d44 <iprintf>
 800bd6a:	f06f 030f 	mvn.w	r3, #15
 800bd6e:	e032      	b.n	800bdd6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d013      	beq.n	800bd9e <pbuf_copy+0x146>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	895a      	ldrh	r2, [r3, #10]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	891b      	ldrh	r3, [r3, #8]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d10d      	bne.n	800bd9e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d009      	beq.n	800bd9e <pbuf_copy+0x146>
 800bd8a:	4b15      	ldr	r3, [pc, #84]	; (800bde0 <pbuf_copy+0x188>)
 800bd8c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bd90:	4919      	ldr	r1, [pc, #100]	; (800bdf8 <pbuf_copy+0x1a0>)
 800bd92:	4815      	ldr	r0, [pc, #84]	; (800bde8 <pbuf_copy+0x190>)
 800bd94:	f00a ffd6 	bl	8016d44 <iprintf>
 800bd98:	f06f 0305 	mvn.w	r3, #5
 800bd9c:	e01b      	b.n	800bdd6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d013      	beq.n	800bdcc <pbuf_copy+0x174>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	895a      	ldrh	r2, [r3, #10]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	891b      	ldrh	r3, [r3, #8]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d10d      	bne.n	800bdcc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d009      	beq.n	800bdcc <pbuf_copy+0x174>
 800bdb8:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <pbuf_copy+0x188>)
 800bdba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bdbe:	490e      	ldr	r1, [pc, #56]	; (800bdf8 <pbuf_copy+0x1a0>)
 800bdc0:	4809      	ldr	r0, [pc, #36]	; (800bde8 <pbuf_copy+0x190>)
 800bdc2:	f00a ffbf 	bl	8016d44 <iprintf>
 800bdc6:	f06f 0305 	mvn.w	r3, #5
 800bdca:	e004      	b.n	800bdd6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f47f af61 	bne.w	800bc96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	0801b228 	.word	0x0801b228
 800bde4:	0801b4d0 	.word	0x0801b4d0
 800bde8:	0801b288 	.word	0x0801b288
 800bdec:	0801b500 	.word	0x0801b500
 800bdf0:	0801b518 	.word	0x0801b518
 800bdf4:	0801b534 	.word	0x0801b534
 800bdf8:	0801b544 	.word	0x0801b544

0800bdfc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4611      	mov	r1, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	460b      	mov	r3, r1
 800be0c:	80fb      	strh	r3, [r7, #6]
 800be0e:	4613      	mov	r3, r2
 800be10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d108      	bne.n	800be32 <pbuf_copy_partial+0x36>
 800be20:	4b2b      	ldr	r3, [pc, #172]	; (800bed0 <pbuf_copy_partial+0xd4>)
 800be22:	f240 420a 	movw	r2, #1034	; 0x40a
 800be26:	492b      	ldr	r1, [pc, #172]	; (800bed4 <pbuf_copy_partial+0xd8>)
 800be28:	482b      	ldr	r0, [pc, #172]	; (800bed8 <pbuf_copy_partial+0xdc>)
 800be2a:	f00a ff8b 	bl	8016d44 <iprintf>
 800be2e:	2300      	movs	r3, #0
 800be30:	e04a      	b.n	800bec8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d108      	bne.n	800be4a <pbuf_copy_partial+0x4e>
 800be38:	4b25      	ldr	r3, [pc, #148]	; (800bed0 <pbuf_copy_partial+0xd4>)
 800be3a:	f240 420b 	movw	r2, #1035	; 0x40b
 800be3e:	4927      	ldr	r1, [pc, #156]	; (800bedc <pbuf_copy_partial+0xe0>)
 800be40:	4825      	ldr	r0, [pc, #148]	; (800bed8 <pbuf_copy_partial+0xdc>)
 800be42:	f00a ff7f 	bl	8016d44 <iprintf>
 800be46:	2300      	movs	r3, #0
 800be48:	e03e      	b.n	800bec8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	61fb      	str	r3, [r7, #28]
 800be4e:	e034      	b.n	800beba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be50:	88bb      	ldrh	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00a      	beq.n	800be6c <pbuf_copy_partial+0x70>
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	895b      	ldrh	r3, [r3, #10]
 800be5a:	88ba      	ldrh	r2, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d305      	bcc.n	800be6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	895b      	ldrh	r3, [r3, #10]
 800be64:	88ba      	ldrh	r2, [r7, #4]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	80bb      	strh	r3, [r7, #4]
 800be6a:	e023      	b.n	800beb4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	895a      	ldrh	r2, [r3, #10]
 800be70:	88bb      	ldrh	r3, [r7, #4]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800be76:	8b3a      	ldrh	r2, [r7, #24]
 800be78:	88fb      	ldrh	r3, [r7, #6]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d901      	bls.n	800be82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800be82:	8b7b      	ldrh	r3, [r7, #26]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	18d0      	adds	r0, r2, r3
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	88bb      	ldrh	r3, [r7, #4]
 800be8e:	4413      	add	r3, r2
 800be90:	8b3a      	ldrh	r2, [r7, #24]
 800be92:	4619      	mov	r1, r3
 800be94:	f00a f8de 	bl	8016054 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800be98:	8afa      	ldrh	r2, [r7, #22]
 800be9a:	8b3b      	ldrh	r3, [r7, #24]
 800be9c:	4413      	add	r3, r2
 800be9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bea0:	8b7a      	ldrh	r2, [r7, #26]
 800bea2:	8b3b      	ldrh	r3, [r7, #24]
 800bea4:	4413      	add	r3, r2
 800bea6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bea8:	88fa      	ldrh	r2, [r7, #6]
 800beaa:	8b3b      	ldrh	r3, [r7, #24]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	61fb      	str	r3, [r7, #28]
 800beba:	88fb      	ldrh	r3, [r7, #6]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <pbuf_copy_partial+0xca>
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1c4      	bne.n	800be50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bec6:	8afb      	ldrh	r3, [r7, #22]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	0801b228 	.word	0x0801b228
 800bed4:	0801b570 	.word	0x0801b570
 800bed8:	0801b288 	.word	0x0801b288
 800bedc:	0801b590 	.word	0x0801b590

0800bee0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	603a      	str	r2, [r7, #0]
 800beea:	71fb      	strb	r3, [r7, #7]
 800beec:	460b      	mov	r3, r1
 800beee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	8919      	ldrh	r1, [r3, #8]
 800bef4:	88ba      	ldrh	r2, [r7, #4]
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7ff faa1 	bl	800b440 <pbuf_alloc>
 800befe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <pbuf_clone+0x2a>
    return NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e011      	b.n	800bf2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f7ff fea3 	bl	800bc58 <pbuf_copy>
 800bf12:	4603      	mov	r3, r0
 800bf14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bf16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <pbuf_clone+0x4c>
 800bf1e:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <pbuf_clone+0x58>)
 800bf20:	f240 5224 	movw	r2, #1316	; 0x524
 800bf24:	4905      	ldr	r1, [pc, #20]	; (800bf3c <pbuf_clone+0x5c>)
 800bf26:	4806      	ldr	r0, [pc, #24]	; (800bf40 <pbuf_clone+0x60>)
 800bf28:	f00a ff0c 	bl	8016d44 <iprintf>
  return q;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	0801b228 	.word	0x0801b228
 800bf3c:	0801b69c 	.word	0x0801b69c
 800bf40:	0801b288 	.word	0x0801b288

0800bf44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf48:	f00a ff14 	bl	8016d74 <rand>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	4b01      	ldr	r3, [pc, #4]	; (800bf64 <tcp_init+0x20>)
 800bf5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf60:	bf00      	nop
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	2000004e 	.word	0x2000004e

0800bf68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7d1b      	ldrb	r3, [r3, #20]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d105      	bne.n	800bf84 <tcp_free+0x1c>
 800bf78:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <tcp_free+0x2c>)
 800bf7a:	22d4      	movs	r2, #212	; 0xd4
 800bf7c:	4906      	ldr	r1, [pc, #24]	; (800bf98 <tcp_free+0x30>)
 800bf7e:	4807      	ldr	r0, [pc, #28]	; (800bf9c <tcp_free+0x34>)
 800bf80:	f00a fee0 	bl	8016d44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	2001      	movs	r0, #1
 800bf88:	f7fe ff44 	bl	800ae14 <memp_free>
}
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	0801b728 	.word	0x0801b728
 800bf98:	0801b758 	.word	0x0801b758
 800bf9c:	0801b76c 	.word	0x0801b76c

0800bfa0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7d1b      	ldrb	r3, [r3, #20]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d105      	bne.n	800bfbc <tcp_free_listen+0x1c>
 800bfb0:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <tcp_free_listen+0x2c>)
 800bfb2:	22df      	movs	r2, #223	; 0xdf
 800bfb4:	4906      	ldr	r1, [pc, #24]	; (800bfd0 <tcp_free_listen+0x30>)
 800bfb6:	4807      	ldr	r0, [pc, #28]	; (800bfd4 <tcp_free_listen+0x34>)
 800bfb8:	f00a fec4 	bl	8016d44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	2002      	movs	r0, #2
 800bfc0:	f7fe ff28 	bl	800ae14 <memp_free>
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	0801b728 	.word	0x0801b728
 800bfd0:	0801b794 	.word	0x0801b794
 800bfd4:	0801b76c 	.word	0x0801b76c

0800bfd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bfdc:	f000 fea2 	bl	800cd24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bfe0:	4b07      	ldr	r3, [pc, #28]	; (800c000 <tcp_tmr+0x28>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	4b05      	ldr	r3, [pc, #20]	; (800c000 <tcp_tmr+0x28>)
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	4b04      	ldr	r3, [pc, #16]	; (800c000 <tcp_tmr+0x28>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bff8:	f000 fb54 	bl	800c6a4 <tcp_slowtmr>
  }
}
 800bffc:	bf00      	nop
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	2000033d 	.word	0x2000033d

0800c004 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <tcp_remove_listener+0x1c>
 800c014:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <tcp_remove_listener+0x48>)
 800c016:	22ff      	movs	r2, #255	; 0xff
 800c018:	490d      	ldr	r1, [pc, #52]	; (800c050 <tcp_remove_listener+0x4c>)
 800c01a:	480e      	ldr	r0, [pc, #56]	; (800c054 <tcp_remove_listener+0x50>)
 800c01c:	f00a fe92 	bl	8016d44 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e00a      	b.n	800c03c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d102      	bne.n	800c036 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1f1      	bne.n	800c026 <tcp_remove_listener+0x22>
    }
  }
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	0801b728 	.word	0x0801b728
 800c050:	0801b7b0 	.word	0x0801b7b0
 800c054:	0801b76c 	.word	0x0801b76c

0800c058 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <tcp_listen_closed+0x1c>
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <tcp_listen_closed+0x60>)
 800c068:	f240 1211 	movw	r2, #273	; 0x111
 800c06c:	4913      	ldr	r1, [pc, #76]	; (800c0bc <tcp_listen_closed+0x64>)
 800c06e:	4814      	ldr	r0, [pc, #80]	; (800c0c0 <tcp_listen_closed+0x68>)
 800c070:	f00a fe68 	bl	8016d44 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7d1b      	ldrb	r3, [r3, #20]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d006      	beq.n	800c08a <tcp_listen_closed+0x32>
 800c07c:	4b0e      	ldr	r3, [pc, #56]	; (800c0b8 <tcp_listen_closed+0x60>)
 800c07e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c082:	4910      	ldr	r1, [pc, #64]	; (800c0c4 <tcp_listen_closed+0x6c>)
 800c084:	480e      	ldr	r0, [pc, #56]	; (800c0c0 <tcp_listen_closed+0x68>)
 800c086:	f00a fe5d 	bl	8016d44 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c08a:	2301      	movs	r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e00b      	b.n	800c0a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c090:	4a0d      	ldr	r2, [pc, #52]	; (800c0c8 <tcp_listen_closed+0x70>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7ff ffb1 	bl	800c004 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d9f0      	bls.n	800c090 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	0801b728 	.word	0x0801b728
 800c0bc:	0801b7d8 	.word	0x0801b7d8
 800c0c0:	0801b76c 	.word	0x0801b76c
 800c0c4:	0801b7e4 	.word	0x0801b7e4
 800c0c8:	0801da9c 	.word	0x0801da9c

0800c0cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c0cc:	b5b0      	push	{r4, r5, r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af04      	add	r7, sp, #16
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <tcp_close_shutdown+0x20>
 800c0de:	4b63      	ldr	r3, [pc, #396]	; (800c26c <tcp_close_shutdown+0x1a0>)
 800c0e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c0e4:	4962      	ldr	r1, [pc, #392]	; (800c270 <tcp_close_shutdown+0x1a4>)
 800c0e6:	4863      	ldr	r0, [pc, #396]	; (800c274 <tcp_close_shutdown+0x1a8>)
 800c0e8:	f00a fe2c 	bl	8016d44 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c0ec:	78fb      	ldrb	r3, [r7, #3]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d066      	beq.n	800c1c0 <tcp_close_shutdown+0xf4>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7d1b      	ldrb	r3, [r3, #20]
 800c0f6:	2b04      	cmp	r3, #4
 800c0f8:	d003      	beq.n	800c102 <tcp_close_shutdown+0x36>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7d1b      	ldrb	r3, [r3, #20]
 800c0fe:	2b07      	cmp	r3, #7
 800c100:	d15e      	bne.n	800c1c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c106:	2b00      	cmp	r3, #0
 800c108:	d104      	bne.n	800c114 <tcp_close_shutdown+0x48>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c10e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c112:	d055      	beq.n	800c1c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8b5b      	ldrh	r3, [r3, #26]
 800c118:	f003 0310 	and.w	r3, r3, #16
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d106      	bne.n	800c12e <tcp_close_shutdown+0x62>
 800c120:	4b52      	ldr	r3, [pc, #328]	; (800c26c <tcp_close_shutdown+0x1a0>)
 800c122:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c126:	4954      	ldr	r1, [pc, #336]	; (800c278 <tcp_close_shutdown+0x1ac>)
 800c128:	4852      	ldr	r0, [pc, #328]	; (800c274 <tcp_close_shutdown+0x1a8>)
 800c12a:	f00a fe0b 	bl	8016d44 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c136:	687d      	ldr	r5, [r7, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3304      	adds	r3, #4
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	8ad2      	ldrh	r2, [r2, #22]
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	8b09      	ldrh	r1, [r1, #24]
 800c144:	9102      	str	r1, [sp, #8]
 800c146:	9201      	str	r2, [sp, #4]
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	462b      	mov	r3, r5
 800c14c:	4622      	mov	r2, r4
 800c14e:	4601      	mov	r1, r0
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f004 fe8d 	bl	8010e70 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f001 f8c6 	bl	800d2e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c15c:	4b47      	ldr	r3, [pc, #284]	; (800c27c <tcp_close_shutdown+0x1b0>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d105      	bne.n	800c172 <tcp_close_shutdown+0xa6>
 800c166:	4b45      	ldr	r3, [pc, #276]	; (800c27c <tcp_close_shutdown+0x1b0>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	4a43      	ldr	r2, [pc, #268]	; (800c27c <tcp_close_shutdown+0x1b0>)
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	e013      	b.n	800c19a <tcp_close_shutdown+0xce>
 800c172:	4b42      	ldr	r3, [pc, #264]	; (800c27c <tcp_close_shutdown+0x1b0>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	e00c      	b.n	800c194 <tcp_close_shutdown+0xc8>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d104      	bne.n	800c18e <tcp_close_shutdown+0xc2>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	60da      	str	r2, [r3, #12]
 800c18c:	e005      	b.n	800c19a <tcp_close_shutdown+0xce>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1ef      	bne.n	800c17a <tcp_close_shutdown+0xae>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	60da      	str	r2, [r3, #12]
 800c1a0:	4b37      	ldr	r3, [pc, #220]	; (800c280 <tcp_close_shutdown+0x1b4>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c1a6:	4b37      	ldr	r3, [pc, #220]	; (800c284 <tcp_close_shutdown+0x1b8>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d102      	bne.n	800c1b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c1b0:	f003 fd5a 	bl	800fc68 <tcp_trigger_input_pcb_close>
 800c1b4:	e002      	b.n	800c1bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff fed6 	bl	800bf68 <tcp_free>
      }
      return ERR_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e050      	b.n	800c262 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7d1b      	ldrb	r3, [r3, #20]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d03b      	beq.n	800c240 <tcp_close_shutdown+0x174>
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	dc44      	bgt.n	800c256 <tcp_close_shutdown+0x18a>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <tcp_close_shutdown+0x10a>
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d02a      	beq.n	800c22a <tcp_close_shutdown+0x15e>
 800c1d4:	e03f      	b.n	800c256 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8adb      	ldrh	r3, [r3, #22]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d021      	beq.n	800c222 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1de:	4b2a      	ldr	r3, [pc, #168]	; (800c288 <tcp_close_shutdown+0x1bc>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d105      	bne.n	800c1f4 <tcp_close_shutdown+0x128>
 800c1e8:	4b27      	ldr	r3, [pc, #156]	; (800c288 <tcp_close_shutdown+0x1bc>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	4a26      	ldr	r2, [pc, #152]	; (800c288 <tcp_close_shutdown+0x1bc>)
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e013      	b.n	800c21c <tcp_close_shutdown+0x150>
 800c1f4:	4b24      	ldr	r3, [pc, #144]	; (800c288 <tcp_close_shutdown+0x1bc>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	60bb      	str	r3, [r7, #8]
 800c1fa:	e00c      	b.n	800c216 <tcp_close_shutdown+0x14a>
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	429a      	cmp	r2, r3
 800c204:	d104      	bne.n	800c210 <tcp_close_shutdown+0x144>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68da      	ldr	r2, [r3, #12]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	60da      	str	r2, [r3, #12]
 800c20e:	e005      	b.n	800c21c <tcp_close_shutdown+0x150>
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	60bb      	str	r3, [r7, #8]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1ef      	bne.n	800c1fc <tcp_close_shutdown+0x130>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff fea0 	bl	800bf68 <tcp_free>
      break;
 800c228:	e01a      	b.n	800c260 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff ff14 	bl	800c058 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	4816      	ldr	r0, [pc, #88]	; (800c28c <tcp_close_shutdown+0x1c0>)
 800c234:	f001 f8a8 	bl	800d388 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff feb1 	bl	800bfa0 <tcp_free_listen>
      break;
 800c23e:	e00f      	b.n	800c260 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c240:	6879      	ldr	r1, [r7, #4]
 800c242:	480e      	ldr	r0, [pc, #56]	; (800c27c <tcp_close_shutdown+0x1b0>)
 800c244:	f001 f8a0 	bl	800d388 <tcp_pcb_remove>
 800c248:	4b0d      	ldr	r3, [pc, #52]	; (800c280 <tcp_close_shutdown+0x1b4>)
 800c24a:	2201      	movs	r2, #1
 800c24c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff fe8a 	bl	800bf68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c254:	e004      	b.n	800c260 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f81a 	bl	800c290 <tcp_close_shutdown_fin>
 800c25c:	4603      	mov	r3, r0
 800c25e:	e000      	b.n	800c262 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bdb0      	pop	{r4, r5, r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0801b728 	.word	0x0801b728
 800c270:	0801b7fc 	.word	0x0801b7fc
 800c274:	0801b76c 	.word	0x0801b76c
 800c278:	0801b81c 	.word	0x0801b81c
 800c27c:	20006e74 	.word	0x20006e74
 800c280:	20006e70 	.word	0x20006e70
 800c284:	20006e88 	.word	0x20006e88
 800c288:	20006e80 	.word	0x20006e80
 800c28c:	20006e7c 	.word	0x20006e7c

0800c290 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <tcp_close_shutdown_fin+0x1c>
 800c29e:	4b2e      	ldr	r3, [pc, #184]	; (800c358 <tcp_close_shutdown_fin+0xc8>)
 800c2a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c2a4:	492d      	ldr	r1, [pc, #180]	; (800c35c <tcp_close_shutdown_fin+0xcc>)
 800c2a6:	482e      	ldr	r0, [pc, #184]	; (800c360 <tcp_close_shutdown_fin+0xd0>)
 800c2a8:	f00a fd4c 	bl	8016d44 <iprintf>

  switch (pcb->state) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7d1b      	ldrb	r3, [r3, #20]
 800c2b0:	2b07      	cmp	r3, #7
 800c2b2:	d020      	beq.n	800c2f6 <tcp_close_shutdown_fin+0x66>
 800c2b4:	2b07      	cmp	r3, #7
 800c2b6:	dc2b      	bgt.n	800c310 <tcp_close_shutdown_fin+0x80>
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d002      	beq.n	800c2c2 <tcp_close_shutdown_fin+0x32>
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d00d      	beq.n	800c2dc <tcp_close_shutdown_fin+0x4c>
 800c2c0:	e026      	b.n	800c310 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f003 fee2 	bl	801008c <tcp_send_fin>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11f      	bne.n	800c314 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2205      	movs	r2, #5
 800c2d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2da:	e01b      	b.n	800c314 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f003 fed5 	bl	801008c <tcp_send_fin>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d114      	bne.n	800c318 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2205      	movs	r2, #5
 800c2f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2f4:	e010      	b.n	800c318 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f003 fec8 	bl	801008c <tcp_send_fin>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d109      	bne.n	800c31c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2209      	movs	r2, #9
 800c30c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c30e:	e005      	b.n	800c31c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e01c      	b.n	800c34e <tcp_close_shutdown_fin+0xbe>
      break;
 800c314:	bf00      	nop
 800c316:	e002      	b.n	800c31e <tcp_close_shutdown_fin+0x8e>
      break;
 800c318:	bf00      	nop
 800c31a:	e000      	b.n	800c31e <tcp_close_shutdown_fin+0x8e>
      break;
 800c31c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f003 ffee 	bl	8010308 <tcp_output>
 800c32c:	e00d      	b.n	800c34a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c336:	d108      	bne.n	800c34a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	8b5b      	ldrh	r3, [r3, #26]
 800c33c:	f043 0308 	orr.w	r3, r3, #8
 800c340:	b29a      	uxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	e001      	b.n	800c34e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0801b728 	.word	0x0801b728
 800c35c:	0801b7d8 	.word	0x0801b7d8
 800c360:	0801b76c 	.word	0x0801b76c

0800c364 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d109      	bne.n	800c386 <tcp_close+0x22>
 800c372:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <tcp_close+0x4c>)
 800c374:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c378:	490e      	ldr	r1, [pc, #56]	; (800c3b4 <tcp_close+0x50>)
 800c37a:	480f      	ldr	r0, [pc, #60]	; (800c3b8 <tcp_close+0x54>)
 800c37c:	f00a fce2 	bl	8016d44 <iprintf>
 800c380:	f06f 030f 	mvn.w	r3, #15
 800c384:	e00f      	b.n	800c3a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7d1b      	ldrb	r3, [r3, #20]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d006      	beq.n	800c39c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	8b5b      	ldrh	r3, [r3, #26]
 800c392:	f043 0310 	orr.w	r3, r3, #16
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c39c:	2101      	movs	r1, #1
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff fe94 	bl	800c0cc <tcp_close_shutdown>
 800c3a4:	4603      	mov	r3, r0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	0801b728 	.word	0x0801b728
 800c3b4:	0801b838 	.word	0x0801b838
 800c3b8:	0801b76c 	.word	0x0801b76c

0800c3bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08e      	sub	sp, #56	; 0x38
 800c3c0:	af04      	add	r7, sp, #16
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d107      	bne.n	800c3dc <tcp_abandon+0x20>
 800c3cc:	4b52      	ldr	r3, [pc, #328]	; (800c518 <tcp_abandon+0x15c>)
 800c3ce:	f240 223d 	movw	r2, #573	; 0x23d
 800c3d2:	4952      	ldr	r1, [pc, #328]	; (800c51c <tcp_abandon+0x160>)
 800c3d4:	4852      	ldr	r0, [pc, #328]	; (800c520 <tcp_abandon+0x164>)
 800c3d6:	f00a fcb5 	bl	8016d44 <iprintf>
 800c3da:	e099      	b.n	800c510 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7d1b      	ldrb	r3, [r3, #20]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d106      	bne.n	800c3f2 <tcp_abandon+0x36>
 800c3e4:	4b4c      	ldr	r3, [pc, #304]	; (800c518 <tcp_abandon+0x15c>)
 800c3e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c3ea:	494e      	ldr	r1, [pc, #312]	; (800c524 <tcp_abandon+0x168>)
 800c3ec:	484c      	ldr	r0, [pc, #304]	; (800c520 <tcp_abandon+0x164>)
 800c3ee:	f00a fca9 	bl	8016d44 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7d1b      	ldrb	r3, [r3, #20]
 800c3f6:	2b0a      	cmp	r3, #10
 800c3f8:	d107      	bne.n	800c40a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	484a      	ldr	r0, [pc, #296]	; (800c528 <tcp_abandon+0x16c>)
 800c3fe:	f000 ffc3 	bl	800d388 <tcp_pcb_remove>
    tcp_free(pcb);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff fdb0 	bl	800bf68 <tcp_free>
 800c408:	e082      	b.n	800c510 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c416:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c424:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7d1b      	ldrb	r3, [r3, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d126      	bne.n	800c482 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	8adb      	ldrh	r3, [r3, #22]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d02e      	beq.n	800c49a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c43c:	4b3b      	ldr	r3, [pc, #236]	; (800c52c <tcp_abandon+0x170>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d105      	bne.n	800c452 <tcp_abandon+0x96>
 800c446:	4b39      	ldr	r3, [pc, #228]	; (800c52c <tcp_abandon+0x170>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	4a37      	ldr	r2, [pc, #220]	; (800c52c <tcp_abandon+0x170>)
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	e013      	b.n	800c47a <tcp_abandon+0xbe>
 800c452:	4b36      	ldr	r3, [pc, #216]	; (800c52c <tcp_abandon+0x170>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	61fb      	str	r3, [r7, #28]
 800c458:	e00c      	b.n	800c474 <tcp_abandon+0xb8>
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d104      	bne.n	800c46e <tcp_abandon+0xb2>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68da      	ldr	r2, [r3, #12]
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	60da      	str	r2, [r3, #12]
 800c46c:	e005      	b.n	800c47a <tcp_abandon+0xbe>
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1ef      	bne.n	800c45a <tcp_abandon+0x9e>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	60da      	str	r2, [r3, #12]
 800c480:	e00b      	b.n	800c49a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	8adb      	ldrh	r3, [r3, #22]
 800c48a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	4828      	ldr	r0, [pc, #160]	; (800c530 <tcp_abandon+0x174>)
 800c490:	f000 ff7a 	bl	800d388 <tcp_pcb_remove>
 800c494:	4b27      	ldr	r3, [pc, #156]	; (800c534 <tcp_abandon+0x178>)
 800c496:	2201      	movs	r2, #1
 800c498:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fd1c 	bl	800cee4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d004      	beq.n	800c4be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 fd13 	bl	800cee4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fd0a 	bl	800cee4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00e      	beq.n	800c4f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	8b12      	ldrh	r2, [r2, #24]
 800c4e0:	9202      	str	r2, [sp, #8]
 800c4e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4e4:	9201      	str	r2, [sp, #4]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	69b9      	ldr	r1, [r7, #24]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f004 fcbe 	bl	8010e70 <tcp_rst>
    }
    last_state = pcb->state;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7d1b      	ldrb	r3, [r3, #20]
 800c4f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff fd34 	bl	800bf68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <tcp_abandon+0x154>
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f06f 010c 	mvn.w	r1, #12
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	4798      	blx	r3
  }
}
 800c510:	3728      	adds	r7, #40	; 0x28
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	0801b728 	.word	0x0801b728
 800c51c:	0801b86c 	.word	0x0801b86c
 800c520:	0801b76c 	.word	0x0801b76c
 800c524:	0801b888 	.word	0x0801b888
 800c528:	20006e84 	.word	0x20006e84
 800c52c:	20006e80 	.word	0x20006e80
 800c530:	20006e74 	.word	0x20006e74
 800c534:	20006e70 	.word	0x20006e70

0800c538 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c540:	2101      	movs	r1, #1
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff ff3a 	bl	800c3bc <tcp_abandon>
}
 800c548:	bf00      	nop
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <tcp_update_rcv_ann_wnd+0x1c>
 800c55e:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c560:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c564:	4924      	ldr	r1, [pc, #144]	; (800c5f8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c566:	4825      	ldr	r0, [pc, #148]	; (800c5fc <tcp_update_rcv_ann_wnd+0xac>)
 800c568:	f00a fbec 	bl	8016d44 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c574:	4413      	add	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c580:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c584:	bf28      	it	cs
 800c586:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c58a:	b292      	uxth	r2, r2
 800c58c:	4413      	add	r3, r2
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	db08      	blt.n	800c5a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	e020      	b.n	800c5ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dd03      	ble.n	800c5be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c5bc:	e014      	b.n	800c5e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5d0:	d306      	bcc.n	800c5e0 <tcp_update_rcv_ann_wnd+0x90>
 800c5d2:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c5d8:	4909      	ldr	r1, [pc, #36]	; (800c600 <tcp_update_rcv_ann_wnd+0xb0>)
 800c5da:	4808      	ldr	r0, [pc, #32]	; (800c5fc <tcp_update_rcv_ann_wnd+0xac>)
 800c5dc:	f00a fbb2 	bl	8016d44 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c5e8:	2300      	movs	r3, #0
  }
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	0801b728 	.word	0x0801b728
 800c5f8:	0801b984 	.word	0x0801b984
 800c5fc:	0801b76c 	.word	0x0801b76c
 800c600:	0801b9a8 	.word	0x0801b9a8

0800c604 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d107      	bne.n	800c626 <tcp_recved+0x22>
 800c616:	4b1f      	ldr	r3, [pc, #124]	; (800c694 <tcp_recved+0x90>)
 800c618:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c61c:	491e      	ldr	r1, [pc, #120]	; (800c698 <tcp_recved+0x94>)
 800c61e:	481f      	ldr	r0, [pc, #124]	; (800c69c <tcp_recved+0x98>)
 800c620:	f00a fb90 	bl	8016d44 <iprintf>
 800c624:	e032      	b.n	800c68c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	7d1b      	ldrb	r3, [r3, #20]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d106      	bne.n	800c63c <tcp_recved+0x38>
 800c62e:	4b19      	ldr	r3, [pc, #100]	; (800c694 <tcp_recved+0x90>)
 800c630:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c634:	491a      	ldr	r1, [pc, #104]	; (800c6a0 <tcp_recved+0x9c>)
 800c636:	4819      	ldr	r0, [pc, #100]	; (800c69c <tcp_recved+0x98>)
 800c638:	f00a fb84 	bl	8016d44 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	4413      	add	r3, r2
 800c644:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c646:	89fb      	ldrh	r3, [r7, #14]
 800c648:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c64c:	d804      	bhi.n	800c658 <tcp_recved+0x54>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c652:	89fa      	ldrh	r2, [r7, #14]
 800c654:	429a      	cmp	r2, r3
 800c656:	d204      	bcs.n	800c662 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c65e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c660:	e002      	b.n	800c668 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	89fa      	ldrh	r2, [r7, #14]
 800c666:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ff71 	bl	800c550 <tcp_update_rcv_ann_wnd>
 800c66e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c676:	d309      	bcc.n	800c68c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	8b5b      	ldrh	r3, [r3, #26]
 800c67c:	f043 0302 	orr.w	r3, r3, #2
 800c680:	b29a      	uxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f003 fe3e 	bl	8010308 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	0801b728 	.word	0x0801b728
 800c698:	0801b9c4 	.word	0x0801b9c4
 800c69c:	0801b76c 	.word	0x0801b76c
 800c6a0:	0801b9dc 	.word	0x0801b9dc

0800c6a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c6a4:	b5b0      	push	{r4, r5, r7, lr}
 800c6a6:	b090      	sub	sp, #64	; 0x40
 800c6a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c6b0:	4b94      	ldr	r3, [pc, #592]	; (800c904 <tcp_slowtmr+0x260>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	4a93      	ldr	r2, [pc, #588]	; (800c904 <tcp_slowtmr+0x260>)
 800c6b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c6ba:	4b93      	ldr	r3, [pc, #588]	; (800c908 <tcp_slowtmr+0x264>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	4b91      	ldr	r3, [pc, #580]	; (800c908 <tcp_slowtmr+0x264>)
 800c6c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c6ca:	4b90      	ldr	r3, [pc, #576]	; (800c90c <tcp_slowtmr+0x268>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c6d0:	e29d      	b.n	800cc0e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	7d1b      	ldrb	r3, [r3, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <tcp_slowtmr+0x44>
 800c6da:	4b8d      	ldr	r3, [pc, #564]	; (800c910 <tcp_slowtmr+0x26c>)
 800c6dc:	f240 42be 	movw	r2, #1214	; 0x4be
 800c6e0:	498c      	ldr	r1, [pc, #560]	; (800c914 <tcp_slowtmr+0x270>)
 800c6e2:	488d      	ldr	r0, [pc, #564]	; (800c918 <tcp_slowtmr+0x274>)
 800c6e4:	f00a fb2e 	bl	8016d44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	7d1b      	ldrb	r3, [r3, #20]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d106      	bne.n	800c6fe <tcp_slowtmr+0x5a>
 800c6f0:	4b87      	ldr	r3, [pc, #540]	; (800c910 <tcp_slowtmr+0x26c>)
 800c6f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c6f6:	4989      	ldr	r1, [pc, #548]	; (800c91c <tcp_slowtmr+0x278>)
 800c6f8:	4887      	ldr	r0, [pc, #540]	; (800c918 <tcp_slowtmr+0x274>)
 800c6fa:	f00a fb23 	bl	8016d44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	7d1b      	ldrb	r3, [r3, #20]
 800c702:	2b0a      	cmp	r3, #10
 800c704:	d106      	bne.n	800c714 <tcp_slowtmr+0x70>
 800c706:	4b82      	ldr	r3, [pc, #520]	; (800c910 <tcp_slowtmr+0x26c>)
 800c708:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c70c:	4984      	ldr	r1, [pc, #528]	; (800c920 <tcp_slowtmr+0x27c>)
 800c70e:	4882      	ldr	r0, [pc, #520]	; (800c918 <tcp_slowtmr+0x274>)
 800c710:	f00a fb18 	bl	8016d44 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	7f9a      	ldrb	r2, [r3, #30]
 800c718:	4b7b      	ldr	r3, [pc, #492]	; (800c908 <tcp_slowtmr+0x264>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d105      	bne.n	800c72c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c72a:	e270      	b.n	800cc0e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c72c:	4b76      	ldr	r3, [pc, #472]	; (800c908 <tcp_slowtmr+0x264>)
 800c72e:	781a      	ldrb	r2, [r3, #0]
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	7d1b      	ldrb	r3, [r3, #20]
 800c744:	2b02      	cmp	r3, #2
 800c746:	d10a      	bne.n	800c75e <tcp_slowtmr+0xba>
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c74e:	2b05      	cmp	r3, #5
 800c750:	d905      	bls.n	800c75e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c756:	3301      	adds	r3, #1
 800c758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c75c:	e11e      	b.n	800c99c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c764:	2b0b      	cmp	r3, #11
 800c766:	d905      	bls.n	800c774 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c76c:	3301      	adds	r3, #1
 800c76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c772:	e113      	b.n	800c99c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d075      	beq.n	800c86a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <tcp_slowtmr+0xf0>
 800c786:	4b62      	ldr	r3, [pc, #392]	; (800c910 <tcp_slowtmr+0x26c>)
 800c788:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c78c:	4965      	ldr	r1, [pc, #404]	; (800c924 <tcp_slowtmr+0x280>)
 800c78e:	4862      	ldr	r0, [pc, #392]	; (800c918 <tcp_slowtmr+0x274>)
 800c790:	f00a fad8 	bl	8016d44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d106      	bne.n	800c7aa <tcp_slowtmr+0x106>
 800c79c:	4b5c      	ldr	r3, [pc, #368]	; (800c910 <tcp_slowtmr+0x26c>)
 800c79e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c7a2:	4961      	ldr	r1, [pc, #388]	; (800c928 <tcp_slowtmr+0x284>)
 800c7a4:	485c      	ldr	r0, [pc, #368]	; (800c918 <tcp_slowtmr+0x274>)
 800c7a6:	f00a facd 	bl	8016d44 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c7b0:	2b0b      	cmp	r3, #11
 800c7b2:	d905      	bls.n	800c7c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7be:	e0ed      	b.n	800c99c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	4a58      	ldr	r2, [pc, #352]	; (800c92c <tcp_slowtmr+0x288>)
 800c7ca:	5cd3      	ldrb	r3, [r2, r3]
 800c7cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7d4:	7c7a      	ldrb	r2, [r7, #17]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d907      	bls.n	800c7ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7f0:	7c7a      	ldrb	r2, [r7, #17]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	f200 80d2 	bhi.w	800c99c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c802:	2b00      	cmp	r3, #0
 800c804:	d108      	bne.n	800c818 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c808:	f004 fc26 	bl	8011058 <tcp_zero_window_probe>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d014      	beq.n	800c83c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c812:	2300      	movs	r3, #0
 800c814:	623b      	str	r3, [r7, #32]
 800c816:	e011      	b.n	800c83c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c81e:	4619      	mov	r1, r3
 800c820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c822:	f003 faeb 	bl	800fdfc <tcp_split_unsent_seg>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d107      	bne.n	800c83c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c82c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c82e:	f003 fd6b 	bl	8010308 <tcp_output>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 80ac 	beq.w	800c99c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c852:	2b06      	cmp	r3, #6
 800c854:	f200 80a2 	bhi.w	800c99c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c85e:	3301      	adds	r3, #1
 800c860:	b2da      	uxtb	r2, r3
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c868:	e098      	b.n	800c99c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c870:	2b00      	cmp	r3, #0
 800c872:	db0f      	blt.n	800c894 <tcp_slowtmr+0x1f0>
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c87a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c87e:	4293      	cmp	r3, r2
 800c880:	d008      	beq.n	800c894 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c888:	b29b      	uxth	r3, r3
 800c88a:	3301      	adds	r3, #1
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	b21a      	sxth	r2, r3
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	db7b      	blt.n	800c99c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8a6:	f004 f821 	bl	80108ec <tcp_rexmit_rto_prepare>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d007      	beq.n	800c8c0 <tcp_slowtmr+0x21c>
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d171      	bne.n	800c99c <tcp_slowtmr+0x2f8>
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d06d      	beq.n	800c99c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	7d1b      	ldrb	r3, [r3, #20]
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d03a      	beq.n	800c93e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8ce:	2b0c      	cmp	r3, #12
 800c8d0:	bf28      	it	cs
 800c8d2:	230c      	movcs	r3, #12
 800c8d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8dc:	10db      	asrs	r3, r3, #3
 800c8de:	b21b      	sxth	r3, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c8e8:	4413      	add	r3, r2
 800c8ea:	7efa      	ldrb	r2, [r7, #27]
 800c8ec:	4910      	ldr	r1, [pc, #64]	; (800c930 <tcp_slowtmr+0x28c>)
 800c8ee:	5c8a      	ldrb	r2, [r1, r2]
 800c8f0:	4093      	lsls	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	dc1a      	bgt.n	800c934 <tcp_slowtmr+0x290>
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	b21a      	sxth	r2, r3
 800c902:	e019      	b.n	800c938 <tcp_slowtmr+0x294>
 800c904:	20006e78 	.word	0x20006e78
 800c908:	2000033e 	.word	0x2000033e
 800c90c:	20006e74 	.word	0x20006e74
 800c910:	0801b728 	.word	0x0801b728
 800c914:	0801ba6c 	.word	0x0801ba6c
 800c918:	0801b76c 	.word	0x0801b76c
 800c91c:	0801ba98 	.word	0x0801ba98
 800c920:	0801bac4 	.word	0x0801bac4
 800c924:	0801baf4 	.word	0x0801baf4
 800c928:	0801bb28 	.word	0x0801bb28
 800c92c:	0801da94 	.word	0x0801da94
 800c930:	0801da84 	.word	0x0801da84
 800c934:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	2200      	movs	r2, #0
 800c942:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c950:	4293      	cmp	r3, r2
 800c952:	bf28      	it	cs
 800c954:	4613      	movcs	r3, r2
 800c956:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c958:	8a7b      	ldrh	r3, [r7, #18]
 800c95a:	085b      	lsrs	r3, r3, #1
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	b29b      	uxth	r3, r3
 800c972:	429a      	cmp	r2, r3
 800c974:	d206      	bcs.n	800c984 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	2200      	movs	r2, #0
 800c992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c998:	f004 f818 	bl	80109cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	7d1b      	ldrb	r3, [r3, #20]
 800c9a0:	2b06      	cmp	r3, #6
 800c9a2:	d111      	bne.n	800c9c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	8b5b      	ldrh	r3, [r3, #26]
 800c9a8:	f003 0310 	and.w	r3, r3, #16
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9b0:	4b9c      	ldr	r3, [pc, #624]	; (800cc24 <tcp_slowtmr+0x580>)
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	2b28      	cmp	r3, #40	; 0x28
 800c9bc:	d904      	bls.n	800c9c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c9be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	7a5b      	ldrb	r3, [r3, #9]
 800c9cc:	f003 0308 	and.w	r3, r3, #8
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d04a      	beq.n	800ca6a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9d8:	2b04      	cmp	r3, #4
 800c9da:	d003      	beq.n	800c9e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c9e0:	2b07      	cmp	r3, #7
 800c9e2:	d142      	bne.n	800ca6a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9e4:	4b8f      	ldr	r3, [pc, #572]	; (800cc24 <tcp_slowtmr+0x580>)
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c9f4:	4b8c      	ldr	r3, [pc, #560]	; (800cc28 <tcp_slowtmr+0x584>)
 800c9f6:	440b      	add	r3, r1
 800c9f8:	498c      	ldr	r1, [pc, #560]	; (800cc2c <tcp_slowtmr+0x588>)
 800c9fa:	fba1 1303 	umull	r1, r3, r1, r3
 800c9fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d90a      	bls.n	800ca1a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ca04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca08:	3301      	adds	r3, #1
 800ca0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ca0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca12:	3301      	adds	r3, #1
 800ca14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca18:	e027      	b.n	800ca6a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca1a:	4b82      	ldr	r3, [pc, #520]	; (800cc24 <tcp_slowtmr+0x580>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca30:	4618      	mov	r0, r3
 800ca32:	4b7f      	ldr	r3, [pc, #508]	; (800cc30 <tcp_slowtmr+0x58c>)
 800ca34:	fb03 f300 	mul.w	r3, r3, r0
 800ca38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ca3a:	497c      	ldr	r1, [pc, #496]	; (800cc2c <tcp_slowtmr+0x588>)
 800ca3c:	fba1 1303 	umull	r1, r3, r1, r3
 800ca40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d911      	bls.n	800ca6a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ca46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca48:	f004 fac6 	bl	8010fd8 <tcp_keepalive>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ca52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d107      	bne.n	800ca6a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca60:	3301      	adds	r3, #1
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d011      	beq.n	800ca96 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca72:	4b6c      	ldr	r3, [pc, #432]	; (800cc24 <tcp_slowtmr+0x580>)
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ca82:	4619      	mov	r1, r3
 800ca84:	460b      	mov	r3, r1
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	440b      	add	r3, r1
 800ca8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d302      	bcc.n	800ca96 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ca90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca92:	f000 fddd 	bl	800d650 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	7d1b      	ldrb	r3, [r3, #20]
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d10b      	bne.n	800cab6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca9e:	4b61      	ldr	r3, [pc, #388]	; (800cc24 <tcp_slowtmr+0x580>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	2b28      	cmp	r3, #40	; 0x28
 800caaa:	d904      	bls.n	800cab6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800caac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cab0:	3301      	adds	r3, #1
 800cab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	7d1b      	ldrb	r3, [r3, #20]
 800caba:	2b09      	cmp	r3, #9
 800cabc:	d10b      	bne.n	800cad6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cabe:	4b59      	ldr	r3, [pc, #356]	; (800cc24 <tcp_slowtmr+0x580>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2bf0      	cmp	r3, #240	; 0xf0
 800caca:	d904      	bls.n	800cad6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad0:	3301      	adds	r3, #1
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d060      	beq.n	800cba0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae8:	f000 fbfe 	bl	800d2e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d010      	beq.n	800cb14 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800caf2:	4b50      	ldr	r3, [pc, #320]	; (800cc34 <tcp_slowtmr+0x590>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d106      	bne.n	800cb0a <tcp_slowtmr+0x466>
 800cafc:	4b4e      	ldr	r3, [pc, #312]	; (800cc38 <tcp_slowtmr+0x594>)
 800cafe:	f240 526d 	movw	r2, #1389	; 0x56d
 800cb02:	494e      	ldr	r1, [pc, #312]	; (800cc3c <tcp_slowtmr+0x598>)
 800cb04:	484e      	ldr	r0, [pc, #312]	; (800cc40 <tcp_slowtmr+0x59c>)
 800cb06:	f00a f91d 	bl	8016d44 <iprintf>
        prev->next = pcb->next;
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	68da      	ldr	r2, [r3, #12]
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	60da      	str	r2, [r3, #12]
 800cb12:	e00f      	b.n	800cb34 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cb14:	4b47      	ldr	r3, [pc, #284]	; (800cc34 <tcp_slowtmr+0x590>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d006      	beq.n	800cb2c <tcp_slowtmr+0x488>
 800cb1e:	4b46      	ldr	r3, [pc, #280]	; (800cc38 <tcp_slowtmr+0x594>)
 800cb20:	f240 5271 	movw	r2, #1393	; 0x571
 800cb24:	4947      	ldr	r1, [pc, #284]	; (800cc44 <tcp_slowtmr+0x5a0>)
 800cb26:	4846      	ldr	r0, [pc, #280]	; (800cc40 <tcp_slowtmr+0x59c>)
 800cb28:	f00a f90c 	bl	8016d44 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4a40      	ldr	r2, [pc, #256]	; (800cc34 <tcp_slowtmr+0x590>)
 800cb32:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cb34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d013      	beq.n	800cb64 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb44:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	3304      	adds	r3, #4
 800cb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb4c:	8ad2      	ldrh	r2, [r2, #22]
 800cb4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb50:	8b09      	ldrh	r1, [r1, #24]
 800cb52:	9102      	str	r1, [sp, #8]
 800cb54:	9201      	str	r2, [sp, #4]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	462b      	mov	r3, r5
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4601      	mov	r1, r0
 800cb5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb60:	f004 f986 	bl	8010e70 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	7d1b      	ldrb	r3, [r3, #20]
 800cb6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb7a:	6838      	ldr	r0, [r7, #0]
 800cb7c:	f7ff f9f4 	bl	800bf68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cb80:	4b31      	ldr	r3, [pc, #196]	; (800cc48 <tcp_slowtmr+0x5a4>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d004      	beq.n	800cb96 <tcp_slowtmr+0x4f2>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f06f 010c 	mvn.w	r1, #12
 800cb92:	68b8      	ldr	r0, [r7, #8]
 800cb94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb96:	4b2c      	ldr	r3, [pc, #176]	; (800cc48 <tcp_slowtmr+0x5a4>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d037      	beq.n	800cc0e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cb9e:	e592      	b.n	800c6c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	7f1b      	ldrb	r3, [r3, #28]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	7f1a      	ldrb	r2, [r3, #28]
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	7f5b      	ldrb	r3, [r3, #29]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d325      	bcc.n	800cc0e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cbc8:	4b1f      	ldr	r3, [pc, #124]	; (800cc48 <tcp_slowtmr+0x5a4>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00b      	beq.n	800cbf0 <tcp_slowtmr+0x54c>
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe0:	6912      	ldr	r2, [r2, #16]
 800cbe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4798      	blx	r3
 800cbe8:	4603      	mov	r3, r0
 800cbea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cbee:	e002      	b.n	800cbf6 <tcp_slowtmr+0x552>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cbf6:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <tcp_slowtmr+0x5a4>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d000      	beq.n	800cc00 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cbfe:	e562      	b.n	800c6c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cc00:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc0a:	f003 fb7d 	bl	8010308 <tcp_output>
  while (pcb != NULL) {
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f47f ad5e 	bne.w	800c6d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cc16:	2300      	movs	r3, #0
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cc1a:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <tcp_slowtmr+0x5a8>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc20:	e069      	b.n	800ccf6 <tcp_slowtmr+0x652>
 800cc22:	bf00      	nop
 800cc24:	20006e78 	.word	0x20006e78
 800cc28:	000a4cb8 	.word	0x000a4cb8
 800cc2c:	10624dd3 	.word	0x10624dd3
 800cc30:	000124f8 	.word	0x000124f8
 800cc34:	20006e74 	.word	0x20006e74
 800cc38:	0801b728 	.word	0x0801b728
 800cc3c:	0801bb60 	.word	0x0801bb60
 800cc40:	0801b76c 	.word	0x0801b76c
 800cc44:	0801bb8c 	.word	0x0801bb8c
 800cc48:	20006e70 	.word	0x20006e70
 800cc4c:	20006e84 	.word	0x20006e84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc52:	7d1b      	ldrb	r3, [r3, #20]
 800cc54:	2b0a      	cmp	r3, #10
 800cc56:	d006      	beq.n	800cc66 <tcp_slowtmr+0x5c2>
 800cc58:	4b2b      	ldr	r3, [pc, #172]	; (800cd08 <tcp_slowtmr+0x664>)
 800cc5a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cc5e:	492b      	ldr	r1, [pc, #172]	; (800cd0c <tcp_slowtmr+0x668>)
 800cc60:	482b      	ldr	r0, [pc, #172]	; (800cd10 <tcp_slowtmr+0x66c>)
 800cc62:	f00a f86f 	bl	8016d44 <iprintf>
    pcb_remove = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc6c:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <tcp_slowtmr+0x670>)
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2bf0      	cmp	r3, #240	; 0xf0
 800cc78:	d904      	bls.n	800cc84 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d02f      	beq.n	800ccec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cc8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8e:	f000 fb2b 	bl	800d2e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d010      	beq.n	800ccba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc98:	4b1f      	ldr	r3, [pc, #124]	; (800cd18 <tcp_slowtmr+0x674>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d106      	bne.n	800ccb0 <tcp_slowtmr+0x60c>
 800cca2:	4b19      	ldr	r3, [pc, #100]	; (800cd08 <tcp_slowtmr+0x664>)
 800cca4:	f240 52af 	movw	r2, #1455	; 0x5af
 800cca8:	491c      	ldr	r1, [pc, #112]	; (800cd1c <tcp_slowtmr+0x678>)
 800ccaa:	4819      	ldr	r0, [pc, #100]	; (800cd10 <tcp_slowtmr+0x66c>)
 800ccac:	f00a f84a 	bl	8016d44 <iprintf>
        prev->next = pcb->next;
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	68da      	ldr	r2, [r3, #12]
 800ccb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb6:	60da      	str	r2, [r3, #12]
 800ccb8:	e00f      	b.n	800ccda <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ccba:	4b17      	ldr	r3, [pc, #92]	; (800cd18 <tcp_slowtmr+0x674>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d006      	beq.n	800ccd2 <tcp_slowtmr+0x62e>
 800ccc4:	4b10      	ldr	r3, [pc, #64]	; (800cd08 <tcp_slowtmr+0x664>)
 800ccc6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ccca:	4915      	ldr	r1, [pc, #84]	; (800cd20 <tcp_slowtmr+0x67c>)
 800cccc:	4810      	ldr	r0, [pc, #64]	; (800cd10 <tcp_slowtmr+0x66c>)
 800ccce:	f00a f839 	bl	8016d44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	4a10      	ldr	r2, [pc, #64]	; (800cd18 <tcp_slowtmr+0x674>)
 800ccd8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ccde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cce4:	69f8      	ldr	r0, [r7, #28]
 800cce6:	f7ff f93f 	bl	800bf68 <tcp_free>
 800ccea:	e004      	b.n	800ccf6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1a9      	bne.n	800cc50 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ccfc:	bf00      	nop
 800ccfe:	bf00      	nop
 800cd00:	3730      	adds	r7, #48	; 0x30
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bdb0      	pop	{r4, r5, r7, pc}
 800cd06:	bf00      	nop
 800cd08:	0801b728 	.word	0x0801b728
 800cd0c:	0801bbb8 	.word	0x0801bbb8
 800cd10:	0801b76c 	.word	0x0801b76c
 800cd14:	20006e78 	.word	0x20006e78
 800cd18:	20006e84 	.word	0x20006e84
 800cd1c:	0801bbe8 	.word	0x0801bbe8
 800cd20:	0801bc10 	.word	0x0801bc10

0800cd24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cd2a:	4b2d      	ldr	r3, [pc, #180]	; (800cde0 <tcp_fasttmr+0xbc>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	4b2b      	ldr	r3, [pc, #172]	; (800cde0 <tcp_fasttmr+0xbc>)
 800cd34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cd36:	4b2b      	ldr	r3, [pc, #172]	; (800cde4 <tcp_fasttmr+0xc0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd3c:	e048      	b.n	800cdd0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7f9a      	ldrb	r2, [r3, #30]
 800cd42:	4b27      	ldr	r3, [pc, #156]	; (800cde0 <tcp_fasttmr+0xbc>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d03f      	beq.n	800cdca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cd4a:	4b25      	ldr	r3, [pc, #148]	; (800cde0 <tcp_fasttmr+0xbc>)
 800cd4c:	781a      	ldrb	r2, [r3, #0]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	8b5b      	ldrh	r3, [r3, #26]
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d010      	beq.n	800cd80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8b5b      	ldrh	r3, [r3, #26]
 800cd62:	f043 0302 	orr.w	r3, r3, #2
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f003 facb 	bl	8010308 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	8b5b      	ldrh	r3, [r3, #26]
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	8b5b      	ldrh	r3, [r3, #26]
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d009      	beq.n	800cda0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	8b5b      	ldrh	r3, [r3, #26]
 800cd90:	f023 0308 	bic.w	r3, r3, #8
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff fa78 	bl	800c290 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cdae:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <tcp_fasttmr+0xc4>)
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f819 	bl	800cdec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <tcp_fasttmr+0xc4>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d000      	beq.n	800cdc4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cdc2:	e7b8      	b.n	800cd36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	607b      	str	r3, [r7, #4]
 800cdc8:	e002      	b.n	800cdd0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1b3      	bne.n	800cd3e <tcp_fasttmr+0x1a>
    }
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	2000033e 	.word	0x2000033e
 800cde4:	20006e74 	.word	0x20006e74
 800cde8:	20006e70 	.word	0x20006e70

0800cdec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cdec:	b590      	push	{r4, r7, lr}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d109      	bne.n	800ce0e <tcp_process_refused_data+0x22>
 800cdfa:	4b37      	ldr	r3, [pc, #220]	; (800ced8 <tcp_process_refused_data+0xec>)
 800cdfc:	f240 6209 	movw	r2, #1545	; 0x609
 800ce00:	4936      	ldr	r1, [pc, #216]	; (800cedc <tcp_process_refused_data+0xf0>)
 800ce02:	4837      	ldr	r0, [pc, #220]	; (800cee0 <tcp_process_refused_data+0xf4>)
 800ce04:	f009 ff9e 	bl	8016d44 <iprintf>
 800ce08:	f06f 030f 	mvn.w	r3, #15
 800ce0c:	e060      	b.n	800ced0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce12:	7b5b      	ldrb	r3, [r3, #13]
 800ce14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <tcp_process_refused_data+0x58>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6918      	ldr	r0, [r3, #16]
 800ce36:	2300      	movs	r3, #0
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	6879      	ldr	r1, [r7, #4]
 800ce3c:	47a0      	blx	r4
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]
 800ce42:	e007      	b.n	800ce54 <tcp_process_refused_data+0x68>
 800ce44:	2300      	movs	r3, #0
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	f000 f8a4 	bl	800cf98 <tcp_recv_null>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ce54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d12a      	bne.n	800ceb2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d033      	beq.n	800cece <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce6e:	d005      	beq.n	800ce7c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce74:	3301      	adds	r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <tcp_process_refused_data+0xb2>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6918      	ldr	r0, [r3, #16]
 800ce90:	2300      	movs	r3, #0
 800ce92:	2200      	movs	r2, #0
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	47a0      	blx	r4
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]
 800ce9c:	e001      	b.n	800cea2 <tcp_process_refused_data+0xb6>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cea6:	f113 0f0d 	cmn.w	r3, #13
 800ceaa:	d110      	bne.n	800cece <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ceac:	f06f 030c 	mvn.w	r3, #12
 800ceb0:	e00e      	b.n	800ced0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ceb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceb6:	f113 0f0d 	cmn.w	r3, #13
 800ceba:	d102      	bne.n	800cec2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cebc:	f06f 030c 	mvn.w	r3, #12
 800cec0:	e006      	b.n	800ced0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cec8:	f06f 0304 	mvn.w	r3, #4
 800cecc:	e000      	b.n	800ced0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3714      	adds	r7, #20
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd90      	pop	{r4, r7, pc}
 800ced8:	0801b728 	.word	0x0801b728
 800cedc:	0801bc38 	.word	0x0801bc38
 800cee0:	0801b76c 	.word	0x0801b76c

0800cee4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ceec:	e007      	b.n	800cefe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f80a 	bl	800cf0e <tcp_seg_free>
    seg = next;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1f4      	bne.n	800ceee <tcp_segs_free+0xa>
  }
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00c      	beq.n	800cf36 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d004      	beq.n	800cf2e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fe fd6d 	bl	800ba08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cf2e:	6879      	ldr	r1, [r7, #4]
 800cf30:	2003      	movs	r0, #3
 800cf32:	f7fd ff6f 	bl	800ae14 <memp_free>
  }
}
 800cf36:	bf00      	nop
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <tcp_seg_copy+0x1c>
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <tcp_seg_copy+0x4c>)
 800cf50:	f240 6282 	movw	r2, #1666	; 0x682
 800cf54:	490e      	ldr	r1, [pc, #56]	; (800cf90 <tcp_seg_copy+0x50>)
 800cf56:	480f      	ldr	r0, [pc, #60]	; (800cf94 <tcp_seg_copy+0x54>)
 800cf58:	f009 fef4 	bl	8016d44 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cf5c:	2003      	movs	r0, #3
 800cf5e:	f7fd ff0d 	bl	800ad7c <memp_malloc>
 800cf62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <tcp_seg_copy+0x2e>
    return NULL;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e00a      	b.n	800cf84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf6e:	2210      	movs	r2, #16
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f009 f86e 	bl	8016054 <memcpy>
  pbuf_ref(cseg->p);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fde3 	bl	800bb48 <pbuf_ref>
  return cseg;
 800cf82:	68fb      	ldr	r3, [r7, #12]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	0801b728 	.word	0x0801b728
 800cf90:	0801bc7c 	.word	0x0801bc7c
 800cf94:	0801b76c 	.word	0x0801b76c

0800cf98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d109      	bne.n	800cfc0 <tcp_recv_null+0x28>
 800cfac:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <tcp_recv_null+0x60>)
 800cfae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cfb2:	4912      	ldr	r1, [pc, #72]	; (800cffc <tcp_recv_null+0x64>)
 800cfb4:	4812      	ldr	r0, [pc, #72]	; (800d000 <tcp_recv_null+0x68>)
 800cfb6:	f009 fec5 	bl	8016d44 <iprintf>
 800cfba:	f06f 030f 	mvn.w	r3, #15
 800cfbe:	e016      	b.n	800cfee <tcp_recv_null+0x56>

  if (p != NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d009      	beq.n	800cfda <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	891b      	ldrh	r3, [r3, #8]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	68b8      	ldr	r0, [r7, #8]
 800cfce:	f7ff fb19 	bl	800c604 <tcp_recved>
    pbuf_free(p);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7fe fd18 	bl	800ba08 <pbuf_free>
 800cfd8:	e008      	b.n	800cfec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cfda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d104      	bne.n	800cfec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cfe2:	68b8      	ldr	r0, [r7, #8]
 800cfe4:	f7ff f9be 	bl	800c364 <tcp_close>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	e000      	b.n	800cfee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	0801b728 	.word	0x0801b728
 800cffc:	0801bc98 	.word	0x0801bc98
 800d000:	0801b76c 	.word	0x0801b76c

0800d004 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d012:	2b00      	cmp	r3, #0
 800d014:	db01      	blt.n	800d01a <tcp_kill_prio+0x16>
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	e000      	b.n	800d01c <tcp_kill_prio+0x18>
 800d01a:	237f      	movs	r3, #127	; 0x7f
 800d01c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d01e:	7afb      	ldrb	r3, [r7, #11]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d034      	beq.n	800d08e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d024:	7afb      	ldrb	r3, [r7, #11]
 800d026:	3b01      	subs	r3, #1
 800d028:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d032:	4b19      	ldr	r3, [pc, #100]	; (800d098 <tcp_kill_prio+0x94>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	617b      	str	r3, [r7, #20]
 800d038:	e01f      	b.n	800d07a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	7d5b      	ldrb	r3, [r3, #21]
 800d03e:	7afa      	ldrb	r2, [r7, #11]
 800d040:	429a      	cmp	r2, r3
 800d042:	d80c      	bhi.n	800d05e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d048:	7afa      	ldrb	r2, [r7, #11]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d112      	bne.n	800d074 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <tcp_kill_prio+0x98>)
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d80a      	bhi.n	800d074 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <tcp_kill_prio+0x98>)
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	7d5b      	ldrb	r3, [r3, #21]
 800d072:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1dc      	bne.n	800d03a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d004      	beq.n	800d090 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d086:	6938      	ldr	r0, [r7, #16]
 800d088:	f7ff fa56 	bl	800c538 <tcp_abort>
 800d08c:	e000      	b.n	800d090 <tcp_kill_prio+0x8c>
    return;
 800d08e:	bf00      	nop
  }
}
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	20006e74 	.word	0x20006e74
 800d09c:	20006e78 	.word	0x20006e78

0800d0a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	2b08      	cmp	r3, #8
 800d0ae:	d009      	beq.n	800d0c4 <tcp_kill_state+0x24>
 800d0b0:	79fb      	ldrb	r3, [r7, #7]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d006      	beq.n	800d0c4 <tcp_kill_state+0x24>
 800d0b6:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <tcp_kill_state+0x80>)
 800d0b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d0bc:	4919      	ldr	r1, [pc, #100]	; (800d124 <tcp_kill_state+0x84>)
 800d0be:	481a      	ldr	r0, [pc, #104]	; (800d128 <tcp_kill_state+0x88>)
 800d0c0:	f009 fe40 	bl	8016d44 <iprintf>

  inactivity = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0cc:	4b17      	ldr	r3, [pc, #92]	; (800d12c <tcp_kill_state+0x8c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	e017      	b.n	800d104 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	7d1b      	ldrb	r3, [r3, #20]
 800d0d8:	79fa      	ldrb	r2, [r7, #7]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d10f      	bne.n	800d0fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0de:	4b14      	ldr	r3, [pc, #80]	; (800d130 <tcp_kill_state+0x90>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d807      	bhi.n	800d0fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d0ee:	4b10      	ldr	r3, [pc, #64]	; (800d130 <tcp_kill_state+0x90>)
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	6a1b      	ldr	r3, [r3, #32]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	617b      	str	r3, [r7, #20]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1e4      	bne.n	800d0d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d110:	2100      	movs	r1, #0
 800d112:	6938      	ldr	r0, [r7, #16]
 800d114:	f7ff f952 	bl	800c3bc <tcp_abandon>
  }
}
 800d118:	bf00      	nop
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	0801b728 	.word	0x0801b728
 800d124:	0801bcb4 	.word	0x0801bcb4
 800d128:	0801b76c 	.word	0x0801b76c
 800d12c:	20006e74 	.word	0x20006e74
 800d130:	20006e78 	.word	0x20006e78

0800d134 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <tcp_kill_timewait+0x58>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	e012      	b.n	800d170 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d14a:	4b11      	ldr	r3, [pc, #68]	; (800d190 <tcp_kill_timewait+0x5c>)
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6a1b      	ldr	r3, [r3, #32]
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	429a      	cmp	r2, r3
 800d158:	d807      	bhi.n	800d16a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d15a:	4b0d      	ldr	r3, [pc, #52]	; (800d190 <tcp_kill_timewait+0x5c>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e9      	bne.n	800d14a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d17c:	68b8      	ldr	r0, [r7, #8]
 800d17e:	f7ff f9db 	bl	800c538 <tcp_abort>
  }
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20006e84 	.word	0x20006e84
 800d190:	20006e78 	.word	0x20006e78

0800d194 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <tcp_handle_closepend+0x48>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1a0:	e014      	b.n	800d1cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f003 0308 	and.w	r3, r3, #8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d009      	beq.n	800d1c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	8b5b      	ldrh	r3, [r3, #26]
 800d1b8:	f023 0308 	bic.w	r3, r3, #8
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7ff f864 	bl	800c290 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1e7      	bne.n	800d1a2 <tcp_handle_closepend+0xe>
  }
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20006e74 	.word	0x20006e74

0800d1e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	f7fd fdc6 	bl	800ad7c <memp_malloc>
 800d1f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d126      	bne.n	800d246 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d1f8:	f7ff ffcc 	bl	800d194 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d1fc:	f7ff ff9a 	bl	800d134 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d200:	2001      	movs	r0, #1
 800d202:	f7fd fdbb 	bl	800ad7c <memp_malloc>
 800d206:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d11b      	bne.n	800d246 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d20e:	2009      	movs	r0, #9
 800d210:	f7ff ff46 	bl	800d0a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d214:	2001      	movs	r0, #1
 800d216:	f7fd fdb1 	bl	800ad7c <memp_malloc>
 800d21a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d111      	bne.n	800d246 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d222:	2008      	movs	r0, #8
 800d224:	f7ff ff3c 	bl	800d0a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d228:	2001      	movs	r0, #1
 800d22a:	f7fd fda7 	bl	800ad7c <memp_malloc>
 800d22e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d107      	bne.n	800d246 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d236:	79fb      	ldrb	r3, [r7, #7]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fee3 	bl	800d004 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d23e:	2001      	movs	r0, #1
 800d240:	f7fd fd9c 	bl	800ad7c <memp_malloc>
 800d244:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d03f      	beq.n	800d2cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d24c:	229c      	movs	r2, #156	; 0x9c
 800d24e:	2100      	movs	r1, #0
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f008 ff27 	bl	80160a4 <memset>
    pcb->prio = prio;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	79fa      	ldrb	r2, [r7, #7]
 800d25a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d262:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d26c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	22ff      	movs	r2, #255	; 0xff
 800d27a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d282:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2206      	movs	r2, #6
 800d288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2206      	movs	r2, #6
 800d290:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d298:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	; (800d2d8 <tcp_alloc+0xf8>)
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d2aa:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <tcp_alloc+0xfc>)
 800d2ac:	781a      	ldrb	r2, [r3, #0]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d2b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	4a08      	ldr	r2, [pc, #32]	; (800d2e0 <tcp_alloc+0x100>)
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4a07      	ldr	r2, [pc, #28]	; (800d2e4 <tcp_alloc+0x104>)
 800d2c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20006e78 	.word	0x20006e78
 800d2dc:	2000033e 	.word	0x2000033e
 800d2e0:	0800cf99 	.word	0x0800cf99
 800d2e4:	006ddd00 	.word	0x006ddd00

0800d2e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d107      	bne.n	800d306 <tcp_pcb_purge+0x1e>
 800d2f6:	4b21      	ldr	r3, [pc, #132]	; (800d37c <tcp_pcb_purge+0x94>)
 800d2f8:	f640 0251 	movw	r2, #2129	; 0x851
 800d2fc:	4920      	ldr	r1, [pc, #128]	; (800d380 <tcp_pcb_purge+0x98>)
 800d2fe:	4821      	ldr	r0, [pc, #132]	; (800d384 <tcp_pcb_purge+0x9c>)
 800d300:	f009 fd20 	bl	8016d44 <iprintf>
 800d304:	e037      	b.n	800d376 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7d1b      	ldrb	r3, [r3, #20]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d033      	beq.n	800d376 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d312:	2b0a      	cmp	r3, #10
 800d314:	d02f      	beq.n	800d376 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d02b      	beq.n	800d376 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d322:	2b00      	cmp	r3, #0
 800d324:	d007      	beq.n	800d336 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fb6c 	bl	800ba08 <pbuf_free>
      pcb->refused_data = NULL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f986 	bl	800d650 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d34a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fdc7 	bl	800cee4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff fdc2 	bl	800cee4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	66da      	str	r2, [r3, #108]	; 0x6c
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	0801b728 	.word	0x0801b728
 800d380:	0801bd74 	.word	0x0801bd74
 800d384:	0801b76c 	.word	0x0801b76c

0800d388 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <tcp_pcb_remove+0x1e>
 800d398:	4b3e      	ldr	r3, [pc, #248]	; (800d494 <tcp_pcb_remove+0x10c>)
 800d39a:	f640 0283 	movw	r2, #2179	; 0x883
 800d39e:	493e      	ldr	r1, [pc, #248]	; (800d498 <tcp_pcb_remove+0x110>)
 800d3a0:	483e      	ldr	r0, [pc, #248]	; (800d49c <tcp_pcb_remove+0x114>)
 800d3a2:	f009 fccf 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d106      	bne.n	800d3ba <tcp_pcb_remove+0x32>
 800d3ac:	4b39      	ldr	r3, [pc, #228]	; (800d494 <tcp_pcb_remove+0x10c>)
 800d3ae:	f640 0284 	movw	r2, #2180	; 0x884
 800d3b2:	493b      	ldr	r1, [pc, #236]	; (800d4a0 <tcp_pcb_remove+0x118>)
 800d3b4:	4839      	ldr	r0, [pc, #228]	; (800d49c <tcp_pcb_remove+0x114>)
 800d3b6:	f009 fcc5 	bl	8016d44 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d105      	bne.n	800d3d0 <tcp_pcb_remove+0x48>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	e013      	b.n	800d3f8 <tcp_pcb_remove+0x70>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	e00c      	b.n	800d3f2 <tcp_pcb_remove+0x6a>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d104      	bne.n	800d3ec <tcp_pcb_remove+0x64>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	68da      	ldr	r2, [r3, #12]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	60da      	str	r2, [r3, #12]
 800d3ea:	e005      	b.n	800d3f8 <tcp_pcb_remove+0x70>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	60fb      	str	r3, [r7, #12]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1ef      	bne.n	800d3d8 <tcp_pcb_remove+0x50>
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d3fe:	6838      	ldr	r0, [r7, #0]
 800d400:	f7ff ff72 	bl	800d2e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	7d1b      	ldrb	r3, [r3, #20]
 800d408:	2b0a      	cmp	r3, #10
 800d40a:	d013      	beq.n	800d434 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d410:	2b01      	cmp	r3, #1
 800d412:	d00f      	beq.n	800d434 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	8b5b      	ldrh	r3, [r3, #26]
 800d418:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d009      	beq.n	800d434 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	8b5b      	ldrh	r3, [r3, #26]
 800d424:	f043 0302 	orr.w	r3, r3, #2
 800d428:	b29a      	uxth	r2, r3
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d42e:	6838      	ldr	r0, [r7, #0]
 800d430:	f002 ff6a 	bl	8010308 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d020      	beq.n	800d47e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <tcp_pcb_remove+0xca>
 800d444:	4b13      	ldr	r3, [pc, #76]	; (800d494 <tcp_pcb_remove+0x10c>)
 800d446:	f640 0293 	movw	r2, #2195	; 0x893
 800d44a:	4916      	ldr	r1, [pc, #88]	; (800d4a4 <tcp_pcb_remove+0x11c>)
 800d44c:	4813      	ldr	r0, [pc, #76]	; (800d49c <tcp_pcb_remove+0x114>)
 800d44e:	f009 fc79 	bl	8016d44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d456:	2b00      	cmp	r3, #0
 800d458:	d006      	beq.n	800d468 <tcp_pcb_remove+0xe0>
 800d45a:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <tcp_pcb_remove+0x10c>)
 800d45c:	f640 0294 	movw	r2, #2196	; 0x894
 800d460:	4911      	ldr	r1, [pc, #68]	; (800d4a8 <tcp_pcb_remove+0x120>)
 800d462:	480e      	ldr	r0, [pc, #56]	; (800d49c <tcp_pcb_remove+0x114>)
 800d464:	f009 fc6e 	bl	8016d44 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <tcp_pcb_remove+0xf6>
 800d470:	4b08      	ldr	r3, [pc, #32]	; (800d494 <tcp_pcb_remove+0x10c>)
 800d472:	f640 0296 	movw	r2, #2198	; 0x896
 800d476:	490d      	ldr	r1, [pc, #52]	; (800d4ac <tcp_pcb_remove+0x124>)
 800d478:	4808      	ldr	r0, [pc, #32]	; (800d49c <tcp_pcb_remove+0x114>)
 800d47a:	f009 fc63 	bl	8016d44 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2200      	movs	r2, #0
 800d482:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2200      	movs	r2, #0
 800d488:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d48a:	bf00      	nop
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	0801b728 	.word	0x0801b728
 800d498:	0801bd90 	.word	0x0801bd90
 800d49c:	0801b76c 	.word	0x0801b76c
 800d4a0:	0801bdac 	.word	0x0801bdac
 800d4a4:	0801bdcc 	.word	0x0801bdcc
 800d4a8:	0801bde4 	.word	0x0801bde4
 800d4ac:	0801be00 	.word	0x0801be00

0800d4b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <tcp_next_iss+0x1c>
 800d4be:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <tcp_next_iss+0x38>)
 800d4c0:	f640 02af 	movw	r2, #2223	; 0x8af
 800d4c4:	4909      	ldr	r1, [pc, #36]	; (800d4ec <tcp_next_iss+0x3c>)
 800d4c6:	480a      	ldr	r0, [pc, #40]	; (800d4f0 <tcp_next_iss+0x40>)
 800d4c8:	f009 fc3c 	bl	8016d44 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4cc:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <tcp_next_iss+0x44>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <tcp_next_iss+0x48>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	4a07      	ldr	r2, [pc, #28]	; (800d4f4 <tcp_next_iss+0x44>)
 800d4d8:	6013      	str	r3, [r2, #0]
  return iss;
 800d4da:	4b06      	ldr	r3, [pc, #24]	; (800d4f4 <tcp_next_iss+0x44>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	0801b728 	.word	0x0801b728
 800d4ec:	0801be18 	.word	0x0801be18
 800d4f0:	0801b76c 	.word	0x0801b76c
 800d4f4:	20000050 	.word	0x20000050
 800d4f8:	20006e78 	.word	0x20006e78

0800d4fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <tcp_eff_send_mss_netif+0x22>
 800d510:	4b14      	ldr	r3, [pc, #80]	; (800d564 <tcp_eff_send_mss_netif+0x68>)
 800d512:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d516:	4914      	ldr	r1, [pc, #80]	; (800d568 <tcp_eff_send_mss_netif+0x6c>)
 800d518:	4814      	ldr	r0, [pc, #80]	; (800d56c <tcp_eff_send_mss_netif+0x70>)
 800d51a:	f009 fc13 	bl	8016d44 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d524:	89fb      	ldrh	r3, [r7, #14]
 800d526:	e019      	b.n	800d55c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d52c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d52e:	8afb      	ldrh	r3, [r7, #22]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d012      	beq.n	800d55a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d534:	2328      	movs	r3, #40	; 0x28
 800d536:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d538:	8afa      	ldrh	r2, [r7, #22]
 800d53a:	8abb      	ldrh	r3, [r7, #20]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d904      	bls.n	800d54a <tcp_eff_send_mss_netif+0x4e>
 800d540:	8afa      	ldrh	r2, [r7, #22]
 800d542:	8abb      	ldrh	r3, [r7, #20]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	b29b      	uxth	r3, r3
 800d548:	e000      	b.n	800d54c <tcp_eff_send_mss_netif+0x50>
 800d54a:	2300      	movs	r3, #0
 800d54c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d54e:	8a7a      	ldrh	r2, [r7, #18]
 800d550:	89fb      	ldrh	r3, [r7, #14]
 800d552:	4293      	cmp	r3, r2
 800d554:	bf28      	it	cs
 800d556:	4613      	movcs	r3, r2
 800d558:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d55a:	89fb      	ldrh	r3, [r7, #14]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	0801b728 	.word	0x0801b728
 800d568:	0801be34 	.word	0x0801be34
 800d56c:	0801b76c 	.word	0x0801b76c

0800d570 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d119      	bne.n	800d5b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d584:	4b10      	ldr	r3, [pc, #64]	; (800d5c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d586:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d58a:	4910      	ldr	r1, [pc, #64]	; (800d5cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d58c:	4810      	ldr	r0, [pc, #64]	; (800d5d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d58e:	f009 fbd9 	bl	8016d44 <iprintf>

  while (pcb != NULL) {
 800d592:	e011      	b.n	800d5b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d108      	bne.n	800d5b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7fe ffc6 	bl	800c538 <tcp_abort>
      pcb = next;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	e002      	b.n	800d5b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1ea      	bne.n	800d594 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d5be:	bf00      	nop
 800d5c0:	bf00      	nop
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	0801b728 	.word	0x0801b728
 800d5cc:	0801be5c 	.word	0x0801be5c
 800d5d0:	0801b76c 	.word	0x0801b76c

0800d5d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02a      	beq.n	800d63a <tcp_netif_ip_addr_changed+0x66>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d026      	beq.n	800d63a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d5ec:	4b15      	ldr	r3, [pc, #84]	; (800d644 <tcp_netif_ip_addr_changed+0x70>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ffbc 	bl	800d570 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d5f8:	4b13      	ldr	r3, [pc, #76]	; (800d648 <tcp_netif_ip_addr_changed+0x74>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff ffb6 	bl	800d570 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d017      	beq.n	800d63a <tcp_netif_ip_addr_changed+0x66>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d013      	beq.n	800d63a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d612:	4b0e      	ldr	r3, [pc, #56]	; (800d64c <tcp_netif_ip_addr_changed+0x78>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	e00c      	b.n	800d634 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d103      	bne.n	800d62e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1ef      	bne.n	800d61a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d63a:	bf00      	nop
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20006e74 	.word	0x20006e74
 800d648:	20006e80 	.word	0x20006e80
 800d64c:	20006e7c 	.word	0x20006e7c

0800d650 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d007      	beq.n	800d670 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d664:	4618      	mov	r0, r3
 800d666:	f7ff fc3d 	bl	800cee4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d670:	bf00      	nop
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b08d      	sub	sp, #52	; 0x34
 800d67c:	af04      	add	r7, sp, #16
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d105      	bne.n	800d694 <tcp_input+0x1c>
 800d688:	4b9b      	ldr	r3, [pc, #620]	; (800d8f8 <tcp_input+0x280>)
 800d68a:	2283      	movs	r2, #131	; 0x83
 800d68c:	499b      	ldr	r1, [pc, #620]	; (800d8fc <tcp_input+0x284>)
 800d68e:	489c      	ldr	r0, [pc, #624]	; (800d900 <tcp_input+0x288>)
 800d690:	f009 fb58 	bl	8016d44 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	4a9a      	ldr	r2, [pc, #616]	; (800d904 <tcp_input+0x28c>)
 800d69a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	895b      	ldrh	r3, [r3, #10]
 800d6a0:	2b13      	cmp	r3, #19
 800d6a2:	f240 83c4 	bls.w	800de2e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6a6:	4b98      	ldr	r3, [pc, #608]	; (800d908 <tcp_input+0x290>)
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	4a97      	ldr	r2, [pc, #604]	; (800d908 <tcp_input+0x290>)
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f007 fd4d 	bl	8015150 <ip4_addr_isbroadcast_u32>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f040 83ba 	bne.w	800de32 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6be:	4b92      	ldr	r3, [pc, #584]	; (800d908 <tcp_input+0x290>)
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6c6:	2be0      	cmp	r3, #224	; 0xe0
 800d6c8:	f000 83b3 	beq.w	800de32 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6cc:	4b8d      	ldr	r3, [pc, #564]	; (800d904 <tcp_input+0x28c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	899b      	ldrh	r3, [r3, #12]
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fc fefb 	bl	800a4d0 <lwip_htons>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	0b1b      	lsrs	r3, r3, #12
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d6e6:	7cbb      	ldrb	r3, [r7, #18]
 800d6e8:	2b13      	cmp	r3, #19
 800d6ea:	f240 83a4 	bls.w	800de36 <tcp_input+0x7be>
 800d6ee:	7cbb      	ldrb	r3, [r7, #18]
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	891b      	ldrh	r3, [r3, #8]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	f200 839d 	bhi.w	800de36 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d6fc:	7cbb      	ldrb	r3, [r7, #18]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	3b14      	subs	r3, #20
 800d702:	b29a      	uxth	r2, r3
 800d704:	4b81      	ldr	r3, [pc, #516]	; (800d90c <tcp_input+0x294>)
 800d706:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d708:	4b81      	ldr	r3, [pc, #516]	; (800d910 <tcp_input+0x298>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	895a      	ldrh	r2, [r3, #10]
 800d712:	7cbb      	ldrb	r3, [r7, #18]
 800d714:	b29b      	uxth	r3, r3
 800d716:	429a      	cmp	r2, r3
 800d718:	d309      	bcc.n	800d72e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d71a:	4b7c      	ldr	r3, [pc, #496]	; (800d90c <tcp_input+0x294>)
 800d71c:	881a      	ldrh	r2, [r3, #0]
 800d71e:	4b7d      	ldr	r3, [pc, #500]	; (800d914 <tcp_input+0x29c>)
 800d720:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d722:	7cbb      	ldrb	r3, [r7, #18]
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7fe f8e8 	bl	800b8fc <pbuf_remove_header>
 800d72c:	e04e      	b.n	800d7cc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d105      	bne.n	800d742 <tcp_input+0xca>
 800d736:	4b70      	ldr	r3, [pc, #448]	; (800d8f8 <tcp_input+0x280>)
 800d738:	22c2      	movs	r2, #194	; 0xc2
 800d73a:	4977      	ldr	r1, [pc, #476]	; (800d918 <tcp_input+0x2a0>)
 800d73c:	4870      	ldr	r0, [pc, #448]	; (800d900 <tcp_input+0x288>)
 800d73e:	f009 fb01 	bl	8016d44 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d742:	2114      	movs	r1, #20
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7fe f8d9 	bl	800b8fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	895a      	ldrh	r2, [r3, #10]
 800d74e:	4b71      	ldr	r3, [pc, #452]	; (800d914 <tcp_input+0x29c>)
 800d750:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d752:	4b6e      	ldr	r3, [pc, #440]	; (800d90c <tcp_input+0x294>)
 800d754:	881a      	ldrh	r2, [r3, #0]
 800d756:	4b6f      	ldr	r3, [pc, #444]	; (800d914 <tcp_input+0x29c>)
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d75e:	4b6d      	ldr	r3, [pc, #436]	; (800d914 <tcp_input+0x29c>)
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fe f8c9 	bl	800b8fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	895b      	ldrh	r3, [r3, #10]
 800d770:	8a3a      	ldrh	r2, [r7, #16]
 800d772:	429a      	cmp	r2, r3
 800d774:	f200 8361 	bhi.w	800de3a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4a64      	ldr	r2, [pc, #400]	; (800d910 <tcp_input+0x298>)
 800d780:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	8a3a      	ldrh	r2, [r7, #16]
 800d788:	4611      	mov	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe f8b6 	bl	800b8fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	891a      	ldrh	r2, [r3, #8]
 800d794:	8a3b      	ldrh	r3, [r7, #16]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	b29a      	uxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	895b      	ldrh	r3, [r3, #10]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <tcp_input+0x13a>
 800d7a6:	4b54      	ldr	r3, [pc, #336]	; (800d8f8 <tcp_input+0x280>)
 800d7a8:	22df      	movs	r2, #223	; 0xdf
 800d7aa:	495c      	ldr	r1, [pc, #368]	; (800d91c <tcp_input+0x2a4>)
 800d7ac:	4854      	ldr	r0, [pc, #336]	; (800d900 <tcp_input+0x288>)
 800d7ae:	f009 fac9 	bl	8016d44 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	891a      	ldrh	r2, [r3, #8]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	891b      	ldrh	r3, [r3, #8]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d005      	beq.n	800d7cc <tcp_input+0x154>
 800d7c0:	4b4d      	ldr	r3, [pc, #308]	; (800d8f8 <tcp_input+0x280>)
 800d7c2:	22e0      	movs	r2, #224	; 0xe0
 800d7c4:	4956      	ldr	r1, [pc, #344]	; (800d920 <tcp_input+0x2a8>)
 800d7c6:	484e      	ldr	r0, [pc, #312]	; (800d900 <tcp_input+0x288>)
 800d7c8:	f009 fabc 	bl	8016d44 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7cc:	4b4d      	ldr	r3, [pc, #308]	; (800d904 <tcp_input+0x28c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4a4b      	ldr	r2, [pc, #300]	; (800d904 <tcp_input+0x28c>)
 800d7d6:	6814      	ldr	r4, [r2, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fc fe79 	bl	800a4d0 <lwip_htons>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d7e2:	4b48      	ldr	r3, [pc, #288]	; (800d904 <tcp_input+0x28c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	885b      	ldrh	r3, [r3, #2]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	4a46      	ldr	r2, [pc, #280]	; (800d904 <tcp_input+0x28c>)
 800d7ec:	6814      	ldr	r4, [r2, #0]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fc fe6e 	bl	800a4d0 <lwip_htons>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d7f8:	4b42      	ldr	r3, [pc, #264]	; (800d904 <tcp_input+0x28c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	4a41      	ldr	r2, [pc, #260]	; (800d904 <tcp_input+0x28c>)
 800d800:	6814      	ldr	r4, [r2, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	f7fc fe79 	bl	800a4fa <lwip_htonl>
 800d808:	4603      	mov	r3, r0
 800d80a:	6063      	str	r3, [r4, #4]
 800d80c:	6863      	ldr	r3, [r4, #4]
 800d80e:	4a45      	ldr	r2, [pc, #276]	; (800d924 <tcp_input+0x2ac>)
 800d810:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d812:	4b3c      	ldr	r3, [pc, #240]	; (800d904 <tcp_input+0x28c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	4a3a      	ldr	r2, [pc, #232]	; (800d904 <tcp_input+0x28c>)
 800d81a:	6814      	ldr	r4, [r2, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fc fe6c 	bl	800a4fa <lwip_htonl>
 800d822:	4603      	mov	r3, r0
 800d824:	60a3      	str	r3, [r4, #8]
 800d826:	68a3      	ldr	r3, [r4, #8]
 800d828:	4a3f      	ldr	r2, [pc, #252]	; (800d928 <tcp_input+0x2b0>)
 800d82a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d82c:	4b35      	ldr	r3, [pc, #212]	; (800d904 <tcp_input+0x28c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	89db      	ldrh	r3, [r3, #14]
 800d832:	b29b      	uxth	r3, r3
 800d834:	4a33      	ldr	r2, [pc, #204]	; (800d904 <tcp_input+0x28c>)
 800d836:	6814      	ldr	r4, [r2, #0]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fc fe49 	bl	800a4d0 <lwip_htons>
 800d83e:	4603      	mov	r3, r0
 800d840:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d842:	4b30      	ldr	r3, [pc, #192]	; (800d904 <tcp_input+0x28c>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	899b      	ldrh	r3, [r3, #12]
 800d848:	b29b      	uxth	r3, r3
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fc fe40 	bl	800a4d0 <lwip_htons>
 800d850:	4603      	mov	r3, r0
 800d852:	b2db      	uxtb	r3, r3
 800d854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d858:	b2da      	uxtb	r2, r3
 800d85a:	4b34      	ldr	r3, [pc, #208]	; (800d92c <tcp_input+0x2b4>)
 800d85c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	891a      	ldrh	r2, [r3, #8]
 800d862:	4b33      	ldr	r3, [pc, #204]	; (800d930 <tcp_input+0x2b8>)
 800d864:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d866:	4b31      	ldr	r3, [pc, #196]	; (800d92c <tcp_input+0x2b4>)
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	f003 0303 	and.w	r3, r3, #3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00c      	beq.n	800d88c <tcp_input+0x214>
    tcplen++;
 800d872:	4b2f      	ldr	r3, [pc, #188]	; (800d930 <tcp_input+0x2b8>)
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	3301      	adds	r3, #1
 800d878:	b29a      	uxth	r2, r3
 800d87a:	4b2d      	ldr	r3, [pc, #180]	; (800d930 <tcp_input+0x2b8>)
 800d87c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	891a      	ldrh	r2, [r3, #8]
 800d882:	4b2b      	ldr	r3, [pc, #172]	; (800d930 <tcp_input+0x2b8>)
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	429a      	cmp	r2, r3
 800d888:	f200 82d9 	bhi.w	800de3e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d890:	4b28      	ldr	r3, [pc, #160]	; (800d934 <tcp_input+0x2bc>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	61fb      	str	r3, [r7, #28]
 800d896:	e09d      	b.n	800d9d4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <tcp_input+0x234>
 800d8a0:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <tcp_input+0x280>)
 800d8a2:	22fb      	movs	r2, #251	; 0xfb
 800d8a4:	4924      	ldr	r1, [pc, #144]	; (800d938 <tcp_input+0x2c0>)
 800d8a6:	4816      	ldr	r0, [pc, #88]	; (800d900 <tcp_input+0x288>)
 800d8a8:	f009 fa4c 	bl	8016d44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	7d1b      	ldrb	r3, [r3, #20]
 800d8b0:	2b0a      	cmp	r3, #10
 800d8b2:	d105      	bne.n	800d8c0 <tcp_input+0x248>
 800d8b4:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <tcp_input+0x280>)
 800d8b6:	22fc      	movs	r2, #252	; 0xfc
 800d8b8:	4920      	ldr	r1, [pc, #128]	; (800d93c <tcp_input+0x2c4>)
 800d8ba:	4811      	ldr	r0, [pc, #68]	; (800d900 <tcp_input+0x288>)
 800d8bc:	f009 fa42 	bl	8016d44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d105      	bne.n	800d8d4 <tcp_input+0x25c>
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <tcp_input+0x280>)
 800d8ca:	22fd      	movs	r2, #253	; 0xfd
 800d8cc:	491c      	ldr	r1, [pc, #112]	; (800d940 <tcp_input+0x2c8>)
 800d8ce:	480c      	ldr	r0, [pc, #48]	; (800d900 <tcp_input+0x288>)
 800d8d0:	f009 fa38 	bl	8016d44 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	7a1b      	ldrb	r3, [r3, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d033      	beq.n	800d944 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	7a1a      	ldrb	r2, [r3, #8]
 800d8e0:	4b09      	ldr	r3, [pc, #36]	; (800d908 <tcp_input+0x290>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d029      	beq.n	800d944 <tcp_input+0x2cc>
      prev = pcb;
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	61bb      	str	r3, [r7, #24]
      continue;
 800d8f4:	e06b      	b.n	800d9ce <tcp_input+0x356>
 800d8f6:	bf00      	nop
 800d8f8:	0801be90 	.word	0x0801be90
 800d8fc:	0801bec4 	.word	0x0801bec4
 800d900:	0801bedc 	.word	0x0801bedc
 800d904:	20000350 	.word	0x20000350
 800d908:	20003910 	.word	0x20003910
 800d90c:	20000354 	.word	0x20000354
 800d910:	20000358 	.word	0x20000358
 800d914:	20000356 	.word	0x20000356
 800d918:	0801bf04 	.word	0x0801bf04
 800d91c:	0801bf14 	.word	0x0801bf14
 800d920:	0801bf20 	.word	0x0801bf20
 800d924:	20000360 	.word	0x20000360
 800d928:	20000364 	.word	0x20000364
 800d92c:	2000036c 	.word	0x2000036c
 800d930:	2000036a 	.word	0x2000036a
 800d934:	20006e74 	.word	0x20006e74
 800d938:	0801bf40 	.word	0x0801bf40
 800d93c:	0801bf68 	.word	0x0801bf68
 800d940:	0801bf94 	.word	0x0801bf94
    }

    if (pcb->remote_port == tcphdr->src &&
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	8b1a      	ldrh	r2, [r3, #24]
 800d948:	4b94      	ldr	r3, [pc, #592]	; (800db9c <tcp_input+0x524>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	881b      	ldrh	r3, [r3, #0]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	429a      	cmp	r2, r3
 800d952:	d13a      	bne.n	800d9ca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	8ada      	ldrh	r2, [r3, #22]
 800d958:	4b90      	ldr	r3, [pc, #576]	; (800db9c <tcp_input+0x524>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	885b      	ldrh	r3, [r3, #2]
 800d95e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d960:	429a      	cmp	r2, r3
 800d962:	d132      	bne.n	800d9ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	4b8d      	ldr	r3, [pc, #564]	; (800dba0 <tcp_input+0x528>)
 800d96a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d12c      	bne.n	800d9ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	4b8a      	ldr	r3, [pc, #552]	; (800dba0 <tcp_input+0x528>)
 800d976:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d978:	429a      	cmp	r2, r3
 800d97a:	d126      	bne.n	800d9ca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	69fa      	ldr	r2, [r7, #28]
 800d982:	429a      	cmp	r2, r3
 800d984:	d106      	bne.n	800d994 <tcp_input+0x31c>
 800d986:	4b87      	ldr	r3, [pc, #540]	; (800dba4 <tcp_input+0x52c>)
 800d988:	f240 120d 	movw	r2, #269	; 0x10d
 800d98c:	4986      	ldr	r1, [pc, #536]	; (800dba8 <tcp_input+0x530>)
 800d98e:	4887      	ldr	r0, [pc, #540]	; (800dbac <tcp_input+0x534>)
 800d990:	f009 f9d8 	bl	8016d44 <iprintf>
      if (prev != NULL) {
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00a      	beq.n	800d9b0 <tcp_input+0x338>
        prev->next = pcb->next;
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d9a2:	4b83      	ldr	r3, [pc, #524]	; (800dbb0 <tcp_input+0x538>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d9aa:	4a81      	ldr	r2, [pc, #516]	; (800dbb0 <tcp_input+0x538>)
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	69fa      	ldr	r2, [r7, #28]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d111      	bne.n	800d9de <tcp_input+0x366>
 800d9ba:	4b7a      	ldr	r3, [pc, #488]	; (800dba4 <tcp_input+0x52c>)
 800d9bc:	f240 1215 	movw	r2, #277	; 0x115
 800d9c0:	497c      	ldr	r1, [pc, #496]	; (800dbb4 <tcp_input+0x53c>)
 800d9c2:	487a      	ldr	r0, [pc, #488]	; (800dbac <tcp_input+0x534>)
 800d9c4:	f009 f9be 	bl	8016d44 <iprintf>
      break;
 800d9c8:	e009      	b.n	800d9de <tcp_input+0x366>
    }
    prev = pcb;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f47f af5e 	bne.w	800d898 <tcp_input+0x220>
 800d9dc:	e000      	b.n	800d9e0 <tcp_input+0x368>
      break;
 800d9de:	bf00      	nop
  }

  if (pcb == NULL) {
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	f040 8095 	bne.w	800db12 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9e8:	4b73      	ldr	r3, [pc, #460]	; (800dbb8 <tcp_input+0x540>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	e03f      	b.n	800da70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	2b0a      	cmp	r3, #10
 800d9f6:	d006      	beq.n	800da06 <tcp_input+0x38e>
 800d9f8:	4b6a      	ldr	r3, [pc, #424]	; (800dba4 <tcp_input+0x52c>)
 800d9fa:	f240 121f 	movw	r2, #287	; 0x11f
 800d9fe:	496f      	ldr	r1, [pc, #444]	; (800dbbc <tcp_input+0x544>)
 800da00:	486a      	ldr	r0, [pc, #424]	; (800dbac <tcp_input+0x534>)
 800da02:	f009 f99f 	bl	8016d44 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	7a1b      	ldrb	r3, [r3, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	7a1a      	ldrb	r2, [r3, #8]
 800da12:	4b63      	ldr	r3, [pc, #396]	; (800dba0 <tcp_input+0x528>)
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da1a:	3301      	adds	r3, #1
 800da1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da1e:	429a      	cmp	r2, r3
 800da20:	d122      	bne.n	800da68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	8b1a      	ldrh	r2, [r3, #24]
 800da26:	4b5d      	ldr	r3, [pc, #372]	; (800db9c <tcp_input+0x524>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	429a      	cmp	r2, r3
 800da30:	d11b      	bne.n	800da6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	8ada      	ldrh	r2, [r3, #22]
 800da36:	4b59      	ldr	r3, [pc, #356]	; (800db9c <tcp_input+0x524>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	885b      	ldrh	r3, [r3, #2]
 800da3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da3e:	429a      	cmp	r2, r3
 800da40:	d113      	bne.n	800da6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	4b56      	ldr	r3, [pc, #344]	; (800dba0 <tcp_input+0x528>)
 800da48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d10d      	bne.n	800da6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	4b53      	ldr	r3, [pc, #332]	; (800dba0 <tcp_input+0x528>)
 800da54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da56:	429a      	cmp	r2, r3
 800da58:	d107      	bne.n	800da6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da5a:	69f8      	ldr	r0, [r7, #28]
 800da5c:	f000 fb54 	bl	800e108 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7fd ffd1 	bl	800ba08 <pbuf_free>
        return;
 800da66:	e1f0      	b.n	800de4a <tcp_input+0x7d2>
        continue;
 800da68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	61fb      	str	r3, [r7, #28]
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1bc      	bne.n	800d9f0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da76:	2300      	movs	r3, #0
 800da78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da7a:	4b51      	ldr	r3, [pc, #324]	; (800dbc0 <tcp_input+0x548>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	617b      	str	r3, [r7, #20]
 800da80:	e02a      	b.n	800dad8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	7a1b      	ldrb	r3, [r3, #8]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00c      	beq.n	800daa4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	7a1a      	ldrb	r2, [r3, #8]
 800da8e:	4b44      	ldr	r3, [pc, #272]	; (800dba0 <tcp_input+0x528>)
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da96:	3301      	adds	r3, #1
 800da98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d002      	beq.n	800daa4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	61bb      	str	r3, [r7, #24]
        continue;
 800daa2:	e016      	b.n	800dad2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	8ada      	ldrh	r2, [r3, #22]
 800daa8:	4b3c      	ldr	r3, [pc, #240]	; (800db9c <tcp_input+0x524>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	885b      	ldrh	r3, [r3, #2]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d10c      	bne.n	800dace <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	4b39      	ldr	r3, [pc, #228]	; (800dba0 <tcp_input+0x528>)
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d00f      	beq.n	800dae0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00d      	beq.n	800dae2 <tcp_input+0x46a>
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d009      	beq.n	800dae2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	617b      	str	r3, [r7, #20]
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1d1      	bne.n	800da82 <tcp_input+0x40a>
 800dade:	e000      	b.n	800dae2 <tcp_input+0x46a>
            break;
 800dae0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d014      	beq.n	800db12 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	68da      	ldr	r2, [r3, #12]
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800daf6:	4b32      	ldr	r3, [pc, #200]	; (800dbc0 <tcp_input+0x548>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dafe:	4a30      	ldr	r2, [pc, #192]	; (800dbc0 <tcp_input+0x548>)
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db04:	6978      	ldr	r0, [r7, #20]
 800db06:	f000 fa01 	bl	800df0c <tcp_listen_input>
      }
      pbuf_free(p);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7fd ff7c 	bl	800ba08 <pbuf_free>
      return;
 800db10:	e19b      	b.n	800de4a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8160 	beq.w	800ddda <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db1a:	4b2a      	ldr	r3, [pc, #168]	; (800dbc4 <tcp_input+0x54c>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	891a      	ldrh	r2, [r3, #8]
 800db24:	4b27      	ldr	r3, [pc, #156]	; (800dbc4 <tcp_input+0x54c>)
 800db26:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db28:	4a26      	ldr	r2, [pc, #152]	; (800dbc4 <tcp_input+0x54c>)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db2e:	4b1b      	ldr	r3, [pc, #108]	; (800db9c <tcp_input+0x524>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a24      	ldr	r2, [pc, #144]	; (800dbc4 <tcp_input+0x54c>)
 800db34:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db36:	4b24      	ldr	r3, [pc, #144]	; (800dbc8 <tcp_input+0x550>)
 800db38:	2200      	movs	r2, #0
 800db3a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db3c:	4b23      	ldr	r3, [pc, #140]	; (800dbcc <tcp_input+0x554>)
 800db3e:	2200      	movs	r2, #0
 800db40:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db42:	4b23      	ldr	r3, [pc, #140]	; (800dbd0 <tcp_input+0x558>)
 800db44:	2200      	movs	r2, #0
 800db46:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db48:	4b22      	ldr	r3, [pc, #136]	; (800dbd4 <tcp_input+0x55c>)
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 0308 	and.w	r3, r3, #8
 800db50:	2b00      	cmp	r3, #0
 800db52:	d006      	beq.n	800db62 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7b5b      	ldrb	r3, [r3, #13]
 800db58:	f043 0301 	orr.w	r3, r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db66:	2b00      	cmp	r3, #0
 800db68:	d038      	beq.n	800dbdc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db6a:	69f8      	ldr	r0, [r7, #28]
 800db6c:	f7ff f93e 	bl	800cdec <tcp_process_refused_data>
 800db70:	4603      	mov	r3, r0
 800db72:	f113 0f0d 	cmn.w	r3, #13
 800db76:	d007      	beq.n	800db88 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d02d      	beq.n	800dbdc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db80:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <tcp_input+0x560>)
 800db82:	881b      	ldrh	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d029      	beq.n	800dbdc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 8104 	bne.w	800dd9a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800db92:	69f8      	ldr	r0, [r7, #28]
 800db94:	f003 f9be 	bl	8010f14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800db98:	e0ff      	b.n	800dd9a <tcp_input+0x722>
 800db9a:	bf00      	nop
 800db9c:	20000350 	.word	0x20000350
 800dba0:	20003910 	.word	0x20003910
 800dba4:	0801be90 	.word	0x0801be90
 800dba8:	0801bfbc 	.word	0x0801bfbc
 800dbac:	0801bedc 	.word	0x0801bedc
 800dbb0:	20006e74 	.word	0x20006e74
 800dbb4:	0801bfe8 	.word	0x0801bfe8
 800dbb8:	20006e84 	.word	0x20006e84
 800dbbc:	0801c014 	.word	0x0801c014
 800dbc0:	20006e7c 	.word	0x20006e7c
 800dbc4:	20000340 	.word	0x20000340
 800dbc8:	20000370 	.word	0x20000370
 800dbcc:	2000036d 	.word	0x2000036d
 800dbd0:	20000368 	.word	0x20000368
 800dbd4:	2000036c 	.word	0x2000036c
 800dbd8:	2000036a 	.word	0x2000036a
      }
    }
    tcp_input_pcb = pcb;
 800dbdc:	4a9c      	ldr	r2, [pc, #624]	; (800de50 <tcp_input+0x7d8>)
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dbe2:	69f8      	ldr	r0, [r7, #28]
 800dbe4:	f000 fb0a 	bl	800e1fc <tcp_process>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbf0:	f113 0f0d 	cmn.w	r3, #13
 800dbf4:	f000 80d3 	beq.w	800dd9e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dbf8:	4b96      	ldr	r3, [pc, #600]	; (800de54 <tcp_input+0x7dc>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	f003 0308 	and.w	r3, r3, #8
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d015      	beq.n	800dc30 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d008      	beq.n	800dc20 <tcp_input+0x5a8>
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	6912      	ldr	r2, [r2, #16]
 800dc18:	f06f 010d 	mvn.w	r1, #13
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dc20:	69f9      	ldr	r1, [r7, #28]
 800dc22:	488d      	ldr	r0, [pc, #564]	; (800de58 <tcp_input+0x7e0>)
 800dc24:	f7ff fbb0 	bl	800d388 <tcp_pcb_remove>
        tcp_free(pcb);
 800dc28:	69f8      	ldr	r0, [r7, #28]
 800dc2a:	f7fe f99d 	bl	800bf68 <tcp_free>
 800dc2e:	e0c1      	b.n	800ddb4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc34:	4b89      	ldr	r3, [pc, #548]	; (800de5c <tcp_input+0x7e4>)
 800dc36:	881b      	ldrh	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01d      	beq.n	800dc78 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc3c:	4b87      	ldr	r3, [pc, #540]	; (800de5c <tcp_input+0x7e4>)
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00a      	beq.n	800dc62 <tcp_input+0x5ea>
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc52:	69fa      	ldr	r2, [r7, #28]
 800dc54:	6910      	ldr	r0, [r2, #16]
 800dc56:	89fa      	ldrh	r2, [r7, #14]
 800dc58:	69f9      	ldr	r1, [r7, #28]
 800dc5a:	4798      	blx	r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	74fb      	strb	r3, [r7, #19]
 800dc60:	e001      	b.n	800dc66 <tcp_input+0x5ee>
 800dc62:	2300      	movs	r3, #0
 800dc64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc6a:	f113 0f0d 	cmn.w	r3, #13
 800dc6e:	f000 8098 	beq.w	800dda2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc72:	4b7a      	ldr	r3, [pc, #488]	; (800de5c <tcp_input+0x7e4>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc78:	69f8      	ldr	r0, [r7, #28]
 800dc7a:	f000 f907 	bl	800de8c <tcp_input_delayed_close>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 8090 	bne.w	800dda6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc86:	4b76      	ldr	r3, [pc, #472]	; (800de60 <tcp_input+0x7e8>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d041      	beq.n	800dd12 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <tcp_input+0x62c>
 800dc96:	4b73      	ldr	r3, [pc, #460]	; (800de64 <tcp_input+0x7ec>)
 800dc98:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dc9c:	4972      	ldr	r1, [pc, #456]	; (800de68 <tcp_input+0x7f0>)
 800dc9e:	4873      	ldr	r0, [pc, #460]	; (800de6c <tcp_input+0x7f4>)
 800dca0:	f009 f850 	bl	8016d44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	8b5b      	ldrh	r3, [r3, #26]
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d008      	beq.n	800dcc2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dcb0:	4b6b      	ldr	r3, [pc, #428]	; (800de60 <tcp_input+0x7e8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fd fea7 	bl	800ba08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dcba:	69f8      	ldr	r0, [r7, #28]
 800dcbc:	f7fe fc3c 	bl	800c538 <tcp_abort>
            goto aborted;
 800dcc0:	e078      	b.n	800ddb4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00c      	beq.n	800dce6 <tcp_input+0x66e>
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	6918      	ldr	r0, [r3, #16]
 800dcd6:	4b62      	ldr	r3, [pc, #392]	; (800de60 <tcp_input+0x7e8>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	69f9      	ldr	r1, [r7, #28]
 800dcde:	47a0      	blx	r4
 800dce0:	4603      	mov	r3, r0
 800dce2:	74fb      	strb	r3, [r7, #19]
 800dce4:	e008      	b.n	800dcf8 <tcp_input+0x680>
 800dce6:	4b5e      	ldr	r3, [pc, #376]	; (800de60 <tcp_input+0x7e8>)
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	2300      	movs	r3, #0
 800dcec:	69f9      	ldr	r1, [r7, #28]
 800dcee:	2000      	movs	r0, #0
 800dcf0:	f7ff f952 	bl	800cf98 <tcp_recv_null>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dcf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcfc:	f113 0f0d 	cmn.w	r3, #13
 800dd00:	d053      	beq.n	800ddaa <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d003      	beq.n	800dd12 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd0a:	4b55      	ldr	r3, [pc, #340]	; (800de60 <tcp_input+0x7e8>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd12:	4b50      	ldr	r3, [pc, #320]	; (800de54 <tcp_input+0x7dc>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d030      	beq.n	800dd80 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d009      	beq.n	800dd3a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd2a:	7b5a      	ldrb	r2, [r3, #13]
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd30:	f042 0220 	orr.w	r2, r2, #32
 800dd34:	b2d2      	uxtb	r2, r2
 800dd36:	735a      	strb	r2, [r3, #13]
 800dd38:	e022      	b.n	800dd80 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd42:	d005      	beq.n	800dd50 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd48:	3301      	adds	r3, #1
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <tcp_input+0x6fa>
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	6918      	ldr	r0, [r3, #16]
 800dd64:	2300      	movs	r3, #0
 800dd66:	2200      	movs	r2, #0
 800dd68:	69f9      	ldr	r1, [r7, #28]
 800dd6a:	47a0      	blx	r4
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	74fb      	strb	r3, [r7, #19]
 800dd70:	e001      	b.n	800dd76 <tcp_input+0x6fe>
 800dd72:	2300      	movs	r3, #0
 800dd74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd7a:	f113 0f0d 	cmn.w	r3, #13
 800dd7e:	d016      	beq.n	800ddae <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd80:	4b33      	ldr	r3, [pc, #204]	; (800de50 <tcp_input+0x7d8>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd86:	69f8      	ldr	r0, [r7, #28]
 800dd88:	f000 f880 	bl	800de8c <tcp_input_delayed_close>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10f      	bne.n	800ddb2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dd92:	69f8      	ldr	r0, [r7, #28]
 800dd94:	f002 fab8 	bl	8010308 <tcp_output>
 800dd98:	e00c      	b.n	800ddb4 <tcp_input+0x73c>
        goto aborted;
 800dd9a:	bf00      	nop
 800dd9c:	e00a      	b.n	800ddb4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dd9e:	bf00      	nop
 800dda0:	e008      	b.n	800ddb4 <tcp_input+0x73c>
              goto aborted;
 800dda2:	bf00      	nop
 800dda4:	e006      	b.n	800ddb4 <tcp_input+0x73c>
          goto aborted;
 800dda6:	bf00      	nop
 800dda8:	e004      	b.n	800ddb4 <tcp_input+0x73c>
            goto aborted;
 800ddaa:	bf00      	nop
 800ddac:	e002      	b.n	800ddb4 <tcp_input+0x73c>
              goto aborted;
 800ddae:	bf00      	nop
 800ddb0:	e000      	b.n	800ddb4 <tcp_input+0x73c>
          goto aborted;
 800ddb2:	bf00      	nop
    tcp_input_pcb = NULL;
 800ddb4:	4b26      	ldr	r3, [pc, #152]	; (800de50 <tcp_input+0x7d8>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ddba:	4b29      	ldr	r3, [pc, #164]	; (800de60 <tcp_input+0x7e8>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ddc0:	4b2b      	ldr	r3, [pc, #172]	; (800de70 <tcp_input+0x7f8>)
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d03f      	beq.n	800de48 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ddc8:	4b29      	ldr	r3, [pc, #164]	; (800de70 <tcp_input+0x7f8>)
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fd fe1b 	bl	800ba08 <pbuf_free>
      inseg.p = NULL;
 800ddd2:	4b27      	ldr	r3, [pc, #156]	; (800de70 <tcp_input+0x7f8>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ddd8:	e036      	b.n	800de48 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ddda:	4b26      	ldr	r3, [pc, #152]	; (800de74 <tcp_input+0x7fc>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	899b      	ldrh	r3, [r3, #12]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fc fb74 	bl	800a4d0 <lwip_htons>
 800dde8:	4603      	mov	r3, r0
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d118      	bne.n	800de26 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddf4:	4b20      	ldr	r3, [pc, #128]	; (800de78 <tcp_input+0x800>)
 800ddf6:	6819      	ldr	r1, [r3, #0]
 800ddf8:	4b20      	ldr	r3, [pc, #128]	; (800de7c <tcp_input+0x804>)
 800ddfa:	881b      	ldrh	r3, [r3, #0]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	4b20      	ldr	r3, [pc, #128]	; (800de80 <tcp_input+0x808>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de04:	4b1b      	ldr	r3, [pc, #108]	; (800de74 <tcp_input+0x7fc>)
 800de06:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de08:	885b      	ldrh	r3, [r3, #2]
 800de0a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de0c:	4a19      	ldr	r2, [pc, #100]	; (800de74 <tcp_input+0x7fc>)
 800de0e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de10:	8812      	ldrh	r2, [r2, #0]
 800de12:	b292      	uxth	r2, r2
 800de14:	9202      	str	r2, [sp, #8]
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	4b1a      	ldr	r3, [pc, #104]	; (800de84 <tcp_input+0x80c>)
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	4b1a      	ldr	r3, [pc, #104]	; (800de88 <tcp_input+0x810>)
 800de1e:	4602      	mov	r2, r0
 800de20:	2000      	movs	r0, #0
 800de22:	f003 f825 	bl	8010e70 <tcp_rst>
    pbuf_free(p);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7fd fdee 	bl	800ba08 <pbuf_free>
  return;
 800de2c:	e00c      	b.n	800de48 <tcp_input+0x7d0>
    goto dropped;
 800de2e:	bf00      	nop
 800de30:	e006      	b.n	800de40 <tcp_input+0x7c8>
    goto dropped;
 800de32:	bf00      	nop
 800de34:	e004      	b.n	800de40 <tcp_input+0x7c8>
    goto dropped;
 800de36:	bf00      	nop
 800de38:	e002      	b.n	800de40 <tcp_input+0x7c8>
      goto dropped;
 800de3a:	bf00      	nop
 800de3c:	e000      	b.n	800de40 <tcp_input+0x7c8>
      goto dropped;
 800de3e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7fd fde1 	bl	800ba08 <pbuf_free>
 800de46:	e000      	b.n	800de4a <tcp_input+0x7d2>
  return;
 800de48:	bf00      	nop
}
 800de4a:	3724      	adds	r7, #36	; 0x24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd90      	pop	{r4, r7, pc}
 800de50:	20006e88 	.word	0x20006e88
 800de54:	2000036d 	.word	0x2000036d
 800de58:	20006e74 	.word	0x20006e74
 800de5c:	20000368 	.word	0x20000368
 800de60:	20000370 	.word	0x20000370
 800de64:	0801be90 	.word	0x0801be90
 800de68:	0801c044 	.word	0x0801c044
 800de6c:	0801bedc 	.word	0x0801bedc
 800de70:	20000340 	.word	0x20000340
 800de74:	20000350 	.word	0x20000350
 800de78:	20000364 	.word	0x20000364
 800de7c:	2000036a 	.word	0x2000036a
 800de80:	20000360 	.word	0x20000360
 800de84:	20003920 	.word	0x20003920
 800de88:	20003924 	.word	0x20003924

0800de8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <tcp_input_delayed_close+0x1c>
 800de9a:	4b17      	ldr	r3, [pc, #92]	; (800def8 <tcp_input_delayed_close+0x6c>)
 800de9c:	f240 225a 	movw	r2, #602	; 0x25a
 800dea0:	4916      	ldr	r1, [pc, #88]	; (800defc <tcp_input_delayed_close+0x70>)
 800dea2:	4817      	ldr	r0, [pc, #92]	; (800df00 <tcp_input_delayed_close+0x74>)
 800dea4:	f008 ff4e 	bl	8016d44 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dea8:	4b16      	ldr	r3, [pc, #88]	; (800df04 <tcp_input_delayed_close+0x78>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	f003 0310 	and.w	r3, r3, #16
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d01c      	beq.n	800deee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8b5b      	ldrh	r3, [r3, #26]
 800deb8:	f003 0310 	and.w	r3, r3, #16
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10d      	bne.n	800dedc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d008      	beq.n	800dedc <tcp_input_delayed_close+0x50>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	6912      	ldr	r2, [r2, #16]
 800ded4:	f06f 010e 	mvn.w	r1, #14
 800ded8:	4610      	mov	r0, r2
 800deda:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dedc:	6879      	ldr	r1, [r7, #4]
 800dede:	480a      	ldr	r0, [pc, #40]	; (800df08 <tcp_input_delayed_close+0x7c>)
 800dee0:	f7ff fa52 	bl	800d388 <tcp_pcb_remove>
    tcp_free(pcb);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7fe f83f 	bl	800bf68 <tcp_free>
    return 1;
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	0801be90 	.word	0x0801be90
 800defc:	0801c060 	.word	0x0801c060
 800df00:	0801bedc 	.word	0x0801bedc
 800df04:	2000036d 	.word	0x2000036d
 800df08:	20006e74 	.word	0x20006e74

0800df0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b08b      	sub	sp, #44	; 0x2c
 800df10:	af04      	add	r7, sp, #16
 800df12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df14:	4b6f      	ldr	r3, [pc, #444]	; (800e0d4 <tcp_listen_input+0x1c8>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f003 0304 	and.w	r3, r3, #4
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f040 80d2 	bne.w	800e0c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d106      	bne.n	800df36 <tcp_listen_input+0x2a>
 800df28:	4b6b      	ldr	r3, [pc, #428]	; (800e0d8 <tcp_listen_input+0x1cc>)
 800df2a:	f240 2281 	movw	r2, #641	; 0x281
 800df2e:	496b      	ldr	r1, [pc, #428]	; (800e0dc <tcp_listen_input+0x1d0>)
 800df30:	486b      	ldr	r0, [pc, #428]	; (800e0e0 <tcp_listen_input+0x1d4>)
 800df32:	f008 ff07 	bl	8016d44 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df36:	4b67      	ldr	r3, [pc, #412]	; (800e0d4 <tcp_listen_input+0x1c8>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 0310 	and.w	r3, r3, #16
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d019      	beq.n	800df76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df42:	4b68      	ldr	r3, [pc, #416]	; (800e0e4 <tcp_listen_input+0x1d8>)
 800df44:	6819      	ldr	r1, [r3, #0]
 800df46:	4b68      	ldr	r3, [pc, #416]	; (800e0e8 <tcp_listen_input+0x1dc>)
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	461a      	mov	r2, r3
 800df4c:	4b67      	ldr	r3, [pc, #412]	; (800e0ec <tcp_listen_input+0x1e0>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df52:	4b67      	ldr	r3, [pc, #412]	; (800e0f0 <tcp_listen_input+0x1e4>)
 800df54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df56:	885b      	ldrh	r3, [r3, #2]
 800df58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df5a:	4a65      	ldr	r2, [pc, #404]	; (800e0f0 <tcp_listen_input+0x1e4>)
 800df5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df5e:	8812      	ldrh	r2, [r2, #0]
 800df60:	b292      	uxth	r2, r2
 800df62:	9202      	str	r2, [sp, #8]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	4b63      	ldr	r3, [pc, #396]	; (800e0f4 <tcp_listen_input+0x1e8>)
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	4b63      	ldr	r3, [pc, #396]	; (800e0f8 <tcp_listen_input+0x1ec>)
 800df6c:	4602      	mov	r2, r0
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f002 ff7e 	bl	8010e70 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df74:	e0a9      	b.n	800e0ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df76:	4b57      	ldr	r3, [pc, #348]	; (800e0d4 <tcp_listen_input+0x1c8>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	f003 0302 	and.w	r3, r3, #2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 80a3 	beq.w	800e0ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7d5b      	ldrb	r3, [r3, #21]
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff f929 	bl	800d1e0 <tcp_alloc>
 800df8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d111      	bne.n	800dfba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <tcp_listen_input+0xa8>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	699b      	ldr	r3, [r3, #24]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	6910      	ldr	r0, [r2, #16]
 800dfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfaa:	2100      	movs	r1, #0
 800dfac:	4798      	blx	r3
 800dfae:	4603      	mov	r3, r0
 800dfb0:	73bb      	strb	r3, [r7, #14]
      return;
 800dfb2:	e08b      	b.n	800e0cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfb4:	23f0      	movs	r3, #240	; 0xf0
 800dfb6:	73bb      	strb	r3, [r7, #14]
      return;
 800dfb8:	e088      	b.n	800e0cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dfba:	4b50      	ldr	r3, [pc, #320]	; (800e0fc <tcp_listen_input+0x1f0>)
 800dfbc:	695a      	ldr	r2, [r3, #20]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dfc2:	4b4e      	ldr	r3, [pc, #312]	; (800e0fc <tcp_listen_input+0x1f0>)
 800dfc4:	691a      	ldr	r2, [r3, #16]
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	8ada      	ldrh	r2, [r3, #22]
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dfd2:	4b47      	ldr	r3, [pc, #284]	; (800e0f0 <tcp_listen_input+0x1e4>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dfe4:	4b41      	ldr	r3, [pc, #260]	; (800e0ec <tcp_listen_input+0x1e0>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dff6:	6978      	ldr	r0, [r7, #20]
 800dff8:	f7ff fa5a 	bl	800d4b0 <tcp_next_iss>
 800dffc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e016:	4b35      	ldr	r3, [pc, #212]	; (800e0ec <tcp_listen_input+0x1e0>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	1e5a      	subs	r2, r3, #1
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	691a      	ldr	r2, [r3, #16]
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	7a5b      	ldrb	r3, [r3, #9]
 800e032:	f003 030c 	and.w	r3, r3, #12
 800e036:	b2da      	uxtb	r2, r3
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	7a1a      	ldrb	r2, [r3, #8]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e044:	4b2e      	ldr	r3, [pc, #184]	; (800e100 <tcp_listen_input+0x1f4>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	60da      	str	r2, [r3, #12]
 800e04c:	4a2c      	ldr	r2, [pc, #176]	; (800e100 <tcp_listen_input+0x1f4>)
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	6013      	str	r3, [r2, #0]
 800e052:	f003 f8cf 	bl	80111f4 <tcp_timer_needed>
 800e056:	4b2b      	ldr	r3, [pc, #172]	; (800e104 <tcp_listen_input+0x1f8>)
 800e058:	2201      	movs	r2, #1
 800e05a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e05c:	6978      	ldr	r0, [r7, #20]
 800e05e:	f001 fd8d 	bl	800fb7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e062:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <tcp_listen_input+0x1e4>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	89db      	ldrh	r3, [r3, #14]
 800e068:	b29a      	uxth	r2, r3
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	3304      	adds	r3, #4
 800e084:	4618      	mov	r0, r3
 800e086:	f006 fdaf 	bl	8014be8 <ip4_route>
 800e08a:	4601      	mov	r1, r0
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	3304      	adds	r3, #4
 800e090:	461a      	mov	r2, r3
 800e092:	4620      	mov	r0, r4
 800e094:	f7ff fa32 	bl	800d4fc <tcp_eff_send_mss_netif>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e0a0:	2112      	movs	r1, #18
 800e0a2:	6978      	ldr	r0, [r7, #20]
 800e0a4:	f002 f842 	bl	801012c <tcp_enqueue_flags>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	6978      	ldr	r0, [r7, #20]
 800e0b8:	f7fe f980 	bl	800c3bc <tcp_abandon>
      return;
 800e0bc:	e006      	b.n	800e0cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e0be:	6978      	ldr	r0, [r7, #20]
 800e0c0:	f002 f922 	bl	8010308 <tcp_output>
  return;
 800e0c4:	e001      	b.n	800e0ca <tcp_listen_input+0x1be>
    return;
 800e0c6:	bf00      	nop
 800e0c8:	e000      	b.n	800e0cc <tcp_listen_input+0x1c0>
  return;
 800e0ca:	bf00      	nop
}
 800e0cc:	371c      	adds	r7, #28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	2000036c 	.word	0x2000036c
 800e0d8:	0801be90 	.word	0x0801be90
 800e0dc:	0801c088 	.word	0x0801c088
 800e0e0:	0801bedc 	.word	0x0801bedc
 800e0e4:	20000364 	.word	0x20000364
 800e0e8:	2000036a 	.word	0x2000036a
 800e0ec:	20000360 	.word	0x20000360
 800e0f0:	20000350 	.word	0x20000350
 800e0f4:	20003920 	.word	0x20003920
 800e0f8:	20003924 	.word	0x20003924
 800e0fc:	20003910 	.word	0x20003910
 800e100:	20006e74 	.word	0x20006e74
 800e104:	20006e70 	.word	0x20006e70

0800e108 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af04      	add	r7, sp, #16
 800e10e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e110:	4b2f      	ldr	r3, [pc, #188]	; (800e1d0 <tcp_timewait_input+0xc8>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	f003 0304 	and.w	r3, r3, #4
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d153      	bne.n	800e1c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <tcp_timewait_input+0x28>
 800e122:	4b2c      	ldr	r3, [pc, #176]	; (800e1d4 <tcp_timewait_input+0xcc>)
 800e124:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e128:	492b      	ldr	r1, [pc, #172]	; (800e1d8 <tcp_timewait_input+0xd0>)
 800e12a:	482c      	ldr	r0, [pc, #176]	; (800e1dc <tcp_timewait_input+0xd4>)
 800e12c:	f008 fe0a 	bl	8016d44 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e130:	4b27      	ldr	r3, [pc, #156]	; (800e1d0 <tcp_timewait_input+0xc8>)
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	f003 0302 	and.w	r3, r3, #2
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d02a      	beq.n	800e192 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e13c:	4b28      	ldr	r3, [pc, #160]	; (800e1e0 <tcp_timewait_input+0xd8>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	db2d      	blt.n	800e1a6 <tcp_timewait_input+0x9e>
 800e14a:	4b25      	ldr	r3, [pc, #148]	; (800e1e0 <tcp_timewait_input+0xd8>)
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e152:	6879      	ldr	r1, [r7, #4]
 800e154:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e156:	440b      	add	r3, r1
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dc23      	bgt.n	800e1a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e15e:	4b21      	ldr	r3, [pc, #132]	; (800e1e4 <tcp_timewait_input+0xdc>)
 800e160:	6819      	ldr	r1, [r3, #0]
 800e162:	4b21      	ldr	r3, [pc, #132]	; (800e1e8 <tcp_timewait_input+0xe0>)
 800e164:	881b      	ldrh	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	4b1d      	ldr	r3, [pc, #116]	; (800e1e0 <tcp_timewait_input+0xd8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e16e:	4b1f      	ldr	r3, [pc, #124]	; (800e1ec <tcp_timewait_input+0xe4>)
 800e170:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e172:	885b      	ldrh	r3, [r3, #2]
 800e174:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e176:	4a1d      	ldr	r2, [pc, #116]	; (800e1ec <tcp_timewait_input+0xe4>)
 800e178:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e17a:	8812      	ldrh	r2, [r2, #0]
 800e17c:	b292      	uxth	r2, r2
 800e17e:	9202      	str	r2, [sp, #8]
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	4b1b      	ldr	r3, [pc, #108]	; (800e1f0 <tcp_timewait_input+0xe8>)
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	4b1b      	ldr	r3, [pc, #108]	; (800e1f4 <tcp_timewait_input+0xec>)
 800e188:	4602      	mov	r2, r0
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f002 fe70 	bl	8010e70 <tcp_rst>
      return;
 800e190:	e01b      	b.n	800e1ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e192:	4b0f      	ldr	r3, [pc, #60]	; (800e1d0 <tcp_timewait_input+0xc8>)
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e19e:	4b16      	ldr	r3, [pc, #88]	; (800e1f8 <tcp_timewait_input+0xf0>)
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e1a6:	4b10      	ldr	r3, [pc, #64]	; (800e1e8 <tcp_timewait_input+0xe0>)
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00c      	beq.n	800e1c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8b5b      	ldrh	r3, [r3, #26]
 800e1b2:	f043 0302 	orr.w	r3, r3, #2
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f002 f8a3 	bl	8010308 <tcp_output>
  }
  return;
 800e1c2:	e001      	b.n	800e1c8 <tcp_timewait_input+0xc0>
    return;
 800e1c4:	bf00      	nop
 800e1c6:	e000      	b.n	800e1ca <tcp_timewait_input+0xc2>
  return;
 800e1c8:	bf00      	nop
}
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	2000036c 	.word	0x2000036c
 800e1d4:	0801be90 	.word	0x0801be90
 800e1d8:	0801c0a8 	.word	0x0801c0a8
 800e1dc:	0801bedc 	.word	0x0801bedc
 800e1e0:	20000360 	.word	0x20000360
 800e1e4:	20000364 	.word	0x20000364
 800e1e8:	2000036a 	.word	0x2000036a
 800e1ec:	20000350 	.word	0x20000350
 800e1f0:	20003920 	.word	0x20003920
 800e1f4:	20003924 	.word	0x20003924
 800e1f8:	20006e78 	.word	0x20006e78

0800e1fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b08d      	sub	sp, #52	; 0x34
 800e200:	af04      	add	r7, sp, #16
 800e202:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e208:	2300      	movs	r3, #0
 800e20a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <tcp_process+0x24>
 800e212:	4ba5      	ldr	r3, [pc, #660]	; (800e4a8 <tcp_process+0x2ac>)
 800e214:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e218:	49a4      	ldr	r1, [pc, #656]	; (800e4ac <tcp_process+0x2b0>)
 800e21a:	48a5      	ldr	r0, [pc, #660]	; (800e4b0 <tcp_process+0x2b4>)
 800e21c:	f008 fd92 	bl	8016d44 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e220:	4ba4      	ldr	r3, [pc, #656]	; (800e4b4 <tcp_process+0x2b8>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d04e      	beq.n	800e2ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	7d1b      	ldrb	r3, [r3, #20]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d108      	bne.n	800e246 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e238:	4b9f      	ldr	r3, [pc, #636]	; (800e4b8 <tcp_process+0x2bc>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d123      	bne.n	800e288 <tcp_process+0x8c>
        acceptable = 1;
 800e240:	2301      	movs	r3, #1
 800e242:	76fb      	strb	r3, [r7, #27]
 800e244:	e020      	b.n	800e288 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e24a:	4b9c      	ldr	r3, [pc, #624]	; (800e4bc <tcp_process+0x2c0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d102      	bne.n	800e258 <tcp_process+0x5c>
        acceptable = 1;
 800e252:	2301      	movs	r3, #1
 800e254:	76fb      	strb	r3, [r7, #27]
 800e256:	e017      	b.n	800e288 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e258:	4b98      	ldr	r3, [pc, #608]	; (800e4bc <tcp_process+0x2c0>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	db10      	blt.n	800e288 <tcp_process+0x8c>
 800e266:	4b95      	ldr	r3, [pc, #596]	; (800e4bc <tcp_process+0x2c0>)
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e272:	440b      	add	r3, r1
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	dc06      	bgt.n	800e288 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8b5b      	ldrh	r3, [r3, #26]
 800e27e:	f043 0302 	orr.w	r3, r3, #2
 800e282:	b29a      	uxth	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e288:	7efb      	ldrb	r3, [r7, #27]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01b      	beq.n	800e2c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	7d1b      	ldrb	r3, [r3, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d106      	bne.n	800e2a4 <tcp_process+0xa8>
 800e296:	4b84      	ldr	r3, [pc, #528]	; (800e4a8 <tcp_process+0x2ac>)
 800e298:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e29c:	4988      	ldr	r1, [pc, #544]	; (800e4c0 <tcp_process+0x2c4>)
 800e29e:	4884      	ldr	r0, [pc, #528]	; (800e4b0 <tcp_process+0x2b4>)
 800e2a0:	f008 fd50 	bl	8016d44 <iprintf>
      recv_flags |= TF_RESET;
 800e2a4:	4b87      	ldr	r3, [pc, #540]	; (800e4c4 <tcp_process+0x2c8>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f043 0308 	orr.w	r3, r3, #8
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	4b85      	ldr	r3, [pc, #532]	; (800e4c4 <tcp_process+0x2c8>)
 800e2b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	8b5b      	ldrh	r3, [r3, #26]
 800e2b6:	f023 0301 	bic.w	r3, r3, #1
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e2c0:	f06f 030d 	mvn.w	r3, #13
 800e2c4:	e37a      	b.n	800e9bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e378      	b.n	800e9bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2ca:	4b7a      	ldr	r3, [pc, #488]	; (800e4b4 <tcp_process+0x2b8>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	f003 0302 	and.w	r3, r3, #2
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d010      	beq.n	800e2f8 <tcp_process+0xfc>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	7d1b      	ldrb	r3, [r3, #20]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d00c      	beq.n	800e2f8 <tcp_process+0xfc>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	7d1b      	ldrb	r3, [r3, #20]
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d008      	beq.n	800e2f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	8b5b      	ldrh	r3, [r3, #26]
 800e2ea:	f043 0302 	orr.w	r3, r3, #2
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e361      	b.n	800e9bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8b5b      	ldrh	r3, [r3, #26]
 800e2fc:	f003 0310 	and.w	r3, r3, #16
 800e300:	2b00      	cmp	r3, #0
 800e302:	d103      	bne.n	800e30c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e304:	4b70      	ldr	r3, [pc, #448]	; (800e4c8 <tcp_process+0x2cc>)
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f001 fc2d 	bl	800fb7c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	7d1b      	ldrb	r3, [r3, #20]
 800e326:	3b02      	subs	r3, #2
 800e328:	2b07      	cmp	r3, #7
 800e32a:	f200 8337 	bhi.w	800e99c <tcp_process+0x7a0>
 800e32e:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <tcp_process+0x138>)
 800e330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e334:	0800e355 	.word	0x0800e355
 800e338:	0800e585 	.word	0x0800e585
 800e33c:	0800e6fd 	.word	0x0800e6fd
 800e340:	0800e727 	.word	0x0800e727
 800e344:	0800e84b 	.word	0x0800e84b
 800e348:	0800e6fd 	.word	0x0800e6fd
 800e34c:	0800e8d7 	.word	0x0800e8d7
 800e350:	0800e967 	.word	0x0800e967
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e354:	4b57      	ldr	r3, [pc, #348]	; (800e4b4 <tcp_process+0x2b8>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	f003 0310 	and.w	r3, r3, #16
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 80e4 	beq.w	800e52a <tcp_process+0x32e>
 800e362:	4b54      	ldr	r3, [pc, #336]	; (800e4b4 <tcp_process+0x2b8>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	f003 0302 	and.w	r3, r3, #2
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f000 80dd 	beq.w	800e52a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	4b50      	ldr	r3, [pc, #320]	; (800e4b8 <tcp_process+0x2bc>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	f040 80d5 	bne.w	800e52a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e380:	4b4e      	ldr	r3, [pc, #312]	; (800e4bc <tcp_process+0x2c0>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e392:	4b49      	ldr	r3, [pc, #292]	; (800e4b8 <tcp_process+0x2bc>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e39a:	4b4c      	ldr	r3, [pc, #304]	; (800e4cc <tcp_process+0x2d0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	89db      	ldrh	r3, [r3, #14]
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e3b4:	4b41      	ldr	r3, [pc, #260]	; (800e4bc <tcp_process+0x2c0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	1e5a      	subs	r2, r3, #1
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f006 fc0b 	bl	8014be8 <ip4_route>
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	461a      	mov	r2, r3
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f7ff f88e 	bl	800d4fc <tcp_eff_send_mss_netif>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ec:	009a      	lsls	r2, r3, #2
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e3f8:	428b      	cmp	r3, r1
 800e3fa:	bf38      	it	cc
 800e3fc:	460b      	movcc	r3, r1
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d204      	bcs.n	800e40c <tcp_process+0x210>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	b29b      	uxth	r3, r3
 800e40a:	e00d      	b.n	800e428 <tcp_process+0x22c>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e410:	005b      	lsls	r3, r3, #1
 800e412:	f241 121c 	movw	r2, #4380	; 0x111c
 800e416:	4293      	cmp	r3, r2
 800e418:	d904      	bls.n	800e424 <tcp_process+0x228>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	b29b      	uxth	r3, r3
 800e422:	e001      	b.n	800e428 <tcp_process+0x22c>
 800e424:	f241 131c 	movw	r3, #4380	; 0x111c
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e434:	2b00      	cmp	r3, #0
 800e436:	d106      	bne.n	800e446 <tcp_process+0x24a>
 800e438:	4b1b      	ldr	r3, [pc, #108]	; (800e4a8 <tcp_process+0x2ac>)
 800e43a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e43e:	4924      	ldr	r1, [pc, #144]	; (800e4d0 <tcp_process+0x2d4>)
 800e440:	481b      	ldr	r0, [pc, #108]	; (800e4b0 <tcp_process+0x2b4>)
 800e442:	f008 fc7f 	bl	8016d44 <iprintf>
        --pcb->snd_queuelen;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e44c:	3b01      	subs	r3, #1
 800e44e:	b29a      	uxth	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e45a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d111      	bne.n	800e486 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e466:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d106      	bne.n	800e47c <tcp_process+0x280>
 800e46e:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <tcp_process+0x2ac>)
 800e470:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e474:	4917      	ldr	r1, [pc, #92]	; (800e4d4 <tcp_process+0x2d8>)
 800e476:	480e      	ldr	r0, [pc, #56]	; (800e4b0 <tcp_process+0x2b4>)
 800e478:	f008 fc64 	bl	8016d44 <iprintf>
          pcb->unsent = rseg->next;
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	66da      	str	r2, [r3, #108]	; 0x6c
 800e484:	e003      	b.n	800e48e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e48e:	69f8      	ldr	r0, [r7, #28]
 800e490:	f7fe fd3d 	bl	800cf0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d11d      	bne.n	800e4d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4a2:	861a      	strh	r2, [r3, #48]	; 0x30
 800e4a4:	e01f      	b.n	800e4e6 <tcp_process+0x2ea>
 800e4a6:	bf00      	nop
 800e4a8:	0801be90 	.word	0x0801be90
 800e4ac:	0801c0c8 	.word	0x0801c0c8
 800e4b0:	0801bedc 	.word	0x0801bedc
 800e4b4:	2000036c 	.word	0x2000036c
 800e4b8:	20000364 	.word	0x20000364
 800e4bc:	20000360 	.word	0x20000360
 800e4c0:	0801c0e4 	.word	0x0801c0e4
 800e4c4:	2000036d 	.word	0x2000036d
 800e4c8:	20006e78 	.word	0x20006e78
 800e4cc:	20000350 	.word	0x20000350
 800e4d0:	0801c104 	.word	0x0801c104
 800e4d4:	0801c11c 	.word	0x0801c11c
        } else {
          pcb->rtime = 0;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <tcp_process+0x30a>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	6910      	ldr	r0, [r2, #16]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	4798      	blx	r3
 800e500:	4603      	mov	r3, r0
 800e502:	76bb      	strb	r3, [r7, #26]
 800e504:	e001      	b.n	800e50a <tcp_process+0x30e>
 800e506:	2300      	movs	r3, #0
 800e508:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e50a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e50e:	f113 0f0d 	cmn.w	r3, #13
 800e512:	d102      	bne.n	800e51a <tcp_process+0x31e>
          return ERR_ABRT;
 800e514:	f06f 030c 	mvn.w	r3, #12
 800e518:	e250      	b.n	800e9bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	8b5b      	ldrh	r3, [r3, #26]
 800e51e:	f043 0302 	orr.w	r3, r3, #2
 800e522:	b29a      	uxth	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e528:	e23a      	b.n	800e9a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e52a:	4b9d      	ldr	r3, [pc, #628]	; (800e7a0 <tcp_process+0x5a4>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	f003 0310 	and.w	r3, r3, #16
 800e532:	2b00      	cmp	r3, #0
 800e534:	f000 8234 	beq.w	800e9a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e538:	4b9a      	ldr	r3, [pc, #616]	; (800e7a4 <tcp_process+0x5a8>)
 800e53a:	6819      	ldr	r1, [r3, #0]
 800e53c:	4b9a      	ldr	r3, [pc, #616]	; (800e7a8 <tcp_process+0x5ac>)
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	4b9a      	ldr	r3, [pc, #616]	; (800e7ac <tcp_process+0x5b0>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e548:	4b99      	ldr	r3, [pc, #612]	; (800e7b0 <tcp_process+0x5b4>)
 800e54a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e54c:	885b      	ldrh	r3, [r3, #2]
 800e54e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e550:	4a97      	ldr	r2, [pc, #604]	; (800e7b0 <tcp_process+0x5b4>)
 800e552:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e554:	8812      	ldrh	r2, [r2, #0]
 800e556:	b292      	uxth	r2, r2
 800e558:	9202      	str	r2, [sp, #8]
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	4b95      	ldr	r3, [pc, #596]	; (800e7b4 <tcp_process+0x5b8>)
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	4b95      	ldr	r3, [pc, #596]	; (800e7b8 <tcp_process+0x5bc>)
 800e562:	4602      	mov	r2, r0
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f002 fc83 	bl	8010e70 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e570:	2b05      	cmp	r3, #5
 800e572:	f200 8215 	bhi.w	800e9a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f002 fa4d 	bl	8010a1c <tcp_rexmit_rto>
      break;
 800e582:	e20d      	b.n	800e9a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e584:	4b86      	ldr	r3, [pc, #536]	; (800e7a0 <tcp_process+0x5a4>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	f003 0310 	and.w	r3, r3, #16
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 80a1 	beq.w	800e6d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e592:	4b84      	ldr	r3, [pc, #528]	; (800e7a4 <tcp_process+0x5a8>)
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	3b01      	subs	r3, #1
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	db7e      	blt.n	800e6a0 <tcp_process+0x4a4>
 800e5a2:	4b80      	ldr	r3, [pc, #512]	; (800e7a4 <tcp_process+0x5a8>)
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	dc77      	bgt.n	800e6a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2204      	movs	r2, #4
 800e5b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d102      	bne.n	800e5c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e5be:	23fa      	movs	r3, #250	; 0xfa
 800e5c0:	76bb      	strb	r3, [r7, #26]
 800e5c2:	e01d      	b.n	800e600 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <tcp_process+0x3e0>
 800e5ce:	4b7b      	ldr	r3, [pc, #492]	; (800e7bc <tcp_process+0x5c0>)
 800e5d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e5d4:	497a      	ldr	r1, [pc, #488]	; (800e7c0 <tcp_process+0x5c4>)
 800e5d6:	487b      	ldr	r0, [pc, #492]	; (800e7c4 <tcp_process+0x5c8>)
 800e5d8:	f008 fbb4 	bl	8016d44 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e0:	699b      	ldr	r3, [r3, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00a      	beq.n	800e5fc <tcp_process+0x400>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	6910      	ldr	r0, [r2, #16]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	4798      	blx	r3
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	76bb      	strb	r3, [r7, #26]
 800e5fa:	e001      	b.n	800e600 <tcp_process+0x404>
 800e5fc:	23f0      	movs	r3, #240	; 0xf0
 800e5fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e600:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00a      	beq.n	800e61e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e608:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e60c:	f113 0f0d 	cmn.w	r3, #13
 800e610:	d002      	beq.n	800e618 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7fd ff90 	bl	800c538 <tcp_abort>
            }
            return ERR_ABRT;
 800e618:	f06f 030c 	mvn.w	r3, #12
 800e61c:	e1ce      	b.n	800e9bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 fae0 	bl	800ebe4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e624:	4b68      	ldr	r3, [pc, #416]	; (800e7c8 <tcp_process+0x5cc>)
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d005      	beq.n	800e638 <tcp_process+0x43c>
            recv_acked--;
 800e62c:	4b66      	ldr	r3, [pc, #408]	; (800e7c8 <tcp_process+0x5cc>)
 800e62e:	881b      	ldrh	r3, [r3, #0]
 800e630:	3b01      	subs	r3, #1
 800e632:	b29a      	uxth	r2, r3
 800e634:	4b64      	ldr	r3, [pc, #400]	; (800e7c8 <tcp_process+0x5cc>)
 800e636:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e63c:	009a      	lsls	r2, r3, #2
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	f241 111c 	movw	r1, #4380	; 0x111c
 800e648:	428b      	cmp	r3, r1
 800e64a:	bf38      	it	cc
 800e64c:	460b      	movcc	r3, r1
 800e64e:	429a      	cmp	r2, r3
 800e650:	d204      	bcs.n	800e65c <tcp_process+0x460>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	b29b      	uxth	r3, r3
 800e65a:	e00d      	b.n	800e678 <tcp_process+0x47c>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	f241 121c 	movw	r2, #4380	; 0x111c
 800e666:	4293      	cmp	r3, r2
 800e668:	d904      	bls.n	800e674 <tcp_process+0x478>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	b29b      	uxth	r3, r3
 800e672:	e001      	b.n	800e678 <tcp_process+0x47c>
 800e674:	f241 131c 	movw	r3, #4380	; 0x111c
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e67e:	4b53      	ldr	r3, [pc, #332]	; (800e7cc <tcp_process+0x5d0>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d037      	beq.n	800e6fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	8b5b      	ldrh	r3, [r3, #26]
 800e68e:	f043 0302 	orr.w	r3, r3, #2
 800e692:	b29a      	uxth	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2207      	movs	r2, #7
 800e69c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e69e:	e02c      	b.n	800e6fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6a0:	4b40      	ldr	r3, [pc, #256]	; (800e7a4 <tcp_process+0x5a8>)
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	4b40      	ldr	r3, [pc, #256]	; (800e7a8 <tcp_process+0x5ac>)
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4b40      	ldr	r3, [pc, #256]	; (800e7ac <tcp_process+0x5b0>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6b0:	4b3f      	ldr	r3, [pc, #252]	; (800e7b0 <tcp_process+0x5b4>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6b4:	885b      	ldrh	r3, [r3, #2]
 800e6b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6b8:	4a3d      	ldr	r2, [pc, #244]	; (800e7b0 <tcp_process+0x5b4>)
 800e6ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6bc:	8812      	ldrh	r2, [r2, #0]
 800e6be:	b292      	uxth	r2, r2
 800e6c0:	9202      	str	r2, [sp, #8]
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	4b3b      	ldr	r3, [pc, #236]	; (800e7b4 <tcp_process+0x5b8>)
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	4b3b      	ldr	r3, [pc, #236]	; (800e7b8 <tcp_process+0x5bc>)
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f002 fbcf 	bl	8010e70 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e6d2:	e167      	b.n	800e9a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e6d4:	4b32      	ldr	r3, [pc, #200]	; (800e7a0 <tcp_process+0x5a4>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 0302 	and.w	r3, r3, #2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 8161 	beq.w	800e9a4 <tcp_process+0x7a8>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	1e5a      	subs	r2, r3, #1
 800e6e8:	4b30      	ldr	r3, [pc, #192]	; (800e7ac <tcp_process+0x5b0>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	f040 8159 	bne.w	800e9a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f002 f9b4 	bl	8010a60 <tcp_rexmit>
      break;
 800e6f8:	e154      	b.n	800e9a4 <tcp_process+0x7a8>
 800e6fa:	e153      	b.n	800e9a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fa71 	bl	800ebe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e702:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <tcp_process+0x5d0>)
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	f003 0320 	and.w	r3, r3, #32
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f000 814c 	beq.w	800e9a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8b5b      	ldrh	r3, [r3, #26]
 800e714:	f043 0302 	orr.w	r3, r3, #2
 800e718:	b29a      	uxth	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2207      	movs	r2, #7
 800e722:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e724:	e140      	b.n	800e9a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa5c 	bl	800ebe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e72c:	4b27      	ldr	r3, [pc, #156]	; (800e7cc <tcp_process+0x5d0>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	f003 0320 	and.w	r3, r3, #32
 800e734:	2b00      	cmp	r3, #0
 800e736:	d071      	beq.n	800e81c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e738:	4b19      	ldr	r3, [pc, #100]	; (800e7a0 <tcp_process+0x5a4>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	f003 0310 	and.w	r3, r3, #16
 800e740:	2b00      	cmp	r3, #0
 800e742:	d060      	beq.n	800e806 <tcp_process+0x60a>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e748:	4b16      	ldr	r3, [pc, #88]	; (800e7a4 <tcp_process+0x5a8>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d15a      	bne.n	800e806 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e754:	2b00      	cmp	r3, #0
 800e756:	d156      	bne.n	800e806 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	8b5b      	ldrh	r3, [r3, #26]
 800e75c:	f043 0302 	orr.w	r3, r3, #2
 800e760:	b29a      	uxth	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7fe fdbe 	bl	800d2e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e76c:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <tcp_process+0x5d4>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	429a      	cmp	r2, r3
 800e774:	d105      	bne.n	800e782 <tcp_process+0x586>
 800e776:	4b16      	ldr	r3, [pc, #88]	; (800e7d0 <tcp_process+0x5d4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	4a14      	ldr	r2, [pc, #80]	; (800e7d0 <tcp_process+0x5d4>)
 800e77e:	6013      	str	r3, [r2, #0]
 800e780:	e02e      	b.n	800e7e0 <tcp_process+0x5e4>
 800e782:	4b13      	ldr	r3, [pc, #76]	; (800e7d0 <tcp_process+0x5d4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	e027      	b.n	800e7da <tcp_process+0x5de>
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	429a      	cmp	r2, r3
 800e792:	d11f      	bne.n	800e7d4 <tcp_process+0x5d8>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68da      	ldr	r2, [r3, #12]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	60da      	str	r2, [r3, #12]
 800e79c:	e020      	b.n	800e7e0 <tcp_process+0x5e4>
 800e79e:	bf00      	nop
 800e7a0:	2000036c 	.word	0x2000036c
 800e7a4:	20000364 	.word	0x20000364
 800e7a8:	2000036a 	.word	0x2000036a
 800e7ac:	20000360 	.word	0x20000360
 800e7b0:	20000350 	.word	0x20000350
 800e7b4:	20003920 	.word	0x20003920
 800e7b8:	20003924 	.word	0x20003924
 800e7bc:	0801be90 	.word	0x0801be90
 800e7c0:	0801c130 	.word	0x0801c130
 800e7c4:	0801bedc 	.word	0x0801bedc
 800e7c8:	20000368 	.word	0x20000368
 800e7cc:	2000036d 	.word	0x2000036d
 800e7d0:	20006e74 	.word	0x20006e74
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1d4      	bne.n	800e78a <tcp_process+0x58e>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	60da      	str	r2, [r3, #12]
 800e7e6:	4b77      	ldr	r3, [pc, #476]	; (800e9c4 <tcp_process+0x7c8>)
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	220a      	movs	r2, #10
 800e7f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e7f2:	4b75      	ldr	r3, [pc, #468]	; (800e9c8 <tcp_process+0x7cc>)
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	60da      	str	r2, [r3, #12]
 800e7fa:	4a73      	ldr	r2, [pc, #460]	; (800e9c8 <tcp_process+0x7cc>)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	f002 fcf8 	bl	80111f4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e804:	e0d2      	b.n	800e9ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8b5b      	ldrh	r3, [r3, #26]
 800e80a:	f043 0302 	orr.w	r3, r3, #2
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2208      	movs	r2, #8
 800e818:	751a      	strb	r2, [r3, #20]
      break;
 800e81a:	e0c7      	b.n	800e9ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e81c:	4b6b      	ldr	r3, [pc, #428]	; (800e9cc <tcp_process+0x7d0>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 0310 	and.w	r3, r3, #16
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 80c1 	beq.w	800e9ac <tcp_process+0x7b0>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e82e:	4b68      	ldr	r3, [pc, #416]	; (800e9d0 <tcp_process+0x7d4>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	f040 80ba 	bne.w	800e9ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f040 80b5 	bne.w	800e9ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2206      	movs	r2, #6
 800e846:	751a      	strb	r2, [r3, #20]
      break;
 800e848:	e0b0      	b.n	800e9ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f9ca 	bl	800ebe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e850:	4b60      	ldr	r3, [pc, #384]	; (800e9d4 <tcp_process+0x7d8>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 0320 	and.w	r3, r3, #32
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 80a9 	beq.w	800e9b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8b5b      	ldrh	r3, [r3, #26]
 800e862:	f043 0302 	orr.w	r3, r3, #2
 800e866:	b29a      	uxth	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe fd3b 	bl	800d2e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e872:	4b59      	ldr	r3, [pc, #356]	; (800e9d8 <tcp_process+0x7dc>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d105      	bne.n	800e888 <tcp_process+0x68c>
 800e87c:	4b56      	ldr	r3, [pc, #344]	; (800e9d8 <tcp_process+0x7dc>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	4a55      	ldr	r2, [pc, #340]	; (800e9d8 <tcp_process+0x7dc>)
 800e884:	6013      	str	r3, [r2, #0]
 800e886:	e013      	b.n	800e8b0 <tcp_process+0x6b4>
 800e888:	4b53      	ldr	r3, [pc, #332]	; (800e9d8 <tcp_process+0x7dc>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	613b      	str	r3, [r7, #16]
 800e88e:	e00c      	b.n	800e8aa <tcp_process+0x6ae>
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	429a      	cmp	r2, r3
 800e898:	d104      	bne.n	800e8a4 <tcp_process+0x6a8>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68da      	ldr	r2, [r3, #12]
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	60da      	str	r2, [r3, #12]
 800e8a2:	e005      	b.n	800e8b0 <tcp_process+0x6b4>
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	613b      	str	r3, [r7, #16]
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1ef      	bne.n	800e890 <tcp_process+0x694>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	60da      	str	r2, [r3, #12]
 800e8b6:	4b43      	ldr	r3, [pc, #268]	; (800e9c4 <tcp_process+0x7c8>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	220a      	movs	r2, #10
 800e8c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e8c2:	4b41      	ldr	r3, [pc, #260]	; (800e9c8 <tcp_process+0x7cc>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	60da      	str	r2, [r3, #12]
 800e8ca:	4a3f      	ldr	r2, [pc, #252]	; (800e9c8 <tcp_process+0x7cc>)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	f002 fc90 	bl	80111f4 <tcp_timer_needed>
      }
      break;
 800e8d4:	e06c      	b.n	800e9b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f984 	bl	800ebe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e8dc:	4b3b      	ldr	r3, [pc, #236]	; (800e9cc <tcp_process+0x7d0>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f003 0310 	and.w	r3, r3, #16
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d065      	beq.n	800e9b4 <tcp_process+0x7b8>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ec:	4b38      	ldr	r3, [pc, #224]	; (800e9d0 <tcp_process+0x7d4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d15f      	bne.n	800e9b4 <tcp_process+0x7b8>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d15b      	bne.n	800e9b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7fe fcf3 	bl	800d2e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e902:	4b35      	ldr	r3, [pc, #212]	; (800e9d8 <tcp_process+0x7dc>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d105      	bne.n	800e918 <tcp_process+0x71c>
 800e90c:	4b32      	ldr	r3, [pc, #200]	; (800e9d8 <tcp_process+0x7dc>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	4a31      	ldr	r2, [pc, #196]	; (800e9d8 <tcp_process+0x7dc>)
 800e914:	6013      	str	r3, [r2, #0]
 800e916:	e013      	b.n	800e940 <tcp_process+0x744>
 800e918:	4b2f      	ldr	r3, [pc, #188]	; (800e9d8 <tcp_process+0x7dc>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	e00c      	b.n	800e93a <tcp_process+0x73e>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	429a      	cmp	r2, r3
 800e928:	d104      	bne.n	800e934 <tcp_process+0x738>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68da      	ldr	r2, [r3, #12]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	e005      	b.n	800e940 <tcp_process+0x744>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	60fb      	str	r3, [r7, #12]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1ef      	bne.n	800e920 <tcp_process+0x724>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	60da      	str	r2, [r3, #12]
 800e946:	4b1f      	ldr	r3, [pc, #124]	; (800e9c4 <tcp_process+0x7c8>)
 800e948:	2201      	movs	r2, #1
 800e94a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	220a      	movs	r2, #10
 800e950:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e952:	4b1d      	ldr	r3, [pc, #116]	; (800e9c8 <tcp_process+0x7cc>)
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	4a1b      	ldr	r2, [pc, #108]	; (800e9c8 <tcp_process+0x7cc>)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6013      	str	r3, [r2, #0]
 800e960:	f002 fc48 	bl	80111f4 <tcp_timer_needed>
      }
      break;
 800e964:	e026      	b.n	800e9b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f93c 	bl	800ebe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e96c:	4b17      	ldr	r3, [pc, #92]	; (800e9cc <tcp_process+0x7d0>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 0310 	and.w	r3, r3, #16
 800e974:	2b00      	cmp	r3, #0
 800e976:	d01f      	beq.n	800e9b8 <tcp_process+0x7bc>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e97c:	4b14      	ldr	r3, [pc, #80]	; (800e9d0 <tcp_process+0x7d4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	429a      	cmp	r2, r3
 800e982:	d119      	bne.n	800e9b8 <tcp_process+0x7bc>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d115      	bne.n	800e9b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e98c:	4b11      	ldr	r3, [pc, #68]	; (800e9d4 <tcp_process+0x7d8>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	f043 0310 	orr.w	r3, r3, #16
 800e994:	b2da      	uxtb	r2, r3
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <tcp_process+0x7d8>)
 800e998:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e99a:	e00d      	b.n	800e9b8 <tcp_process+0x7bc>
    default:
      break;
 800e99c:	bf00      	nop
 800e99e:	e00c      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9a0:	bf00      	nop
 800e9a2:	e00a      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9a4:	bf00      	nop
 800e9a6:	e008      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9a8:	bf00      	nop
 800e9aa:	e006      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9ac:	bf00      	nop
 800e9ae:	e004      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9b0:	bf00      	nop
 800e9b2:	e002      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9b4:	bf00      	nop
 800e9b6:	e000      	b.n	800e9ba <tcp_process+0x7be>
      break;
 800e9b8:	bf00      	nop
  }
  return ERR_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3724      	adds	r7, #36	; 0x24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd90      	pop	{r4, r7, pc}
 800e9c4:	20006e70 	.word	0x20006e70
 800e9c8:	20006e84 	.word	0x20006e84
 800e9cc:	2000036c 	.word	0x2000036c
 800e9d0:	20000364 	.word	0x20000364
 800e9d4:	2000036d 	.word	0x2000036d
 800e9d8:	20006e74 	.word	0x20006e74

0800e9dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d106      	bne.n	800e9fa <tcp_oos_insert_segment+0x1e>
 800e9ec:	4b3b      	ldr	r3, [pc, #236]	; (800eadc <tcp_oos_insert_segment+0x100>)
 800e9ee:	f240 421f 	movw	r2, #1055	; 0x41f
 800e9f2:	493b      	ldr	r1, [pc, #236]	; (800eae0 <tcp_oos_insert_segment+0x104>)
 800e9f4:	483b      	ldr	r0, [pc, #236]	; (800eae4 <tcp_oos_insert_segment+0x108>)
 800e9f6:	f008 f9a5 	bl	8016d44 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	899b      	ldrh	r3, [r3, #12]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fb fd64 	bl	800a4d0 <lwip_htons>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d028      	beq.n	800ea66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea14:	6838      	ldr	r0, [r7, #0]
 800ea16:	f7fe fa65 	bl	800cee4 <tcp_segs_free>
    next = NULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	603b      	str	r3, [r7, #0]
 800ea1e:	e056      	b.n	800eace <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	899b      	ldrh	r3, [r3, #12]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fb fd51 	bl	800a4d0 <lwip_htons>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00d      	beq.n	800ea56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	899b      	ldrh	r3, [r3, #12]
 800ea40:	b29c      	uxth	r4, r3
 800ea42:	2001      	movs	r0, #1
 800ea44:	f7fb fd44 	bl	800a4d0 <lwip_htons>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	4322      	orrs	r2, r4
 800ea52:	b292      	uxth	r2, r2
 800ea54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7fe fa54 	bl	800cf0e <tcp_seg_free>
    while (next &&
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00e      	beq.n	800ea8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	891b      	ldrh	r3, [r3, #8]
 800ea70:	461a      	mov	r2, r3
 800ea72:	4b1d      	ldr	r3, [pc, #116]	; (800eae8 <tcp_oos_insert_segment+0x10c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	441a      	add	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	8909      	ldrh	r1, [r1, #8]
 800ea82:	440b      	add	r3, r1
 800ea84:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	daca      	bge.n	800ea20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01e      	beq.n	800eace <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	891b      	ldrh	r3, [r3, #8]
 800ea94:	461a      	mov	r2, r3
 800ea96:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <tcp_oos_insert_segment+0x10c>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	441a      	add	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dd12      	ble.n	800eace <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <tcp_oos_insert_segment+0x10c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	891b      	ldrh	r3, [r3, #8]
 800eac6:	4619      	mov	r1, r3
 800eac8:	4610      	mov	r0, r2
 800eaca:	f7fc fe17 	bl	800b6fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	601a      	str	r2, [r3, #0]
}
 800ead4:	bf00      	nop
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd90      	pop	{r4, r7, pc}
 800eadc:	0801be90 	.word	0x0801be90
 800eae0:	0801c150 	.word	0x0801c150
 800eae4:	0801bedc 	.word	0x0801bedc
 800eae8:	20000360 	.word	0x20000360

0800eaec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eaec:	b5b0      	push	{r4, r5, r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
 800eaf8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eafa:	e03e      	b.n	800eb7a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fd f804 	bl	800bb18 <pbuf_clen>
 800eb10:	4603      	mov	r3, r0
 800eb12:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb1a:	8a7a      	ldrh	r2, [r7, #18]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d906      	bls.n	800eb2e <tcp_free_acked_segments+0x42>
 800eb20:	4b2a      	ldr	r3, [pc, #168]	; (800ebcc <tcp_free_acked_segments+0xe0>)
 800eb22:	f240 4257 	movw	r2, #1111	; 0x457
 800eb26:	492a      	ldr	r1, [pc, #168]	; (800ebd0 <tcp_free_acked_segments+0xe4>)
 800eb28:	482a      	ldr	r0, [pc, #168]	; (800ebd4 <tcp_free_acked_segments+0xe8>)
 800eb2a:	f008 f90b 	bl	8016d44 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eb34:	8a7b      	ldrh	r3, [r7, #18]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	891a      	ldrh	r2, [r3, #8]
 800eb44:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <tcp_free_acked_segments+0xec>)
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	4413      	add	r3, r2
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <tcp_free_acked_segments+0xec>)
 800eb4e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	f7fe f9dc 	bl	800cf0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00c      	beq.n	800eb7a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d109      	bne.n	800eb7a <tcp_free_acked_segments+0x8e>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d106      	bne.n	800eb7a <tcp_free_acked_segments+0x8e>
 800eb6c:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <tcp_free_acked_segments+0xe0>)
 800eb6e:	f240 4261 	movw	r2, #1121	; 0x461
 800eb72:	491a      	ldr	r1, [pc, #104]	; (800ebdc <tcp_free_acked_segments+0xf0>)
 800eb74:	4817      	ldr	r0, [pc, #92]	; (800ebd4 <tcp_free_acked_segments+0xe8>)
 800eb76:	f008 f8e5 	bl	8016d44 <iprintf>
  while (seg_list != NULL &&
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d020      	beq.n	800ebc2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fb fcb7 	bl	800a4fa <lwip_htonl>
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	891b      	ldrh	r3, [r3, #8]
 800eb92:	461d      	mov	r5, r3
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	899b      	ldrh	r3, [r3, #12]
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fb fc97 	bl	800a4d0 <lwip_htons>
 800eba2:	4603      	mov	r3, r0
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	f003 0303 	and.w	r3, r3, #3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d001      	beq.n	800ebb2 <tcp_free_acked_segments+0xc6>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	e000      	b.n	800ebb4 <tcp_free_acked_segments+0xc8>
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	442b      	add	r3, r5
 800ebb6:	18e2      	adds	r2, r4, r3
 800ebb8:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <tcp_free_acked_segments+0xf4>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	dd9c      	ble.n	800eafc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ebc2:	68bb      	ldr	r3, [r7, #8]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3718      	adds	r7, #24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bdb0      	pop	{r4, r5, r7, pc}
 800ebcc:	0801be90 	.word	0x0801be90
 800ebd0:	0801c178 	.word	0x0801c178
 800ebd4:	0801bedc 	.word	0x0801bedc
 800ebd8:	20000368 	.word	0x20000368
 800ebdc:	0801c1a0 	.word	0x0801c1a0
 800ebe0:	20000364 	.word	0x20000364

0800ebe4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ebe4:	b5b0      	push	{r4, r5, r7, lr}
 800ebe6:	b094      	sub	sp, #80	; 0x50
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_receive+0x20>
 800ebf6:	4ba6      	ldr	r3, [pc, #664]	; (800ee90 <tcp_receive+0x2ac>)
 800ebf8:	f240 427b 	movw	r2, #1147	; 0x47b
 800ebfc:	49a5      	ldr	r1, [pc, #660]	; (800ee94 <tcp_receive+0x2b0>)
 800ebfe:	48a6      	ldr	r0, [pc, #664]	; (800ee98 <tcp_receive+0x2b4>)
 800ec00:	f008 f8a0 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	7d1b      	ldrb	r3, [r3, #20]
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d806      	bhi.n	800ec1a <tcp_receive+0x36>
 800ec0c:	4ba0      	ldr	r3, [pc, #640]	; (800ee90 <tcp_receive+0x2ac>)
 800ec0e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ec12:	49a2      	ldr	r1, [pc, #648]	; (800ee9c <tcp_receive+0x2b8>)
 800ec14:	48a0      	ldr	r0, [pc, #640]	; (800ee98 <tcp_receive+0x2b4>)
 800ec16:	f008 f895 	bl	8016d44 <iprintf>

  if (flags & TCP_ACK) {
 800ec1a:	4ba1      	ldr	r3, [pc, #644]	; (800eea0 <tcp_receive+0x2bc>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	f003 0310 	and.w	r3, r3, #16
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f000 8263 	beq.w	800f0ee <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec2e:	461a      	mov	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec34:	4413      	add	r3, r2
 800ec36:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec3c:	4b99      	ldr	r3, [pc, #612]	; (800eea4 <tcp_receive+0x2c0>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	db1b      	blt.n	800ec7e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec4a:	4b96      	ldr	r3, [pc, #600]	; (800eea4 <tcp_receive+0x2c0>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d106      	bne.n	800ec60 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec56:	4b94      	ldr	r3, [pc, #592]	; (800eea8 <tcp_receive+0x2c4>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	db0e      	blt.n	800ec7e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec64:	4b90      	ldr	r3, [pc, #576]	; (800eea8 <tcp_receive+0x2c4>)
 800ec66:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d125      	bne.n	800ecb8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec6c:	4b8f      	ldr	r3, [pc, #572]	; (800eeac <tcp_receive+0x2c8>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	89db      	ldrh	r3, [r3, #14]
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d91c      	bls.n	800ecb8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ec7e:	4b8b      	ldr	r3, [pc, #556]	; (800eeac <tcp_receive+0x2c8>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	89db      	ldrh	r3, [r3, #14]
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d205      	bcs.n	800eca8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eca8:	4b7e      	ldr	r3, [pc, #504]	; (800eea4 <tcp_receive+0x2c0>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ecb0:	4b7d      	ldr	r3, [pc, #500]	; (800eea8 <tcp_receive+0x2c4>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ecb8:	4b7b      	ldr	r3, [pc, #492]	; (800eea8 <tcp_receive+0x2c4>)
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dc58      	bgt.n	800ed78 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ecc6:	4b7a      	ldr	r3, [pc, #488]	; (800eeb0 <tcp_receive+0x2cc>)
 800ecc8:	881b      	ldrh	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d14b      	bne.n	800ed66 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ecd8:	4413      	add	r3, r2
 800ecda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d142      	bne.n	800ed66 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	db3d      	blt.n	800ed66 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecee:	4b6e      	ldr	r3, [pc, #440]	; (800eea8 <tcp_receive+0x2c4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d137      	bne.n	800ed66 <tcp_receive+0x182>
              found_dupack = 1;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed00:	2bff      	cmp	r3, #255	; 0xff
 800ed02:	d007      	beq.n	800ed14 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed1a:	2b03      	cmp	r3, #3
 800ed1c:	d91b      	bls.n	800ed56 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed28:	4413      	add	r3, r2
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d30a      	bcc.n	800ed4c <tcp_receive+0x168>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed40:	4413      	add	r3, r2
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed4a:	e004      	b.n	800ed56 <tcp_receive+0x172>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d902      	bls.n	800ed66 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f001 fee9 	bl	8010b38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f040 8160 	bne.w	800f02e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed76:	e15a      	b.n	800f02e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed78:	4b4b      	ldr	r3, [pc, #300]	; (800eea8 <tcp_receive+0x2c4>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	3b01      	subs	r3, #1
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f2c0 814d 	blt.w	800f024 <tcp_receive+0x440>
 800ed8a:	4b47      	ldr	r3, [pc, #284]	; (800eea8 <tcp_receive+0x2c4>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f300 8145 	bgt.w	800f024 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	8b5b      	ldrh	r3, [r3, #26]
 800ed9e:	f003 0304 	and.w	r3, r3, #4
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d010      	beq.n	800edc8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	8b5b      	ldrh	r3, [r3, #26]
 800edaa:	f023 0304 	bic.w	r3, r3, #4
 800edae:	b29a      	uxth	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edd6:	10db      	asrs	r3, r3, #3
 800edd8:	b21b      	sxth	r3, r3
 800edda:	b29a      	uxth	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	4413      	add	r3, r2
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	b21a      	sxth	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800edf0:	4b2d      	ldr	r3, [pc, #180]	; (800eea8 <tcp_receive+0x2c4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ee08:	4b27      	ldr	r3, [pc, #156]	; (800eea8 <tcp_receive+0x2c4>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	f240 8096 	bls.w	800ef46 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d244      	bcs.n	800eeb4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8b5b      	ldrh	r3, [r3, #26]
 800ee2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <tcp_receive+0x256>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e000      	b.n	800ee3c <tcp_receive+0x258>
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee4a:	fb12 f303 	smulbb	r3, r2, r3
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee52:	4293      	cmp	r3, r2
 800ee54:	bf28      	it	cs
 800ee56:	4613      	movcs	r3, r2
 800ee58:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee62:	4413      	add	r3, r2
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d309      	bcc.n	800ee84 <tcp_receive+0x2a0>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee78:	4413      	add	r3, r2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee82:	e060      	b.n	800ef46 <tcp_receive+0x362>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee8e:	e05a      	b.n	800ef46 <tcp_receive+0x362>
 800ee90:	0801be90 	.word	0x0801be90
 800ee94:	0801c1c0 	.word	0x0801c1c0
 800ee98:	0801bedc 	.word	0x0801bedc
 800ee9c:	0801c1dc 	.word	0x0801c1dc
 800eea0:	2000036c 	.word	0x2000036c
 800eea4:	20000360 	.word	0x20000360
 800eea8:	20000364 	.word	0x20000364
 800eeac:	20000350 	.word	0x20000350
 800eeb0:	2000036a 	.word	0x2000036a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eeba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eebc:	4413      	add	r3, r2
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d309      	bcc.n	800eede <tcp_receive+0x2fa>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eed2:	4413      	add	r3, r2
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eedc:	e004      	b.n	800eee8 <tcp_receive+0x304>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d326      	bcc.n	800ef46 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef04:	1ad3      	subs	r3, r2, r3
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef18:	4413      	add	r3, r2
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d30a      	bcc.n	800ef3c <tcp_receive+0x358>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef30:	4413      	add	r3, r2
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef3a:	e004      	b.n	800ef46 <tcp_receive+0x362>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef4e:	4a98      	ldr	r2, [pc, #608]	; (800f1b0 <tcp_receive+0x5cc>)
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fdcb 	bl	800eaec <tcp_free_acked_segments>
 800ef56:	4602      	mov	r2, r0
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef64:	4a93      	ldr	r2, [pc, #588]	; (800f1b4 <tcp_receive+0x5d0>)
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff fdc0 	bl	800eaec <tcp_free_acked_segments>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d104      	bne.n	800ef84 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef80:	861a      	strh	r2, [r3, #48]	; 0x30
 800ef82:	e002      	b.n	800ef8a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d103      	bne.n	800efa0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800efa6:	4b84      	ldr	r3, [pc, #528]	; (800f1b8 <tcp_receive+0x5d4>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	4413      	add	r3, r2
 800efac:	b29a      	uxth	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	8b5b      	ldrh	r3, [r3, #26]
 800efb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d035      	beq.n	800f02c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d118      	bne.n	800effa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00c      	beq.n	800efea <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fb fa8c 	bl	800a4fa <lwip_htonl>
 800efe2:	4603      	mov	r3, r0
 800efe4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	dc20      	bgt.n	800f02c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	8b5b      	ldrh	r3, [r3, #26]
 800efee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eff8:	e018      	b.n	800f02c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	f7fb fa77 	bl	800a4fa <lwip_htonl>
 800f00c:	4603      	mov	r3, r0
 800f00e:	1ae3      	subs	r3, r4, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	dc0b      	bgt.n	800f02c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8b5b      	ldrh	r3, [r3, #26]
 800f018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f022:	e003      	b.n	800f02c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f001 ff75 	bl	8010f14 <tcp_send_empty_ack>
 800f02a:	e000      	b.n	800f02e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f02c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f032:	2b00      	cmp	r3, #0
 800f034:	d05b      	beq.n	800f0ee <tcp_receive+0x50a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f03a:	4b60      	ldr	r3, [pc, #384]	; (800f1bc <tcp_receive+0x5d8>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	2b00      	cmp	r3, #0
 800f042:	da54      	bge.n	800f0ee <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f044:	4b5e      	ldr	r3, [pc, #376]	; (800f1c0 <tcp_receive+0x5dc>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	b29a      	uxth	r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f04e:	b29b      	uxth	r3, r3
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	b29b      	uxth	r3, r3
 800f054:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f058:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f062:	10db      	asrs	r3, r3, #3
 800f064:	b21b      	sxth	r3, r3
 800f066:	b29b      	uxth	r3, r3
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f076:	b29a      	uxth	r2, r3
 800f078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f07c:	4413      	add	r3, r2
 800f07e:	b29b      	uxth	r3, r3
 800f080:	b21a      	sxth	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f086:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da05      	bge.n	800f09a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f08e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f092:	425b      	negs	r3, r3
 800f094:	b29b      	uxth	r3, r3
 800f096:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f09a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0a4:	109b      	asrs	r3, r3, #2
 800f0a6:	b21b      	sxth	r3, r3
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	b21a      	sxth	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0ce:	10db      	asrs	r3, r3, #3
 800f0d0:	b21b      	sxth	r3, r3
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	4413      	add	r3, r2
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	b21a      	sxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f0ee:	4b35      	ldr	r3, [pc, #212]	; (800f1c4 <tcp_receive+0x5e0>)
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 84e1 	beq.w	800faba <tcp_receive+0xed6>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	2b06      	cmp	r3, #6
 800f0fe:	f200 84dc 	bhi.w	800faba <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f106:	4b30      	ldr	r3, [pc, #192]	; (800f1c8 <tcp_receive+0x5e4>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	3b01      	subs	r3, #1
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f2c0 808e 	blt.w	800f230 <tcp_receive+0x64c>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f118:	4b2a      	ldr	r3, [pc, #168]	; (800f1c4 <tcp_receive+0x5e0>)
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	4619      	mov	r1, r3
 800f11e:	4b2a      	ldr	r3, [pc, #168]	; (800f1c8 <tcp_receive+0x5e4>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	440b      	add	r3, r1
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	3301      	adds	r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f300 8081 	bgt.w	800f230 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f12e:	4b27      	ldr	r3, [pc, #156]	; (800f1cc <tcp_receive+0x5e8>)
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f138:	4b23      	ldr	r3, [pc, #140]	; (800f1c8 <tcp_receive+0x5e4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f140:	4b22      	ldr	r3, [pc, #136]	; (800f1cc <tcp_receive+0x5e8>)
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d106      	bne.n	800f156 <tcp_receive+0x572>
 800f148:	4b21      	ldr	r3, [pc, #132]	; (800f1d0 <tcp_receive+0x5ec>)
 800f14a:	f240 5294 	movw	r2, #1428	; 0x594
 800f14e:	4921      	ldr	r1, [pc, #132]	; (800f1d4 <tcp_receive+0x5f0>)
 800f150:	4821      	ldr	r0, [pc, #132]	; (800f1d8 <tcp_receive+0x5f4>)
 800f152:	f007 fdf7 	bl	8016d44 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f158:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d906      	bls.n	800f16e <tcp_receive+0x58a>
 800f160:	4b1b      	ldr	r3, [pc, #108]	; (800f1d0 <tcp_receive+0x5ec>)
 800f162:	f240 5295 	movw	r2, #1429	; 0x595
 800f166:	491d      	ldr	r1, [pc, #116]	; (800f1dc <tcp_receive+0x5f8>)
 800f168:	481b      	ldr	r0, [pc, #108]	; (800f1d8 <tcp_receive+0x5f4>)
 800f16a:	f007 fdeb 	bl	8016d44 <iprintf>
      off = (u16_t)off32;
 800f16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f174:	4b15      	ldr	r3, [pc, #84]	; (800f1cc <tcp_receive+0x5e8>)
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	891b      	ldrh	r3, [r3, #8]
 800f17a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f17e:	429a      	cmp	r2, r3
 800f180:	d906      	bls.n	800f190 <tcp_receive+0x5ac>
 800f182:	4b13      	ldr	r3, [pc, #76]	; (800f1d0 <tcp_receive+0x5ec>)
 800f184:	f240 5297 	movw	r2, #1431	; 0x597
 800f188:	4915      	ldr	r1, [pc, #84]	; (800f1e0 <tcp_receive+0x5fc>)
 800f18a:	4813      	ldr	r0, [pc, #76]	; (800f1d8 <tcp_receive+0x5f4>)
 800f18c:	f007 fdda 	bl	8016d44 <iprintf>
      inseg.len -= off;
 800f190:	4b0e      	ldr	r3, [pc, #56]	; (800f1cc <tcp_receive+0x5e8>)
 800f192:	891a      	ldrh	r2, [r3, #8]
 800f194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <tcp_receive+0x5e8>)
 800f19e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <tcp_receive+0x5e8>)
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	891a      	ldrh	r2, [r3, #8]
 800f1a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f1ae:	e029      	b.n	800f204 <tcp_receive+0x620>
 800f1b0:	0801c1f8 	.word	0x0801c1f8
 800f1b4:	0801c200 	.word	0x0801c200
 800f1b8:	20000368 	.word	0x20000368
 800f1bc:	20000364 	.word	0x20000364
 800f1c0:	20006e78 	.word	0x20006e78
 800f1c4:	2000036a 	.word	0x2000036a
 800f1c8:	20000360 	.word	0x20000360
 800f1cc:	20000340 	.word	0x20000340
 800f1d0:	0801be90 	.word	0x0801be90
 800f1d4:	0801c208 	.word	0x0801c208
 800f1d8:	0801bedc 	.word	0x0801bedc
 800f1dc:	0801c218 	.word	0x0801c218
 800f1e0:	0801c228 	.word	0x0801c228
        off -= p->len;
 800f1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e6:	895b      	ldrh	r3, [r3, #10]
 800f1e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1ec:	1ad3      	subs	r3, r2, r3
 800f1ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f1f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f206:	895b      	ldrh	r3, [r3, #10]
 800f208:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d8e9      	bhi.n	800f1e4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f214:	4619      	mov	r1, r3
 800f216:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f218:	f7fc fb70 	bl	800b8fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	4a91      	ldr	r2, [pc, #580]	; (800f468 <tcp_receive+0x884>)
 800f222:	6013      	str	r3, [r2, #0]
 800f224:	4b91      	ldr	r3, [pc, #580]	; (800f46c <tcp_receive+0x888>)
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	4a8f      	ldr	r2, [pc, #572]	; (800f468 <tcp_receive+0x884>)
 800f22a:	6812      	ldr	r2, [r2, #0]
 800f22c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f22e:	e00d      	b.n	800f24c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f230:	4b8d      	ldr	r3, [pc, #564]	; (800f468 <tcp_receive+0x884>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	da06      	bge.n	800f24c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	8b5b      	ldrh	r3, [r3, #26]
 800f242:	f043 0302 	orr.w	r3, r3, #2
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f24c:	4b86      	ldr	r3, [pc, #536]	; (800f468 <tcp_receive+0x884>)
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	f2c0 842a 	blt.w	800fab0 <tcp_receive+0xecc>
 800f25c:	4b82      	ldr	r3, [pc, #520]	; (800f468 <tcp_receive+0x884>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f268:	440b      	add	r3, r1
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	3301      	adds	r3, #1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f300 841e 	bgt.w	800fab0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f278:	4b7b      	ldr	r3, [pc, #492]	; (800f468 <tcp_receive+0x884>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	f040 829a 	bne.w	800f7b6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f282:	4b7a      	ldr	r3, [pc, #488]	; (800f46c <tcp_receive+0x888>)
 800f284:	891c      	ldrh	r4, [r3, #8]
 800f286:	4b79      	ldr	r3, [pc, #484]	; (800f46c <tcp_receive+0x888>)
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	899b      	ldrh	r3, [r3, #12]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fb f91e 	bl	800a4d0 <lwip_htons>
 800f294:	4603      	mov	r3, r0
 800f296:	b2db      	uxtb	r3, r3
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <tcp_receive+0x6c0>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e000      	b.n	800f2a6 <tcp_receive+0x6c2>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4423      	add	r3, r4
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	4b71      	ldr	r3, [pc, #452]	; (800f470 <tcp_receive+0x88c>)
 800f2ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2b2:	4b6f      	ldr	r3, [pc, #444]	; (800f470 <tcp_receive+0x88c>)
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d275      	bcs.n	800f3a6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2ba:	4b6c      	ldr	r3, [pc, #432]	; (800f46c <tcp_receive+0x888>)
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	899b      	ldrh	r3, [r3, #12]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fb f904 	bl	800a4d0 <lwip_htons>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	f003 0301 	and.w	r3, r3, #1
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d01f      	beq.n	800f314 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f2d4:	4b65      	ldr	r3, [pc, #404]	; (800f46c <tcp_receive+0x888>)
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	b21b      	sxth	r3, r3
 800f2de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2e2:	b21c      	sxth	r4, r3
 800f2e4:	4b61      	ldr	r3, [pc, #388]	; (800f46c <tcp_receive+0x888>)
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	899b      	ldrh	r3, [r3, #12]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fb f8ef 	bl	800a4d0 <lwip_htons>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fb f8e6 	bl	800a4d0 <lwip_htons>
 800f304:	4603      	mov	r3, r0
 800f306:	b21b      	sxth	r3, r3
 800f308:	4323      	orrs	r3, r4
 800f30a:	b21a      	sxth	r2, r3
 800f30c:	4b57      	ldr	r3, [pc, #348]	; (800f46c <tcp_receive+0x888>)
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	b292      	uxth	r2, r2
 800f312:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f318:	4b54      	ldr	r3, [pc, #336]	; (800f46c <tcp_receive+0x888>)
 800f31a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f31c:	4b53      	ldr	r3, [pc, #332]	; (800f46c <tcp_receive+0x888>)
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	899b      	ldrh	r3, [r3, #12]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4618      	mov	r0, r3
 800f326:	f7fb f8d3 	bl	800a4d0 <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	f003 0302 	and.w	r3, r3, #2
 800f332:	2b00      	cmp	r3, #0
 800f334:	d005      	beq.n	800f342 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f336:	4b4d      	ldr	r3, [pc, #308]	; (800f46c <tcp_receive+0x888>)
 800f338:	891b      	ldrh	r3, [r3, #8]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	4b4b      	ldr	r3, [pc, #300]	; (800f46c <tcp_receive+0x888>)
 800f340:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f342:	4b4a      	ldr	r3, [pc, #296]	; (800f46c <tcp_receive+0x888>)
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	4a49      	ldr	r2, [pc, #292]	; (800f46c <tcp_receive+0x888>)
 800f348:	8912      	ldrh	r2, [r2, #8]
 800f34a:	4611      	mov	r1, r2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fc f9d5 	bl	800b6fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f352:	4b46      	ldr	r3, [pc, #280]	; (800f46c <tcp_receive+0x888>)
 800f354:	891c      	ldrh	r4, [r3, #8]
 800f356:	4b45      	ldr	r3, [pc, #276]	; (800f46c <tcp_receive+0x888>)
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	899b      	ldrh	r3, [r3, #12]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fb f8b6 	bl	800a4d0 <lwip_htons>
 800f364:	4603      	mov	r3, r0
 800f366:	b2db      	uxtb	r3, r3
 800f368:	f003 0303 	and.w	r3, r3, #3
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d001      	beq.n	800f374 <tcp_receive+0x790>
 800f370:	2301      	movs	r3, #1
 800f372:	e000      	b.n	800f376 <tcp_receive+0x792>
 800f374:	2300      	movs	r3, #0
 800f376:	4423      	add	r3, r4
 800f378:	b29a      	uxth	r2, r3
 800f37a:	4b3d      	ldr	r3, [pc, #244]	; (800f470 <tcp_receive+0x88c>)
 800f37c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f37e:	4b3c      	ldr	r3, [pc, #240]	; (800f470 <tcp_receive+0x88c>)
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	4b38      	ldr	r3, [pc, #224]	; (800f468 <tcp_receive+0x884>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	441a      	add	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38e:	6879      	ldr	r1, [r7, #4]
 800f390:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f392:	440b      	add	r3, r1
 800f394:	429a      	cmp	r2, r3
 800f396:	d006      	beq.n	800f3a6 <tcp_receive+0x7c2>
 800f398:	4b36      	ldr	r3, [pc, #216]	; (800f474 <tcp_receive+0x890>)
 800f39a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f39e:	4936      	ldr	r1, [pc, #216]	; (800f478 <tcp_receive+0x894>)
 800f3a0:	4836      	ldr	r0, [pc, #216]	; (800f47c <tcp_receive+0x898>)
 800f3a2:	f007 fccf 	bl	8016d44 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 80e7 	beq.w	800f57e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3b0:	4b2e      	ldr	r3, [pc, #184]	; (800f46c <tcp_receive+0x888>)
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	899b      	ldrh	r3, [r3, #12]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fb f889 	bl	800a4d0 <lwip_htons>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	f003 0301 	and.w	r3, r3, #1
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d010      	beq.n	800f3ec <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f3ca:	e00a      	b.n	800f3e2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3d0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7fd fd96 	bl	800cf0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1f0      	bne.n	800f3cc <tcp_receive+0x7e8>
 800f3ea:	e0c8      	b.n	800f57e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f3f2:	e052      	b.n	800f49a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	899b      	ldrh	r3, [r3, #12]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fb f867 	bl	800a4d0 <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d03d      	beq.n	800f48a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f40e:	4b17      	ldr	r3, [pc, #92]	; (800f46c <tcp_receive+0x888>)
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	899b      	ldrh	r3, [r3, #12]
 800f414:	b29b      	uxth	r3, r3
 800f416:	4618      	mov	r0, r3
 800f418:	f7fb f85a 	bl	800a4d0 <lwip_htons>
 800f41c:	4603      	mov	r3, r0
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f424:	2b00      	cmp	r3, #0
 800f426:	d130      	bne.n	800f48a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f428:	4b10      	ldr	r3, [pc, #64]	; (800f46c <tcp_receive+0x888>)
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	899b      	ldrh	r3, [r3, #12]
 800f42e:	b29c      	uxth	r4, r3
 800f430:	2001      	movs	r0, #1
 800f432:	f7fb f84d 	bl	800a4d0 <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	461a      	mov	r2, r3
 800f43a:	4b0c      	ldr	r3, [pc, #48]	; (800f46c <tcp_receive+0x888>)
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	4322      	orrs	r2, r4
 800f440:	b292      	uxth	r2, r2
 800f442:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f444:	4b09      	ldr	r3, [pc, #36]	; (800f46c <tcp_receive+0x888>)
 800f446:	891c      	ldrh	r4, [r3, #8]
 800f448:	4b08      	ldr	r3, [pc, #32]	; (800f46c <tcp_receive+0x888>)
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	899b      	ldrh	r3, [r3, #12]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	4618      	mov	r0, r3
 800f452:	f7fb f83d 	bl	800a4d0 <lwip_htons>
 800f456:	4603      	mov	r3, r0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	f003 0303 	and.w	r3, r3, #3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00e      	beq.n	800f480 <tcp_receive+0x89c>
 800f462:	2301      	movs	r3, #1
 800f464:	e00d      	b.n	800f482 <tcp_receive+0x89e>
 800f466:	bf00      	nop
 800f468:	20000360 	.word	0x20000360
 800f46c:	20000340 	.word	0x20000340
 800f470:	2000036a 	.word	0x2000036a
 800f474:	0801be90 	.word	0x0801be90
 800f478:	0801c238 	.word	0x0801c238
 800f47c:	0801bedc 	.word	0x0801bedc
 800f480:	2300      	movs	r3, #0
 800f482:	4423      	add	r3, r4
 800f484:	b29a      	uxth	r2, r3
 800f486:	4b98      	ldr	r3, [pc, #608]	; (800f6e8 <tcp_receive+0xb04>)
 800f488:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f494:	6938      	ldr	r0, [r7, #16]
 800f496:	f7fd fd3a 	bl	800cf0e <tcp_seg_free>
            while (next &&
 800f49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00e      	beq.n	800f4be <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f4a0:	4b91      	ldr	r3, [pc, #580]	; (800f6e8 <tcp_receive+0xb04>)
 800f4a2:	881b      	ldrh	r3, [r3, #0]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	4b91      	ldr	r3, [pc, #580]	; (800f6ec <tcp_receive+0xb08>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	441a      	add	r2, r3
 800f4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4b4:	8909      	ldrh	r1, [r1, #8]
 800f4b6:	440b      	add	r3, r1
 800f4b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	da9a      	bge.n	800f3f4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d059      	beq.n	800f578 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f4c4:	4b88      	ldr	r3, [pc, #544]	; (800f6e8 <tcp_receive+0xb04>)
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	4b88      	ldr	r3, [pc, #544]	; (800f6ec <tcp_receive+0xb08>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	441a      	add	r2, r3
 800f4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dd4d      	ble.n	800f578 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	4b81      	ldr	r3, [pc, #516]	; (800f6ec <tcp_receive+0xb08>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	4b80      	ldr	r3, [pc, #512]	; (800f6f0 <tcp_receive+0xb0c>)
 800f4f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f4f2:	4b7f      	ldr	r3, [pc, #508]	; (800f6f0 <tcp_receive+0xb0c>)
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	899b      	ldrh	r3, [r3, #12]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fa ffe8 	bl	800a4d0 <lwip_htons>
 800f500:	4603      	mov	r3, r0
 800f502:	b2db      	uxtb	r3, r3
 800f504:	f003 0302 	and.w	r3, r3, #2
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d005      	beq.n	800f518 <tcp_receive+0x934>
                inseg.len -= 1;
 800f50c:	4b78      	ldr	r3, [pc, #480]	; (800f6f0 <tcp_receive+0xb0c>)
 800f50e:	891b      	ldrh	r3, [r3, #8]
 800f510:	3b01      	subs	r3, #1
 800f512:	b29a      	uxth	r2, r3
 800f514:	4b76      	ldr	r3, [pc, #472]	; (800f6f0 <tcp_receive+0xb0c>)
 800f516:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f518:	4b75      	ldr	r3, [pc, #468]	; (800f6f0 <tcp_receive+0xb0c>)
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	4a74      	ldr	r2, [pc, #464]	; (800f6f0 <tcp_receive+0xb0c>)
 800f51e:	8912      	ldrh	r2, [r2, #8]
 800f520:	4611      	mov	r1, r2
 800f522:	4618      	mov	r0, r3
 800f524:	f7fc f8ea 	bl	800b6fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f528:	4b71      	ldr	r3, [pc, #452]	; (800f6f0 <tcp_receive+0xb0c>)
 800f52a:	891c      	ldrh	r4, [r3, #8]
 800f52c:	4b70      	ldr	r3, [pc, #448]	; (800f6f0 <tcp_receive+0xb0c>)
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	899b      	ldrh	r3, [r3, #12]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4618      	mov	r0, r3
 800f536:	f7fa ffcb 	bl	800a4d0 <lwip_htons>
 800f53a:	4603      	mov	r3, r0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	f003 0303 	and.w	r3, r3, #3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d001      	beq.n	800f54a <tcp_receive+0x966>
 800f546:	2301      	movs	r3, #1
 800f548:	e000      	b.n	800f54c <tcp_receive+0x968>
 800f54a:	2300      	movs	r3, #0
 800f54c:	4423      	add	r3, r4
 800f54e:	b29a      	uxth	r2, r3
 800f550:	4b65      	ldr	r3, [pc, #404]	; (800f6e8 <tcp_receive+0xb04>)
 800f552:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f554:	4b64      	ldr	r3, [pc, #400]	; (800f6e8 <tcp_receive+0xb04>)
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	4b64      	ldr	r3, [pc, #400]	; (800f6ec <tcp_receive+0xb08>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	441a      	add	r2, r3
 800f560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	429a      	cmp	r2, r3
 800f568:	d006      	beq.n	800f578 <tcp_receive+0x994>
 800f56a:	4b62      	ldr	r3, [pc, #392]	; (800f6f4 <tcp_receive+0xb10>)
 800f56c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f570:	4961      	ldr	r1, [pc, #388]	; (800f6f8 <tcp_receive+0xb14>)
 800f572:	4862      	ldr	r0, [pc, #392]	; (800f6fc <tcp_receive+0xb18>)
 800f574:	f007 fbe6 	bl	8016d44 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f57c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f57e:	4b5a      	ldr	r3, [pc, #360]	; (800f6e8 <tcp_receive+0xb04>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	4b59      	ldr	r3, [pc, #356]	; (800f6ec <tcp_receive+0xb08>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	441a      	add	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f592:	4b55      	ldr	r3, [pc, #340]	; (800f6e8 <tcp_receive+0xb04>)
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	429a      	cmp	r2, r3
 800f598:	d206      	bcs.n	800f5a8 <tcp_receive+0x9c4>
 800f59a:	4b56      	ldr	r3, [pc, #344]	; (800f6f4 <tcp_receive+0xb10>)
 800f59c:	f240 6207 	movw	r2, #1543	; 0x607
 800f5a0:	4957      	ldr	r1, [pc, #348]	; (800f700 <tcp_receive+0xb1c>)
 800f5a2:	4856      	ldr	r0, [pc, #344]	; (800f6fc <tcp_receive+0xb18>)
 800f5a4:	f007 fbce 	bl	8016d44 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ac:	4b4e      	ldr	r3, [pc, #312]	; (800f6e8 <tcp_receive+0xb04>)
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7fc ffc9 	bl	800c550 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f5be:	4b4c      	ldr	r3, [pc, #304]	; (800f6f0 <tcp_receive+0xb0c>)
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	891b      	ldrh	r3, [r3, #8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d006      	beq.n	800f5d6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f5c8:	4b49      	ldr	r3, [pc, #292]	; (800f6f0 <tcp_receive+0xb0c>)
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	4a4d      	ldr	r2, [pc, #308]	; (800f704 <tcp_receive+0xb20>)
 800f5ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f5d0:	4b47      	ldr	r3, [pc, #284]	; (800f6f0 <tcp_receive+0xb0c>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5d6:	4b46      	ldr	r3, [pc, #280]	; (800f6f0 <tcp_receive+0xb0c>)
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	899b      	ldrh	r3, [r3, #12]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fa ff76 	bl	800a4d0 <lwip_htons>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	f003 0301 	and.w	r3, r3, #1
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	f000 80b8 	beq.w	800f762 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f5f2:	4b45      	ldr	r3, [pc, #276]	; (800f708 <tcp_receive+0xb24>)
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	f043 0320 	orr.w	r3, r3, #32
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	4b42      	ldr	r3, [pc, #264]	; (800f708 <tcp_receive+0xb24>)
 800f5fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f600:	e0af      	b.n	800f762 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f606:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	4a36      	ldr	r2, [pc, #216]	; (800f6ec <tcp_receive+0xb08>)
 800f612:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	891b      	ldrh	r3, [r3, #8]
 800f618:	461c      	mov	r4, r3
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	899b      	ldrh	r3, [r3, #12]
 800f620:	b29b      	uxth	r3, r3
 800f622:	4618      	mov	r0, r3
 800f624:	f7fa ff54 	bl	800a4d0 <lwip_htons>
 800f628:	4603      	mov	r3, r0
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	f003 0303 	and.w	r3, r3, #3
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <tcp_receive+0xa54>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <tcp_receive+0xa56>
 800f638:	2300      	movs	r3, #0
 800f63a:	191a      	adds	r2, r3, r4
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f640:	441a      	add	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f64a:	461c      	mov	r4, r3
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	891b      	ldrh	r3, [r3, #8]
 800f650:	461d      	mov	r5, r3
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	899b      	ldrh	r3, [r3, #12]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fa ff38 	bl	800a4d0 <lwip_htons>
 800f660:	4603      	mov	r3, r0
 800f662:	b2db      	uxtb	r3, r3
 800f664:	f003 0303 	and.w	r3, r3, #3
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <tcp_receive+0xa8c>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <tcp_receive+0xa8e>
 800f670:	2300      	movs	r3, #0
 800f672:	442b      	add	r3, r5
 800f674:	429c      	cmp	r4, r3
 800f676:	d206      	bcs.n	800f686 <tcp_receive+0xaa2>
 800f678:	4b1e      	ldr	r3, [pc, #120]	; (800f6f4 <tcp_receive+0xb10>)
 800f67a:	f240 622b 	movw	r2, #1579	; 0x62b
 800f67e:	4923      	ldr	r1, [pc, #140]	; (800f70c <tcp_receive+0xb28>)
 800f680:	481e      	ldr	r0, [pc, #120]	; (800f6fc <tcp_receive+0xb18>)
 800f682:	f007 fb5f 	bl	8016d44 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	891b      	ldrh	r3, [r3, #8]
 800f68a:	461c      	mov	r4, r3
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	b29b      	uxth	r3, r3
 800f694:	4618      	mov	r0, r3
 800f696:	f7fa ff1b 	bl	800a4d0 <lwip_htons>
 800f69a:	4603      	mov	r3, r0
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	f003 0303 	and.w	r3, r3, #3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <tcp_receive+0xac6>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e000      	b.n	800f6ac <tcp_receive+0xac8>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	1919      	adds	r1, r3, r4
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6b2:	b28b      	uxth	r3, r1
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7fc ff47 	bl	800c550 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	891b      	ldrh	r3, [r3, #8]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d028      	beq.n	800f71e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f6cc:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <tcp_receive+0xb20>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d01d      	beq.n	800f710 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f6d4:	4b0b      	ldr	r3, [pc, #44]	; (800f704 <tcp_receive+0xb20>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7fc fa54 	bl	800bb8c <pbuf_cat>
 800f6e4:	e018      	b.n	800f718 <tcp_receive+0xb34>
 800f6e6:	bf00      	nop
 800f6e8:	2000036a 	.word	0x2000036a
 800f6ec:	20000360 	.word	0x20000360
 800f6f0:	20000340 	.word	0x20000340
 800f6f4:	0801be90 	.word	0x0801be90
 800f6f8:	0801c270 	.word	0x0801c270
 800f6fc:	0801bedc 	.word	0x0801bedc
 800f700:	0801c2ac 	.word	0x0801c2ac
 800f704:	20000370 	.word	0x20000370
 800f708:	2000036d 	.word	0x2000036d
 800f70c:	0801c2cc 	.word	0x0801c2cc
            } else {
              recv_data = cseg->p;
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4a70      	ldr	r2, [pc, #448]	; (800f8d8 <tcp_receive+0xcf4>)
 800f716:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2200      	movs	r2, #0
 800f71c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	899b      	ldrh	r3, [r3, #12]
 800f724:	b29b      	uxth	r3, r3
 800f726:	4618      	mov	r0, r3
 800f728:	f7fa fed2 	bl	800a4d0 <lwip_htons>
 800f72c:	4603      	mov	r3, r0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 0301 	and.w	r3, r3, #1
 800f734:	2b00      	cmp	r3, #0
 800f736:	d00d      	beq.n	800f754 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f738:	4b68      	ldr	r3, [pc, #416]	; (800f8dc <tcp_receive+0xcf8>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	f043 0320 	orr.w	r3, r3, #32
 800f740:	b2da      	uxtb	r2, r3
 800f742:	4b66      	ldr	r3, [pc, #408]	; (800f8dc <tcp_receive+0xcf8>)
 800f744:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	7d1b      	ldrb	r3, [r3, #20]
 800f74a:	2b04      	cmp	r3, #4
 800f74c:	d102      	bne.n	800f754 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2207      	movs	r2, #7
 800f752:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f75c:	68b8      	ldr	r0, [r7, #8]
 800f75e:	f7fd fbd6 	bl	800cf0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f766:	2b00      	cmp	r3, #0
 800f768:	d008      	beq.n	800f77c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	685a      	ldr	r2, [r3, #4]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f776:	429a      	cmp	r2, r3
 800f778:	f43f af43 	beq.w	800f602 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	8b5b      	ldrh	r3, [r3, #26]
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d00e      	beq.n	800f7a6 <tcp_receive+0xbc2>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	8b5b      	ldrh	r3, [r3, #26]
 800f78c:	f023 0301 	bic.w	r3, r3, #1
 800f790:	b29a      	uxth	r2, r3
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	835a      	strh	r2, [r3, #26]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	8b5b      	ldrh	r3, [r3, #26]
 800f79a:	f043 0302 	orr.w	r3, r3, #2
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7a4:	e188      	b.n	800fab8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	8b5b      	ldrh	r3, [r3, #26]
 800f7aa:	f043 0301 	orr.w	r3, r3, #1
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7b4:	e180      	b.n	800fab8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f7be:	4848      	ldr	r0, [pc, #288]	; (800f8e0 <tcp_receive+0xcfc>)
 800f7c0:	f7fd fbbe 	bl	800cf40 <tcp_seg_copy>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	675a      	str	r2, [r3, #116]	; 0x74
 800f7ca:	e16d      	b.n	800faa8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7d6:	e157      	b.n	800fa88 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	4b41      	ldr	r3, [pc, #260]	; (800f8e4 <tcp_receive+0xd00>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d11d      	bne.n	800f822 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f7e6:	4b3e      	ldr	r3, [pc, #248]	; (800f8e0 <tcp_receive+0xcfc>)
 800f7e8:	891a      	ldrh	r2, [r3, #8]
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	891b      	ldrh	r3, [r3, #8]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	f240 814f 	bls.w	800fa92 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7f4:	483a      	ldr	r0, [pc, #232]	; (800f8e0 <tcp_receive+0xcfc>)
 800f7f6:	f7fd fba3 	bl	800cf40 <tcp_seg_copy>
 800f7fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 8149 	beq.w	800fa96 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f806:	2b00      	cmp	r3, #0
 800f808:	d003      	beq.n	800f812 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	e002      	b.n	800f818 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f818:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f81a:	6978      	ldr	r0, [r7, #20]
 800f81c:	f7ff f8de 	bl	800e9dc <tcp_oos_insert_segment>
                }
                break;
 800f820:	e139      	b.n	800fa96 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f824:	2b00      	cmp	r3, #0
 800f826:	d117      	bne.n	800f858 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f828:	4b2e      	ldr	r3, [pc, #184]	; (800f8e4 <tcp_receive+0xd00>)
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	2b00      	cmp	r3, #0
 800f836:	da57      	bge.n	800f8e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f838:	4829      	ldr	r0, [pc, #164]	; (800f8e0 <tcp_receive+0xcfc>)
 800f83a:	f7fd fb81 	bl	800cf40 <tcp_seg_copy>
 800f83e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 8129 	beq.w	800fa9a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	69ba      	ldr	r2, [r7, #24]
 800f84c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f84e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f850:	69b8      	ldr	r0, [r7, #24]
 800f852:	f7ff f8c3 	bl	800e9dc <tcp_oos_insert_segment>
                  }
                  break;
 800f856:	e120      	b.n	800fa9a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f858:	4b22      	ldr	r3, [pc, #136]	; (800f8e4 <tcp_receive+0xd00>)
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	3b01      	subs	r3, #1
 800f866:	2b00      	cmp	r3, #0
 800f868:	db3e      	blt.n	800f8e8 <tcp_receive+0xd04>
 800f86a:	4b1e      	ldr	r3, [pc, #120]	; (800f8e4 <tcp_receive+0xd00>)
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	3301      	adds	r3, #1
 800f878:	2b00      	cmp	r3, #0
 800f87a:	dc35      	bgt.n	800f8e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f87c:	4818      	ldr	r0, [pc, #96]	; (800f8e0 <tcp_receive+0xcfc>)
 800f87e:	f7fd fb5f 	bl	800cf40 <tcp_seg_copy>
 800f882:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 8109 	beq.w	800fa9e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f894:	8912      	ldrh	r2, [r2, #8]
 800f896:	441a      	add	r2, r3
 800f898:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <tcp_receive+0xd00>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	dd12      	ble.n	800f8c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8a2:	4b10      	ldr	r3, [pc, #64]	; (800f8e4 <tcp_receive+0xd00>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8be:	891b      	ldrh	r3, [r3, #8]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	4610      	mov	r0, r2
 800f8c4:	f7fb ff1a 	bl	800b6fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ca:	69fa      	ldr	r2, [r7, #28]
 800f8cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f8ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8d0:	69f8      	ldr	r0, [r7, #28]
 800f8d2:	f7ff f883 	bl	800e9dc <tcp_oos_insert_segment>
                  }
                  break;
 800f8d6:	e0e2      	b.n	800fa9e <tcp_receive+0xeba>
 800f8d8:	20000370 	.word	0x20000370
 800f8dc:	2000036d 	.word	0x2000036d
 800f8e0:	20000340 	.word	0x20000340
 800f8e4:	20000360 	.word	0x20000360
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f040 80c6 	bne.w	800fa82 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f8f6:	4b80      	ldr	r3, [pc, #512]	; (800faf8 <tcp_receive+0xf14>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f902:	2b00      	cmp	r3, #0
 800f904:	f340 80bd 	ble.w	800fa82 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	899b      	ldrh	r3, [r3, #12]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	4618      	mov	r0, r3
 800f912:	f7fa fddd 	bl	800a4d0 <lwip_htons>
 800f916:	4603      	mov	r3, r0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f040 80bf 	bne.w	800faa2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f924:	4875      	ldr	r0, [pc, #468]	; (800fafc <tcp_receive+0xf18>)
 800f926:	f7fd fb0b 	bl	800cf40 <tcp_seg_copy>
 800f92a:	4602      	mov	r2, r0
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 80b6 	beq.w	800faa6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f942:	8912      	ldrh	r2, [r2, #8]
 800f944:	441a      	add	r2, r3
 800f946:	4b6c      	ldr	r3, [pc, #432]	; (800faf8 <tcp_receive+0xf14>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dd12      	ble.n	800f976 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f950:	4b69      	ldr	r3, [pc, #420]	; (800faf8 <tcp_receive+0xf14>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	b29a      	uxth	r2, r3
 800f956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	b29a      	uxth	r2, r3
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96c:	891b      	ldrh	r3, [r3, #8]
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fb fec3 	bl	800b6fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f976:	4b62      	ldr	r3, [pc, #392]	; (800fb00 <tcp_receive+0xf1c>)
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	4b5e      	ldr	r3, [pc, #376]	; (800faf8 <tcp_receive+0xf14>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	441a      	add	r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f986:	6879      	ldr	r1, [r7, #4]
 800f988:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f98a:	440b      	add	r3, r1
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f340 8089 	ble.w	800faa6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	899b      	ldrh	r3, [r3, #12]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fa fd96 	bl	800a4d0 <lwip_htons>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d022      	beq.n	800f9f6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	899b      	ldrh	r3, [r3, #12]
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	b21b      	sxth	r3, r3
 800f9bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f9c0:	b21c      	sxth	r4, r3
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	899b      	ldrh	r3, [r3, #12]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fa fd7f 	bl	800a4d0 <lwip_htons>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fa fd76 	bl	800a4d0 <lwip_htons>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	b21b      	sxth	r3, r3
 800f9e8:	4323      	orrs	r3, r4
 800f9ea:	b21a      	sxth	r2, r3
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	b292      	uxth	r2, r2
 800f9f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa00:	4413      	add	r3, r2
 800fa02:	b299      	uxth	r1, r3
 800fa04:	4b3c      	ldr	r3, [pc, #240]	; (800faf8 <tcp_receive+0xf14>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	1a8a      	subs	r2, r1, r2
 800fa10:	b292      	uxth	r2, r2
 800fa12:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	891b      	ldrh	r3, [r3, #8]
 800fa20:	4619      	mov	r1, r3
 800fa22:	4610      	mov	r0, r2
 800fa24:	f7fb fe6a 	bl	800b6fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	891c      	ldrh	r4, [r3, #8]
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	899b      	ldrh	r3, [r3, #12]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fa fd49 	bl	800a4d0 <lwip_htons>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	f003 0303 	and.w	r3, r3, #3
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <tcp_receive+0xe6a>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e000      	b.n	800fa50 <tcp_receive+0xe6c>
 800fa4e:	2300      	movs	r3, #0
 800fa50:	4423      	add	r3, r4
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	4b2a      	ldr	r3, [pc, #168]	; (800fb00 <tcp_receive+0xf1c>)
 800fa56:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa58:	4b29      	ldr	r3, [pc, #164]	; (800fb00 <tcp_receive+0xf1c>)
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4b26      	ldr	r3, [pc, #152]	; (800faf8 <tcp_receive+0xf14>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	441a      	add	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa68:	6879      	ldr	r1, [r7, #4]
 800fa6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa6c:	440b      	add	r3, r1
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d019      	beq.n	800faa6 <tcp_receive+0xec2>
 800fa72:	4b24      	ldr	r3, [pc, #144]	; (800fb04 <tcp_receive+0xf20>)
 800fa74:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fa78:	4923      	ldr	r1, [pc, #140]	; (800fb08 <tcp_receive+0xf24>)
 800fa7a:	4824      	ldr	r0, [pc, #144]	; (800fb0c <tcp_receive+0xf28>)
 800fa7c:	f007 f962 	bl	8016d44 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fa80:	e011      	b.n	800faa6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f47f aea4 	bne.w	800f7d8 <tcp_receive+0xbf4>
 800fa90:	e00a      	b.n	800faa8 <tcp_receive+0xec4>
                break;
 800fa92:	bf00      	nop
 800fa94:	e008      	b.n	800faa8 <tcp_receive+0xec4>
                break;
 800fa96:	bf00      	nop
 800fa98:	e006      	b.n	800faa8 <tcp_receive+0xec4>
                  break;
 800fa9a:	bf00      	nop
 800fa9c:	e004      	b.n	800faa8 <tcp_receive+0xec4>
                  break;
 800fa9e:	bf00      	nop
 800faa0:	e002      	b.n	800faa8 <tcp_receive+0xec4>
                  break;
 800faa2:	bf00      	nop
 800faa4:	e000      	b.n	800faa8 <tcp_receive+0xec4>
                break;
 800faa6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f001 fa33 	bl	8010f14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800faae:	e003      	b.n	800fab8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f001 fa2f 	bl	8010f14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fab6:	e01a      	b.n	800faee <tcp_receive+0xf0a>
 800fab8:	e019      	b.n	800faee <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800faba:	4b0f      	ldr	r3, [pc, #60]	; (800faf8 <tcp_receive+0xf14>)
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	db0a      	blt.n	800fade <tcp_receive+0xefa>
 800fac8:	4b0b      	ldr	r3, [pc, #44]	; (800faf8 <tcp_receive+0xf14>)
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad0:	6879      	ldr	r1, [r7, #4]
 800fad2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fad4:	440b      	add	r3, r1
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	3301      	adds	r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	dd07      	ble.n	800faee <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	8b5b      	ldrh	r3, [r3, #26]
 800fae2:	f043 0302 	orr.w	r3, r3, #2
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800faec:	e7ff      	b.n	800faee <tcp_receive+0xf0a>
 800faee:	bf00      	nop
 800faf0:	3750      	adds	r7, #80	; 0x50
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bdb0      	pop	{r4, r5, r7, pc}
 800faf6:	bf00      	nop
 800faf8:	20000360 	.word	0x20000360
 800fafc:	20000340 	.word	0x20000340
 800fb00:	2000036a 	.word	0x2000036a
 800fb04:	0801be90 	.word	0x0801be90
 800fb08:	0801c238 	.word	0x0801c238
 800fb0c:	0801bedc 	.word	0x0801bedc

0800fb10 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fb16:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <tcp_get_next_optbyte+0x5c>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	b291      	uxth	r1, r2
 800fb1e:	4a13      	ldr	r2, [pc, #76]	; (800fb6c <tcp_get_next_optbyte+0x5c>)
 800fb20:	8011      	strh	r1, [r2, #0]
 800fb22:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb24:	4b12      	ldr	r3, [pc, #72]	; (800fb70 <tcp_get_next_optbyte+0x60>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d004      	beq.n	800fb36 <tcp_get_next_optbyte+0x26>
 800fb2c:	4b11      	ldr	r3, [pc, #68]	; (800fb74 <tcp_get_next_optbyte+0x64>)
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	88fa      	ldrh	r2, [r7, #6]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d208      	bcs.n	800fb48 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb36:	4b10      	ldr	r3, [pc, #64]	; (800fb78 <tcp_get_next_optbyte+0x68>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	3314      	adds	r3, #20
 800fb3c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb3e:	88fb      	ldrh	r3, [r7, #6]
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	4413      	add	r3, r2
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	e00b      	b.n	800fb60 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb48:	88fb      	ldrh	r3, [r7, #6]
 800fb4a:	b2da      	uxtb	r2, r3
 800fb4c:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <tcp_get_next_optbyte+0x64>)
 800fb4e:	881b      	ldrh	r3, [r3, #0]
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb56:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <tcp_get_next_optbyte+0x60>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	797b      	ldrb	r3, [r7, #5]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	2000035c 	.word	0x2000035c
 800fb70:	20000358 	.word	0x20000358
 800fb74:	20000356 	.word	0x20000356
 800fb78:	20000350 	.word	0x20000350

0800fb7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d106      	bne.n	800fb98 <tcp_parseopt+0x1c>
 800fb8a:	4b32      	ldr	r3, [pc, #200]	; (800fc54 <tcp_parseopt+0xd8>)
 800fb8c:	f240 727d 	movw	r2, #1917	; 0x77d
 800fb90:	4931      	ldr	r1, [pc, #196]	; (800fc58 <tcp_parseopt+0xdc>)
 800fb92:	4832      	ldr	r0, [pc, #200]	; (800fc5c <tcp_parseopt+0xe0>)
 800fb94:	f007 f8d6 	bl	8016d44 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fb98:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <tcp_parseopt+0xe4>)
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d055      	beq.n	800fc4c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fba0:	4b30      	ldr	r3, [pc, #192]	; (800fc64 <tcp_parseopt+0xe8>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	801a      	strh	r2, [r3, #0]
 800fba6:	e045      	b.n	800fc34 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fba8:	f7ff ffb2 	bl	800fb10 <tcp_get_next_optbyte>
 800fbac:	4603      	mov	r3, r0
 800fbae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fbb0:	7bfb      	ldrb	r3, [r7, #15]
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d006      	beq.n	800fbc4 <tcp_parseopt+0x48>
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	dc2b      	bgt.n	800fc12 <tcp_parseopt+0x96>
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d041      	beq.n	800fc42 <tcp_parseopt+0xc6>
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d127      	bne.n	800fc12 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fbc2:	e037      	b.n	800fc34 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fbc4:	f7ff ffa4 	bl	800fb10 <tcp_get_next_optbyte>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b04      	cmp	r3, #4
 800fbcc:	d13b      	bne.n	800fc46 <tcp_parseopt+0xca>
 800fbce:	4b25      	ldr	r3, [pc, #148]	; (800fc64 <tcp_parseopt+0xe8>)
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	4a22      	ldr	r2, [pc, #136]	; (800fc60 <tcp_parseopt+0xe4>)
 800fbd6:	8812      	ldrh	r2, [r2, #0]
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	da34      	bge.n	800fc46 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fbdc:	f7ff ff98 	bl	800fb10 <tcp_get_next_optbyte>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	021b      	lsls	r3, r3, #8
 800fbe6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fbe8:	f7ff ff92 	bl	800fb10 <tcp_get_next_optbyte>
 800fbec:	4603      	mov	r3, r0
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	89bb      	ldrh	r3, [r7, #12]
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fbf6:	89bb      	ldrh	r3, [r7, #12]
 800fbf8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fbfc:	d804      	bhi.n	800fc08 <tcp_parseopt+0x8c>
 800fbfe:	89bb      	ldrh	r3, [r7, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d001      	beq.n	800fc08 <tcp_parseopt+0x8c>
 800fc04:	89ba      	ldrh	r2, [r7, #12]
 800fc06:	e001      	b.n	800fc0c <tcp_parseopt+0x90>
 800fc08:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fc10:	e010      	b.n	800fc34 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fc12:	f7ff ff7d 	bl	800fb10 <tcp_get_next_optbyte>
 800fc16:	4603      	mov	r3, r0
 800fc18:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc1a:	7afb      	ldrb	r3, [r7, #11]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d914      	bls.n	800fc4a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc20:	7afb      	ldrb	r3, [r7, #11]
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <tcp_parseopt+0xe8>)
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	3b02      	subs	r3, #2
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	4b0c      	ldr	r3, [pc, #48]	; (800fc64 <tcp_parseopt+0xe8>)
 800fc32:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc34:	4b0b      	ldr	r3, [pc, #44]	; (800fc64 <tcp_parseopt+0xe8>)
 800fc36:	881a      	ldrh	r2, [r3, #0]
 800fc38:	4b09      	ldr	r3, [pc, #36]	; (800fc60 <tcp_parseopt+0xe4>)
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d3b3      	bcc.n	800fba8 <tcp_parseopt+0x2c>
 800fc40:	e004      	b.n	800fc4c <tcp_parseopt+0xd0>
          return;
 800fc42:	bf00      	nop
 800fc44:	e002      	b.n	800fc4c <tcp_parseopt+0xd0>
            return;
 800fc46:	bf00      	nop
 800fc48:	e000      	b.n	800fc4c <tcp_parseopt+0xd0>
            return;
 800fc4a:	bf00      	nop
      }
    }
  }
}
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	0801be90 	.word	0x0801be90
 800fc58:	0801c2f4 	.word	0x0801c2f4
 800fc5c:	0801bedc 	.word	0x0801bedc
 800fc60:	20000354 	.word	0x20000354
 800fc64:	2000035c 	.word	0x2000035c

0800fc68 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc6c:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <tcp_trigger_input_pcb_close+0x1c>)
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	f043 0310 	orr.w	r3, r3, #16
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	4b03      	ldr	r3, [pc, #12]	; (800fc84 <tcp_trigger_input_pcb_close+0x1c>)
 800fc78:	701a      	strb	r2, [r3, #0]
}
 800fc7a:	bf00      	nop
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	2000036d 	.word	0x2000036d

0800fc88 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00a      	beq.n	800fcb0 <tcp_route+0x28>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	7a1b      	ldrb	r3, [r3, #8]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d006      	beq.n	800fcb0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	7a1b      	ldrb	r3, [r3, #8]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fb fb6e 	bl	800b388 <netif_get_by_index>
 800fcac:	4603      	mov	r3, r0
 800fcae:	e003      	b.n	800fcb8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f004 ff99 	bl	8014be8 <ip4_route>
 800fcb6:	4603      	mov	r3, r0
  }
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fcc0:	b590      	push	{r4, r7, lr}
 800fcc2:	b087      	sub	sp, #28
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	603b      	str	r3, [r7, #0]
 800fccc:	4613      	mov	r3, r2
 800fcce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d105      	bne.n	800fce2 <tcp_create_segment+0x22>
 800fcd6:	4b44      	ldr	r3, [pc, #272]	; (800fde8 <tcp_create_segment+0x128>)
 800fcd8:	22a3      	movs	r2, #163	; 0xa3
 800fcda:	4944      	ldr	r1, [pc, #272]	; (800fdec <tcp_create_segment+0x12c>)
 800fcdc:	4844      	ldr	r0, [pc, #272]	; (800fdf0 <tcp_create_segment+0x130>)
 800fcde:	f007 f831 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d105      	bne.n	800fcf4 <tcp_create_segment+0x34>
 800fce8:	4b3f      	ldr	r3, [pc, #252]	; (800fde8 <tcp_create_segment+0x128>)
 800fcea:	22a4      	movs	r2, #164	; 0xa4
 800fcec:	4941      	ldr	r1, [pc, #260]	; (800fdf4 <tcp_create_segment+0x134>)
 800fcee:	4840      	ldr	r0, [pc, #256]	; (800fdf0 <tcp_create_segment+0x130>)
 800fcf0:	f007 f828 	bl	8016d44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcf8:	009b      	lsls	r3, r3, #2
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	f003 0304 	and.w	r3, r3, #4
 800fd00:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd02:	2003      	movs	r0, #3
 800fd04:	f7fb f83a 	bl	800ad7c <memp_malloc>
 800fd08:	6138      	str	r0, [r7, #16]
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d104      	bne.n	800fd1a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fd10:	68b8      	ldr	r0, [r7, #8]
 800fd12:	f7fb fe79 	bl	800ba08 <pbuf_free>
    return NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e061      	b.n	800fdde <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fd20:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2200      	movs	r2, #0
 800fd26:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	891a      	ldrh	r2, [r3, #8]
 800fd32:	7dfb      	ldrb	r3, [r7, #23]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d205      	bcs.n	800fd46 <tcp_create_segment+0x86>
 800fd3a:	4b2b      	ldr	r3, [pc, #172]	; (800fde8 <tcp_create_segment+0x128>)
 800fd3c:	22b0      	movs	r2, #176	; 0xb0
 800fd3e:	492e      	ldr	r1, [pc, #184]	; (800fdf8 <tcp_create_segment+0x138>)
 800fd40:	482b      	ldr	r0, [pc, #172]	; (800fdf0 <tcp_create_segment+0x130>)
 800fd42:	f006 ffff 	bl	8016d44 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	891a      	ldrh	r2, [r3, #8]
 800fd4a:	7dfb      	ldrb	r3, [r7, #23]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd56:	2114      	movs	r1, #20
 800fd58:	68b8      	ldr	r0, [r7, #8]
 800fd5a:	f7fb fdbf 	bl	800b8dc <pbuf_add_header>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd64:	6938      	ldr	r0, [r7, #16]
 800fd66:	f7fd f8d2 	bl	800cf0e <tcp_seg_free>
    return NULL;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	e037      	b.n	800fdde <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	685a      	ldr	r2, [r3, #4]
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	8ada      	ldrh	r2, [r3, #22]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	68dc      	ldr	r4, [r3, #12]
 800fd80:	4610      	mov	r0, r2
 800fd82:	f7fa fba5 	bl	800a4d0 <lwip_htons>
 800fd86:	4603      	mov	r3, r0
 800fd88:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	8b1a      	ldrh	r2, [r3, #24]
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	68dc      	ldr	r4, [r3, #12]
 800fd92:	4610      	mov	r0, r2
 800fd94:	f7fa fb9c 	bl	800a4d0 <lwip_htons>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	68dc      	ldr	r4, [r3, #12]
 800fda0:	6838      	ldr	r0, [r7, #0]
 800fda2:	f7fa fbaa 	bl	800a4fa <lwip_htonl>
 800fda6:	4603      	mov	r3, r0
 800fda8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fdaa:	7dfb      	ldrb	r3, [r7, #23]
 800fdac:	089b      	lsrs	r3, r3, #2
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	3305      	adds	r3, #5
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	031b      	lsls	r3, r3, #12
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	68dc      	ldr	r4, [r3, #12]
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7fa fb82 	bl	800a4d0 <lwip_htons>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	749a      	strb	r2, [r3, #18]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	74da      	strb	r2, [r3, #19]
  return seg;
 800fddc:	693b      	ldr	r3, [r7, #16]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	371c      	adds	r7, #28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd90      	pop	{r4, r7, pc}
 800fde6:	bf00      	nop
 800fde8:	0801c310 	.word	0x0801c310
 800fdec:	0801c344 	.word	0x0801c344
 800fdf0:	0801c364 	.word	0x0801c364
 800fdf4:	0801c38c 	.word	0x0801c38c
 800fdf8:	0801c3b0 	.word	0x0801c3b0

0800fdfc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fdfc:	b590      	push	{r4, r7, lr}
 800fdfe:	b08b      	sub	sp, #44	; 0x2c
 800fe00:	af02      	add	r7, sp, #8
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	460b      	mov	r3, r1
 800fe06:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <tcp_split_unsent_seg+0x2c>
 800fe1a:	4b95      	ldr	r3, [pc, #596]	; (8010070 <tcp_split_unsent_seg+0x274>)
 800fe1c:	f240 324b 	movw	r2, #843	; 0x34b
 800fe20:	4994      	ldr	r1, [pc, #592]	; (8010074 <tcp_split_unsent_seg+0x278>)
 800fe22:	4895      	ldr	r0, [pc, #596]	; (8010078 <tcp_split_unsent_seg+0x27c>)
 800fe24:	f006 ff8e 	bl	8016d44 <iprintf>

  useg = pcb->unsent;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe2c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d102      	bne.n	800fe3a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fe34:	f04f 33ff 	mov.w	r3, #4294967295
 800fe38:	e116      	b.n	8010068 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fe3a:	887b      	ldrh	r3, [r7, #2]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d109      	bne.n	800fe54 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe40:	4b8b      	ldr	r3, [pc, #556]	; (8010070 <tcp_split_unsent_seg+0x274>)
 800fe42:	f240 3253 	movw	r2, #851	; 0x353
 800fe46:	498d      	ldr	r1, [pc, #564]	; (801007c <tcp_split_unsent_seg+0x280>)
 800fe48:	488b      	ldr	r0, [pc, #556]	; (8010078 <tcp_split_unsent_seg+0x27c>)
 800fe4a:	f006 ff7b 	bl	8016d44 <iprintf>
    return ERR_VAL;
 800fe4e:	f06f 0305 	mvn.w	r3, #5
 800fe52:	e109      	b.n	8010068 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	891b      	ldrh	r3, [r3, #8]
 800fe58:	887a      	ldrh	r2, [r7, #2]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d301      	bcc.n	800fe62 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	e102      	b.n	8010068 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe66:	887a      	ldrh	r2, [r7, #2]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d906      	bls.n	800fe7a <tcp_split_unsent_seg+0x7e>
 800fe6c:	4b80      	ldr	r3, [pc, #512]	; (8010070 <tcp_split_unsent_seg+0x274>)
 800fe6e:	f240 325b 	movw	r2, #859	; 0x35b
 800fe72:	4983      	ldr	r1, [pc, #524]	; (8010080 <tcp_split_unsent_seg+0x284>)
 800fe74:	4880      	ldr	r0, [pc, #512]	; (8010078 <tcp_split_unsent_seg+0x27c>)
 800fe76:	f006 ff65 	bl	8016d44 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	891b      	ldrh	r3, [r3, #8]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <tcp_split_unsent_seg+0x94>
 800fe82:	4b7b      	ldr	r3, [pc, #492]	; (8010070 <tcp_split_unsent_seg+0x274>)
 800fe84:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fe88:	497e      	ldr	r1, [pc, #504]	; (8010084 <tcp_split_unsent_seg+0x288>)
 800fe8a:	487b      	ldr	r0, [pc, #492]	; (8010078 <tcp_split_unsent_seg+0x27c>)
 800fe8c:	f006 ff5a 	bl	8016d44 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	7a9b      	ldrb	r3, [r3, #10]
 800fe94:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe96:	7bfb      	ldrb	r3, [r7, #15]
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	891a      	ldrh	r2, [r3, #8]
 800fea6:	887b      	ldrh	r3, [r7, #2]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	b29a      	uxth	r2, r3
 800feb0:	89bb      	ldrh	r3, [r7, #12]
 800feb2:	4413      	add	r3, r2
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800feba:	4619      	mov	r1, r3
 800febc:	2036      	movs	r0, #54	; 0x36
 800febe:	f7fb fabf 	bl	800b440 <pbuf_alloc>
 800fec2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 80b7 	beq.w	801003a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	891a      	ldrh	r2, [r3, #8]
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	b29a      	uxth	r2, r3
 800feda:	887b      	ldrh	r3, [r7, #2]
 800fedc:	4413      	add	r3, r2
 800fede:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	6858      	ldr	r0, [r3, #4]
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	685a      	ldr	r2, [r3, #4]
 800fee8:	7bbb      	ldrb	r3, [r7, #14]
 800feea:	18d1      	adds	r1, r2, r3
 800feec:	897b      	ldrh	r3, [r7, #10]
 800feee:	89ba      	ldrh	r2, [r7, #12]
 800fef0:	f7fb ff84 	bl	800bdfc <pbuf_copy_partial>
 800fef4:	4603      	mov	r3, r0
 800fef6:	461a      	mov	r2, r3
 800fef8:	89bb      	ldrh	r3, [r7, #12]
 800fefa:	4293      	cmp	r3, r2
 800fefc:	f040 809f 	bne.w	801003e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	899b      	ldrh	r3, [r3, #12]
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fa fae1 	bl	800a4d0 <lwip_htons>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff16:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ff18:	2300      	movs	r3, #0
 800ff1a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ff1c:	7efb      	ldrb	r3, [r7, #27]
 800ff1e:	f003 0308 	and.w	r3, r3, #8
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d007      	beq.n	800ff36 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ff26:	7efb      	ldrb	r3, [r7, #27]
 800ff28:	f023 0308 	bic.w	r3, r3, #8
 800ff2c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ff2e:	7ebb      	ldrb	r3, [r7, #26]
 800ff30:	f043 0308 	orr.w	r3, r3, #8
 800ff34:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ff36:	7efb      	ldrb	r3, [r7, #27]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d007      	beq.n	800ff50 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff40:	7efb      	ldrb	r3, [r7, #27]
 800ff42:	f023 0301 	bic.w	r3, r3, #1
 800ff46:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff48:	7ebb      	ldrb	r3, [r7, #26]
 800ff4a:	f043 0301 	orr.w	r3, r3, #1
 800ff4e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fa facf 	bl	800a4fa <lwip_htonl>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	887b      	ldrh	r3, [r7, #2]
 800ff60:	18d1      	adds	r1, r2, r3
 800ff62:	7eba      	ldrb	r2, [r7, #26]
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	6939      	ldr	r1, [r7, #16]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff fea7 	bl	800fcc0 <tcp_create_segment>
 800ff72:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d063      	beq.n	8010042 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fb fdca 	bl	800bb18 <pbuf_clen>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff8e:	1a9b      	subs	r3, r3, r2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	6858      	ldr	r0, [r3, #4]
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	891a      	ldrh	r2, [r3, #8]
 800ffa2:	89bb      	ldrh	r3, [r7, #12]
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	f7fb fba7 	bl	800b6fc <pbuf_realloc>
  useg->len -= remainder;
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	891a      	ldrh	r2, [r3, #8]
 800ffb2:	89bb      	ldrh	r3, [r7, #12]
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	b29c      	uxth	r4, r3
 800ffc4:	7efb      	ldrb	r3, [r7, #27]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fa fa81 	bl	800a4d0 <lwip_htons>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	4322      	orrs	r2, r4
 800ffd8:	b292      	uxth	r2, r2
 800ffda:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fb fd99 	bl	800bb18 <pbuf_clen>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	461a      	mov	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fff0:	4413      	add	r3, r2
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fb fd8a 	bl	800bb18 <pbuf_clen>
 8010004:	4603      	mov	r3, r0
 8010006:	461a      	mov	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801000e:	4413      	add	r3, r2
 8010010:	b29a      	uxth	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	69fa      	ldr	r2, [r7, #28]
 8010024:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d103      	bne.n	8010036 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010036:	2300      	movs	r3, #0
 8010038:	e016      	b.n	8010068 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801003a:	bf00      	nop
 801003c:	e002      	b.n	8010044 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801003e:	bf00      	nop
 8010040:	e000      	b.n	8010044 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010042:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d006      	beq.n	8010058 <tcp_split_unsent_seg+0x25c>
 801004a:	4b09      	ldr	r3, [pc, #36]	; (8010070 <tcp_split_unsent_seg+0x274>)
 801004c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010050:	490d      	ldr	r1, [pc, #52]	; (8010088 <tcp_split_unsent_seg+0x28c>)
 8010052:	4809      	ldr	r0, [pc, #36]	; (8010078 <tcp_split_unsent_seg+0x27c>)
 8010054:	f006 fe76 	bl	8016d44 <iprintf>
  if (p != NULL) {
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d002      	beq.n	8010064 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801005e:	6938      	ldr	r0, [r7, #16]
 8010060:	f7fb fcd2 	bl	800ba08 <pbuf_free>
  }

  return ERR_MEM;
 8010064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010068:	4618      	mov	r0, r3
 801006a:	3724      	adds	r7, #36	; 0x24
 801006c:	46bd      	mov	sp, r7
 801006e:	bd90      	pop	{r4, r7, pc}
 8010070:	0801c310 	.word	0x0801c310
 8010074:	0801c6a4 	.word	0x0801c6a4
 8010078:	0801c364 	.word	0x0801c364
 801007c:	0801c6c8 	.word	0x0801c6c8
 8010080:	0801c6ec 	.word	0x0801c6ec
 8010084:	0801c6fc 	.word	0x0801c6fc
 8010088:	0801c70c 	.word	0x0801c70c

0801008c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801008c:	b590      	push	{r4, r7, lr}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d106      	bne.n	80100a8 <tcp_send_fin+0x1c>
 801009a:	4b21      	ldr	r3, [pc, #132]	; (8010120 <tcp_send_fin+0x94>)
 801009c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80100a0:	4920      	ldr	r1, [pc, #128]	; (8010124 <tcp_send_fin+0x98>)
 80100a2:	4821      	ldr	r0, [pc, #132]	; (8010128 <tcp_send_fin+0x9c>)
 80100a4:	f006 fe4e 	bl	8016d44 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d02e      	beq.n	801010e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b4:	60fb      	str	r3, [r7, #12]
 80100b6:	e002      	b.n	80100be <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d1f8      	bne.n	80100b8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	899b      	ldrh	r3, [r3, #12]
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fa f9fe 	bl	800a4d0 <lwip_htons>
 80100d4:	4603      	mov	r3, r0
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	f003 0307 	and.w	r3, r3, #7
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d116      	bne.n	801010e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	899b      	ldrh	r3, [r3, #12]
 80100e6:	b29c      	uxth	r4, r3
 80100e8:	2001      	movs	r0, #1
 80100ea:	f7fa f9f1 	bl	800a4d0 <lwip_htons>
 80100ee:	4603      	mov	r3, r0
 80100f0:	461a      	mov	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	4322      	orrs	r2, r4
 80100f8:	b292      	uxth	r2, r2
 80100fa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	8b5b      	ldrh	r3, [r3, #26]
 8010100:	f043 0320 	orr.w	r3, r3, #32
 8010104:	b29a      	uxth	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801010a:	2300      	movs	r3, #0
 801010c:	e004      	b.n	8010118 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801010e:	2101      	movs	r1, #1
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f80b 	bl	801012c <tcp_enqueue_flags>
 8010116:	4603      	mov	r3, r0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3714      	adds	r7, #20
 801011c:	46bd      	mov	sp, r7
 801011e:	bd90      	pop	{r4, r7, pc}
 8010120:	0801c310 	.word	0x0801c310
 8010124:	0801c718 	.word	0x0801c718
 8010128:	0801c364 	.word	0x0801c364

0801012c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b08a      	sub	sp, #40	; 0x28
 8010130:	af02      	add	r7, sp, #8
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	460b      	mov	r3, r1
 8010136:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010138:	2300      	movs	r3, #0
 801013a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801013c:	2300      	movs	r3, #0
 801013e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	f003 0303 	and.w	r3, r3, #3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <tcp_enqueue_flags+0x2c>
 801014a:	4b67      	ldr	r3, [pc, #412]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 801014c:	f240 4211 	movw	r2, #1041	; 0x411
 8010150:	4966      	ldr	r1, [pc, #408]	; (80102ec <tcp_enqueue_flags+0x1c0>)
 8010152:	4867      	ldr	r0, [pc, #412]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 8010154:	f006 fdf6 	bl	8016d44 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <tcp_enqueue_flags+0x40>
 801015e:	4b62      	ldr	r3, [pc, #392]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 8010160:	f240 4213 	movw	r2, #1043	; 0x413
 8010164:	4963      	ldr	r1, [pc, #396]	; (80102f4 <tcp_enqueue_flags+0x1c8>)
 8010166:	4862      	ldr	r0, [pc, #392]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 8010168:	f006 fdec 	bl	8016d44 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801016c:	78fb      	ldrb	r3, [r7, #3]
 801016e:	f003 0302 	and.w	r3, r3, #2
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010176:	2301      	movs	r3, #1
 8010178:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801017a:	7ffb      	ldrb	r3, [r7, #31]
 801017c:	009b      	lsls	r3, r3, #2
 801017e:	b2db      	uxtb	r3, r3
 8010180:	f003 0304 	and.w	r3, r3, #4
 8010184:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	b29b      	uxth	r3, r3
 801018a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801018e:	4619      	mov	r1, r3
 8010190:	2036      	movs	r0, #54	; 0x36
 8010192:	f7fb f955 	bl	800b440 <pbuf_alloc>
 8010196:	6138      	str	r0, [r7, #16]
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d109      	bne.n	80101b2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8b5b      	ldrh	r3, [r3, #26]
 80101a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101ac:	f04f 33ff 	mov.w	r3, #4294967295
 80101b0:	e095      	b.n	80102de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	895a      	ldrh	r2, [r3, #10]
 80101b6:	7dfb      	ldrb	r3, [r7, #23]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d206      	bcs.n	80101cc <tcp_enqueue_flags+0xa0>
 80101be:	4b4a      	ldr	r3, [pc, #296]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 80101c0:	f240 4239 	movw	r2, #1081	; 0x439
 80101c4:	494c      	ldr	r1, [pc, #304]	; (80102f8 <tcp_enqueue_flags+0x1cc>)
 80101c6:	484a      	ldr	r0, [pc, #296]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 80101c8:	f006 fdbc 	bl	8016d44 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80101d0:	78fa      	ldrb	r2, [r7, #3]
 80101d2:	7ffb      	ldrb	r3, [r7, #31]
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	460b      	mov	r3, r1
 80101d8:	6939      	ldr	r1, [r7, #16]
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff fd70 	bl	800fcc0 <tcp_create_segment>
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d109      	bne.n	80101fc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	8b5b      	ldrh	r3, [r3, #26]
 80101ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101f6:	f04f 33ff 	mov.w	r3, #4294967295
 80101fa:	e070      	b.n	80102de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	f003 0303 	and.w	r3, r3, #3
 8010204:	2b00      	cmp	r3, #0
 8010206:	d006      	beq.n	8010216 <tcp_enqueue_flags+0xea>
 8010208:	4b37      	ldr	r3, [pc, #220]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 801020a:	f240 4242 	movw	r2, #1090	; 0x442
 801020e:	493b      	ldr	r1, [pc, #236]	; (80102fc <tcp_enqueue_flags+0x1d0>)
 8010210:	4837      	ldr	r0, [pc, #220]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 8010212:	f006 fd97 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	891b      	ldrh	r3, [r3, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d006      	beq.n	801022c <tcp_enqueue_flags+0x100>
 801021e:	4b32      	ldr	r3, [pc, #200]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 8010220:	f240 4243 	movw	r2, #1091	; 0x443
 8010224:	4936      	ldr	r1, [pc, #216]	; (8010300 <tcp_enqueue_flags+0x1d4>)
 8010226:	4832      	ldr	r0, [pc, #200]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 8010228:	f006 fd8c 	bl	8016d44 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	66da      	str	r2, [r3, #108]	; 0x6c
 801023a:	e00d      	b.n	8010258 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010240:	61bb      	str	r3, [r7, #24]
 8010242:	e002      	b.n	801024a <tcp_enqueue_flags+0x11e>
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	61bb      	str	r3, [r7, #24]
 801024a:	69bb      	ldr	r3, [r7, #24]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1f8      	bne.n	8010244 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	f003 0302 	and.w	r3, r3, #2
 8010266:	2b00      	cmp	r3, #0
 8010268:	d104      	bne.n	8010274 <tcp_enqueue_flags+0x148>
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	2b00      	cmp	r3, #0
 8010272:	d004      	beq.n	801027e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801027e:	78fb      	ldrb	r3, [r7, #3]
 8010280:	f003 0301 	and.w	r3, r3, #1
 8010284:	2b00      	cmp	r3, #0
 8010286:	d006      	beq.n	8010296 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	8b5b      	ldrh	r3, [r3, #26]
 801028c:	f043 0320 	orr.w	r3, r3, #32
 8010290:	b29a      	uxth	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	4618      	mov	r0, r3
 801029c:	f7fb fc3c 	bl	800bb18 <pbuf_clen>
 80102a0:	4603      	mov	r3, r0
 80102a2:	461a      	mov	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102aa:	4413      	add	r3, r2
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00e      	beq.n	80102dc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d10a      	bne.n	80102dc <tcp_enqueue_flags+0x1b0>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <tcp_enqueue_flags+0x1b0>
 80102ce:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <tcp_enqueue_flags+0x1bc>)
 80102d0:	f240 4265 	movw	r2, #1125	; 0x465
 80102d4:	490b      	ldr	r1, [pc, #44]	; (8010304 <tcp_enqueue_flags+0x1d8>)
 80102d6:	4806      	ldr	r0, [pc, #24]	; (80102f0 <tcp_enqueue_flags+0x1c4>)
 80102d8:	f006 fd34 	bl	8016d44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3720      	adds	r7, #32
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	0801c310 	.word	0x0801c310
 80102ec:	0801c734 	.word	0x0801c734
 80102f0:	0801c364 	.word	0x0801c364
 80102f4:	0801c78c 	.word	0x0801c78c
 80102f8:	0801c7ac 	.word	0x0801c7ac
 80102fc:	0801c7e8 	.word	0x0801c7e8
 8010300:	0801c800 	.word	0x0801c800
 8010304:	0801c82c 	.word	0x0801c82c

08010308 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010308:	b5b0      	push	{r4, r5, r7, lr}
 801030a:	b08a      	sub	sp, #40	; 0x28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d106      	bne.n	8010324 <tcp_output+0x1c>
 8010316:	4b9e      	ldr	r3, [pc, #632]	; (8010590 <tcp_output+0x288>)
 8010318:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801031c:	499d      	ldr	r1, [pc, #628]	; (8010594 <tcp_output+0x28c>)
 801031e:	489e      	ldr	r0, [pc, #632]	; (8010598 <tcp_output+0x290>)
 8010320:	f006 fd10 	bl	8016d44 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	7d1b      	ldrb	r3, [r3, #20]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d106      	bne.n	801033a <tcp_output+0x32>
 801032c:	4b98      	ldr	r3, [pc, #608]	; (8010590 <tcp_output+0x288>)
 801032e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010332:	499a      	ldr	r1, [pc, #616]	; (801059c <tcp_output+0x294>)
 8010334:	4898      	ldr	r0, [pc, #608]	; (8010598 <tcp_output+0x290>)
 8010336:	f006 fd05 	bl	8016d44 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801033a:	4b99      	ldr	r3, [pc, #612]	; (80105a0 <tcp_output+0x298>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	429a      	cmp	r2, r3
 8010342:	d101      	bne.n	8010348 <tcp_output+0x40>
    return ERR_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	e1ce      	b.n	80106e6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010354:	4293      	cmp	r3, r2
 8010356:	bf28      	it	cs
 8010358:	4613      	movcs	r3, r2
 801035a:	b29b      	uxth	r3, r3
 801035c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010362:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010366:	2b00      	cmp	r3, #0
 8010368:	d10b      	bne.n	8010382 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	8b5b      	ldrh	r3, [r3, #26]
 801036e:	f003 0302 	and.w	r3, r3, #2
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 81aa 	beq.w	80106cc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 fdcb 	bl	8010f14 <tcp_send_empty_ack>
 801037e:	4603      	mov	r3, r0
 8010380:	e1b1      	b.n	80106e6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010382:	6879      	ldr	r1, [r7, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3304      	adds	r3, #4
 8010388:	461a      	mov	r2, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff fc7c 	bl	800fc88 <tcp_route>
 8010390:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d102      	bne.n	801039e <tcp_output+0x96>
    return ERR_RTE;
 8010398:	f06f 0303 	mvn.w	r3, #3
 801039c:	e1a3      	b.n	80106e6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d003      	beq.n	80103ac <tcp_output+0xa4>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d111      	bne.n	80103d0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d002      	beq.n	80103b8 <tcp_output+0xb0>
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	3304      	adds	r3, #4
 80103b6:	e000      	b.n	80103ba <tcp_output+0xb2>
 80103b8:	2300      	movs	r3, #0
 80103ba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d102      	bne.n	80103c8 <tcp_output+0xc0>
      return ERR_RTE;
 80103c2:	f06f 0303 	mvn.w	r3, #3
 80103c6:	e18e      	b.n	80106e6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80103d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fa f88f 	bl	800a4fa <lwip_htonl>
 80103dc:	4602      	mov	r2, r0
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103e6:	8912      	ldrh	r2, [r2, #8]
 80103e8:	4413      	add	r3, r2
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d227      	bcs.n	8010440 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103f6:	461a      	mov	r2, r3
 80103f8:	69bb      	ldr	r3, [r7, #24]
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d114      	bne.n	8010428 <tcp_output+0x120>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010402:	2b00      	cmp	r3, #0
 8010404:	d110      	bne.n	8010428 <tcp_output+0x120>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10b      	bne.n	8010428 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2201      	movs	r2, #1
 801041c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8b5b      	ldrh	r3, [r3, #26]
 801042c:	f003 0302 	and.w	r3, r3, #2
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 814d 	beq.w	80106d0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fd6c 	bl	8010f14 <tcp_send_empty_ack>
 801043c:	4603      	mov	r3, r0
 801043e:	e152      	b.n	80106e6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801044c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801044e:	6a3b      	ldr	r3, [r7, #32]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f000 811c 	beq.w	801068e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010456:	e002      	b.n	801045e <tcp_output+0x156>
 8010458:	6a3b      	ldr	r3, [r7, #32]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	623b      	str	r3, [r7, #32]
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1f8      	bne.n	8010458 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010466:	e112      	b.n	801068e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	899b      	ldrh	r3, [r3, #12]
 801046e:	b29b      	uxth	r3, r3
 8010470:	4618      	mov	r0, r3
 8010472:	f7fa f82d 	bl	800a4d0 <lwip_htons>
 8010476:	4603      	mov	r3, r0
 8010478:	b2db      	uxtb	r3, r3
 801047a:	f003 0304 	and.w	r3, r3, #4
 801047e:	2b00      	cmp	r3, #0
 8010480:	d006      	beq.n	8010490 <tcp_output+0x188>
 8010482:	4b43      	ldr	r3, [pc, #268]	; (8010590 <tcp_output+0x288>)
 8010484:	f240 5236 	movw	r2, #1334	; 0x536
 8010488:	4946      	ldr	r1, [pc, #280]	; (80105a4 <tcp_output+0x29c>)
 801048a:	4843      	ldr	r0, [pc, #268]	; (8010598 <tcp_output+0x290>)
 801048c:	f006 fc5a 	bl	8016d44 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010494:	2b00      	cmp	r3, #0
 8010496:	d01f      	beq.n	80104d8 <tcp_output+0x1d0>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	8b5b      	ldrh	r3, [r3, #26]
 801049c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d119      	bne.n	80104d8 <tcp_output+0x1d0>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00b      	beq.n	80104c4 <tcp_output+0x1bc>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d110      	bne.n	80104d8 <tcp_output+0x1d0>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ba:	891a      	ldrh	r2, [r3, #8]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d209      	bcs.n	80104d8 <tcp_output+0x1d0>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d004      	beq.n	80104d8 <tcp_output+0x1d0>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104d4:	2b08      	cmp	r3, #8
 80104d6:	d901      	bls.n	80104dc <tcp_output+0x1d4>
 80104d8:	2301      	movs	r3, #1
 80104da:	e000      	b.n	80104de <tcp_output+0x1d6>
 80104dc:	2300      	movs	r3, #0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d106      	bne.n	80104f0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8b5b      	ldrh	r3, [r3, #26]
 80104e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 80e4 	beq.w	80106b8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	7d1b      	ldrb	r3, [r3, #20]
 80104f4:	2b02      	cmp	r3, #2
 80104f6:	d00d      	beq.n	8010514 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80104f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	899b      	ldrh	r3, [r3, #12]
 80104fe:	b29c      	uxth	r4, r3
 8010500:	2010      	movs	r0, #16
 8010502:	f7f9 ffe5 	bl	800a4d0 <lwip_htons>
 8010506:	4603      	mov	r3, r0
 8010508:	461a      	mov	r2, r3
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	4322      	orrs	r2, r4
 8010510:	b292      	uxth	r2, r2
 8010512:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	6879      	ldr	r1, [r7, #4]
 8010518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801051a:	f000 f909 	bl	8010730 <tcp_output_segment>
 801051e:	4603      	mov	r3, r0
 8010520:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d009      	beq.n	801053e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8b5b      	ldrh	r3, [r3, #26]
 801052e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	835a      	strh	r2, [r3, #26]
      return err;
 8010538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801053c:	e0d3      	b.n	80106e6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	7d1b      	ldrb	r3, [r3, #20]
 801054a:	2b02      	cmp	r3, #2
 801054c:	d006      	beq.n	801055c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8b5b      	ldrh	r3, [r3, #26]
 8010552:	f023 0303 	bic.w	r3, r3, #3
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	4618      	mov	r0, r3
 8010564:	f7f9 ffc9 	bl	800a4fa <lwip_htonl>
 8010568:	4604      	mov	r4, r0
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	891b      	ldrh	r3, [r3, #8]
 801056e:	461d      	mov	r5, r3
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	899b      	ldrh	r3, [r3, #12]
 8010576:	b29b      	uxth	r3, r3
 8010578:	4618      	mov	r0, r3
 801057a:	f7f9 ffa9 	bl	800a4d0 <lwip_htons>
 801057e:	4603      	mov	r3, r0
 8010580:	b2db      	uxtb	r3, r3
 8010582:	f003 0303 	and.w	r3, r3, #3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00e      	beq.n	80105a8 <tcp_output+0x2a0>
 801058a:	2301      	movs	r3, #1
 801058c:	e00d      	b.n	80105aa <tcp_output+0x2a2>
 801058e:	bf00      	nop
 8010590:	0801c310 	.word	0x0801c310
 8010594:	0801c854 	.word	0x0801c854
 8010598:	0801c364 	.word	0x0801c364
 801059c:	0801c86c 	.word	0x0801c86c
 80105a0:	20006e88 	.word	0x20006e88
 80105a4:	0801c894 	.word	0x0801c894
 80105a8:	2300      	movs	r3, #0
 80105aa:	442b      	add	r3, r5
 80105ac:	4423      	add	r3, r4
 80105ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	da02      	bge.n	80105c2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80105c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c4:	891b      	ldrh	r3, [r3, #8]
 80105c6:	461c      	mov	r4, r3
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	899b      	ldrh	r3, [r3, #12]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7f9 ff7d 	bl	800a4d0 <lwip_htons>
 80105d6:	4603      	mov	r3, r0
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	f003 0303 	and.w	r3, r3, #3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <tcp_output+0x2de>
 80105e2:	2301      	movs	r3, #1
 80105e4:	e000      	b.n	80105e8 <tcp_output+0x2e0>
 80105e6:	2300      	movs	r3, #0
 80105e8:	4423      	add	r3, r4
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d049      	beq.n	8010682 <tcp_output+0x37a>
      seg->next = NULL;
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	2200      	movs	r2, #0
 80105f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d105      	bne.n	8010608 <tcp_output+0x300>
        pcb->unacked = seg;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010600:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	623b      	str	r3, [r7, #32]
 8010606:	e03f      	b.n	8010688 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	4618      	mov	r0, r3
 8010610:	f7f9 ff73 	bl	800a4fa <lwip_htonl>
 8010614:	4604      	mov	r4, r0
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	4618      	mov	r0, r3
 801061e:	f7f9 ff6c 	bl	800a4fa <lwip_htonl>
 8010622:	4603      	mov	r3, r0
 8010624:	1ae3      	subs	r3, r4, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	da24      	bge.n	8010674 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3370      	adds	r3, #112	; 0x70
 801062e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010630:	e002      	b.n	8010638 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d011      	beq.n	8010664 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	4618      	mov	r0, r3
 801064a:	f7f9 ff56 	bl	800a4fa <lwip_htonl>
 801064e:	4604      	mov	r4, r0
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	4618      	mov	r0, r3
 8010658:	f7f9 ff4f 	bl	800a4fa <lwip_htonl>
 801065c:	4603      	mov	r3, r0
 801065e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010660:	2b00      	cmp	r3, #0
 8010662:	dbe6      	blt.n	8010632 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	e009      	b.n	8010688 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010678:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	623b      	str	r3, [r7, #32]
 8010680:	e002      	b.n	8010688 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010684:	f7fc fc43 	bl	800cf0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801068c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010690:	2b00      	cmp	r3, #0
 8010692:	d012      	beq.n	80106ba <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	4618      	mov	r0, r3
 801069c:	f7f9 ff2d 	bl	800a4fa <lwip_htonl>
 80106a0:	4602      	mov	r2, r0
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106aa:	8912      	ldrh	r2, [r2, #8]
 80106ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80106ae:	69ba      	ldr	r2, [r7, #24]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f4bf aed9 	bcs.w	8010468 <tcp_output+0x160>
 80106b6:	e000      	b.n	80106ba <tcp_output+0x3b2>
      break;
 80106b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d108      	bne.n	80106d4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80106ca:	e004      	b.n	80106d6 <tcp_output+0x3ce>
    goto output_done;
 80106cc:	bf00      	nop
 80106ce:	e002      	b.n	80106d6 <tcp_output+0x3ce>
    goto output_done;
 80106d0:	bf00      	nop
 80106d2:	e000      	b.n	80106d6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80106d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8b5b      	ldrh	r3, [r3, #26]
 80106da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106de:	b29a      	uxth	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80106e4:	2300      	movs	r3, #0
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3728      	adds	r7, #40	; 0x28
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bdb0      	pop	{r4, r5, r7, pc}
 80106ee:	bf00      	nop

080106f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d106      	bne.n	801070c <tcp_output_segment_busy+0x1c>
 80106fe:	4b09      	ldr	r3, [pc, #36]	; (8010724 <tcp_output_segment_busy+0x34>)
 8010700:	f240 529a 	movw	r2, #1434	; 0x59a
 8010704:	4908      	ldr	r1, [pc, #32]	; (8010728 <tcp_output_segment_busy+0x38>)
 8010706:	4809      	ldr	r0, [pc, #36]	; (801072c <tcp_output_segment_busy+0x3c>)
 8010708:	f006 fb1c 	bl	8016d44 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	7b9b      	ldrb	r3, [r3, #14]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d001      	beq.n	801071a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010716:	2301      	movs	r3, #1
 8010718:	e000      	b.n	801071c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	0801c310 	.word	0x0801c310
 8010728:	0801c8ac 	.word	0x0801c8ac
 801072c:	0801c364 	.word	0x0801c364

08010730 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010730:	b5b0      	push	{r4, r5, r7, lr}
 8010732:	b08c      	sub	sp, #48	; 0x30
 8010734:	af04      	add	r7, sp, #16
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d106      	bne.n	8010750 <tcp_output_segment+0x20>
 8010742:	4b63      	ldr	r3, [pc, #396]	; (80108d0 <tcp_output_segment+0x1a0>)
 8010744:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010748:	4962      	ldr	r1, [pc, #392]	; (80108d4 <tcp_output_segment+0x1a4>)
 801074a:	4863      	ldr	r0, [pc, #396]	; (80108d8 <tcp_output_segment+0x1a8>)
 801074c:	f006 fafa 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d106      	bne.n	8010764 <tcp_output_segment+0x34>
 8010756:	4b5e      	ldr	r3, [pc, #376]	; (80108d0 <tcp_output_segment+0x1a0>)
 8010758:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801075c:	495f      	ldr	r1, [pc, #380]	; (80108dc <tcp_output_segment+0x1ac>)
 801075e:	485e      	ldr	r0, [pc, #376]	; (80108d8 <tcp_output_segment+0x1a8>)
 8010760:	f006 faf0 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d106      	bne.n	8010778 <tcp_output_segment+0x48>
 801076a:	4b59      	ldr	r3, [pc, #356]	; (80108d0 <tcp_output_segment+0x1a0>)
 801076c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010770:	495b      	ldr	r1, [pc, #364]	; (80108e0 <tcp_output_segment+0x1b0>)
 8010772:	4859      	ldr	r0, [pc, #356]	; (80108d8 <tcp_output_segment+0x1a8>)
 8010774:	f006 fae6 	bl	8016d44 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f7ff ffb9 	bl	80106f0 <tcp_output_segment_busy>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d001      	beq.n	8010788 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010784:	2300      	movs	r3, #0
 8010786:	e09f      	b.n	80108c8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	68dc      	ldr	r4, [r3, #12]
 8010790:	4610      	mov	r0, r2
 8010792:	f7f9 feb2 	bl	800a4fa <lwip_htonl>
 8010796:	4603      	mov	r3, r0
 8010798:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68dc      	ldr	r4, [r3, #12]
 80107a2:	4610      	mov	r0, r2
 80107a4:	f7f9 fe94 	bl	800a4d0 <lwip_htons>
 80107a8:	4603      	mov	r3, r0
 80107aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80107b4:	441a      	add	r2, r3
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	3314      	adds	r3, #20
 80107c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	7a9b      	ldrb	r3, [r3, #10]
 80107c6:	f003 0301 	and.w	r3, r3, #1
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d015      	beq.n	80107fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	3304      	adds	r3, #4
 80107d2:	461a      	mov	r2, r3
 80107d4:	6879      	ldr	r1, [r7, #4]
 80107d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80107da:	f7fc fe8f 	bl	800d4fc <tcp_eff_send_mss_netif>
 80107de:	4603      	mov	r3, r0
 80107e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80107e2:	8b7b      	ldrh	r3, [r7, #26]
 80107e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7f9 fe86 	bl	800a4fa <lwip_htonl>
 80107ee:	4602      	mov	r2, r0
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	3304      	adds	r3, #4
 80107f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010800:	2b00      	cmp	r3, #0
 8010802:	da02      	bge.n	801080a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2200      	movs	r2, #0
 8010808:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10c      	bne.n	801082c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010812:	4b34      	ldr	r3, [pc, #208]	; (80108e4 <tcp_output_segment+0x1b4>)
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	f7f9 fe6a 	bl	800a4fa <lwip_htonl>
 8010826:	4602      	mov	r2, r0
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68da      	ldr	r2, [r3, #12]
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	8959      	ldrh	r1, [r3, #10]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	8b3a      	ldrh	r2, [r7, #24]
 8010846:	1a8a      	subs	r2, r1, r2
 8010848:	b292      	uxth	r2, r2
 801084a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	685b      	ldr	r3, [r3, #4]
 8010850:	8919      	ldrh	r1, [r3, #8]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	8b3a      	ldrh	r2, [r7, #24]
 8010858:	1a8a      	subs	r2, r1, r2
 801085a:	b292      	uxth	r2, r2
 801085c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	68d2      	ldr	r2, [r2, #12]
 8010866:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	741a      	strb	r2, [r3, #16]
 8010870:	2200      	movs	r2, #0
 8010872:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	f103 0214 	add.w	r2, r3, #20
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	7a9b      	ldrb	r3, [r3, #10]
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	f003 0304 	and.w	r3, r3, #4
 8010886:	4413      	add	r3, r2
 8010888:	69fa      	ldr	r2, [r7, #28]
 801088a:	429a      	cmp	r2, r3
 801088c:	d006      	beq.n	801089c <tcp_output_segment+0x16c>
 801088e:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <tcp_output_segment+0x1a0>)
 8010890:	f240 621c 	movw	r2, #1564	; 0x61c
 8010894:	4914      	ldr	r1, [pc, #80]	; (80108e8 <tcp_output_segment+0x1b8>)
 8010896:	4810      	ldr	r0, [pc, #64]	; (80108d8 <tcp_output_segment+0x1a8>)
 8010898:	f006 fa54 	bl	8016d44 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	6858      	ldr	r0, [r3, #4]
 80108a0:	68b9      	ldr	r1, [r7, #8]
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	1d1c      	adds	r4, r3, #4
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	7add      	ldrb	r5, [r3, #11]
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	7a9b      	ldrb	r3, [r3, #10]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	9202      	str	r2, [sp, #8]
 80108b2:	2206      	movs	r2, #6
 80108b4:	9201      	str	r2, [sp, #4]
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	462b      	mov	r3, r5
 80108ba:	4622      	mov	r2, r4
 80108bc:	f004 fb70 	bl	8014fa0 <ip4_output_if>
 80108c0:	4603      	mov	r3, r0
 80108c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80108c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3720      	adds	r7, #32
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bdb0      	pop	{r4, r5, r7, pc}
 80108d0:	0801c310 	.word	0x0801c310
 80108d4:	0801c8d4 	.word	0x0801c8d4
 80108d8:	0801c364 	.word	0x0801c364
 80108dc:	0801c8f4 	.word	0x0801c8f4
 80108e0:	0801c914 	.word	0x0801c914
 80108e4:	20006e78 	.word	0x20006e78
 80108e8:	0801c938 	.word	0x0801c938

080108ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80108ec:	b5b0      	push	{r4, r5, r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <tcp_rexmit_rto_prepare+0x1c>
 80108fa:	4b31      	ldr	r3, [pc, #196]	; (80109c0 <tcp_rexmit_rto_prepare+0xd4>)
 80108fc:	f240 6263 	movw	r2, #1635	; 0x663
 8010900:	4930      	ldr	r1, [pc, #192]	; (80109c4 <tcp_rexmit_rto_prepare+0xd8>)
 8010902:	4831      	ldr	r0, [pc, #196]	; (80109c8 <tcp_rexmit_rto_prepare+0xdc>)
 8010904:	f006 fa1e 	bl	8016d44 <iprintf>

  if (pcb->unacked == NULL) {
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090c:	2b00      	cmp	r3, #0
 801090e:	d102      	bne.n	8010916 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010910:	f06f 0305 	mvn.w	r3, #5
 8010914:	e050      	b.n	80109b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091a:	60fb      	str	r3, [r7, #12]
 801091c:	e00b      	b.n	8010936 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f7ff fee6 	bl	80106f0 <tcp_output_segment_busy>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d002      	beq.n	8010930 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801092a:	f06f 0305 	mvn.w	r3, #5
 801092e:	e043      	b.n	80109b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	60fb      	str	r3, [r7, #12]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1ef      	bne.n	801091e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7ff fed6 	bl	80106f0 <tcp_output_segment_busy>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801094a:	f06f 0305 	mvn.w	r3, #5
 801094e:	e033      	b.n	80109b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8b5b      	ldrh	r3, [r3, #26]
 801096a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801096e:	b29a      	uxth	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	4618      	mov	r0, r3
 801097c:	f7f9 fdbd 	bl	800a4fa <lwip_htonl>
 8010980:	4604      	mov	r4, r0
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	891b      	ldrh	r3, [r3, #8]
 8010986:	461d      	mov	r5, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	899b      	ldrh	r3, [r3, #12]
 801098e:	b29b      	uxth	r3, r3
 8010990:	4618      	mov	r0, r3
 8010992:	f7f9 fd9d 	bl	800a4d0 <lwip_htons>
 8010996:	4603      	mov	r3, r0
 8010998:	b2db      	uxtb	r3, r3
 801099a:	f003 0303 	and.w	r3, r3, #3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <tcp_rexmit_rto_prepare+0xba>
 80109a2:	2301      	movs	r3, #1
 80109a4:	e000      	b.n	80109a8 <tcp_rexmit_rto_prepare+0xbc>
 80109a6:	2300      	movs	r3, #0
 80109a8:	442b      	add	r3, r5
 80109aa:	18e2      	adds	r2, r4, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bdb0      	pop	{r4, r5, r7, pc}
 80109c0:	0801c310 	.word	0x0801c310
 80109c4:	0801c94c 	.word	0x0801c94c
 80109c8:	0801c364 	.word	0x0801c364

080109cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d106      	bne.n	80109e8 <tcp_rexmit_rto_commit+0x1c>
 80109da:	4b0d      	ldr	r3, [pc, #52]	; (8010a10 <tcp_rexmit_rto_commit+0x44>)
 80109dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80109e0:	490c      	ldr	r1, [pc, #48]	; (8010a14 <tcp_rexmit_rto_commit+0x48>)
 80109e2:	480d      	ldr	r0, [pc, #52]	; (8010a18 <tcp_rexmit_rto_commit+0x4c>)
 80109e4:	f006 f9ae 	bl	8016d44 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109ee:	2bff      	cmp	r3, #255	; 0xff
 80109f0:	d007      	beq.n	8010a02 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109f8:	3301      	adds	r3, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f7ff fc80 	bl	8010308 <tcp_output>
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	0801c310 	.word	0x0801c310
 8010a14:	0801c970 	.word	0x0801c970
 8010a18:	0801c364 	.word	0x0801c364

08010a1c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d106      	bne.n	8010a38 <tcp_rexmit_rto+0x1c>
 8010a2a:	4b0a      	ldr	r3, [pc, #40]	; (8010a54 <tcp_rexmit_rto+0x38>)
 8010a2c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010a30:	4909      	ldr	r1, [pc, #36]	; (8010a58 <tcp_rexmit_rto+0x3c>)
 8010a32:	480a      	ldr	r0, [pc, #40]	; (8010a5c <tcp_rexmit_rto+0x40>)
 8010a34:	f006 f986 	bl	8016d44 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7ff ff57 	bl	80108ec <tcp_rexmit_rto_prepare>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d102      	bne.n	8010a4a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7ff ffc1 	bl	80109cc <tcp_rexmit_rto_commit>
  }
}
 8010a4a:	bf00      	nop
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	0801c310 	.word	0x0801c310
 8010a58:	0801c994 	.word	0x0801c994
 8010a5c:	0801c364 	.word	0x0801c364

08010a60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a60:	b590      	push	{r4, r7, lr}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <tcp_rexmit+0x1c>
 8010a6e:	4b2f      	ldr	r3, [pc, #188]	; (8010b2c <tcp_rexmit+0xcc>)
 8010a70:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010a74:	492e      	ldr	r1, [pc, #184]	; (8010b30 <tcp_rexmit+0xd0>)
 8010a76:	482f      	ldr	r0, [pc, #188]	; (8010b34 <tcp_rexmit+0xd4>)
 8010a78:	f006 f964 	bl	8016d44 <iprintf>

  if (pcb->unacked == NULL) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010a84:	f06f 0305 	mvn.w	r3, #5
 8010a88:	e04c      	b.n	8010b24 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a8e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010a90:	68b8      	ldr	r0, [r7, #8]
 8010a92:	f7ff fe2d 	bl	80106f0 <tcp_output_segment_busy>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010a9c:	f06f 0305 	mvn.w	r3, #5
 8010aa0:	e040      	b.n	8010b24 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	336c      	adds	r3, #108	; 0x6c
 8010aae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ab0:	e002      	b.n	8010ab8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d011      	beq.n	8010ae4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f9 fd16 	bl	800a4fa <lwip_htonl>
 8010ace:	4604      	mov	r4, r0
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f9 fd0f 	bl	800a4fa <lwip_htonl>
 8010adc:	4603      	mov	r3, r0
 8010ade:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	dbe6      	blt.n	8010ab2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d103      	bne.n	8010b02 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b08:	2bff      	cmp	r3, #255	; 0xff
 8010b0a:	d007      	beq.n	8010b1c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b12:	3301      	adds	r3, #1
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd90      	pop	{r4, r7, pc}
 8010b2c:	0801c310 	.word	0x0801c310
 8010b30:	0801c9b0 	.word	0x0801c9b0
 8010b34:	0801c364 	.word	0x0801c364

08010b38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d106      	bne.n	8010b54 <tcp_rexmit_fast+0x1c>
 8010b46:	4b2a      	ldr	r3, [pc, #168]	; (8010bf0 <tcp_rexmit_fast+0xb8>)
 8010b48:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b4c:	4929      	ldr	r1, [pc, #164]	; (8010bf4 <tcp_rexmit_fast+0xbc>)
 8010b4e:	482a      	ldr	r0, [pc, #168]	; (8010bf8 <tcp_rexmit_fast+0xc0>)
 8010b50:	f006 f8f8 	bl	8016d44 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d045      	beq.n	8010be8 <tcp_rexmit_fast+0xb0>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	8b5b      	ldrh	r3, [r3, #26]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d13f      	bne.n	8010be8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff ff79 	bl	8010a60 <tcp_rexmit>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d139      	bne.n	8010be8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b80:	4293      	cmp	r3, r2
 8010b82:	bf28      	it	cs
 8010b84:	4613      	movcs	r3, r2
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	da00      	bge.n	8010b8e <tcp_rexmit_fast+0x56>
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	105b      	asrs	r3, r3, #1
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d206      	bcs.n	8010bb8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	0049      	lsls	r1, r1, #1
 8010bc6:	440b      	add	r3, r1
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	4413      	add	r3, r2
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	8b5b      	ldrh	r3, [r3, #26]
 8010bd8:	f043 0304 	orr.w	r3, r3, #4
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010be8:	bf00      	nop
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	0801c310 	.word	0x0801c310
 8010bf4:	0801c9c8 	.word	0x0801c9c8
 8010bf8:	0801c364 	.word	0x0801c364

08010bfc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	607b      	str	r3, [r7, #4]
 8010c06:	460b      	mov	r3, r1
 8010c08:	817b      	strh	r3, [r7, #10]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010c0e:	897a      	ldrh	r2, [r7, #10]
 8010c10:	893b      	ldrh	r3, [r7, #8]
 8010c12:	4413      	add	r3, r2
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	3314      	adds	r3, #20
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c1e:	4619      	mov	r1, r3
 8010c20:	2022      	movs	r0, #34	; 0x22
 8010c22:	f7fa fc0d 	bl	800b440 <pbuf_alloc>
 8010c26:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d04d      	beq.n	8010cca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010c2e:	897b      	ldrh	r3, [r7, #10]
 8010c30:	3313      	adds	r3, #19
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	8952      	ldrh	r2, [r2, #10]
 8010c36:	4293      	cmp	r3, r2
 8010c38:	db06      	blt.n	8010c48 <tcp_output_alloc_header_common+0x4c>
 8010c3a:	4b26      	ldr	r3, [pc, #152]	; (8010cd4 <tcp_output_alloc_header_common+0xd8>)
 8010c3c:	f240 7223 	movw	r2, #1827	; 0x723
 8010c40:	4925      	ldr	r1, [pc, #148]	; (8010cd8 <tcp_output_alloc_header_common+0xdc>)
 8010c42:	4826      	ldr	r0, [pc, #152]	; (8010cdc <tcp_output_alloc_header_common+0xe0>)
 8010c44:	f006 f87e 	bl	8016d44 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c4e:	8c3b      	ldrh	r3, [r7, #32]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7f9 fc3d 	bl	800a4d0 <lwip_htons>
 8010c56:	4603      	mov	r3, r0
 8010c58:	461a      	mov	r2, r3
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7f9 fc35 	bl	800a4d0 <lwip_htons>
 8010c66:	4603      	mov	r3, r0
 8010c68:	461a      	mov	r2, r3
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f7f9 fc40 	bl	800a4fa <lwip_htonl>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010c80:	897b      	ldrh	r3, [r7, #10]
 8010c82:	089b      	lsrs	r3, r3, #2
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	3305      	adds	r3, #5
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	031b      	lsls	r3, r3, #12
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	4313      	orrs	r3, r2
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f9 fc19 	bl	800a4d0 <lwip_htons>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f9 fc11 	bl	800a4d0 <lwip_htons>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	741a      	strb	r2, [r3, #16]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	749a      	strb	r2, [r3, #18]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010cca:	697b      	ldr	r3, [r7, #20]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	0801c310 	.word	0x0801c310
 8010cd8:	0801c9e8 	.word	0x0801c9e8
 8010cdc:	0801c364 	.word	0x0801c364

08010ce0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010ce0:	b5b0      	push	{r4, r5, r7, lr}
 8010ce2:	b08a      	sub	sp, #40	; 0x28
 8010ce4:	af04      	add	r7, sp, #16
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	607b      	str	r3, [r7, #4]
 8010cea:	460b      	mov	r3, r1
 8010cec:	817b      	strh	r3, [r7, #10]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d106      	bne.n	8010d06 <tcp_output_alloc_header+0x26>
 8010cf8:	4b15      	ldr	r3, [pc, #84]	; (8010d50 <tcp_output_alloc_header+0x70>)
 8010cfa:	f240 7242 	movw	r2, #1858	; 0x742
 8010cfe:	4915      	ldr	r1, [pc, #84]	; (8010d54 <tcp_output_alloc_header+0x74>)
 8010d00:	4815      	ldr	r0, [pc, #84]	; (8010d58 <tcp_output_alloc_header+0x78>)
 8010d02:	f006 f81f 	bl	8016d44 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	8adb      	ldrh	r3, [r3, #22]
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	8b12      	ldrh	r2, [r2, #24]
 8010d12:	68f9      	ldr	r1, [r7, #12]
 8010d14:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010d16:	893d      	ldrh	r5, [r7, #8]
 8010d18:	897c      	ldrh	r4, [r7, #10]
 8010d1a:	9103      	str	r1, [sp, #12]
 8010d1c:	2110      	movs	r1, #16
 8010d1e:	9102      	str	r1, [sp, #8]
 8010d20:	9201      	str	r2, [sp, #4]
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	462a      	mov	r2, r5
 8010d28:	4621      	mov	r1, r4
 8010d2a:	f7ff ff67 	bl	8010bfc <tcp_output_alloc_header_common>
 8010d2e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d006      	beq.n	8010d44 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010d3e:	441a      	add	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010d44:	697b      	ldr	r3, [r7, #20]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3718      	adds	r7, #24
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	0801c310 	.word	0x0801c310
 8010d54:	0801ca18 	.word	0x0801ca18
 8010d58:	0801c364 	.word	0x0801c364

08010d5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b088      	sub	sp, #32
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	4611      	mov	r1, r2
 8010d68:	461a      	mov	r2, r3
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	71fb      	strb	r3, [r7, #7]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d106      	bne.n	8010d8a <tcp_output_fill_options+0x2e>
 8010d7c:	4b13      	ldr	r3, [pc, #76]	; (8010dcc <tcp_output_fill_options+0x70>)
 8010d7e:	f240 7256 	movw	r2, #1878	; 0x756
 8010d82:	4913      	ldr	r1, [pc, #76]	; (8010dd0 <tcp_output_fill_options+0x74>)
 8010d84:	4813      	ldr	r0, [pc, #76]	; (8010dd4 <tcp_output_fill_options+0x78>)
 8010d86:	f005 ffdd 	bl	8016d44 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	3314      	adds	r3, #20
 8010d94:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	f103 0214 	add.w	r2, r3, #20
 8010d9c:	8bfb      	ldrh	r3, [r7, #30]
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	4619      	mov	r1, r3
 8010da2:	79fb      	ldrb	r3, [r7, #7]
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	f003 0304 	and.w	r3, r3, #4
 8010daa:	440b      	add	r3, r1
 8010dac:	4413      	add	r3, r2
 8010dae:	697a      	ldr	r2, [r7, #20]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d006      	beq.n	8010dc2 <tcp_output_fill_options+0x66>
 8010db4:	4b05      	ldr	r3, [pc, #20]	; (8010dcc <tcp_output_fill_options+0x70>)
 8010db6:	f240 7275 	movw	r2, #1909	; 0x775
 8010dba:	4907      	ldr	r1, [pc, #28]	; (8010dd8 <tcp_output_fill_options+0x7c>)
 8010dbc:	4805      	ldr	r0, [pc, #20]	; (8010dd4 <tcp_output_fill_options+0x78>)
 8010dbe:	f005 ffc1 	bl	8016d44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010dc2:	bf00      	nop
 8010dc4:	3720      	adds	r7, #32
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	0801c310 	.word	0x0801c310
 8010dd0:	0801ca40 	.word	0x0801ca40
 8010dd4:	0801c364 	.word	0x0801c364
 8010dd8:	0801c938 	.word	0x0801c938

08010ddc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b08a      	sub	sp, #40	; 0x28
 8010de0:	af04      	add	r7, sp, #16
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
 8010de8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d106      	bne.n	8010dfe <tcp_output_control_segment+0x22>
 8010df0:	4b1c      	ldr	r3, [pc, #112]	; (8010e64 <tcp_output_control_segment+0x88>)
 8010df2:	f240 7287 	movw	r2, #1927	; 0x787
 8010df6:	491c      	ldr	r1, [pc, #112]	; (8010e68 <tcp_output_control_segment+0x8c>)
 8010df8:	481c      	ldr	r0, [pc, #112]	; (8010e6c <tcp_output_control_segment+0x90>)
 8010dfa:	f005 ffa3 	bl	8016d44 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010dfe:	683a      	ldr	r2, [r7, #0]
 8010e00:	6879      	ldr	r1, [r7, #4]
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f7fe ff40 	bl	800fc88 <tcp_route>
 8010e08:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d102      	bne.n	8010e16 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010e10:	23fc      	movs	r3, #252	; 0xfc
 8010e12:	75fb      	strb	r3, [r7, #23]
 8010e14:	e01c      	b.n	8010e50 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d006      	beq.n	8010e2a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	7adb      	ldrb	r3, [r3, #11]
 8010e20:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	7a9b      	ldrb	r3, [r3, #10]
 8010e26:	757b      	strb	r3, [r7, #21]
 8010e28:	e003      	b.n	8010e32 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010e2a:	23ff      	movs	r3, #255	; 0xff
 8010e2c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010e32:	7dba      	ldrb	r2, [r7, #22]
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	9302      	str	r3, [sp, #8]
 8010e38:	2306      	movs	r3, #6
 8010e3a:	9301      	str	r3, [sp, #4]
 8010e3c:	7d7b      	ldrb	r3, [r7, #21]
 8010e3e:	9300      	str	r3, [sp, #0]
 8010e40:	4613      	mov	r3, r2
 8010e42:	683a      	ldr	r2, [r7, #0]
 8010e44:	6879      	ldr	r1, [r7, #4]
 8010e46:	68b8      	ldr	r0, [r7, #8]
 8010e48:	f004 f8aa 	bl	8014fa0 <ip4_output_if>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e50:	68b8      	ldr	r0, [r7, #8]
 8010e52:	f7fa fdd9 	bl	800ba08 <pbuf_free>
  return err;
 8010e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3718      	adds	r7, #24
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	0801c310 	.word	0x0801c310
 8010e68:	0801ca68 	.word	0x0801ca68
 8010e6c:	0801c364 	.word	0x0801c364

08010e70 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e70:	b590      	push	{r4, r7, lr}
 8010e72:	b08b      	sub	sp, #44	; 0x2c
 8010e74:	af04      	add	r7, sp, #16
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d106      	bne.n	8010e92 <tcp_rst+0x22>
 8010e84:	4b1f      	ldr	r3, [pc, #124]	; (8010f04 <tcp_rst+0x94>)
 8010e86:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010e8a:	491f      	ldr	r1, [pc, #124]	; (8010f08 <tcp_rst+0x98>)
 8010e8c:	481f      	ldr	r0, [pc, #124]	; (8010f0c <tcp_rst+0x9c>)
 8010e8e:	f005 ff59 	bl	8016d44 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d106      	bne.n	8010ea6 <tcp_rst+0x36>
 8010e98:	4b1a      	ldr	r3, [pc, #104]	; (8010f04 <tcp_rst+0x94>)
 8010e9a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010e9e:	491c      	ldr	r1, [pc, #112]	; (8010f10 <tcp_rst+0xa0>)
 8010ea0:	481a      	ldr	r0, [pc, #104]	; (8010f0c <tcp_rst+0x9c>)
 8010ea2:	f005 ff4f 	bl	8016d44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010eaa:	f246 0308 	movw	r3, #24584	; 0x6008
 8010eae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
 8010eb2:	b29c      	uxth	r4, r3
 8010eb4:	68b8      	ldr	r0, [r7, #8]
 8010eb6:	f7f9 fb20 	bl	800a4fa <lwip_htonl>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	8abb      	ldrh	r3, [r7, #20]
 8010ebe:	9303      	str	r3, [sp, #12]
 8010ec0:	2314      	movs	r3, #20
 8010ec2:	9302      	str	r3, [sp, #8]
 8010ec4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7ff fe92 	bl	8010bfc <tcp_output_alloc_header_common>
 8010ed8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00c      	beq.n	8010efa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	6939      	ldr	r1, [r7, #16]
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f7ff ff38 	bl	8010d5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	6939      	ldr	r1, [r7, #16]
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7ff ff72 	bl	8010ddc <tcp_output_control_segment>
 8010ef8:	e000      	b.n	8010efc <tcp_rst+0x8c>
    return;
 8010efa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010efc:	371c      	adds	r7, #28
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd90      	pop	{r4, r7, pc}
 8010f02:	bf00      	nop
 8010f04:	0801c310 	.word	0x0801c310
 8010f08:	0801ca94 	.word	0x0801ca94
 8010f0c:	0801c364 	.word	0x0801c364
 8010f10:	0801cab0 	.word	0x0801cab0

08010f14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010f14:	b590      	push	{r4, r7, lr}
 8010f16:	b087      	sub	sp, #28
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d106      	bne.n	8010f38 <tcp_send_empty_ack+0x24>
 8010f2a:	4b28      	ldr	r3, [pc, #160]	; (8010fcc <tcp_send_empty_ack+0xb8>)
 8010f2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010f30:	4927      	ldr	r1, [pc, #156]	; (8010fd0 <tcp_send_empty_ack+0xbc>)
 8010f32:	4828      	ldr	r0, [pc, #160]	; (8010fd4 <tcp_send_empty_ack+0xc0>)
 8010f34:	f005 ff06 	bl	8016d44 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f38:	7dfb      	ldrb	r3, [r7, #23]
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	f003 0304 	and.w	r3, r3, #4
 8010f42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f44:	7d7b      	ldrb	r3, [r7, #21]
 8010f46:	b29c      	uxth	r4, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f9 fad4 	bl	800a4fa <lwip_htonl>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2200      	movs	r2, #0
 8010f56:	4621      	mov	r1, r4
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7ff fec1 	bl	8010ce0 <tcp_output_alloc_header>
 8010f5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d109      	bne.n	8010f7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8b5b      	ldrh	r3, [r3, #26]
 8010f6a:	f043 0303 	orr.w	r3, r3, #3
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f74:	f06f 0301 	mvn.w	r3, #1
 8010f78:	e023      	b.n	8010fc2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f7a:	7dbb      	ldrb	r3, [r7, #22]
 8010f7c:	7dfa      	ldrb	r2, [r7, #23]
 8010f7e:	6939      	ldr	r1, [r7, #16]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7ff feeb 	bl	8010d5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	6939      	ldr	r1, [r7, #16]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff ff24 	bl	8010ddc <tcp_output_control_segment>
 8010f94:	4603      	mov	r3, r0
 8010f96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d007      	beq.n	8010fb0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	8b5b      	ldrh	r3, [r3, #26]
 8010fa4:	f043 0303 	orr.w	r3, r3, #3
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	835a      	strh	r2, [r3, #26]
 8010fae:	e006      	b.n	8010fbe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	8b5b      	ldrh	r3, [r3, #26]
 8010fb4:	f023 0303 	bic.w	r3, r3, #3
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	371c      	adds	r7, #28
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd90      	pop	{r4, r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	0801c310 	.word	0x0801c310
 8010fd0:	0801cacc 	.word	0x0801cacc
 8010fd4:	0801c364 	.word	0x0801c364

08010fd8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b087      	sub	sp, #28
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d106      	bne.n	8010ff8 <tcp_keepalive+0x20>
 8010fea:	4b18      	ldr	r3, [pc, #96]	; (801104c <tcp_keepalive+0x74>)
 8010fec:	f640 0224 	movw	r2, #2084	; 0x824
 8010ff0:	4917      	ldr	r1, [pc, #92]	; (8011050 <tcp_keepalive+0x78>)
 8010ff2:	4818      	ldr	r0, [pc, #96]	; (8011054 <tcp_keepalive+0x7c>)
 8010ff4:	f005 fea6 	bl	8016d44 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
 8010ffa:	b29c      	uxth	r4, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011000:	3b01      	subs	r3, #1
 8011002:	4618      	mov	r0, r3
 8011004:	f7f9 fa79 	bl	800a4fa <lwip_htonl>
 8011008:	4603      	mov	r3, r0
 801100a:	2200      	movs	r2, #0
 801100c:	4621      	mov	r1, r4
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff fe66 	bl	8010ce0 <tcp_output_alloc_header>
 8011014:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d102      	bne.n	8011022 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801101c:	f04f 33ff 	mov.w	r3, #4294967295
 8011020:	e010      	b.n	8011044 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011022:	7dfb      	ldrb	r3, [r7, #23]
 8011024:	2200      	movs	r2, #0
 8011026:	6939      	ldr	r1, [r7, #16]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7ff fe97 	bl	8010d5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	3304      	adds	r3, #4
 8011034:	6939      	ldr	r1, [r7, #16]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f7ff fed0 	bl	8010ddc <tcp_output_control_segment>
 801103c:	4603      	mov	r3, r0
 801103e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011044:	4618      	mov	r0, r3
 8011046:	371c      	adds	r7, #28
 8011048:	46bd      	mov	sp, r7
 801104a:	bd90      	pop	{r4, r7, pc}
 801104c:	0801c310 	.word	0x0801c310
 8011050:	0801caec 	.word	0x0801caec
 8011054:	0801c364 	.word	0x0801c364

08011058 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b08b      	sub	sp, #44	; 0x2c
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011060:	2300      	movs	r3, #0
 8011062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d106      	bne.n	801107a <tcp_zero_window_probe+0x22>
 801106c:	4b4c      	ldr	r3, [pc, #304]	; (80111a0 <tcp_zero_window_probe+0x148>)
 801106e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011072:	494c      	ldr	r1, [pc, #304]	; (80111a4 <tcp_zero_window_probe+0x14c>)
 8011074:	484c      	ldr	r0, [pc, #304]	; (80111a8 <tcp_zero_window_probe+0x150>)
 8011076:	f005 fe65 	bl	8016d44 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801107e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011080:	6a3b      	ldr	r3, [r7, #32]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d101      	bne.n	801108a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011086:	2300      	movs	r3, #0
 8011088:	e086      	b.n	8011198 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011090:	2bff      	cmp	r3, #255	; 0xff
 8011092:	d007      	beq.n	80110a4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801109a:	3301      	adds	r3, #1
 801109c:	b2da      	uxtb	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7f9 fa0f 	bl	800a4d0 <lwip_htons>
 80110b2:	4603      	mov	r3, r0
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d005      	beq.n	80110ca <tcp_zero_window_probe+0x72>
 80110be:	6a3b      	ldr	r3, [r7, #32]
 80110c0:	891b      	ldrh	r3, [r3, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d101      	bne.n	80110ca <tcp_zero_window_probe+0x72>
 80110c6:	2301      	movs	r3, #1
 80110c8:	e000      	b.n	80110cc <tcp_zero_window_probe+0x74>
 80110ca:	2300      	movs	r3, #0
 80110cc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110ce:	7ffb      	ldrb	r3, [r7, #31]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	bf0c      	ite	eq
 80110d4:	2301      	moveq	r3, #1
 80110d6:	2300      	movne	r3, #0
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80110dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110e0:	b299      	uxth	r1, r3
 80110e2:	6a3b      	ldr	r3, [r7, #32]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	8bba      	ldrh	r2, [r7, #28]
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7ff fdf8 	bl	8010ce0 <tcp_output_alloc_header>
 80110f0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d102      	bne.n	80110fe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80110f8:	f04f 33ff 	mov.w	r3, #4294967295
 80110fc:	e04c      	b.n	8011198 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011104:	7ffb      	ldrb	r3, [r7, #31]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d011      	beq.n	801112e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	b21b      	sxth	r3, r3
 8011112:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011116:	b21c      	sxth	r4, r3
 8011118:	2011      	movs	r0, #17
 801111a:	f7f9 f9d9 	bl	800a4d0 <lwip_htons>
 801111e:	4603      	mov	r3, r0
 8011120:	b21b      	sxth	r3, r3
 8011122:	4323      	orrs	r3, r4
 8011124:	b21b      	sxth	r3, r3
 8011126:	b29a      	uxth	r2, r3
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	819a      	strh	r2, [r3, #12]
 801112c:	e010      	b.n	8011150 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	3314      	adds	r3, #20
 8011134:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	6858      	ldr	r0, [r3, #4]
 801113a:	6a3b      	ldr	r3, [r7, #32]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	891a      	ldrh	r2, [r3, #8]
 8011140:	6a3b      	ldr	r3, [r7, #32]
 8011142:	891b      	ldrh	r3, [r3, #8]
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	b29b      	uxth	r3, r3
 8011148:	2201      	movs	r2, #1
 801114a:	6939      	ldr	r1, [r7, #16]
 801114c:	f7fa fe56 	bl	800bdfc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011150:	6a3b      	ldr	r3, [r7, #32]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	4618      	mov	r0, r3
 8011158:	f7f9 f9cf 	bl	800a4fa <lwip_htonl>
 801115c:	4603      	mov	r3, r0
 801115e:	3301      	adds	r3, #1
 8011160:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	da02      	bge.n	8011174 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011178:	2200      	movs	r2, #0
 801117a:	69b9      	ldr	r1, [r7, #24]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff fded 	bl	8010d5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3304      	adds	r3, #4
 8011188:	69b9      	ldr	r1, [r7, #24]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff fe26 	bl	8010ddc <tcp_output_control_segment>
 8011190:	4603      	mov	r3, r0
 8011192:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011194:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011198:	4618      	mov	r0, r3
 801119a:	372c      	adds	r7, #44	; 0x2c
 801119c:	46bd      	mov	sp, r7
 801119e:	bd90      	pop	{r4, r7, pc}
 80111a0:	0801c310 	.word	0x0801c310
 80111a4:	0801cb08 	.word	0x0801cb08
 80111a8:	0801c364 	.word	0x0801c364

080111ac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80111b4:	f7fa ff10 	bl	800bfd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80111b8:	4b0a      	ldr	r3, [pc, #40]	; (80111e4 <tcpip_tcp_timer+0x38>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d103      	bne.n	80111c8 <tcpip_tcp_timer+0x1c>
 80111c0:	4b09      	ldr	r3, [pc, #36]	; (80111e8 <tcpip_tcp_timer+0x3c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d005      	beq.n	80111d4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111c8:	2200      	movs	r2, #0
 80111ca:	4908      	ldr	r1, [pc, #32]	; (80111ec <tcpip_tcp_timer+0x40>)
 80111cc:	20fa      	movs	r0, #250	; 0xfa
 80111ce:	f000 f8f3 	bl	80113b8 <sys_timeout>
 80111d2:	e003      	b.n	80111dc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80111d4:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <tcpip_tcp_timer+0x44>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	601a      	str	r2, [r3, #0]
  }
}
 80111da:	bf00      	nop
 80111dc:	bf00      	nop
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	20006e74 	.word	0x20006e74
 80111e8:	20006e84 	.word	0x20006e84
 80111ec:	080111ad 	.word	0x080111ad
 80111f0:	2000037c 	.word	0x2000037c

080111f4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80111f8:	4b0a      	ldr	r3, [pc, #40]	; (8011224 <tcp_timer_needed+0x30>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d10f      	bne.n	8011220 <tcp_timer_needed+0x2c>
 8011200:	4b09      	ldr	r3, [pc, #36]	; (8011228 <tcp_timer_needed+0x34>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d103      	bne.n	8011210 <tcp_timer_needed+0x1c>
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <tcp_timer_needed+0x38>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d007      	beq.n	8011220 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011210:	4b04      	ldr	r3, [pc, #16]	; (8011224 <tcp_timer_needed+0x30>)
 8011212:	2201      	movs	r2, #1
 8011214:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011216:	2200      	movs	r2, #0
 8011218:	4905      	ldr	r1, [pc, #20]	; (8011230 <tcp_timer_needed+0x3c>)
 801121a:	20fa      	movs	r0, #250	; 0xfa
 801121c:	f000 f8cc 	bl	80113b8 <sys_timeout>
  }
}
 8011220:	bf00      	nop
 8011222:	bd80      	pop	{r7, pc}
 8011224:	2000037c 	.word	0x2000037c
 8011228:	20006e74 	.word	0x20006e74
 801122c:	20006e84 	.word	0x20006e84
 8011230:	080111ad 	.word	0x080111ad

08011234 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011240:	2006      	movs	r0, #6
 8011242:	f7f9 fd9b 	bl	800ad7c <memp_malloc>
 8011246:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d109      	bne.n	8011262 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d151      	bne.n	80112f8 <sys_timeout_abs+0xc4>
 8011254:	4b2a      	ldr	r3, [pc, #168]	; (8011300 <sys_timeout_abs+0xcc>)
 8011256:	22be      	movs	r2, #190	; 0xbe
 8011258:	492a      	ldr	r1, [pc, #168]	; (8011304 <sys_timeout_abs+0xd0>)
 801125a:	482b      	ldr	r0, [pc, #172]	; (8011308 <sys_timeout_abs+0xd4>)
 801125c:	f005 fd72 	bl	8016d44 <iprintf>
    return;
 8011260:	e04a      	b.n	80112f8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	2200      	movs	r2, #0
 8011266:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	68fa      	ldr	r2, [r7, #12]
 8011278:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801127a:	4b24      	ldr	r3, [pc, #144]	; (801130c <sys_timeout_abs+0xd8>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011282:	4a22      	ldr	r2, [pc, #136]	; (801130c <sys_timeout_abs+0xd8>)
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	6013      	str	r3, [r2, #0]
    return;
 8011288:	e037      	b.n	80112fa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	685a      	ldr	r2, [r3, #4]
 801128e:	4b1f      	ldr	r3, [pc, #124]	; (801130c <sys_timeout_abs+0xd8>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	0fdb      	lsrs	r3, r3, #31
 8011298:	f003 0301 	and.w	r3, r3, #1
 801129c:	b2db      	uxtb	r3, r3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d007      	beq.n	80112b2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80112a2:	4b1a      	ldr	r3, [pc, #104]	; (801130c <sys_timeout_abs+0xd8>)
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80112aa:	4a18      	ldr	r2, [pc, #96]	; (801130c <sys_timeout_abs+0xd8>)
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	6013      	str	r3, [r2, #0]
 80112b0:	e023      	b.n	80112fa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80112b2:	4b16      	ldr	r3, [pc, #88]	; (801130c <sys_timeout_abs+0xd8>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	617b      	str	r3, [r7, #20]
 80112b8:	e01a      	b.n	80112f0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d00b      	beq.n	80112da <sys_timeout_abs+0xa6>
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	0fdb      	lsrs	r3, r3, #31
 80112d0:	f003 0301 	and.w	r3, r3, #1
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d007      	beq.n	80112ea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	693a      	ldr	r2, [r7, #16]
 80112e6:	601a      	str	r2, [r3, #0]
        break;
 80112e8:	e007      	b.n	80112fa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	617b      	str	r3, [r7, #20]
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d1e1      	bne.n	80112ba <sys_timeout_abs+0x86>
 80112f6:	e000      	b.n	80112fa <sys_timeout_abs+0xc6>
    return;
 80112f8:	bf00      	nop
      }
    }
  }
}
 80112fa:	3718      	adds	r7, #24
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	0801cb2c 	.word	0x0801cb2c
 8011304:	0801cb60 	.word	0x0801cb60
 8011308:	0801cba0 	.word	0x0801cba0
 801130c:	20000374 	.word	0x20000374

08011310 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	4798      	blx	r3

  now = sys_now();
 8011322:	f7f9 f851 	bl	800a3c8 <sys_now>
 8011326:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	4b0f      	ldr	r3, [pc, #60]	; (801136c <lwip_cyclic_timer+0x5c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4413      	add	r3, r2
 8011332:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	0fdb      	lsrs	r3, r3, #31
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d009      	beq.n	801135a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	4413      	add	r3, r2
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	4907      	ldr	r1, [pc, #28]	; (8011370 <lwip_cyclic_timer+0x60>)
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff ff6e 	bl	8011234 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011358:	e004      	b.n	8011364 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	4904      	ldr	r1, [pc, #16]	; (8011370 <lwip_cyclic_timer+0x60>)
 801135e:	68f8      	ldr	r0, [r7, #12]
 8011360:	f7ff ff68 	bl	8011234 <sys_timeout_abs>
}
 8011364:	bf00      	nop
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	20000378 	.word	0x20000378
 8011370:	08011311 	.word	0x08011311

08011374 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801137a:	2301      	movs	r3, #1
 801137c:	607b      	str	r3, [r7, #4]
 801137e:	e00e      	b.n	801139e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011380:	4a0b      	ldr	r2, [pc, #44]	; (80113b0 <sys_timeouts_init+0x3c>)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	4a08      	ldr	r2, [pc, #32]	; (80113b0 <sys_timeouts_init+0x3c>)
 801138e:	4413      	add	r3, r2
 8011390:	461a      	mov	r2, r3
 8011392:	4908      	ldr	r1, [pc, #32]	; (80113b4 <sys_timeouts_init+0x40>)
 8011394:	f000 f810 	bl	80113b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	3301      	adds	r3, #1
 801139c:	607b      	str	r3, [r7, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2b04      	cmp	r3, #4
 80113a2:	d9ed      	bls.n	8011380 <sys_timeouts_init+0xc>
  }
}
 80113a4:	bf00      	nop
 80113a6:	bf00      	nop
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	0801daac 	.word	0x0801daac
 80113b4:	08011311 	.word	0x08011311

080113b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b086      	sub	sp, #24
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113ca:	d306      	bcc.n	80113da <sys_timeout+0x22>
 80113cc:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <sys_timeout+0x40>)
 80113ce:	f240 1229 	movw	r2, #297	; 0x129
 80113d2:	490a      	ldr	r1, [pc, #40]	; (80113fc <sys_timeout+0x44>)
 80113d4:	480a      	ldr	r0, [pc, #40]	; (8011400 <sys_timeout+0x48>)
 80113d6:	f005 fcb5 	bl	8016d44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80113da:	f7f8 fff5 	bl	800a3c8 <sys_now>
 80113de:	4602      	mov	r2, r0
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	4413      	add	r3, r2
 80113e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	68b9      	ldr	r1, [r7, #8]
 80113ea:	6978      	ldr	r0, [r7, #20]
 80113ec:	f7ff ff22 	bl	8011234 <sys_timeout_abs>
#endif
}
 80113f0:	bf00      	nop
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	0801cb2c 	.word	0x0801cb2c
 80113fc:	0801cbc8 	.word	0x0801cbc8
 8011400:	0801cba0 	.word	0x0801cba0

08011404 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011408:	f005 fcb4 	bl	8016d74 <rand>
 801140c:	4603      	mov	r3, r0
 801140e:	b29b      	uxth	r3, r3
 8011410:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011414:	b29b      	uxth	r3, r3
 8011416:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801141a:	b29a      	uxth	r2, r3
 801141c:	4b01      	ldr	r3, [pc, #4]	; (8011424 <udp_init+0x20>)
 801141e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011420:	bf00      	nop
 8011422:	bd80      	pop	{r7, pc}
 8011424:	20000054 	.word	0x20000054

08011428 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801142e:	2300      	movs	r3, #0
 8011430:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011432:	4b17      	ldr	r3, [pc, #92]	; (8011490 <udp_new_port+0x68>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	b291      	uxth	r1, r2
 801143a:	4a15      	ldr	r2, [pc, #84]	; (8011490 <udp_new_port+0x68>)
 801143c:	8011      	strh	r1, [r2, #0]
 801143e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011442:	4293      	cmp	r3, r2
 8011444:	d103      	bne.n	801144e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011446:	4b12      	ldr	r3, [pc, #72]	; (8011490 <udp_new_port+0x68>)
 8011448:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801144c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801144e:	4b11      	ldr	r3, [pc, #68]	; (8011494 <udp_new_port+0x6c>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	e011      	b.n	801147a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	8a5a      	ldrh	r2, [r3, #18]
 801145a:	4b0d      	ldr	r3, [pc, #52]	; (8011490 <udp_new_port+0x68>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d108      	bne.n	8011474 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011462:	88fb      	ldrh	r3, [r7, #6]
 8011464:	3301      	adds	r3, #1
 8011466:	80fb      	strh	r3, [r7, #6]
 8011468:	88fb      	ldrh	r3, [r7, #6]
 801146a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801146e:	d3e0      	bcc.n	8011432 <udp_new_port+0xa>
        return 0;
 8011470:	2300      	movs	r3, #0
 8011472:	e007      	b.n	8011484 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	603b      	str	r3, [r7, #0]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d1ea      	bne.n	8011456 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011480:	4b03      	ldr	r3, [pc, #12]	; (8011490 <udp_new_port+0x68>)
 8011482:	881b      	ldrh	r3, [r3, #0]
}
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	20000054 	.word	0x20000054
 8011494:	20006e8c 	.word	0x20006e8c

08011498 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	4613      	mov	r3, r2
 80114a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d105      	bne.n	80114b8 <udp_input_local_match+0x20>
 80114ac:	4b27      	ldr	r3, [pc, #156]	; (801154c <udp_input_local_match+0xb4>)
 80114ae:	2287      	movs	r2, #135	; 0x87
 80114b0:	4927      	ldr	r1, [pc, #156]	; (8011550 <udp_input_local_match+0xb8>)
 80114b2:	4828      	ldr	r0, [pc, #160]	; (8011554 <udp_input_local_match+0xbc>)
 80114b4:	f005 fc46 	bl	8016d44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d105      	bne.n	80114ca <udp_input_local_match+0x32>
 80114be:	4b23      	ldr	r3, [pc, #140]	; (801154c <udp_input_local_match+0xb4>)
 80114c0:	2288      	movs	r2, #136	; 0x88
 80114c2:	4925      	ldr	r1, [pc, #148]	; (8011558 <udp_input_local_match+0xc0>)
 80114c4:	4823      	ldr	r0, [pc, #140]	; (8011554 <udp_input_local_match+0xbc>)
 80114c6:	f005 fc3d 	bl	8016d44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	7a1b      	ldrb	r3, [r3, #8]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d00b      	beq.n	80114ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	7a1a      	ldrb	r2, [r3, #8]
 80114d6:	4b21      	ldr	r3, [pc, #132]	; (801155c <udp_input_local_match+0xc4>)
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80114de:	3301      	adds	r3, #1
 80114e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d001      	beq.n	80114ea <udp_input_local_match+0x52>
    return 0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	e02b      	b.n	8011542 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d018      	beq.n	8011522 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d013      	beq.n	801151e <udp_input_local_match+0x86>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00f      	beq.n	801151e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80114fe:	4b17      	ldr	r3, [pc, #92]	; (801155c <udp_input_local_match+0xc4>)
 8011500:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011506:	d00a      	beq.n	801151e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	4b13      	ldr	r3, [pc, #76]	; (801155c <udp_input_local_match+0xc4>)
 801150e:	695b      	ldr	r3, [r3, #20]
 8011510:	405a      	eors	r2, r3
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	3308      	adds	r3, #8
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801151a:	2b00      	cmp	r3, #0
 801151c:	d110      	bne.n	8011540 <udp_input_local_match+0xa8>
          return 1;
 801151e:	2301      	movs	r3, #1
 8011520:	e00f      	b.n	8011542 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d009      	beq.n	801153c <udp_input_local_match+0xa4>
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d005      	beq.n	801153c <udp_input_local_match+0xa4>
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	4b09      	ldr	r3, [pc, #36]	; (801155c <udp_input_local_match+0xc4>)
 8011536:	695b      	ldr	r3, [r3, #20]
 8011538:	429a      	cmp	r2, r3
 801153a:	d101      	bne.n	8011540 <udp_input_local_match+0xa8>
        return 1;
 801153c:	2301      	movs	r3, #1
 801153e:	e000      	b.n	8011542 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	0801cc14 	.word	0x0801cc14
 8011550:	0801cc44 	.word	0x0801cc44
 8011554:	0801cc68 	.word	0x0801cc68
 8011558:	0801cc90 	.word	0x0801cc90
 801155c:	20003910 	.word	0x20003910

08011560 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011560:	b590      	push	{r4, r7, lr}
 8011562:	b08d      	sub	sp, #52	; 0x34
 8011564:	af02      	add	r7, sp, #8
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801156a:	2300      	movs	r3, #0
 801156c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d105      	bne.n	8011580 <udp_input+0x20>
 8011574:	4b7c      	ldr	r3, [pc, #496]	; (8011768 <udp_input+0x208>)
 8011576:	22cf      	movs	r2, #207	; 0xcf
 8011578:	497c      	ldr	r1, [pc, #496]	; (801176c <udp_input+0x20c>)
 801157a:	487d      	ldr	r0, [pc, #500]	; (8011770 <udp_input+0x210>)
 801157c:	f005 fbe2 	bl	8016d44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d105      	bne.n	8011592 <udp_input+0x32>
 8011586:	4b78      	ldr	r3, [pc, #480]	; (8011768 <udp_input+0x208>)
 8011588:	22d0      	movs	r2, #208	; 0xd0
 801158a:	497a      	ldr	r1, [pc, #488]	; (8011774 <udp_input+0x214>)
 801158c:	4878      	ldr	r0, [pc, #480]	; (8011770 <udp_input+0x210>)
 801158e:	f005 fbd9 	bl	8016d44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	895b      	ldrh	r3, [r3, #10]
 8011596:	2b07      	cmp	r3, #7
 8011598:	d803      	bhi.n	80115a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7fa fa34 	bl	800ba08 <pbuf_free>
    goto end;
 80115a0:	e0de      	b.n	8011760 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80115a8:	4b73      	ldr	r3, [pc, #460]	; (8011778 <udp_input+0x218>)
 80115aa:	695b      	ldr	r3, [r3, #20]
 80115ac:	4a72      	ldr	r2, [pc, #456]	; (8011778 <udp_input+0x218>)
 80115ae:	6812      	ldr	r2, [r2, #0]
 80115b0:	4611      	mov	r1, r2
 80115b2:	4618      	mov	r0, r3
 80115b4:	f003 fdcc 	bl	8015150 <ip4_addr_isbroadcast_u32>
 80115b8:	4603      	mov	r3, r0
 80115ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7f8 ff84 	bl	800a4d0 <lwip_htons>
 80115c8:	4603      	mov	r3, r0
 80115ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	885b      	ldrh	r3, [r3, #2]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7f8 ff7c 	bl	800a4d0 <lwip_htons>
 80115d8:	4603      	mov	r3, r0
 80115da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80115dc:	2300      	movs	r3, #0
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80115e0:	2300      	movs	r3, #0
 80115e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80115e4:	2300      	movs	r3, #0
 80115e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115e8:	4b64      	ldr	r3, [pc, #400]	; (801177c <udp_input+0x21c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	627b      	str	r3, [r7, #36]	; 0x24
 80115ee:	e054      	b.n	801169a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	8a5b      	ldrh	r3, [r3, #18]
 80115f4:	89fa      	ldrh	r2, [r7, #14]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d14a      	bne.n	8011690 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80115fa:	7cfb      	ldrb	r3, [r7, #19]
 80115fc:	461a      	mov	r2, r3
 80115fe:	6839      	ldr	r1, [r7, #0]
 8011600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011602:	f7ff ff49 	bl	8011498 <udp_input_local_match>
 8011606:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011608:	2b00      	cmp	r3, #0
 801160a:	d041      	beq.n	8011690 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	7c1b      	ldrb	r3, [r3, #16]
 8011610:	f003 0304 	and.w	r3, r3, #4
 8011614:	2b00      	cmp	r3, #0
 8011616:	d11d      	bne.n	8011654 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d102      	bne.n	8011624 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	61fb      	str	r3, [r7, #28]
 8011622:	e017      	b.n	8011654 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011624:	7cfb      	ldrb	r3, [r7, #19]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d014      	beq.n	8011654 <udp_input+0xf4>
 801162a:	4b53      	ldr	r3, [pc, #332]	; (8011778 <udp_input+0x218>)
 801162c:	695b      	ldr	r3, [r3, #20]
 801162e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011632:	d10f      	bne.n	8011654 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	3304      	adds	r3, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	429a      	cmp	r2, r3
 8011640:	d008      	beq.n	8011654 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	3304      	adds	r3, #4
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	429a      	cmp	r2, r3
 801164e:	d101      	bne.n	8011654 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011652:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	8a9b      	ldrh	r3, [r3, #20]
 8011658:	8a3a      	ldrh	r2, [r7, #16]
 801165a:	429a      	cmp	r2, r3
 801165c:	d118      	bne.n	8011690 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011660:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011662:	2b00      	cmp	r3, #0
 8011664:	d005      	beq.n	8011672 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	4b43      	ldr	r3, [pc, #268]	; (8011778 <udp_input+0x218>)
 801166c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801166e:	429a      	cmp	r2, r3
 8011670:	d10e      	bne.n	8011690 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d014      	beq.n	80116a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	68da      	ldr	r2, [r3, #12]
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011680:	4b3e      	ldr	r3, [pc, #248]	; (801177c <udp_input+0x21c>)
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011686:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011688:	4a3c      	ldr	r2, [pc, #240]	; (801177c <udp_input+0x21c>)
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801168e:	e008      	b.n	80116a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	627b      	str	r3, [r7, #36]	; 0x24
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1a7      	bne.n	80115f0 <udp_input+0x90>
 80116a0:	e000      	b.n	80116a4 <udp_input+0x144>
        break;
 80116a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80116a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d101      	bne.n	80116ae <udp_input+0x14e>
    pcb = uncon_pcb;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80116ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d002      	beq.n	80116ba <udp_input+0x15a>
    for_us = 1;
 80116b4:	2301      	movs	r3, #1
 80116b6:	76fb      	strb	r3, [r7, #27]
 80116b8:	e00a      	b.n	80116d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	3304      	adds	r3, #4
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	4b2d      	ldr	r3, [pc, #180]	; (8011778 <udp_input+0x218>)
 80116c2:	695b      	ldr	r3, [r3, #20]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	bf0c      	ite	eq
 80116c8:	2301      	moveq	r3, #1
 80116ca:	2300      	movne	r3, #0
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80116d0:	7efb      	ldrb	r3, [r7, #27]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d041      	beq.n	801175a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80116d6:	2108      	movs	r1, #8
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f7fa f90f 	bl	800b8fc <pbuf_remove_header>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00a      	beq.n	80116fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80116e4:	4b20      	ldr	r3, [pc, #128]	; (8011768 <udp_input+0x208>)
 80116e6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80116ea:	4925      	ldr	r1, [pc, #148]	; (8011780 <udp_input+0x220>)
 80116ec:	4820      	ldr	r0, [pc, #128]	; (8011770 <udp_input+0x210>)
 80116ee:	f005 fb29 	bl	8016d44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7fa f988 	bl	800ba08 <pbuf_free>
      goto end;
 80116f8:	e032      	b.n	8011760 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d012      	beq.n	8011726 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00a      	beq.n	801171e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	699c      	ldr	r4, [r3, #24]
 801170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170e:	69d8      	ldr	r0, [r3, #28]
 8011710:	8a3b      	ldrh	r3, [r7, #16]
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	4b1b      	ldr	r3, [pc, #108]	; (8011784 <udp_input+0x224>)
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801171a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801171c:	e021      	b.n	8011762 <udp_input+0x202>
        pbuf_free(p);
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7fa f972 	bl	800ba08 <pbuf_free>
        goto end;
 8011724:	e01c      	b.n	8011760 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011726:	7cfb      	ldrb	r3, [r7, #19]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d112      	bne.n	8011752 <udp_input+0x1f2>
 801172c:	4b12      	ldr	r3, [pc, #72]	; (8011778 <udp_input+0x218>)
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011734:	2be0      	cmp	r3, #224	; 0xe0
 8011736:	d00c      	beq.n	8011752 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011738:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <udp_input+0x218>)
 801173a:	899b      	ldrh	r3, [r3, #12]
 801173c:	3308      	adds	r3, #8
 801173e:	b29b      	uxth	r3, r3
 8011740:	b21b      	sxth	r3, r3
 8011742:	4619      	mov	r1, r3
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f7fa f94c 	bl	800b9e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801174a:	2103      	movs	r1, #3
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f003 f9c1 	bl	8014ad4 <icmp_dest_unreach>
      pbuf_free(p);
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7fa f958 	bl	800ba08 <pbuf_free>
  return;
 8011758:	e003      	b.n	8011762 <udp_input+0x202>
    pbuf_free(p);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7fa f954 	bl	800ba08 <pbuf_free>
  return;
 8011760:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011762:	372c      	adds	r7, #44	; 0x2c
 8011764:	46bd      	mov	sp, r7
 8011766:	bd90      	pop	{r4, r7, pc}
 8011768:	0801cc14 	.word	0x0801cc14
 801176c:	0801ccb8 	.word	0x0801ccb8
 8011770:	0801cc68 	.word	0x0801cc68
 8011774:	0801ccd0 	.word	0x0801ccd0
 8011778:	20003910 	.word	0x20003910
 801177c:	20006e8c 	.word	0x20006e8c
 8011780:	0801ccec 	.word	0x0801ccec
 8011784:	20003920 	.word	0x20003920

08011788 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af02      	add	r7, sp, #8
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d109      	bne.n	80117b0 <udp_sendto_if+0x28>
 801179c:	4b2e      	ldr	r3, [pc, #184]	; (8011858 <udp_sendto_if+0xd0>)
 801179e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117a2:	492e      	ldr	r1, [pc, #184]	; (801185c <udp_sendto_if+0xd4>)
 80117a4:	482e      	ldr	r0, [pc, #184]	; (8011860 <udp_sendto_if+0xd8>)
 80117a6:	f005 facd 	bl	8016d44 <iprintf>
 80117aa:	f06f 030f 	mvn.w	r3, #15
 80117ae:	e04f      	b.n	8011850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d109      	bne.n	80117ca <udp_sendto_if+0x42>
 80117b6:	4b28      	ldr	r3, [pc, #160]	; (8011858 <udp_sendto_if+0xd0>)
 80117b8:	f240 2281 	movw	r2, #641	; 0x281
 80117bc:	4929      	ldr	r1, [pc, #164]	; (8011864 <udp_sendto_if+0xdc>)
 80117be:	4828      	ldr	r0, [pc, #160]	; (8011860 <udp_sendto_if+0xd8>)
 80117c0:	f005 fac0 	bl	8016d44 <iprintf>
 80117c4:	f06f 030f 	mvn.w	r3, #15
 80117c8:	e042      	b.n	8011850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d109      	bne.n	80117e4 <udp_sendto_if+0x5c>
 80117d0:	4b21      	ldr	r3, [pc, #132]	; (8011858 <udp_sendto_if+0xd0>)
 80117d2:	f240 2282 	movw	r2, #642	; 0x282
 80117d6:	4924      	ldr	r1, [pc, #144]	; (8011868 <udp_sendto_if+0xe0>)
 80117d8:	4821      	ldr	r0, [pc, #132]	; (8011860 <udp_sendto_if+0xd8>)
 80117da:	f005 fab3 	bl	8016d44 <iprintf>
 80117de:	f06f 030f 	mvn.w	r3, #15
 80117e2:	e035      	b.n	8011850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d109      	bne.n	80117fe <udp_sendto_if+0x76>
 80117ea:	4b1b      	ldr	r3, [pc, #108]	; (8011858 <udp_sendto_if+0xd0>)
 80117ec:	f240 2283 	movw	r2, #643	; 0x283
 80117f0:	491e      	ldr	r1, [pc, #120]	; (801186c <udp_sendto_if+0xe4>)
 80117f2:	481b      	ldr	r0, [pc, #108]	; (8011860 <udp_sendto_if+0xd8>)
 80117f4:	f005 faa6 	bl	8016d44 <iprintf>
 80117f8:	f06f 030f 	mvn.w	r3, #15
 80117fc:	e028      	b.n	8011850 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d009      	beq.n	8011818 <udp_sendto_if+0x90>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d005      	beq.n	8011818 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011814:	2be0      	cmp	r3, #224	; 0xe0
 8011816:	d103      	bne.n	8011820 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	3304      	adds	r3, #4
 801181c:	617b      	str	r3, [r7, #20]
 801181e:	e00b      	b.n	8011838 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	3304      	adds	r3, #4
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	429a      	cmp	r2, r3
 801182c:	d002      	beq.n	8011834 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801182e:	f06f 0303 	mvn.w	r3, #3
 8011832:	e00d      	b.n	8011850 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011838:	887a      	ldrh	r2, [r7, #2]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	9301      	str	r3, [sp, #4]
 801183e:	6a3b      	ldr	r3, [r7, #32]
 8011840:	9300      	str	r3, [sp, #0]
 8011842:	4613      	mov	r3, r2
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	68b9      	ldr	r1, [r7, #8]
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f000 f811 	bl	8011870 <udp_sendto_if_src>
 801184e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011850:	4618      	mov	r0, r3
 8011852:	3718      	adds	r7, #24
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	0801cc14 	.word	0x0801cc14
 801185c:	0801cd88 	.word	0x0801cd88
 8011860:	0801cc68 	.word	0x0801cc68
 8011864:	0801cda4 	.word	0x0801cda4
 8011868:	0801cdc0 	.word	0x0801cdc0
 801186c:	0801cde0 	.word	0x0801cde0

08011870 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08c      	sub	sp, #48	; 0x30
 8011874:	af04      	add	r7, sp, #16
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d109      	bne.n	8011898 <udp_sendto_if_src+0x28>
 8011884:	4b65      	ldr	r3, [pc, #404]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 8011886:	f240 22d1 	movw	r2, #721	; 0x2d1
 801188a:	4965      	ldr	r1, [pc, #404]	; (8011a20 <udp_sendto_if_src+0x1b0>)
 801188c:	4865      	ldr	r0, [pc, #404]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 801188e:	f005 fa59 	bl	8016d44 <iprintf>
 8011892:	f06f 030f 	mvn.w	r3, #15
 8011896:	e0bc      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <udp_sendto_if_src+0x42>
 801189e:	4b5f      	ldr	r3, [pc, #380]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 80118a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80118a4:	4960      	ldr	r1, [pc, #384]	; (8011a28 <udp_sendto_if_src+0x1b8>)
 80118a6:	485f      	ldr	r0, [pc, #380]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 80118a8:	f005 fa4c 	bl	8016d44 <iprintf>
 80118ac:	f06f 030f 	mvn.w	r3, #15
 80118b0:	e0af      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d109      	bne.n	80118cc <udp_sendto_if_src+0x5c>
 80118b8:	4b58      	ldr	r3, [pc, #352]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 80118ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 80118be:	495b      	ldr	r1, [pc, #364]	; (8011a2c <udp_sendto_if_src+0x1bc>)
 80118c0:	4858      	ldr	r0, [pc, #352]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 80118c2:	f005 fa3f 	bl	8016d44 <iprintf>
 80118c6:	f06f 030f 	mvn.w	r3, #15
 80118ca:	e0a2      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d109      	bne.n	80118e6 <udp_sendto_if_src+0x76>
 80118d2:	4b52      	ldr	r3, [pc, #328]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 80118d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80118d8:	4955      	ldr	r1, [pc, #340]	; (8011a30 <udp_sendto_if_src+0x1c0>)
 80118da:	4852      	ldr	r0, [pc, #328]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 80118dc:	f005 fa32 	bl	8016d44 <iprintf>
 80118e0:	f06f 030f 	mvn.w	r3, #15
 80118e4:	e095      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80118e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d109      	bne.n	8011900 <udp_sendto_if_src+0x90>
 80118ec:	4b4b      	ldr	r3, [pc, #300]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 80118ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 80118f2:	4950      	ldr	r1, [pc, #320]	; (8011a34 <udp_sendto_if_src+0x1c4>)
 80118f4:	484b      	ldr	r0, [pc, #300]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 80118f6:	f005 fa25 	bl	8016d44 <iprintf>
 80118fa:	f06f 030f 	mvn.w	r3, #15
 80118fe:	e088      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	8a5b      	ldrh	r3, [r3, #18]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d10f      	bne.n	8011928 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011908:	68f9      	ldr	r1, [r7, #12]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	8a5b      	ldrh	r3, [r3, #18]
 801190e:	461a      	mov	r2, r3
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f000 f893 	bl	8011a3c <udp_bind>
 8011916:	4603      	mov	r3, r0
 8011918:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801191a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011922:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011926:	e074      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	891b      	ldrh	r3, [r3, #8]
 801192c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011930:	4293      	cmp	r3, r2
 8011932:	d902      	bls.n	801193a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011934:	f04f 33ff 	mov.w	r3, #4294967295
 8011938:	e06b      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801193a:	2108      	movs	r1, #8
 801193c:	68b8      	ldr	r0, [r7, #8]
 801193e:	f7f9 ffcd 	bl	800b8dc <pbuf_add_header>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d015      	beq.n	8011974 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011948:	f44f 7220 	mov.w	r2, #640	; 0x280
 801194c:	2108      	movs	r1, #8
 801194e:	2022      	movs	r0, #34	; 0x22
 8011950:	f7f9 fd76 	bl	800b440 <pbuf_alloc>
 8011954:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801195c:	f04f 33ff 	mov.w	r3, #4294967295
 8011960:	e057      	b.n	8011a12 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	891b      	ldrh	r3, [r3, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d006      	beq.n	8011978 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801196a:	68b9      	ldr	r1, [r7, #8]
 801196c:	69f8      	ldr	r0, [r7, #28]
 801196e:	f7fa f963 	bl	800bc38 <pbuf_chain>
 8011972:	e001      	b.n	8011978 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	895b      	ldrh	r3, [r3, #10]
 801197c:	2b07      	cmp	r3, #7
 801197e:	d806      	bhi.n	801198e <udp_sendto_if_src+0x11e>
 8011980:	4b26      	ldr	r3, [pc, #152]	; (8011a1c <udp_sendto_if_src+0x1ac>)
 8011982:	f240 320d 	movw	r2, #781	; 0x30d
 8011986:	492c      	ldr	r1, [pc, #176]	; (8011a38 <udp_sendto_if_src+0x1c8>)
 8011988:	4826      	ldr	r0, [pc, #152]	; (8011a24 <udp_sendto_if_src+0x1b4>)
 801198a:	f005 f9db 	bl	8016d44 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	8a5b      	ldrh	r3, [r3, #18]
 8011998:	4618      	mov	r0, r3
 801199a:	f7f8 fd99 	bl	800a4d0 <lwip_htons>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80119a6:	887b      	ldrh	r3, [r7, #2]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7f8 fd91 	bl	800a4d0 <lwip_htons>
 80119ae:	4603      	mov	r3, r0
 80119b0:	461a      	mov	r2, r3
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	2200      	movs	r2, #0
 80119ba:	719a      	strb	r2, [r3, #6]
 80119bc:	2200      	movs	r2, #0
 80119be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	891b      	ldrh	r3, [r3, #8]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7f8 fd83 	bl	800a4d0 <lwip_htons>
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80119d2:	2311      	movs	r3, #17
 80119d4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	7adb      	ldrb	r3, [r3, #11]
 80119da:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	7a9b      	ldrb	r3, [r3, #10]
 80119e0:	7cb9      	ldrb	r1, [r7, #18]
 80119e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119e4:	9202      	str	r2, [sp, #8]
 80119e6:	7cfa      	ldrb	r2, [r7, #19]
 80119e8:	9201      	str	r2, [sp, #4]
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	460b      	mov	r3, r1
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119f2:	69f8      	ldr	r0, [r7, #28]
 80119f4:	f003 fafe 	bl	8014ff4 <ip4_output_if_src>
 80119f8:	4603      	mov	r3, r0
 80119fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80119fc:	69fa      	ldr	r2, [r7, #28]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d004      	beq.n	8011a0e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011a04:	69f8      	ldr	r0, [r7, #28]
 8011a06:	f7f9 ffff 	bl	800ba08 <pbuf_free>
    q = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011a0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3720      	adds	r7, #32
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0801cc14 	.word	0x0801cc14
 8011a20:	0801ce00 	.word	0x0801ce00
 8011a24:	0801cc68 	.word	0x0801cc68
 8011a28:	0801ce20 	.word	0x0801ce20
 8011a2c:	0801ce40 	.word	0x0801ce40
 8011a30:	0801ce64 	.word	0x0801ce64
 8011a34:	0801ce88 	.word	0x0801ce88
 8011a38:	0801ceac 	.word	0x0801ceac

08011a3c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	4613      	mov	r3, r2
 8011a48:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011a50:	4b39      	ldr	r3, [pc, #228]	; (8011b38 <udp_bind+0xfc>)
 8011a52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d109      	bne.n	8011a6e <udp_bind+0x32>
 8011a5a:	4b38      	ldr	r3, [pc, #224]	; (8011b3c <udp_bind+0x100>)
 8011a5c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011a60:	4937      	ldr	r1, [pc, #220]	; (8011b40 <udp_bind+0x104>)
 8011a62:	4838      	ldr	r0, [pc, #224]	; (8011b44 <udp_bind+0x108>)
 8011a64:	f005 f96e 	bl	8016d44 <iprintf>
 8011a68:	f06f 030f 	mvn.w	r3, #15
 8011a6c:	e060      	b.n	8011b30 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a72:	4b35      	ldr	r3, [pc, #212]	; (8011b48 <udp_bind+0x10c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	617b      	str	r3, [r7, #20]
 8011a78:	e009      	b.n	8011a8e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d102      	bne.n	8011a88 <udp_bind+0x4c>
      rebind = 1;
 8011a82:	2301      	movs	r3, #1
 8011a84:	74fb      	strb	r3, [r7, #19]
      break;
 8011a86:	e005      	b.n	8011a94 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	617b      	str	r3, [r7, #20]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1f2      	bne.n	8011a7a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011a94:	88fb      	ldrh	r3, [r7, #6]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d109      	bne.n	8011aae <udp_bind+0x72>
    port = udp_new_port();
 8011a9a:	f7ff fcc5 	bl	8011428 <udp_new_port>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011aa2:	88fb      	ldrh	r3, [r7, #6]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d12c      	bne.n	8011b02 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011aa8:	f06f 0307 	mvn.w	r3, #7
 8011aac:	e040      	b.n	8011b30 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011aae:	4b26      	ldr	r3, [pc, #152]	; (8011b48 <udp_bind+0x10c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	617b      	str	r3, [r7, #20]
 8011ab4:	e022      	b.n	8011afc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d01b      	beq.n	8011af6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	8a5b      	ldrh	r3, [r3, #18]
 8011ac2:	88fa      	ldrh	r2, [r7, #6]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d116      	bne.n	8011af6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d00d      	beq.n	8011af0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00a      	beq.n	8011af0 <udp_bind+0xb4>
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d006      	beq.n	8011af0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011ae2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d003      	beq.n	8011af0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011af0:	f06f 0307 	mvn.w	r3, #7
 8011af4:	e01c      	b.n	8011b30 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	617b      	str	r3, [r7, #20]
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1d9      	bne.n	8011ab6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <udp_bind+0xd2>
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	e000      	b.n	8011b10 <udp_bind+0xd4>
 8011b0e:	2300      	movs	r3, #0
 8011b10:	68fa      	ldr	r2, [r7, #12]
 8011b12:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	88fa      	ldrh	r2, [r7, #6]
 8011b18:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011b1a:	7cfb      	ldrb	r3, [r7, #19]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d106      	bne.n	8011b2e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011b20:	4b09      	ldr	r3, [pc, #36]	; (8011b48 <udp_bind+0x10c>)
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011b28:	4a07      	ldr	r2, [pc, #28]	; (8011b48 <udp_bind+0x10c>)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	0801dad4 	.word	0x0801dad4
 8011b3c:	0801cc14 	.word	0x0801cc14
 8011b40:	0801cedc 	.word	0x0801cedc
 8011b44:	0801cc68 	.word	0x0801cc68
 8011b48:	20006e8c 	.word	0x20006e8c

08011b4c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	4613      	mov	r3, r2
 8011b58:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d109      	bne.n	8011b74 <udp_connect+0x28>
 8011b60:	4b2c      	ldr	r3, [pc, #176]	; (8011c14 <udp_connect+0xc8>)
 8011b62:	f240 4235 	movw	r2, #1077	; 0x435
 8011b66:	492c      	ldr	r1, [pc, #176]	; (8011c18 <udp_connect+0xcc>)
 8011b68:	482c      	ldr	r0, [pc, #176]	; (8011c1c <udp_connect+0xd0>)
 8011b6a:	f005 f8eb 	bl	8016d44 <iprintf>
 8011b6e:	f06f 030f 	mvn.w	r3, #15
 8011b72:	e04b      	b.n	8011c0c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <udp_connect+0x42>
 8011b7a:	4b26      	ldr	r3, [pc, #152]	; (8011c14 <udp_connect+0xc8>)
 8011b7c:	f240 4236 	movw	r2, #1078	; 0x436
 8011b80:	4927      	ldr	r1, [pc, #156]	; (8011c20 <udp_connect+0xd4>)
 8011b82:	4826      	ldr	r0, [pc, #152]	; (8011c1c <udp_connect+0xd0>)
 8011b84:	f005 f8de 	bl	8016d44 <iprintf>
 8011b88:	f06f 030f 	mvn.w	r3, #15
 8011b8c:	e03e      	b.n	8011c0c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	8a5b      	ldrh	r3, [r3, #18]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10f      	bne.n	8011bb6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011b96:	68f9      	ldr	r1, [r7, #12]
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	8a5b      	ldrh	r3, [r3, #18]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f7ff ff4c 	bl	8011a3c <udp_bind>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d002      	beq.n	8011bb6 <udp_connect+0x6a>
      return err;
 8011bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bb4:	e02a      	b.n	8011c0c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <udp_connect+0x76>
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	e000      	b.n	8011bc4 <udp_connect+0x78>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	88fa      	ldrh	r2, [r7, #6]
 8011bcc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	7c1b      	ldrb	r3, [r3, #16]
 8011bd2:	f043 0304 	orr.w	r3, r3, #4
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bdc:	4b11      	ldr	r3, [pc, #68]	; (8011c24 <udp_connect+0xd8>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	617b      	str	r3, [r7, #20]
 8011be2:	e008      	b.n	8011bf6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011be4:	68fa      	ldr	r2, [r7, #12]
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d101      	bne.n	8011bf0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011bec:	2300      	movs	r3, #0
 8011bee:	e00d      	b.n	8011c0c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	617b      	str	r3, [r7, #20]
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d1f3      	bne.n	8011be4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011bfc:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <udp_connect+0xd8>)
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011c04:	4a07      	ldr	r2, [pc, #28]	; (8011c24 <udp_connect+0xd8>)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011c0a:	2300      	movs	r3, #0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	0801cc14 	.word	0x0801cc14
 8011c18:	0801cef4 	.word	0x0801cef4
 8011c1c:	0801cc68 	.word	0x0801cc68
 8011c20:	0801cf10 	.word	0x0801cf10
 8011c24:	20006e8c 	.word	0x20006e8c

08011c28 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d107      	bne.n	8011c4a <udp_recv+0x22>
 8011c3a:	4b08      	ldr	r3, [pc, #32]	; (8011c5c <udp_recv+0x34>)
 8011c3c:	f240 428a 	movw	r2, #1162	; 0x48a
 8011c40:	4907      	ldr	r1, [pc, #28]	; (8011c60 <udp_recv+0x38>)
 8011c42:	4808      	ldr	r0, [pc, #32]	; (8011c64 <udp_recv+0x3c>)
 8011c44:	f005 f87e 	bl	8016d44 <iprintf>
 8011c48:	e005      	b.n	8011c56 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	61da      	str	r2, [r3, #28]
}
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	0801cc14 	.word	0x0801cc14
 8011c60:	0801cf48 	.word	0x0801cf48
 8011c64:	0801cc68 	.word	0x0801cc68

08011c68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d107      	bne.n	8011c86 <udp_remove+0x1e>
 8011c76:	4b19      	ldr	r3, [pc, #100]	; (8011cdc <udp_remove+0x74>)
 8011c78:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011c7c:	4918      	ldr	r1, [pc, #96]	; (8011ce0 <udp_remove+0x78>)
 8011c7e:	4819      	ldr	r0, [pc, #100]	; (8011ce4 <udp_remove+0x7c>)
 8011c80:	f005 f860 	bl	8016d44 <iprintf>
 8011c84:	e026      	b.n	8011cd4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011c86:	4b18      	ldr	r3, [pc, #96]	; (8011ce8 <udp_remove+0x80>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d105      	bne.n	8011c9c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011c90:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <udp_remove+0x80>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <udp_remove+0x80>)
 8011c98:	6013      	str	r3, [r2, #0]
 8011c9a:	e017      	b.n	8011ccc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011c9c:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <udp_remove+0x80>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	60fb      	str	r3, [r7, #12]
 8011ca2:	e010      	b.n	8011cc6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d009      	beq.n	8011cc0 <udp_remove+0x58>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d104      	bne.n	8011cc0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	68da      	ldr	r2, [r3, #12]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	60da      	str	r2, [r3, #12]
        break;
 8011cbe:	e005      	b.n	8011ccc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	60fb      	str	r3, [r7, #12]
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1eb      	bne.n	8011ca4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011ccc:	6879      	ldr	r1, [r7, #4]
 8011cce:	2000      	movs	r0, #0
 8011cd0:	f7f9 f8a0 	bl	800ae14 <memp_free>
}
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	0801cc14 	.word	0x0801cc14
 8011ce0:	0801cf60 	.word	0x0801cf60
 8011ce4:	0801cc68 	.word	0x0801cc68
 8011ce8:	20006e8c 	.word	0x20006e8c

08011cec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	f7f9 f842 	bl	800ad7c <memp_malloc>
 8011cf8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d007      	beq.n	8011d10 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011d00:	2220      	movs	r2, #32
 8011d02:	2100      	movs	r1, #0
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f004 f9cd 	bl	80160a4 <memset>
    pcb->ttl = UDP_TTL;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	22ff      	movs	r2, #255	; 0xff
 8011d0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011d10:	687b      	ldr	r3, [r7, #4]
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d01e      	beq.n	8011d6a <udp_netif_ip_addr_changed+0x4e>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d01a      	beq.n	8011d6a <udp_netif_ip_addr_changed+0x4e>
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d017      	beq.n	8011d6a <udp_netif_ip_addr_changed+0x4e>
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d013      	beq.n	8011d6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011d42:	4b0d      	ldr	r3, [pc, #52]	; (8011d78 <udp_netif_ip_addr_changed+0x5c>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	e00c      	b.n	8011d64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d103      	bne.n	8011d5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	68db      	ldr	r3, [r3, #12]
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1ef      	bne.n	8011d4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011d6a:	bf00      	nop
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	20006e8c 	.word	0x20006e8c

08011d7c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011d80:	4b20      	ldr	r3, [pc, #128]	; (8011e04 <dhcp_inc_pcb_refcount+0x88>)
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d133      	bne.n	8011df0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011d88:	4b1f      	ldr	r3, [pc, #124]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d005      	beq.n	8011d9c <dhcp_inc_pcb_refcount+0x20>
 8011d90:	4b1e      	ldr	r3, [pc, #120]	; (8011e0c <dhcp_inc_pcb_refcount+0x90>)
 8011d92:	22e5      	movs	r2, #229	; 0xe5
 8011d94:	491e      	ldr	r1, [pc, #120]	; (8011e10 <dhcp_inc_pcb_refcount+0x94>)
 8011d96:	481f      	ldr	r0, [pc, #124]	; (8011e14 <dhcp_inc_pcb_refcount+0x98>)
 8011d98:	f004 ffd4 	bl	8016d44 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011d9c:	f7ff ffa6 	bl	8011cec <udp_new>
 8011da0:	4603      	mov	r3, r0
 8011da2:	4a19      	ldr	r2, [pc, #100]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011da4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011da6:	4b18      	ldr	r3, [pc, #96]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d102      	bne.n	8011db4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e024      	b.n	8011dfe <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011db4:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	7a5a      	ldrb	r2, [r3, #9]
 8011dba:	4b13      	ldr	r3, [pc, #76]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f042 0220 	orr.w	r2, r2, #32
 8011dc2:	b2d2      	uxtb	r2, r2
 8011dc4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011dc6:	4b10      	ldr	r3, [pc, #64]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2244      	movs	r2, #68	; 0x44
 8011dcc:	4912      	ldr	r1, [pc, #72]	; (8011e18 <dhcp_inc_pcb_refcount+0x9c>)
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff fe34 	bl	8011a3c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011dd4:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2243      	movs	r2, #67	; 0x43
 8011dda:	490f      	ldr	r1, [pc, #60]	; (8011e18 <dhcp_inc_pcb_refcount+0x9c>)
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff feb5 	bl	8011b4c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011de2:	4b09      	ldr	r3, [pc, #36]	; (8011e08 <dhcp_inc_pcb_refcount+0x8c>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2200      	movs	r2, #0
 8011de8:	490c      	ldr	r1, [pc, #48]	; (8011e1c <dhcp_inc_pcb_refcount+0xa0>)
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff ff1c 	bl	8011c28 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011df0:	4b04      	ldr	r3, [pc, #16]	; (8011e04 <dhcp_inc_pcb_refcount+0x88>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	3301      	adds	r3, #1
 8011df6:	b2da      	uxtb	r2, r3
 8011df8:	4b02      	ldr	r3, [pc, #8]	; (8011e04 <dhcp_inc_pcb_refcount+0x88>)
 8011dfa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	20000384 	.word	0x20000384
 8011e08:	20000380 	.word	0x20000380
 8011e0c:	0801cf78 	.word	0x0801cf78
 8011e10:	0801cfb0 	.word	0x0801cfb0
 8011e14:	0801cfd8 	.word	0x0801cfd8
 8011e18:	0801dad4 	.word	0x0801dad4
 8011e1c:	0801363d 	.word	0x0801363d

08011e20 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011e24:	4b0e      	ldr	r3, [pc, #56]	; (8011e60 <dhcp_dec_pcb_refcount+0x40>)
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d105      	bne.n	8011e38 <dhcp_dec_pcb_refcount+0x18>
 8011e2c:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <dhcp_dec_pcb_refcount+0x44>)
 8011e2e:	22ff      	movs	r2, #255	; 0xff
 8011e30:	490d      	ldr	r1, [pc, #52]	; (8011e68 <dhcp_dec_pcb_refcount+0x48>)
 8011e32:	480e      	ldr	r0, [pc, #56]	; (8011e6c <dhcp_dec_pcb_refcount+0x4c>)
 8011e34:	f004 ff86 	bl	8016d44 <iprintf>
  dhcp_pcb_refcount--;
 8011e38:	4b09      	ldr	r3, [pc, #36]	; (8011e60 <dhcp_dec_pcb_refcount+0x40>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	4b07      	ldr	r3, [pc, #28]	; (8011e60 <dhcp_dec_pcb_refcount+0x40>)
 8011e42:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011e44:	4b06      	ldr	r3, [pc, #24]	; (8011e60 <dhcp_dec_pcb_refcount+0x40>)
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d107      	bne.n	8011e5c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011e4c:	4b08      	ldr	r3, [pc, #32]	; (8011e70 <dhcp_dec_pcb_refcount+0x50>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7ff ff09 	bl	8011c68 <udp_remove>
    dhcp_pcb = NULL;
 8011e56:	4b06      	ldr	r3, [pc, #24]	; (8011e70 <dhcp_dec_pcb_refcount+0x50>)
 8011e58:	2200      	movs	r2, #0
 8011e5a:	601a      	str	r2, [r3, #0]
  }
}
 8011e5c:	bf00      	nop
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20000384 	.word	0x20000384
 8011e64:	0801cf78 	.word	0x0801cf78
 8011e68:	0801d000 	.word	0x0801d000
 8011e6c:	0801cfd8 	.word	0x0801cfd8
 8011e70:	20000380 	.word	0x20000380

08011e74 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011e82:	210c      	movs	r1, #12
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	f001 f81b 	bl	8012ec0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011e8a:	4b06      	ldr	r3, [pc, #24]	; (8011ea4 <dhcp_handle_nak+0x30>)
 8011e8c:	4a05      	ldr	r2, [pc, #20]	; (8011ea4 <dhcp_handle_nak+0x30>)
 8011e8e:	4905      	ldr	r1, [pc, #20]	; (8011ea4 <dhcp_handle_nak+0x30>)
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7f9 f961 	bl	800b158 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fc0e 	bl	80126b8 <dhcp_discover>
}
 8011e9c:	bf00      	nop
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	0801dad4 	.word	0x0801dad4

08011ea8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011eb6:	2108      	movs	r1, #8
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f001 f801 	bl	8012ec0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	331c      	adds	r3, #28
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f002 fb02 	bl	80144d0 <etharp_query>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	799b      	ldrb	r3, [r3, #6]
 8011ed4:	2bff      	cmp	r3, #255	; 0xff
 8011ed6:	d005      	beq.n	8011ee4 <dhcp_check+0x3c>
    dhcp->tries++;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	799b      	ldrb	r3, [r3, #6]
 8011edc:	3301      	adds	r3, #1
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011ee4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011ee8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011eea:	893b      	ldrh	r3, [r7, #8]
 8011eec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ef0:	4a06      	ldr	r2, [pc, #24]	; (8011f0c <dhcp_check+0x64>)
 8011ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8011ef6:	1152      	asrs	r2, r2, #5
 8011ef8:	17db      	asrs	r3, r3, #31
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011f02:	bf00      	nop
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	10624dd3 	.word	0x10624dd3

08011f10 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011f20:	4b0c      	ldr	r3, [pc, #48]	; (8011f54 <dhcp_handle_offer+0x44>)
 8011f22:	789b      	ldrb	r3, [r3, #2]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d011      	beq.n	8011f4c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8011f2e:	4b0a      	ldr	r3, [pc, #40]	; (8011f58 <dhcp_handle_offer+0x48>)
 8011f30:	689b      	ldr	r3, [r3, #8]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f8 fae1 	bl	800a4fa <lwip_htonl>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	691a      	ldr	r2, [r3, #16]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 f808 	bl	8011f5c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8011f4c:	bf00      	nop
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	20006e90 	.word	0x20006e90
 8011f58:	20006e98 	.word	0x20006e98

08011f5c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8011f5c:	b5b0      	push	{r4, r5, r7, lr}
 8011f5e:	b08a      	sub	sp, #40	; 0x28
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <dhcp_select+0x22>
 8011f6a:	4b71      	ldr	r3, [pc, #452]	; (8012130 <dhcp_select+0x1d4>)
 8011f6c:	f240 1277 	movw	r2, #375	; 0x177
 8011f70:	4970      	ldr	r1, [pc, #448]	; (8012134 <dhcp_select+0x1d8>)
 8011f72:	4871      	ldr	r0, [pc, #452]	; (8012138 <dhcp_select+0x1dc>)
 8011f74:	f004 fee6 	bl	8016d44 <iprintf>
 8011f78:	f06f 030f 	mvn.w	r3, #15
 8011f7c:	e0d3      	b.n	8012126 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011f84:	69bb      	ldr	r3, [r7, #24]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d109      	bne.n	8011f9e <dhcp_select+0x42>
 8011f8a:	4b69      	ldr	r3, [pc, #420]	; (8012130 <dhcp_select+0x1d4>)
 8011f8c:	f240 1279 	movw	r2, #377	; 0x179
 8011f90:	496a      	ldr	r1, [pc, #424]	; (801213c <dhcp_select+0x1e0>)
 8011f92:	4869      	ldr	r0, [pc, #420]	; (8012138 <dhcp_select+0x1dc>)
 8011f94:	f004 fed6 	bl	8016d44 <iprintf>
 8011f98:	f06f 0305 	mvn.w	r3, #5
 8011f9c:	e0c3      	b.n	8012126 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011f9e:	2101      	movs	r1, #1
 8011fa0:	69b8      	ldr	r0, [r7, #24]
 8011fa2:	f000 ff8d 	bl	8012ec0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011fa6:	f107 030c 	add.w	r3, r7, #12
 8011faa:	2203      	movs	r2, #3
 8011fac:	69b9      	ldr	r1, [r7, #24]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f001 fc12 	bl	80137d8 <dhcp_create_msg>
 8011fb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 8085 	beq.w	80120c8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011fc4:	89b8      	ldrh	r0, [r7, #12]
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fcc:	2302      	movs	r3, #2
 8011fce:	2239      	movs	r2, #57	; 0x39
 8011fd0:	f000 ff90 	bl	8012ef4 <dhcp_option>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011fd8:	89b8      	ldrh	r0, [r7, #12]
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	f000 ffdf 	bl	8012fa8 <dhcp_option_short>
 8011fea:	4603      	mov	r3, r0
 8011fec:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011fee:	89b8      	ldrh	r0, [r7, #12]
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ff6:	2304      	movs	r3, #4
 8011ff8:	2232      	movs	r2, #50	; 0x32
 8011ffa:	f000 ff7b 	bl	8012ef4 <dhcp_option>
 8011ffe:	4603      	mov	r3, r0
 8012000:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012002:	89bc      	ldrh	r4, [r7, #12]
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	69db      	ldr	r3, [r3, #28]
 801200e:	4618      	mov	r0, r3
 8012010:	f7f8 fa73 	bl	800a4fa <lwip_htonl>
 8012014:	4603      	mov	r3, r0
 8012016:	461a      	mov	r2, r3
 8012018:	4629      	mov	r1, r5
 801201a:	4620      	mov	r0, r4
 801201c:	f000 fff6 	bl	801300c <dhcp_option_long>
 8012020:	4603      	mov	r3, r0
 8012022:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012024:	89b8      	ldrh	r0, [r7, #12]
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801202c:	2304      	movs	r3, #4
 801202e:	2236      	movs	r2, #54	; 0x36
 8012030:	f000 ff60 	bl	8012ef4 <dhcp_option>
 8012034:	4603      	mov	r3, r0
 8012036:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012038:	89bc      	ldrh	r4, [r7, #12]
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	4618      	mov	r0, r3
 8012046:	f7f8 fa58 	bl	800a4fa <lwip_htonl>
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
 801204e:	4629      	mov	r1, r5
 8012050:	4620      	mov	r0, r4
 8012052:	f000 ffdb 	bl	801300c <dhcp_option_long>
 8012056:	4603      	mov	r3, r0
 8012058:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801205a:	89b8      	ldrh	r0, [r7, #12]
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012062:	2303      	movs	r3, #3
 8012064:	2237      	movs	r2, #55	; 0x37
 8012066:	f000 ff45 	bl	8012ef4 <dhcp_option>
 801206a:	4603      	mov	r3, r0
 801206c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801206e:	2300      	movs	r3, #0
 8012070:	77bb      	strb	r3, [r7, #30]
 8012072:	e00e      	b.n	8012092 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012074:	89b8      	ldrh	r0, [r7, #12]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801207c:	7fbb      	ldrb	r3, [r7, #30]
 801207e:	4a30      	ldr	r2, [pc, #192]	; (8012140 <dhcp_select+0x1e4>)
 8012080:	5cd3      	ldrb	r3, [r2, r3]
 8012082:	461a      	mov	r2, r3
 8012084:	f000 ff6a 	bl	8012f5c <dhcp_option_byte>
 8012088:	4603      	mov	r3, r0
 801208a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801208c:	7fbb      	ldrb	r3, [r7, #30]
 801208e:	3301      	adds	r3, #1
 8012090:	77bb      	strb	r3, [r7, #30]
 8012092:	7fbb      	ldrb	r3, [r7, #30]
 8012094:	2b02      	cmp	r3, #2
 8012096:	d9ed      	bls.n	8012074 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012098:	89b8      	ldrh	r0, [r7, #12]
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	33f0      	adds	r3, #240	; 0xf0
 801209e:	697a      	ldr	r2, [r7, #20]
 80120a0:	4619      	mov	r1, r3
 80120a2:	f001 fc6f 	bl	8013984 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80120a6:	4b27      	ldr	r3, [pc, #156]	; (8012144 <dhcp_select+0x1e8>)
 80120a8:	6818      	ldr	r0, [r3, #0]
 80120aa:	4b27      	ldr	r3, [pc, #156]	; (8012148 <dhcp_select+0x1ec>)
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	2343      	movs	r3, #67	; 0x43
 80120b4:	4a25      	ldr	r2, [pc, #148]	; (801214c <dhcp_select+0x1f0>)
 80120b6:	6979      	ldr	r1, [r7, #20]
 80120b8:	f7ff fbda 	bl	8011870 <udp_sendto_if_src>
 80120bc:	4603      	mov	r3, r0
 80120be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80120c0:	6978      	ldr	r0, [r7, #20]
 80120c2:	f7f9 fca1 	bl	800ba08 <pbuf_free>
 80120c6:	e001      	b.n	80120cc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80120c8:	23ff      	movs	r3, #255	; 0xff
 80120ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	799b      	ldrb	r3, [r3, #6]
 80120d0:	2bff      	cmp	r3, #255	; 0xff
 80120d2:	d005      	beq.n	80120e0 <dhcp_select+0x184>
    dhcp->tries++;
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	799b      	ldrb	r3, [r3, #6]
 80120d8:	3301      	adds	r3, #1
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	799b      	ldrb	r3, [r3, #6]
 80120e4:	2b05      	cmp	r3, #5
 80120e6:	d80d      	bhi.n	8012104 <dhcp_select+0x1a8>
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	799b      	ldrb	r3, [r3, #6]
 80120ec:	461a      	mov	r2, r3
 80120ee:	2301      	movs	r3, #1
 80120f0:	4093      	lsls	r3, r2
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	461a      	mov	r2, r3
 80120f6:	0152      	lsls	r2, r2, #5
 80120f8:	1ad2      	subs	r2, r2, r3
 80120fa:	0092      	lsls	r2, r2, #2
 80120fc:	4413      	add	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	b29b      	uxth	r3, r3
 8012102:	e001      	b.n	8012108 <dhcp_select+0x1ac>
 8012104:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012108:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801210a:	89fb      	ldrh	r3, [r7, #14]
 801210c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012110:	4a0f      	ldr	r2, [pc, #60]	; (8012150 <dhcp_select+0x1f4>)
 8012112:	fb82 1203 	smull	r1, r2, r2, r3
 8012116:	1152      	asrs	r2, r2, #5
 8012118:	17db      	asrs	r3, r3, #31
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	b29a      	uxth	r2, r3
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012122:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3720      	adds	r7, #32
 801212a:	46bd      	mov	sp, r7
 801212c:	bdb0      	pop	{r4, r5, r7, pc}
 801212e:	bf00      	nop
 8012130:	0801cf78 	.word	0x0801cf78
 8012134:	0801d024 	.word	0x0801d024
 8012138:	0801cfd8 	.word	0x0801cfd8
 801213c:	0801d040 	.word	0x0801d040
 8012140:	20000058 	.word	0x20000058
 8012144:	20000380 	.word	0x20000380
 8012148:	0801dad4 	.word	0x0801dad4
 801214c:	0801dad8 	.word	0x0801dad8
 8012150:	10624dd3 	.word	0x10624dd3

08012154 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801215a:	4b27      	ldr	r3, [pc, #156]	; (80121f8 <dhcp_coarse_tmr+0xa4>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	607b      	str	r3, [r7, #4]
 8012160:	e042      	b.n	80121e8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012166:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d039      	beq.n	80121e2 <dhcp_coarse_tmr+0x8e>
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	795b      	ldrb	r3, [r3, #5]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d035      	beq.n	80121e2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	8a9b      	ldrh	r3, [r3, #20]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d012      	beq.n	80121a4 <dhcp_coarse_tmr+0x50>
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	8a5b      	ldrh	r3, [r3, #18]
 8012182:	3301      	adds	r3, #1
 8012184:	b29a      	uxth	r2, r3
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	825a      	strh	r2, [r3, #18]
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	8a5a      	ldrh	r2, [r3, #18]
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	8a9b      	ldrh	r3, [r3, #20]
 8012192:	429a      	cmp	r2, r3
 8012194:	d106      	bne.n	80121a4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 fdf8 	bl	8012d8c <dhcp_release_and_stop>
        dhcp_start(netif);
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 f96b 	bl	8012478 <dhcp_start>
 80121a2:	e01e      	b.n	80121e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	8a1b      	ldrh	r3, [r3, #16]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00b      	beq.n	80121c4 <dhcp_coarse_tmr+0x70>
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	8a1b      	ldrh	r3, [r3, #16]
 80121b0:	1e5a      	subs	r2, r3, #1
 80121b2:	b291      	uxth	r1, r2
 80121b4:	683a      	ldr	r2, [r7, #0]
 80121b6:	8211      	strh	r1, [r2, #16]
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d103      	bne.n	80121c4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 f8c7 	bl	8012350 <dhcp_t2_timeout>
 80121c2:	e00e      	b.n	80121e2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	89db      	ldrh	r3, [r3, #14]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00a      	beq.n	80121e2 <dhcp_coarse_tmr+0x8e>
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	89db      	ldrh	r3, [r3, #14]
 80121d0:	1e5a      	subs	r2, r3, #1
 80121d2:	b291      	uxth	r1, r2
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	81d1      	strh	r1, [r2, #14]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d102      	bne.n	80121e2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 f888 	bl	80122f2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	607b      	str	r3, [r7, #4]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1b9      	bne.n	8012162 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80121ee:	bf00      	nop
 80121f0:	bf00      	nop
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	20006e64 	.word	0x20006e64

080121fc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012202:	4b16      	ldr	r3, [pc, #88]	; (801225c <dhcp_fine_tmr+0x60>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	607b      	str	r3, [r7, #4]
 8012208:	e020      	b.n	801224c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801220e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d017      	beq.n	8012246 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	891b      	ldrh	r3, [r3, #8]
 801221a:	2b01      	cmp	r3, #1
 801221c:	d906      	bls.n	801222c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	891b      	ldrh	r3, [r3, #8]
 8012222:	3b01      	subs	r3, #1
 8012224:	b29a      	uxth	r2, r3
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	811a      	strh	r2, [r3, #8]
 801222a:	e00c      	b.n	8012246 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	891b      	ldrh	r3, [r3, #8]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d108      	bne.n	8012246 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	891b      	ldrh	r3, [r3, #8]
 8012238:	3b01      	subs	r3, #1
 801223a:	b29a      	uxth	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 f80d 	bl	8012260 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	607b      	str	r3, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1db      	bne.n	801220a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012252:	bf00      	nop
 8012254:	bf00      	nop
 8012256:	3708      	adds	r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	20006e64 	.word	0x20006e64

08012260 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801226c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	795b      	ldrb	r3, [r3, #5]
 8012272:	2b0c      	cmp	r3, #12
 8012274:	d003      	beq.n	801227e <dhcp_timeout+0x1e>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	795b      	ldrb	r3, [r3, #5]
 801227a:	2b06      	cmp	r3, #6
 801227c:	d103      	bne.n	8012286 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 fa1a 	bl	80126b8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012284:	e031      	b.n	80122ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	795b      	ldrb	r3, [r3, #5]
 801228a:	2b01      	cmp	r3, #1
 801228c:	d10e      	bne.n	80122ac <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	799b      	ldrb	r3, [r3, #6]
 8012292:	2b05      	cmp	r3, #5
 8012294:	d803      	bhi.n	801229e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f7ff fe60 	bl	8011f5c <dhcp_select>
}
 801229c:	e025      	b.n	80122ea <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 fd74 	bl	8012d8c <dhcp_release_and_stop>
      dhcp_start(netif);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f8e7 	bl	8012478 <dhcp_start>
}
 80122aa:	e01e      	b.n	80122ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	795b      	ldrb	r3, [r3, #5]
 80122b0:	2b08      	cmp	r3, #8
 80122b2:	d10b      	bne.n	80122cc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	799b      	ldrb	r3, [r3, #6]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d803      	bhi.n	80122c4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff fdf3 	bl	8011ea8 <dhcp_check>
}
 80122c2:	e012      	b.n	80122ea <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fa99 	bl	80127fc <dhcp_bind>
}
 80122ca:	e00e      	b.n	80122ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	795b      	ldrb	r3, [r3, #5]
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d10a      	bne.n	80122ea <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	799b      	ldrb	r3, [r3, #6]
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d803      	bhi.n	80122e4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fc9f 	bl	8012c20 <dhcp_reboot>
}
 80122e2:	e002      	b.n	80122ea <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 f9e7 	bl	80126b8 <dhcp_discover>
}
 80122ea:	bf00      	nop
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	795b      	ldrb	r3, [r3, #5]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d007      	beq.n	8012318 <dhcp_t1_timeout+0x26>
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	795b      	ldrb	r3, [r3, #5]
 801230c:	2b0a      	cmp	r3, #10
 801230e:	d003      	beq.n	8012318 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012314:	2b05      	cmp	r3, #5
 8012316:	d117      	bne.n	8012348 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f000 fb49 	bl	80129b0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	899b      	ldrh	r3, [r3, #12]
 8012322:	461a      	mov	r2, r3
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	8a5b      	ldrh	r3, [r3, #18]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	2b01      	cmp	r3, #1
 801232c:	dd0c      	ble.n	8012348 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	899b      	ldrh	r3, [r3, #12]
 8012332:	461a      	mov	r2, r3
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	8a5b      	ldrh	r3, [r3, #18]
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	2b00      	cmp	r3, #0
 801233c:	da00      	bge.n	8012340 <dhcp_t1_timeout+0x4e>
 801233e:	3301      	adds	r3, #1
 8012340:	105b      	asrs	r3, r3, #1
 8012342:	b29a      	uxth	r2, r3
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012348:	bf00      	nop
 801234a:	3710      	adds	r7, #16
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	795b      	ldrb	r3, [r3, #5]
 8012362:	2b01      	cmp	r3, #1
 8012364:	d00b      	beq.n	801237e <dhcp_t2_timeout+0x2e>
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	795b      	ldrb	r3, [r3, #5]
 801236a:	2b0a      	cmp	r3, #10
 801236c:	d007      	beq.n	801237e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012372:	2b05      	cmp	r3, #5
 8012374:	d003      	beq.n	801237e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	795b      	ldrb	r3, [r3, #5]
 801237a:	2b04      	cmp	r3, #4
 801237c:	d117      	bne.n	80123ae <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 fbb2 	bl	8012ae8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	8a9b      	ldrh	r3, [r3, #20]
 8012388:	461a      	mov	r2, r3
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	8a5b      	ldrh	r3, [r3, #18]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	2b01      	cmp	r3, #1
 8012392:	dd0c      	ble.n	80123ae <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	8a9b      	ldrh	r3, [r3, #20]
 8012398:	461a      	mov	r2, r3
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	8a5b      	ldrh	r3, [r3, #18]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	da00      	bge.n	80123a6 <dhcp_t2_timeout+0x56>
 80123a4:	3301      	adds	r3, #1
 80123a6:	105b      	asrs	r3, r3, #1
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80123ae:	bf00      	nop
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2200      	movs	r2, #0
 80123cc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2200      	movs	r2, #0
 80123d2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80123d4:	4b26      	ldr	r3, [pc, #152]	; (8012470 <dhcp_handle_ack+0xb8>)
 80123d6:	78db      	ldrb	r3, [r3, #3]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d003      	beq.n	80123e4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80123dc:	4b25      	ldr	r3, [pc, #148]	; (8012474 <dhcp_handle_ack+0xbc>)
 80123de:	68da      	ldr	r2, [r3, #12]
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80123e4:	4b22      	ldr	r3, [pc, #136]	; (8012470 <dhcp_handle_ack+0xb8>)
 80123e6:	791b      	ldrb	r3, [r3, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d004      	beq.n	80123f6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80123ec:	4b21      	ldr	r3, [pc, #132]	; (8012474 <dhcp_handle_ack+0xbc>)
 80123ee:	691a      	ldr	r2, [r3, #16]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80123f4:	e004      	b.n	8012400 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123fa:	085a      	lsrs	r2, r3, #1
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012400:	4b1b      	ldr	r3, [pc, #108]	; (8012470 <dhcp_handle_ack+0xb8>)
 8012402:	795b      	ldrb	r3, [r3, #5]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012408:	4b1a      	ldr	r3, [pc, #104]	; (8012474 <dhcp_handle_ack+0xbc>)
 801240a:	695a      	ldr	r2, [r3, #20]
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	631a      	str	r2, [r3, #48]	; 0x30
 8012410:	e007      	b.n	8012422 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012416:	4613      	mov	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	1a9b      	subs	r3, r3, r2
 801241c:	08da      	lsrs	r2, r3, #3
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	691a      	ldr	r2, [r3, #16]
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801242a:	4b11      	ldr	r3, [pc, #68]	; (8012470 <dhcp_handle_ack+0xb8>)
 801242c:	799b      	ldrb	r3, [r3, #6]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00b      	beq.n	801244a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012432:	4b10      	ldr	r3, [pc, #64]	; (8012474 <dhcp_handle_ack+0xbc>)
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	4618      	mov	r0, r3
 8012438:	f7f8 f85f 	bl	800a4fa <lwip_htonl>
 801243c:	4602      	mov	r2, r0
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2201      	movs	r2, #1
 8012446:	71da      	strb	r2, [r3, #7]
 8012448:	e002      	b.n	8012450 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2200      	movs	r2, #0
 801244e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012450:	4b07      	ldr	r3, [pc, #28]	; (8012470 <dhcp_handle_ack+0xb8>)
 8012452:	79db      	ldrb	r3, [r3, #7]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d007      	beq.n	8012468 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012458:	4b06      	ldr	r3, [pc, #24]	; (8012474 <dhcp_handle_ack+0xbc>)
 801245a:	69db      	ldr	r3, [r3, #28]
 801245c:	4618      	mov	r0, r3
 801245e:	f7f8 f84c 	bl	800a4fa <lwip_htonl>
 8012462:	4602      	mov	r2, r0
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012468:	bf00      	nop
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	20006e90 	.word	0x20006e90
 8012474:	20006e98 	.word	0x20006e98

08012478 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d109      	bne.n	801249a <dhcp_start+0x22>
 8012486:	4b37      	ldr	r3, [pc, #220]	; (8012564 <dhcp_start+0xec>)
 8012488:	f240 22e7 	movw	r2, #743	; 0x2e7
 801248c:	4936      	ldr	r1, [pc, #216]	; (8012568 <dhcp_start+0xf0>)
 801248e:	4837      	ldr	r0, [pc, #220]	; (801256c <dhcp_start+0xf4>)
 8012490:	f004 fc58 	bl	8016d44 <iprintf>
 8012494:	f06f 030f 	mvn.w	r3, #15
 8012498:	e060      	b.n	801255c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d109      	bne.n	80124bc <dhcp_start+0x44>
 80124a8:	4b2e      	ldr	r3, [pc, #184]	; (8012564 <dhcp_start+0xec>)
 80124aa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80124ae:	4930      	ldr	r1, [pc, #192]	; (8012570 <dhcp_start+0xf8>)
 80124b0:	482e      	ldr	r0, [pc, #184]	; (801256c <dhcp_start+0xf4>)
 80124b2:	f004 fc47 	bl	8016d44 <iprintf>
 80124b6:	f06f 030f 	mvn.w	r3, #15
 80124ba:	e04f      	b.n	801255c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124c6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80124ca:	d202      	bcs.n	80124d2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80124cc:	f04f 33ff 	mov.w	r3, #4294967295
 80124d0:	e044      	b.n	801255c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10d      	bne.n	80124f4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80124d8:	2034      	movs	r0, #52	; 0x34
 80124da:	f7f8 fae1 	bl	800aaa0 <mem_malloc>
 80124de:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d102      	bne.n	80124ec <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80124e6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ea:	e037      	b.n	801255c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	625a      	str	r2, [r3, #36]	; 0x24
 80124f2:	e005      	b.n	8012500 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	791b      	ldrb	r3, [r3, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80124fc:	f7ff fc90 	bl	8011e20 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012500:	2234      	movs	r2, #52	; 0x34
 8012502:	2100      	movs	r1, #0
 8012504:	68f8      	ldr	r0, [r7, #12]
 8012506:	f003 fdcd 	bl	80160a4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801250a:	f7ff fc37 	bl	8011d7c <dhcp_inc_pcb_refcount>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d002      	beq.n	801251a <dhcp_start+0xa2>
    return ERR_MEM;
 8012514:	f04f 33ff 	mov.w	r3, #4294967295
 8012518:	e020      	b.n	801255c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2201      	movs	r2, #1
 801251e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012526:	f003 0304 	and.w	r3, r3, #4
 801252a:	2b00      	cmp	r3, #0
 801252c:	d105      	bne.n	801253a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801252e:	2102      	movs	r1, #2
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f000 fcc5 	bl	8012ec0 <dhcp_set_state>
    return ERR_OK;
 8012536:	2300      	movs	r3, #0
 8012538:	e010      	b.n	801255c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f8bc 	bl	80126b8 <dhcp_discover>
 8012540:	4603      	mov	r3, r0
 8012542:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012544:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d005      	beq.n	8012558 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fc1d 	bl	8012d8c <dhcp_release_and_stop>
    return ERR_MEM;
 8012552:	f04f 33ff 	mov.w	r3, #4294967295
 8012556:	e001      	b.n	801255c <dhcp_start+0xe4>
  }
  return result;
 8012558:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	0801cf78 	.word	0x0801cf78
 8012568:	0801d05c 	.word	0x0801d05c
 801256c:	0801cfd8 	.word	0x0801cfd8
 8012570:	0801d0a0 	.word	0x0801d0a0

08012574 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d107      	bne.n	8012594 <dhcp_arp_reply+0x20>
 8012584:	4b0e      	ldr	r3, [pc, #56]	; (80125c0 <dhcp_arp_reply+0x4c>)
 8012586:	f240 328b 	movw	r2, #907	; 0x38b
 801258a:	490e      	ldr	r1, [pc, #56]	; (80125c4 <dhcp_arp_reply+0x50>)
 801258c:	480e      	ldr	r0, [pc, #56]	; (80125c8 <dhcp_arp_reply+0x54>)
 801258e:	f004 fbd9 	bl	8016d44 <iprintf>
 8012592:	e012      	b.n	80125ba <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012598:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00c      	beq.n	80125ba <dhcp_arp_reply+0x46>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	795b      	ldrb	r3, [r3, #5]
 80125a4:	2b08      	cmp	r3, #8
 80125a6:	d108      	bne.n	80125ba <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	69db      	ldr	r3, [r3, #28]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d102      	bne.n	80125ba <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f809 	bl	80125cc <dhcp_decline>
    }
  }
}
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	0801cf78 	.word	0x0801cf78
 80125c4:	0801d05c 	.word	0x0801d05c
 80125c8:	0801cfd8 	.word	0x0801cfd8

080125cc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80125cc:	b5b0      	push	{r4, r5, r7, lr}
 80125ce:	b08a      	sub	sp, #40	; 0x28
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80125da:	210c      	movs	r1, #12
 80125dc:	69b8      	ldr	r0, [r7, #24]
 80125de:	f000 fc6f 	bl	8012ec0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80125e2:	f107 030c 	add.w	r3, r7, #12
 80125e6:	2204      	movs	r2, #4
 80125e8:	69b9      	ldr	r1, [r7, #24]
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f001 f8f4 	bl	80137d8 <dhcp_create_msg>
 80125f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d035      	beq.n	8012664 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80125fe:	89b8      	ldrh	r0, [r7, #12]
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012606:	2304      	movs	r3, #4
 8012608:	2232      	movs	r2, #50	; 0x32
 801260a:	f000 fc73 	bl	8012ef4 <dhcp_option>
 801260e:	4603      	mov	r3, r0
 8012610:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012612:	89bc      	ldrh	r4, [r7, #12]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	4618      	mov	r0, r3
 8012620:	f7f7 ff6b 	bl	800a4fa <lwip_htonl>
 8012624:	4603      	mov	r3, r0
 8012626:	461a      	mov	r2, r3
 8012628:	4629      	mov	r1, r5
 801262a:	4620      	mov	r0, r4
 801262c:	f000 fcee 	bl	801300c <dhcp_option_long>
 8012630:	4603      	mov	r3, r0
 8012632:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012634:	89b8      	ldrh	r0, [r7, #12]
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	33f0      	adds	r3, #240	; 0xf0
 801263a:	697a      	ldr	r2, [r7, #20]
 801263c:	4619      	mov	r1, r3
 801263e:	f001 f9a1 	bl	8013984 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012642:	4b19      	ldr	r3, [pc, #100]	; (80126a8 <dhcp_decline+0xdc>)
 8012644:	6818      	ldr	r0, [r3, #0]
 8012646:	4b19      	ldr	r3, [pc, #100]	; (80126ac <dhcp_decline+0xe0>)
 8012648:	9301      	str	r3, [sp, #4]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	9300      	str	r3, [sp, #0]
 801264e:	2343      	movs	r3, #67	; 0x43
 8012650:	4a17      	ldr	r2, [pc, #92]	; (80126b0 <dhcp_decline+0xe4>)
 8012652:	6979      	ldr	r1, [r7, #20]
 8012654:	f7ff f90c 	bl	8011870 <udp_sendto_if_src>
 8012658:	4603      	mov	r3, r0
 801265a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801265c:	6978      	ldr	r0, [r7, #20]
 801265e:	f7f9 f9d3 	bl	800ba08 <pbuf_free>
 8012662:	e001      	b.n	8012668 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012664:	23ff      	movs	r3, #255	; 0xff
 8012666:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	799b      	ldrb	r3, [r3, #6]
 801266c:	2bff      	cmp	r3, #255	; 0xff
 801266e:	d005      	beq.n	801267c <dhcp_decline+0xb0>
    dhcp->tries++;
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	799b      	ldrb	r3, [r3, #6]
 8012674:	3301      	adds	r3, #1
 8012676:	b2da      	uxtb	r2, r3
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801267c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012680:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012682:	89fb      	ldrh	r3, [r7, #14]
 8012684:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012688:	4a0a      	ldr	r2, [pc, #40]	; (80126b4 <dhcp_decline+0xe8>)
 801268a:	fb82 1203 	smull	r1, r2, r2, r3
 801268e:	1152      	asrs	r2, r2, #5
 8012690:	17db      	asrs	r3, r3, #31
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	b29a      	uxth	r2, r3
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801269a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3720      	adds	r7, #32
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bdb0      	pop	{r4, r5, r7, pc}
 80126a6:	bf00      	nop
 80126a8:	20000380 	.word	0x20000380
 80126ac:	0801dad4 	.word	0x0801dad4
 80126b0:	0801dad8 	.word	0x0801dad8
 80126b4:	10624dd3 	.word	0x10624dd3

080126b8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b08a      	sub	sp, #40	; 0x28
 80126bc:	af02      	add	r7, sp, #8
 80126be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80126c6:	2300      	movs	r3, #0
 80126c8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80126ca:	69bb      	ldr	r3, [r7, #24]
 80126cc:	2200      	movs	r2, #0
 80126ce:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80126d0:	2106      	movs	r1, #6
 80126d2:	69b8      	ldr	r0, [r7, #24]
 80126d4:	f000 fbf4 	bl	8012ec0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80126d8:	f107 0308 	add.w	r3, r7, #8
 80126dc:	2201      	movs	r2, #1
 80126de:	69b9      	ldr	r1, [r7, #24]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f001 f879 	bl	80137d8 <dhcp_create_msg>
 80126e6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d04b      	beq.n	8012786 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80126f4:	8938      	ldrh	r0, [r7, #8]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126fc:	2302      	movs	r3, #2
 80126fe:	2239      	movs	r2, #57	; 0x39
 8012700:	f000 fbf8 	bl	8012ef4 <dhcp_option>
 8012704:	4603      	mov	r3, r0
 8012706:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012708:	8938      	ldrh	r0, [r7, #8]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012714:	461a      	mov	r2, r3
 8012716:	f000 fc47 	bl	8012fa8 <dhcp_option_short>
 801271a:	4603      	mov	r3, r0
 801271c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801271e:	8938      	ldrh	r0, [r7, #8]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012726:	2303      	movs	r3, #3
 8012728:	2237      	movs	r2, #55	; 0x37
 801272a:	f000 fbe3 	bl	8012ef4 <dhcp_option>
 801272e:	4603      	mov	r3, r0
 8012730:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012732:	2300      	movs	r3, #0
 8012734:	77fb      	strb	r3, [r7, #31]
 8012736:	e00e      	b.n	8012756 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012738:	8938      	ldrh	r0, [r7, #8]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012740:	7ffb      	ldrb	r3, [r7, #31]
 8012742:	4a29      	ldr	r2, [pc, #164]	; (80127e8 <dhcp_discover+0x130>)
 8012744:	5cd3      	ldrb	r3, [r2, r3]
 8012746:	461a      	mov	r2, r3
 8012748:	f000 fc08 	bl	8012f5c <dhcp_option_byte>
 801274c:	4603      	mov	r3, r0
 801274e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012750:	7ffb      	ldrb	r3, [r7, #31]
 8012752:	3301      	adds	r3, #1
 8012754:	77fb      	strb	r3, [r7, #31]
 8012756:	7ffb      	ldrb	r3, [r7, #31]
 8012758:	2b02      	cmp	r3, #2
 801275a:	d9ed      	bls.n	8012738 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801275c:	8938      	ldrh	r0, [r7, #8]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	33f0      	adds	r3, #240	; 0xf0
 8012762:	693a      	ldr	r2, [r7, #16]
 8012764:	4619      	mov	r1, r3
 8012766:	f001 f90d 	bl	8013984 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801276a:	4b20      	ldr	r3, [pc, #128]	; (80127ec <dhcp_discover+0x134>)
 801276c:	6818      	ldr	r0, [r3, #0]
 801276e:	4b20      	ldr	r3, [pc, #128]	; (80127f0 <dhcp_discover+0x138>)
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	2343      	movs	r3, #67	; 0x43
 8012778:	4a1e      	ldr	r2, [pc, #120]	; (80127f4 <dhcp_discover+0x13c>)
 801277a:	6939      	ldr	r1, [r7, #16]
 801277c:	f7ff f878 	bl	8011870 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012780:	6938      	ldr	r0, [r7, #16]
 8012782:	f7f9 f941 	bl	800ba08 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	799b      	ldrb	r3, [r3, #6]
 801278a:	2bff      	cmp	r3, #255	; 0xff
 801278c:	d005      	beq.n	801279a <dhcp_discover+0xe2>
    dhcp->tries++;
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	799b      	ldrb	r3, [r3, #6]
 8012792:	3301      	adds	r3, #1
 8012794:	b2da      	uxtb	r2, r3
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801279a:	69bb      	ldr	r3, [r7, #24]
 801279c:	799b      	ldrb	r3, [r3, #6]
 801279e:	2b05      	cmp	r3, #5
 80127a0:	d80d      	bhi.n	80127be <dhcp_discover+0x106>
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	799b      	ldrb	r3, [r3, #6]
 80127a6:	461a      	mov	r2, r3
 80127a8:	2301      	movs	r3, #1
 80127aa:	4093      	lsls	r3, r2
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	461a      	mov	r2, r3
 80127b0:	0152      	lsls	r2, r2, #5
 80127b2:	1ad2      	subs	r2, r2, r3
 80127b4:	0092      	lsls	r2, r2, #2
 80127b6:	4413      	add	r3, r2
 80127b8:	00db      	lsls	r3, r3, #3
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	e001      	b.n	80127c2 <dhcp_discover+0x10a>
 80127be:	f64e 2360 	movw	r3, #60000	; 0xea60
 80127c2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127c4:	897b      	ldrh	r3, [r7, #10]
 80127c6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80127ca:	4a0b      	ldr	r2, [pc, #44]	; (80127f8 <dhcp_discover+0x140>)
 80127cc:	fb82 1203 	smull	r1, r2, r2, r3
 80127d0:	1152      	asrs	r2, r2, #5
 80127d2:	17db      	asrs	r3, r3, #31
 80127d4:	1ad3      	subs	r3, r2, r3
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80127dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3720      	adds	r7, #32
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	20000058 	.word	0x20000058
 80127ec:	20000380 	.word	0x20000380
 80127f0:	0801dad4 	.word	0x0801dad4
 80127f4:	0801dad8 	.word	0x0801dad8
 80127f8:	10624dd3 	.word	0x10624dd3

080127fc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b088      	sub	sp, #32
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d107      	bne.n	801281a <dhcp_bind+0x1e>
 801280a:	4b64      	ldr	r3, [pc, #400]	; (801299c <dhcp_bind+0x1a0>)
 801280c:	f240 4215 	movw	r2, #1045	; 0x415
 8012810:	4963      	ldr	r1, [pc, #396]	; (80129a0 <dhcp_bind+0x1a4>)
 8012812:	4864      	ldr	r0, [pc, #400]	; (80129a4 <dhcp_bind+0x1a8>)
 8012814:	f004 fa96 	bl	8016d44 <iprintf>
 8012818:	e0bc      	b.n	8012994 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d107      	bne.n	8012836 <dhcp_bind+0x3a>
 8012826:	4b5d      	ldr	r3, [pc, #372]	; (801299c <dhcp_bind+0x1a0>)
 8012828:	f240 4217 	movw	r2, #1047	; 0x417
 801282c:	495e      	ldr	r1, [pc, #376]	; (80129a8 <dhcp_bind+0x1ac>)
 801282e:	485d      	ldr	r0, [pc, #372]	; (80129a4 <dhcp_bind+0x1a8>)
 8012830:	f004 fa88 	bl	8016d44 <iprintf>
 8012834:	e0ae      	b.n	8012994 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	2200      	movs	r2, #0
 801283a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012844:	d019      	beq.n	801287a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284a:	331e      	adds	r3, #30
 801284c:	4a57      	ldr	r2, [pc, #348]	; (80129ac <dhcp_bind+0x1b0>)
 801284e:	fba2 2303 	umull	r2, r3, r2, r3
 8012852:	095b      	lsrs	r3, r3, #5
 8012854:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801285c:	d302      	bcc.n	8012864 <dhcp_bind+0x68>
      timeout = 0xffff;
 801285e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012862:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	b29a      	uxth	r2, r3
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	8a9b      	ldrh	r3, [r3, #20]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d102      	bne.n	801287a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	2201      	movs	r2, #1
 8012878:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012882:	d01d      	beq.n	80128c0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012884:	69bb      	ldr	r3, [r7, #24]
 8012886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012888:	331e      	adds	r3, #30
 801288a:	4a48      	ldr	r2, [pc, #288]	; (80129ac <dhcp_bind+0x1b0>)
 801288c:	fba2 2303 	umull	r2, r3, r2, r3
 8012890:	095b      	lsrs	r3, r3, #5
 8012892:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801289a:	d302      	bcc.n	80128a2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801289c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80128a0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	895b      	ldrh	r3, [r3, #10]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d102      	bne.n	80128b8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	2201      	movs	r2, #1
 80128b6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	895a      	ldrh	r2, [r3, #10]
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80128c0:	69bb      	ldr	r3, [r7, #24]
 80128c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c8:	d01d      	beq.n	8012906 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ce:	331e      	adds	r3, #30
 80128d0:	4a36      	ldr	r2, [pc, #216]	; (80129ac <dhcp_bind+0x1b0>)
 80128d2:	fba2 2303 	umull	r2, r3, r2, r3
 80128d6:	095b      	lsrs	r3, r3, #5
 80128d8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80128da:	69fb      	ldr	r3, [r7, #28]
 80128dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128e0:	d302      	bcc.n	80128e8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80128e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80128e6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	899b      	ldrh	r3, [r3, #12]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d102      	bne.n	80128fe <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80128f8:	69bb      	ldr	r3, [r7, #24]
 80128fa:	2201      	movs	r2, #1
 80128fc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	899a      	ldrh	r2, [r3, #12]
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	895a      	ldrh	r2, [r3, #10]
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	899b      	ldrh	r3, [r3, #12]
 801290e:	429a      	cmp	r2, r3
 8012910:	d306      	bcc.n	8012920 <dhcp_bind+0x124>
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	899b      	ldrh	r3, [r3, #12]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d002      	beq.n	8012920 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	2200      	movs	r2, #0
 801291e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012920:	69bb      	ldr	r3, [r7, #24]
 8012922:	79db      	ldrb	r3, [r3, #7]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d003      	beq.n	8012930 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	6a1b      	ldr	r3, [r3, #32]
 801292c:	613b      	str	r3, [r7, #16]
 801292e:	e014      	b.n	801295a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	331c      	adds	r3, #28
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801293c:	2b00      	cmp	r3, #0
 801293e:	db02      	blt.n	8012946 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012940:	23ff      	movs	r3, #255	; 0xff
 8012942:	613b      	str	r3, [r7, #16]
 8012944:	e009      	b.n	801295a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012946:	7dfb      	ldrb	r3, [r7, #23]
 8012948:	2bbf      	cmp	r3, #191	; 0xbf
 801294a:	d903      	bls.n	8012954 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801294c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012950:	613b      	str	r3, [r7, #16]
 8012952:	e002      	b.n	801295a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012958:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801295e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d108      	bne.n	8012978 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	69da      	ldr	r2, [r3, #28]
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	4013      	ands	r3, r2
 801296e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012976:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012978:	210a      	movs	r1, #10
 801297a:	69b8      	ldr	r0, [r7, #24]
 801297c:	f000 faa0 	bl	8012ec0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	f103 011c 	add.w	r1, r3, #28
 8012986:	f107 030c 	add.w	r3, r7, #12
 801298a:	f107 0210 	add.w	r2, r7, #16
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7f8 fbe2 	bl	800b158 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012994:	3720      	adds	r7, #32
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	0801cf78 	.word	0x0801cf78
 80129a0:	0801d0d8 	.word	0x0801d0d8
 80129a4:	0801cfd8 	.word	0x0801cfd8
 80129a8:	0801d0f4 	.word	0x0801d0f4
 80129ac:	88888889 	.word	0x88888889

080129b0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b08a      	sub	sp, #40	; 0x28
 80129b4:	af02      	add	r7, sp, #8
 80129b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129bc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80129be:	2105      	movs	r1, #5
 80129c0:	69b8      	ldr	r0, [r7, #24]
 80129c2:	f000 fa7d 	bl	8012ec0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80129c6:	f107 030c 	add.w	r3, r7, #12
 80129ca:	2203      	movs	r2, #3
 80129cc:	69b9      	ldr	r1, [r7, #24]
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 ff02 	bl	80137d8 <dhcp_create_msg>
 80129d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d04e      	beq.n	8012a7a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80129e2:	89b8      	ldrh	r0, [r7, #12]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129ea:	2302      	movs	r3, #2
 80129ec:	2239      	movs	r2, #57	; 0x39
 80129ee:	f000 fa81 	bl	8012ef4 <dhcp_option>
 80129f2:	4603      	mov	r3, r0
 80129f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80129f6:	89b8      	ldrh	r0, [r7, #12]
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a02:	461a      	mov	r2, r3
 8012a04:	f000 fad0 	bl	8012fa8 <dhcp_option_short>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012a0c:	89b8      	ldrh	r0, [r7, #12]
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a14:	2303      	movs	r3, #3
 8012a16:	2237      	movs	r2, #55	; 0x37
 8012a18:	f000 fa6c 	bl	8012ef4 <dhcp_option>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a20:	2300      	movs	r3, #0
 8012a22:	77bb      	strb	r3, [r7, #30]
 8012a24:	e00e      	b.n	8012a44 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012a26:	89b8      	ldrh	r0, [r7, #12]
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a2e:	7fbb      	ldrb	r3, [r7, #30]
 8012a30:	4a2a      	ldr	r2, [pc, #168]	; (8012adc <dhcp_renew+0x12c>)
 8012a32:	5cd3      	ldrb	r3, [r2, r3]
 8012a34:	461a      	mov	r2, r3
 8012a36:	f000 fa91 	bl	8012f5c <dhcp_option_byte>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a3e:	7fbb      	ldrb	r3, [r7, #30]
 8012a40:	3301      	adds	r3, #1
 8012a42:	77bb      	strb	r3, [r7, #30]
 8012a44:	7fbb      	ldrb	r3, [r7, #30]
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d9ed      	bls.n	8012a26 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012a4a:	89b8      	ldrh	r0, [r7, #12]
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	33f0      	adds	r3, #240	; 0xf0
 8012a50:	697a      	ldr	r2, [r7, #20]
 8012a52:	4619      	mov	r1, r3
 8012a54:	f000 ff96 	bl	8013984 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012a58:	4b21      	ldr	r3, [pc, #132]	; (8012ae0 <dhcp_renew+0x130>)
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	69bb      	ldr	r3, [r7, #24]
 8012a5e:	f103 0218 	add.w	r2, r3, #24
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	2343      	movs	r3, #67	; 0x43
 8012a68:	6979      	ldr	r1, [r7, #20]
 8012a6a:	f7fe fe8d 	bl	8011788 <udp_sendto_if>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012a72:	6978      	ldr	r0, [r7, #20]
 8012a74:	f7f8 ffc8 	bl	800ba08 <pbuf_free>
 8012a78:	e001      	b.n	8012a7e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012a7a:	23ff      	movs	r3, #255	; 0xff
 8012a7c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012a7e:	69bb      	ldr	r3, [r7, #24]
 8012a80:	799b      	ldrb	r3, [r3, #6]
 8012a82:	2bff      	cmp	r3, #255	; 0xff
 8012a84:	d005      	beq.n	8012a92 <dhcp_renew+0xe2>
    dhcp->tries++;
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	799b      	ldrb	r3, [r3, #6]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	b2da      	uxtb	r2, r3
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	799b      	ldrb	r3, [r3, #6]
 8012a96:	2b09      	cmp	r3, #9
 8012a98:	d80a      	bhi.n	8012ab0 <dhcp_renew+0x100>
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	799b      	ldrb	r3, [r3, #6]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	0152      	lsls	r2, r2, #5
 8012aa4:	1ad2      	subs	r2, r2, r3
 8012aa6:	0092      	lsls	r2, r2, #2
 8012aa8:	4413      	add	r3, r2
 8012aaa:	011b      	lsls	r3, r3, #4
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	e001      	b.n	8012ab4 <dhcp_renew+0x104>
 8012ab0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012ab4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012ab6:	89fb      	ldrh	r3, [r7, #14]
 8012ab8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012abc:	4a09      	ldr	r2, [pc, #36]	; (8012ae4 <dhcp_renew+0x134>)
 8012abe:	fb82 1203 	smull	r1, r2, r2, r3
 8012ac2:	1152      	asrs	r2, r2, #5
 8012ac4:	17db      	asrs	r3, r3, #31
 8012ac6:	1ad3      	subs	r3, r2, r3
 8012ac8:	b29a      	uxth	r2, r3
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3720      	adds	r7, #32
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	20000058 	.word	0x20000058
 8012ae0:	20000380 	.word	0x20000380
 8012ae4:	10624dd3 	.word	0x10624dd3

08012ae8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08a      	sub	sp, #40	; 0x28
 8012aec:	af02      	add	r7, sp, #8
 8012aee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012af4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012af6:	2104      	movs	r1, #4
 8012af8:	69b8      	ldr	r0, [r7, #24]
 8012afa:	f000 f9e1 	bl	8012ec0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012afe:	f107 030c 	add.w	r3, r7, #12
 8012b02:	2203      	movs	r2, #3
 8012b04:	69b9      	ldr	r1, [r7, #24]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 fe66 	bl	80137d8 <dhcp_create_msg>
 8012b0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d04c      	beq.n	8012bae <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b1a:	89b8      	ldrh	r0, [r7, #12]
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b22:	2302      	movs	r3, #2
 8012b24:	2239      	movs	r2, #57	; 0x39
 8012b26:	f000 f9e5 	bl	8012ef4 <dhcp_option>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012b2e:	89b8      	ldrh	r0, [r7, #12]
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	f000 fa34 	bl	8012fa8 <dhcp_option_short>
 8012b40:	4603      	mov	r3, r0
 8012b42:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b44:	89b8      	ldrh	r0, [r7, #12]
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b4c:	2303      	movs	r3, #3
 8012b4e:	2237      	movs	r2, #55	; 0x37
 8012b50:	f000 f9d0 	bl	8012ef4 <dhcp_option>
 8012b54:	4603      	mov	r3, r0
 8012b56:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b58:	2300      	movs	r3, #0
 8012b5a:	77bb      	strb	r3, [r7, #30]
 8012b5c:	e00e      	b.n	8012b7c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b5e:	89b8      	ldrh	r0, [r7, #12]
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b66:	7fbb      	ldrb	r3, [r7, #30]
 8012b68:	4a29      	ldr	r2, [pc, #164]	; (8012c10 <dhcp_rebind+0x128>)
 8012b6a:	5cd3      	ldrb	r3, [r2, r3]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	f000 f9f5 	bl	8012f5c <dhcp_option_byte>
 8012b72:	4603      	mov	r3, r0
 8012b74:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b76:	7fbb      	ldrb	r3, [r7, #30]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	77bb      	strb	r3, [r7, #30]
 8012b7c:	7fbb      	ldrb	r3, [r7, #30]
 8012b7e:	2b02      	cmp	r3, #2
 8012b80:	d9ed      	bls.n	8012b5e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b82:	89b8      	ldrh	r0, [r7, #12]
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	33f0      	adds	r3, #240	; 0xf0
 8012b88:	697a      	ldr	r2, [r7, #20]
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	f000 fefa 	bl	8013984 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012b90:	4b20      	ldr	r3, [pc, #128]	; (8012c14 <dhcp_rebind+0x12c>)
 8012b92:	6818      	ldr	r0, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	2343      	movs	r3, #67	; 0x43
 8012b9a:	4a1f      	ldr	r2, [pc, #124]	; (8012c18 <dhcp_rebind+0x130>)
 8012b9c:	6979      	ldr	r1, [r7, #20]
 8012b9e:	f7fe fdf3 	bl	8011788 <udp_sendto_if>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ba6:	6978      	ldr	r0, [r7, #20]
 8012ba8:	f7f8 ff2e 	bl	800ba08 <pbuf_free>
 8012bac:	e001      	b.n	8012bb2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012bae:	23ff      	movs	r3, #255	; 0xff
 8012bb0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	799b      	ldrb	r3, [r3, #6]
 8012bb6:	2bff      	cmp	r3, #255	; 0xff
 8012bb8:	d005      	beq.n	8012bc6 <dhcp_rebind+0xde>
    dhcp->tries++;
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	799b      	ldrb	r3, [r3, #6]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	799b      	ldrb	r3, [r3, #6]
 8012bca:	2b09      	cmp	r3, #9
 8012bcc:	d80a      	bhi.n	8012be4 <dhcp_rebind+0xfc>
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	799b      	ldrb	r3, [r3, #6]
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	0152      	lsls	r2, r2, #5
 8012bd8:	1ad2      	subs	r2, r2, r3
 8012bda:	0092      	lsls	r2, r2, #2
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	e001      	b.n	8012be8 <dhcp_rebind+0x100>
 8012be4:	f242 7310 	movw	r3, #10000	; 0x2710
 8012be8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bea:	89fb      	ldrh	r3, [r7, #14]
 8012bec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bf0:	4a0a      	ldr	r2, [pc, #40]	; (8012c1c <dhcp_rebind+0x134>)
 8012bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8012bf6:	1152      	asrs	r2, r2, #5
 8012bf8:	17db      	asrs	r3, r3, #31
 8012bfa:	1ad3      	subs	r3, r2, r3
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3720      	adds	r7, #32
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	20000058 	.word	0x20000058
 8012c14:	20000380 	.word	0x20000380
 8012c18:	0801dad8 	.word	0x0801dad8
 8012c1c:	10624dd3 	.word	0x10624dd3

08012c20 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012c20:	b5b0      	push	{r4, r5, r7, lr}
 8012c22:	b08a      	sub	sp, #40	; 0x28
 8012c24:	af02      	add	r7, sp, #8
 8012c26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012c2e:	2103      	movs	r1, #3
 8012c30:	69b8      	ldr	r0, [r7, #24]
 8012c32:	f000 f945 	bl	8012ec0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	2203      	movs	r2, #3
 8012c3c:	69b9      	ldr	r1, [r7, #24]
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fdca 	bl	80137d8 <dhcp_create_msg>
 8012c44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d066      	beq.n	8012d1a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c52:	89b8      	ldrh	r0, [r7, #12]
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c5a:	2302      	movs	r3, #2
 8012c5c:	2239      	movs	r2, #57	; 0x39
 8012c5e:	f000 f949 	bl	8012ef4 <dhcp_option>
 8012c62:	4603      	mov	r3, r0
 8012c64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012c66:	89b8      	ldrh	r0, [r7, #12]
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	33f0      	adds	r3, #240	; 0xf0
 8012c6c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012c70:	4619      	mov	r1, r3
 8012c72:	f000 f999 	bl	8012fa8 <dhcp_option_short>
 8012c76:	4603      	mov	r3, r0
 8012c78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012c7a:	89b8      	ldrh	r0, [r7, #12]
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c82:	2304      	movs	r3, #4
 8012c84:	2232      	movs	r2, #50	; 0x32
 8012c86:	f000 f935 	bl	8012ef4 <dhcp_option>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012c8e:	89bc      	ldrh	r4, [r7, #12]
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	69db      	ldr	r3, [r3, #28]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7f7 fc2d 	bl	800a4fa <lwip_htonl>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	4629      	mov	r1, r5
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f000 f9b0 	bl	801300c <dhcp_option_long>
 8012cac:	4603      	mov	r3, r0
 8012cae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012cb0:	89b8      	ldrh	r0, [r7, #12]
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cb8:	2303      	movs	r3, #3
 8012cba:	2237      	movs	r2, #55	; 0x37
 8012cbc:	f000 f91a 	bl	8012ef4 <dhcp_option>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	77bb      	strb	r3, [r7, #30]
 8012cc8:	e00e      	b.n	8012ce8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012cca:	89b8      	ldrh	r0, [r7, #12]
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cd2:	7fbb      	ldrb	r3, [r7, #30]
 8012cd4:	4a29      	ldr	r2, [pc, #164]	; (8012d7c <dhcp_reboot+0x15c>)
 8012cd6:	5cd3      	ldrb	r3, [r2, r3]
 8012cd8:	461a      	mov	r2, r3
 8012cda:	f000 f93f 	bl	8012f5c <dhcp_option_byte>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ce2:	7fbb      	ldrb	r3, [r7, #30]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	77bb      	strb	r3, [r7, #30]
 8012ce8:	7fbb      	ldrb	r3, [r7, #30]
 8012cea:	2b02      	cmp	r3, #2
 8012cec:	d9ed      	bls.n	8012cca <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012cee:	89b8      	ldrh	r0, [r7, #12]
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	33f0      	adds	r3, #240	; 0xf0
 8012cf4:	697a      	ldr	r2, [r7, #20]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	f000 fe44 	bl	8013984 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012cfc:	4b20      	ldr	r3, [pc, #128]	; (8012d80 <dhcp_reboot+0x160>)
 8012cfe:	6818      	ldr	r0, [r3, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	2343      	movs	r3, #67	; 0x43
 8012d06:	4a1f      	ldr	r2, [pc, #124]	; (8012d84 <dhcp_reboot+0x164>)
 8012d08:	6979      	ldr	r1, [r7, #20]
 8012d0a:	f7fe fd3d 	bl	8011788 <udp_sendto_if>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012d12:	6978      	ldr	r0, [r7, #20]
 8012d14:	f7f8 fe78 	bl	800ba08 <pbuf_free>
 8012d18:	e001      	b.n	8012d1e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012d1a:	23ff      	movs	r3, #255	; 0xff
 8012d1c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	799b      	ldrb	r3, [r3, #6]
 8012d22:	2bff      	cmp	r3, #255	; 0xff
 8012d24:	d005      	beq.n	8012d32 <dhcp_reboot+0x112>
    dhcp->tries++;
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	799b      	ldrb	r3, [r3, #6]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	799b      	ldrb	r3, [r3, #6]
 8012d36:	2b09      	cmp	r3, #9
 8012d38:	d80a      	bhi.n	8012d50 <dhcp_reboot+0x130>
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	799b      	ldrb	r3, [r3, #6]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	461a      	mov	r2, r3
 8012d42:	0152      	lsls	r2, r2, #5
 8012d44:	1ad2      	subs	r2, r2, r3
 8012d46:	0092      	lsls	r2, r2, #2
 8012d48:	4413      	add	r3, r2
 8012d4a:	00db      	lsls	r3, r3, #3
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	e001      	b.n	8012d54 <dhcp_reboot+0x134>
 8012d50:	f242 7310 	movw	r3, #10000	; 0x2710
 8012d54:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012d56:	89fb      	ldrh	r3, [r7, #14]
 8012d58:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012d5c:	4a0a      	ldr	r2, [pc, #40]	; (8012d88 <dhcp_reboot+0x168>)
 8012d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8012d62:	1152      	asrs	r2, r2, #5
 8012d64:	17db      	asrs	r3, r3, #31
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	69bb      	ldr	r3, [r7, #24]
 8012d6c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3720      	adds	r7, #32
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bdb0      	pop	{r4, r5, r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	20000058 	.word	0x20000058
 8012d80:	20000380 	.word	0x20000380
 8012d84:	0801dad8 	.word	0x0801dad8
 8012d88:	10624dd3 	.word	0x10624dd3

08012d8c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012d8c:	b5b0      	push	{r4, r5, r7, lr}
 8012d8e:	b08a      	sub	sp, #40	; 0x28
 8012d90:	af02      	add	r7, sp, #8
 8012d92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d98:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f000 8084 	beq.w	8012eaa <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	795b      	ldrb	r3, [r3, #5]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f000 8081 	beq.w	8012eae <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	699b      	ldr	r3, [r3, #24]
 8012db0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	2200      	movs	r2, #0
 8012db6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	631a      	str	r2, [r3, #48]	; 0x30
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	2200      	movs	r2, #0
 8012de4:	829a      	strh	r2, [r3, #20]
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	8a9a      	ldrh	r2, [r3, #20]
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	825a      	strh	r2, [r3, #18]
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	8a5a      	ldrh	r2, [r3, #18]
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	821a      	strh	r2, [r3, #16]
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	8a1a      	ldrh	r2, [r3, #16]
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f000 fdee 	bl	80139e0 <dhcp_supplied_address>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d03b      	beq.n	8012e82 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012e0a:	f107 030e 	add.w	r3, r7, #14
 8012e0e:	2207      	movs	r2, #7
 8012e10:	69f9      	ldr	r1, [r7, #28]
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f000 fce0 	bl	80137d8 <dhcp_create_msg>
 8012e18:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d030      	beq.n	8012e82 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012e26:	89f8      	ldrh	r0, [r7, #14]
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e2e:	2304      	movs	r3, #4
 8012e30:	2236      	movs	r2, #54	; 0x36
 8012e32:	f000 f85f 	bl	8012ef4 <dhcp_option>
 8012e36:	4603      	mov	r3, r0
 8012e38:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012e3a:	89fc      	ldrh	r4, [r7, #14]
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f7 fb58 	bl	800a4fa <lwip_htonl>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	4629      	mov	r1, r5
 8012e50:	4620      	mov	r0, r4
 8012e52:	f000 f8db 	bl	801300c <dhcp_option_long>
 8012e56:	4603      	mov	r3, r0
 8012e58:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e5a:	89f8      	ldrh	r0, [r7, #14]
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	33f0      	adds	r3, #240	; 0xf0
 8012e60:	69ba      	ldr	r2, [r7, #24]
 8012e62:	4619      	mov	r1, r3
 8012e64:	f000 fd8e 	bl	8013984 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012e68:	4b13      	ldr	r3, [pc, #76]	; (8012eb8 <dhcp_release_and_stop+0x12c>)
 8012e6a:	6818      	ldr	r0, [r3, #0]
 8012e6c:	f107 0210 	add.w	r2, r7, #16
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	2343      	movs	r3, #67	; 0x43
 8012e76:	69b9      	ldr	r1, [r7, #24]
 8012e78:	f7fe fc86 	bl	8011788 <udp_sendto_if>
      pbuf_free(p_out);
 8012e7c:	69b8      	ldr	r0, [r7, #24]
 8012e7e:	f7f8 fdc3 	bl	800ba08 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012e82:	4b0e      	ldr	r3, [pc, #56]	; (8012ebc <dhcp_release_and_stop+0x130>)
 8012e84:	4a0d      	ldr	r2, [pc, #52]	; (8012ebc <dhcp_release_and_stop+0x130>)
 8012e86:	490d      	ldr	r1, [pc, #52]	; (8012ebc <dhcp_release_and_stop+0x130>)
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f7f8 f965 	bl	800b158 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012e8e:	2100      	movs	r1, #0
 8012e90:	69f8      	ldr	r0, [r7, #28]
 8012e92:	f000 f815 	bl	8012ec0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	791b      	ldrb	r3, [r3, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d008      	beq.n	8012eb0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012e9e:	f7fe ffbf 	bl	8011e20 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	711a      	strb	r2, [r3, #4]
 8012ea8:	e002      	b.n	8012eb0 <dhcp_release_and_stop+0x124>
    return;
 8012eaa:	bf00      	nop
 8012eac:	e000      	b.n	8012eb0 <dhcp_release_and_stop+0x124>
    return;
 8012eae:	bf00      	nop
  }
}
 8012eb0:	3720      	adds	r7, #32
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	20000380 	.word	0x20000380
 8012ebc:	0801dad4 	.word	0x0801dad4

08012ec0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	795b      	ldrb	r3, [r3, #5]
 8012ed0:	78fa      	ldrb	r2, [r7, #3]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d008      	beq.n	8012ee8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	78fa      	ldrb	r2, [r7, #3]
 8012eda:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	811a      	strh	r2, [r3, #8]
  }
}
 8012ee8:	bf00      	nop
 8012eea:	370c      	adds	r7, #12
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr

08012ef4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6039      	str	r1, [r7, #0]
 8012efc:	4611      	mov	r1, r2
 8012efe:	461a      	mov	r2, r3
 8012f00:	4603      	mov	r3, r0
 8012f02:	80fb      	strh	r3, [r7, #6]
 8012f04:	460b      	mov	r3, r1
 8012f06:	717b      	strb	r3, [r7, #5]
 8012f08:	4613      	mov	r3, r2
 8012f0a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012f0c:	88fa      	ldrh	r2, [r7, #6]
 8012f0e:	793b      	ldrb	r3, [r7, #4]
 8012f10:	4413      	add	r3, r2
 8012f12:	3302      	adds	r3, #2
 8012f14:	2b44      	cmp	r3, #68	; 0x44
 8012f16:	d906      	bls.n	8012f26 <dhcp_option+0x32>
 8012f18:	4b0d      	ldr	r3, [pc, #52]	; (8012f50 <dhcp_option+0x5c>)
 8012f1a:	f240 529a 	movw	r2, #1434	; 0x59a
 8012f1e:	490d      	ldr	r1, [pc, #52]	; (8012f54 <dhcp_option+0x60>)
 8012f20:	480d      	ldr	r0, [pc, #52]	; (8012f58 <dhcp_option+0x64>)
 8012f22:	f003 ff0f 	bl	8016d44 <iprintf>
  options[options_out_len++] = option_type;
 8012f26:	88fb      	ldrh	r3, [r7, #6]
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	80fa      	strh	r2, [r7, #6]
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	4413      	add	r3, r2
 8012f32:	797a      	ldrb	r2, [r7, #5]
 8012f34:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012f36:	88fb      	ldrh	r3, [r7, #6]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	80fa      	strh	r2, [r7, #6]
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	4413      	add	r3, r2
 8012f42:	793a      	ldrb	r2, [r7, #4]
 8012f44:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012f46:	88fb      	ldrh	r3, [r7, #6]
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	0801cf78 	.word	0x0801cf78
 8012f54:	0801d10c 	.word	0x0801d10c
 8012f58:	0801cfd8 	.word	0x0801cfd8

08012f5c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	4603      	mov	r3, r0
 8012f64:	6039      	str	r1, [r7, #0]
 8012f66:	80fb      	strh	r3, [r7, #6]
 8012f68:	4613      	mov	r3, r2
 8012f6a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012f6c:	88fb      	ldrh	r3, [r7, #6]
 8012f6e:	2b43      	cmp	r3, #67	; 0x43
 8012f70:	d906      	bls.n	8012f80 <dhcp_option_byte+0x24>
 8012f72:	4b0a      	ldr	r3, [pc, #40]	; (8012f9c <dhcp_option_byte+0x40>)
 8012f74:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8012f78:	4909      	ldr	r1, [pc, #36]	; (8012fa0 <dhcp_option_byte+0x44>)
 8012f7a:	480a      	ldr	r0, [pc, #40]	; (8012fa4 <dhcp_option_byte+0x48>)
 8012f7c:	f003 fee2 	bl	8016d44 <iprintf>
  options[options_out_len++] = value;
 8012f80:	88fb      	ldrh	r3, [r7, #6]
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	80fa      	strh	r2, [r7, #6]
 8012f86:	461a      	mov	r2, r3
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	4413      	add	r3, r2
 8012f8c:	797a      	ldrb	r2, [r7, #5]
 8012f8e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012f90:	88fb      	ldrh	r3, [r7, #6]
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	0801cf78 	.word	0x0801cf78
 8012fa0:	0801d150 	.word	0x0801d150
 8012fa4:	0801cfd8 	.word	0x0801cfd8

08012fa8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	80fb      	strh	r3, [r7, #6]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012fb8:	88fb      	ldrh	r3, [r7, #6]
 8012fba:	3302      	adds	r3, #2
 8012fbc:	2b44      	cmp	r3, #68	; 0x44
 8012fbe:	d906      	bls.n	8012fce <dhcp_option_short+0x26>
 8012fc0:	4b0f      	ldr	r3, [pc, #60]	; (8013000 <dhcp_option_short+0x58>)
 8012fc2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012fc6:	490f      	ldr	r1, [pc, #60]	; (8013004 <dhcp_option_short+0x5c>)
 8012fc8:	480f      	ldr	r0, [pc, #60]	; (8013008 <dhcp_option_short+0x60>)
 8012fca:	f003 febb 	bl	8016d44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012fce:	88bb      	ldrh	r3, [r7, #4]
 8012fd0:	0a1b      	lsrs	r3, r3, #8
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	88fb      	ldrh	r3, [r7, #6]
 8012fd6:	1c59      	adds	r1, r3, #1
 8012fd8:	80f9      	strh	r1, [r7, #6]
 8012fda:	4619      	mov	r1, r3
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	440b      	add	r3, r1
 8012fe0:	b2d2      	uxtb	r2, r2
 8012fe2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012fe4:	88fb      	ldrh	r3, [r7, #6]
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	80fa      	strh	r2, [r7, #6]
 8012fea:	461a      	mov	r2, r3
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	4413      	add	r3, r2
 8012ff0:	88ba      	ldrh	r2, [r7, #4]
 8012ff2:	b2d2      	uxtb	r2, r2
 8012ff4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012ff6:	88fb      	ldrh	r3, [r7, #6]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	0801cf78 	.word	0x0801cf78
 8013004:	0801d188 	.word	0x0801d188
 8013008:	0801cfd8 	.word	0x0801cfd8

0801300c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
 8013018:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801301a:	89fb      	ldrh	r3, [r7, #14]
 801301c:	3304      	adds	r3, #4
 801301e:	2b44      	cmp	r3, #68	; 0x44
 8013020:	d906      	bls.n	8013030 <dhcp_option_long+0x24>
 8013022:	4b19      	ldr	r3, [pc, #100]	; (8013088 <dhcp_option_long+0x7c>)
 8013024:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013028:	4918      	ldr	r1, [pc, #96]	; (801308c <dhcp_option_long+0x80>)
 801302a:	4819      	ldr	r0, [pc, #100]	; (8013090 <dhcp_option_long+0x84>)
 801302c:	f003 fe8a 	bl	8016d44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	0e1a      	lsrs	r2, r3, #24
 8013034:	89fb      	ldrh	r3, [r7, #14]
 8013036:	1c59      	adds	r1, r3, #1
 8013038:	81f9      	strh	r1, [r7, #14]
 801303a:	4619      	mov	r1, r3
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	440b      	add	r3, r1
 8013040:	b2d2      	uxtb	r2, r2
 8013042:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	0c1a      	lsrs	r2, r3, #16
 8013048:	89fb      	ldrh	r3, [r7, #14]
 801304a:	1c59      	adds	r1, r3, #1
 801304c:	81f9      	strh	r1, [r7, #14]
 801304e:	4619      	mov	r1, r3
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	440b      	add	r3, r1
 8013054:	b2d2      	uxtb	r2, r2
 8013056:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	0a1a      	lsrs	r2, r3, #8
 801305c:	89fb      	ldrh	r3, [r7, #14]
 801305e:	1c59      	adds	r1, r3, #1
 8013060:	81f9      	strh	r1, [r7, #14]
 8013062:	4619      	mov	r1, r3
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	440b      	add	r3, r1
 8013068:	b2d2      	uxtb	r2, r2
 801306a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801306c:	89fb      	ldrh	r3, [r7, #14]
 801306e:	1c5a      	adds	r2, r3, #1
 8013070:	81fa      	strh	r2, [r7, #14]
 8013072:	461a      	mov	r2, r3
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	4413      	add	r3, r2
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	b2d2      	uxtb	r2, r2
 801307c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801307e:	89fb      	ldrh	r3, [r7, #14]
}
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	0801cf78 	.word	0x0801cf78
 801308c:	0801d1c4 	.word	0x0801d1c4
 8013090:	0801cfd8 	.word	0x0801cfd8

08013094 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b090      	sub	sp, #64	; 0x40
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801309e:	2300      	movs	r3, #0
 80130a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80130a2:	2300      	movs	r3, #0
 80130a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80130a6:	2208      	movs	r2, #8
 80130a8:	2100      	movs	r1, #0
 80130aa:	48be      	ldr	r0, [pc, #760]	; (80133a4 <dhcp_parse_reply+0x310>)
 80130ac:	f002 fffa 	bl	80160a4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	895b      	ldrh	r3, [r3, #10]
 80130b4:	2b2b      	cmp	r3, #43	; 0x2b
 80130b6:	d802      	bhi.n	80130be <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80130b8:	f06f 0301 	mvn.w	r3, #1
 80130bc:	e2a8      	b.n	8013610 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80130c4:	23f0      	movs	r3, #240	; 0xf0
 80130c6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	891b      	ldrh	r3, [r3, #8]
 80130cc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80130d2:	e00c      	b.n	80130ee <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80130d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d6:	895b      	ldrh	r3, [r3, #10]
 80130d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130da:	1ad3      	subs	r3, r2, r3
 80130dc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	895b      	ldrh	r3, [r3, #10]
 80130e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80130e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80130ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d004      	beq.n	80130fe <dhcp_parse_reply+0x6a>
 80130f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f6:	895b      	ldrh	r3, [r3, #10]
 80130f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d2ea      	bcs.n	80130d4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013104:	f06f 0301 	mvn.w	r3, #1
 8013108:	e282      	b.n	8013610 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801310a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801310c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801310e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013110:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013118:	e23a      	b.n	8013590 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801311a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801311c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801311e:	4413      	add	r3, r2
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013124:	2300      	movs	r3, #0
 8013126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801312a:	f04f 33ff 	mov.w	r3, #4294967295
 801312e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013130:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013132:	3302      	adds	r3, #2
 8013134:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013136:	8bfa      	ldrh	r2, [r7, #30]
 8013138:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801313a:	429a      	cmp	r2, r3
 801313c:	d202      	bcs.n	8013144 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801313e:	f06f 0301 	mvn.w	r3, #1
 8013142:	e265      	b.n	8013610 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013144:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013146:	3301      	adds	r3, #1
 8013148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314a:	8952      	ldrh	r2, [r2, #10]
 801314c:	4293      	cmp	r3, r2
 801314e:	da07      	bge.n	8013160 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013150:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013152:	3301      	adds	r3, #1
 8013154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013156:	4413      	add	r3, r2
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801315e:	e00b      	b.n	8013178 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d004      	beq.n	8013172 <dhcp_parse_reply+0xde>
 8013168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	e000      	b.n	8013174 <dhcp_parse_reply+0xe0>
 8013172:	2300      	movs	r3, #0
 8013174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801317c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013180:	7dfb      	ldrb	r3, [r7, #23]
 8013182:	2b3b      	cmp	r3, #59	; 0x3b
 8013184:	f200 812d 	bhi.w	80133e2 <dhcp_parse_reply+0x34e>
 8013188:	a201      	add	r2, pc, #4	; (adr r2, 8013190 <dhcp_parse_reply+0xfc>)
 801318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801318e:	bf00      	nop
 8013190:	08013281 	.word	0x08013281
 8013194:	08013291 	.word	0x08013291
 8013198:	080133e3 	.word	0x080133e3
 801319c:	080132b3 	.word	0x080132b3
 80131a0:	080133e3 	.word	0x080133e3
 80131a4:	080133e3 	.word	0x080133e3
 80131a8:	080133e3 	.word	0x080133e3
 80131ac:	080133e3 	.word	0x080133e3
 80131b0:	080133e3 	.word	0x080133e3
 80131b4:	080133e3 	.word	0x080133e3
 80131b8:	080133e3 	.word	0x080133e3
 80131bc:	080133e3 	.word	0x080133e3
 80131c0:	080133e3 	.word	0x080133e3
 80131c4:	080133e3 	.word	0x080133e3
 80131c8:	080133e3 	.word	0x080133e3
 80131cc:	080133e3 	.word	0x080133e3
 80131d0:	080133e3 	.word	0x080133e3
 80131d4:	080133e3 	.word	0x080133e3
 80131d8:	080133e3 	.word	0x080133e3
 80131dc:	080133e3 	.word	0x080133e3
 80131e0:	080133e3 	.word	0x080133e3
 80131e4:	080133e3 	.word	0x080133e3
 80131e8:	080133e3 	.word	0x080133e3
 80131ec:	080133e3 	.word	0x080133e3
 80131f0:	080133e3 	.word	0x080133e3
 80131f4:	080133e3 	.word	0x080133e3
 80131f8:	080133e3 	.word	0x080133e3
 80131fc:	080133e3 	.word	0x080133e3
 8013200:	080133e3 	.word	0x080133e3
 8013204:	080133e3 	.word	0x080133e3
 8013208:	080133e3 	.word	0x080133e3
 801320c:	080133e3 	.word	0x080133e3
 8013210:	080133e3 	.word	0x080133e3
 8013214:	080133e3 	.word	0x080133e3
 8013218:	080133e3 	.word	0x080133e3
 801321c:	080133e3 	.word	0x080133e3
 8013220:	080133e3 	.word	0x080133e3
 8013224:	080133e3 	.word	0x080133e3
 8013228:	080133e3 	.word	0x080133e3
 801322c:	080133e3 	.word	0x080133e3
 8013230:	080133e3 	.word	0x080133e3
 8013234:	080133e3 	.word	0x080133e3
 8013238:	080133e3 	.word	0x080133e3
 801323c:	080133e3 	.word	0x080133e3
 8013240:	080133e3 	.word	0x080133e3
 8013244:	080133e3 	.word	0x080133e3
 8013248:	080133e3 	.word	0x080133e3
 801324c:	080133e3 	.word	0x080133e3
 8013250:	080133e3 	.word	0x080133e3
 8013254:	080133e3 	.word	0x080133e3
 8013258:	080133e3 	.word	0x080133e3
 801325c:	080132df 	.word	0x080132df
 8013260:	08013301 	.word	0x08013301
 8013264:	0801333d 	.word	0x0801333d
 8013268:	0801335f 	.word	0x0801335f
 801326c:	080133e3 	.word	0x080133e3
 8013270:	080133e3 	.word	0x080133e3
 8013274:	080133e3 	.word	0x080133e3
 8013278:	08013381 	.word	0x08013381
 801327c:	080133c1 	.word	0x080133c1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013280:	2300      	movs	r3, #0
 8013282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801328a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801328e:	e0ac      	b.n	80133ea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013294:	2b04      	cmp	r3, #4
 8013296:	d009      	beq.n	80132ac <dhcp_parse_reply+0x218>
 8013298:	4b43      	ldr	r3, [pc, #268]	; (80133a8 <dhcp_parse_reply+0x314>)
 801329a:	f240 622e 	movw	r2, #1582	; 0x62e
 801329e:	4943      	ldr	r1, [pc, #268]	; (80133ac <dhcp_parse_reply+0x318>)
 80132a0:	4843      	ldr	r0, [pc, #268]	; (80133b0 <dhcp_parse_reply+0x31c>)
 80132a2:	f003 fd4f 	bl	8016d44 <iprintf>
 80132a6:	f06f 0305 	mvn.w	r3, #5
 80132aa:	e1b1      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80132ac:	2306      	movs	r3, #6
 80132ae:	623b      	str	r3, [r7, #32]
        break;
 80132b0:	e09b      	b.n	80133ea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80132b2:	2304      	movs	r3, #4
 80132b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80132b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80132bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d209      	bcs.n	80132d8 <dhcp_parse_reply+0x244>
 80132c4:	4b38      	ldr	r3, [pc, #224]	; (80133a8 <dhcp_parse_reply+0x314>)
 80132c6:	f240 6233 	movw	r2, #1587	; 0x633
 80132ca:	493a      	ldr	r1, [pc, #232]	; (80133b4 <dhcp_parse_reply+0x320>)
 80132cc:	4838      	ldr	r0, [pc, #224]	; (80133b0 <dhcp_parse_reply+0x31c>)
 80132ce:	f003 fd39 	bl	8016d44 <iprintf>
 80132d2:	f06f 0305 	mvn.w	r3, #5
 80132d6:	e19b      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80132d8:	2307      	movs	r3, #7
 80132da:	623b      	str	r3, [r7, #32]
        break;
 80132dc:	e085      	b.n	80133ea <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80132de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132e2:	2b04      	cmp	r3, #4
 80132e4:	d009      	beq.n	80132fa <dhcp_parse_reply+0x266>
 80132e6:	4b30      	ldr	r3, [pc, #192]	; (80133a8 <dhcp_parse_reply+0x314>)
 80132e8:	f240 6241 	movw	r2, #1601	; 0x641
 80132ec:	492f      	ldr	r1, [pc, #188]	; (80133ac <dhcp_parse_reply+0x318>)
 80132ee:	4830      	ldr	r0, [pc, #192]	; (80133b0 <dhcp_parse_reply+0x31c>)
 80132f0:	f003 fd28 	bl	8016d44 <iprintf>
 80132f4:	f06f 0305 	mvn.w	r3, #5
 80132f8:	e18a      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80132fa:	2303      	movs	r3, #3
 80132fc:	623b      	str	r3, [r7, #32]
        break;
 80132fe:	e074      	b.n	80133ea <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013304:	2b01      	cmp	r3, #1
 8013306:	d009      	beq.n	801331c <dhcp_parse_reply+0x288>
 8013308:	4b27      	ldr	r3, [pc, #156]	; (80133a8 <dhcp_parse_reply+0x314>)
 801330a:	f240 624f 	movw	r2, #1615	; 0x64f
 801330e:	492a      	ldr	r1, [pc, #168]	; (80133b8 <dhcp_parse_reply+0x324>)
 8013310:	4827      	ldr	r0, [pc, #156]	; (80133b0 <dhcp_parse_reply+0x31c>)
 8013312:	f003 fd17 	bl	8016d44 <iprintf>
 8013316:	f06f 0305 	mvn.w	r3, #5
 801331a:	e179      	b.n	8013610 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801331c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801331e:	2bf0      	cmp	r3, #240	; 0xf0
 8013320:	d009      	beq.n	8013336 <dhcp_parse_reply+0x2a2>
 8013322:	4b21      	ldr	r3, [pc, #132]	; (80133a8 <dhcp_parse_reply+0x314>)
 8013324:	f240 6251 	movw	r2, #1617	; 0x651
 8013328:	4924      	ldr	r1, [pc, #144]	; (80133bc <dhcp_parse_reply+0x328>)
 801332a:	4821      	ldr	r0, [pc, #132]	; (80133b0 <dhcp_parse_reply+0x31c>)
 801332c:	f003 fd0a 	bl	8016d44 <iprintf>
 8013330:	f06f 0305 	mvn.w	r3, #5
 8013334:	e16c      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013336:	2300      	movs	r3, #0
 8013338:	623b      	str	r3, [r7, #32]
        break;
 801333a:	e056      	b.n	80133ea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801333c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013340:	2b01      	cmp	r3, #1
 8013342:	d009      	beq.n	8013358 <dhcp_parse_reply+0x2c4>
 8013344:	4b18      	ldr	r3, [pc, #96]	; (80133a8 <dhcp_parse_reply+0x314>)
 8013346:	f240 6255 	movw	r2, #1621	; 0x655
 801334a:	491b      	ldr	r1, [pc, #108]	; (80133b8 <dhcp_parse_reply+0x324>)
 801334c:	4818      	ldr	r0, [pc, #96]	; (80133b0 <dhcp_parse_reply+0x31c>)
 801334e:	f003 fcf9 	bl	8016d44 <iprintf>
 8013352:	f06f 0305 	mvn.w	r3, #5
 8013356:	e15b      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013358:	2301      	movs	r3, #1
 801335a:	623b      	str	r3, [r7, #32]
        break;
 801335c:	e045      	b.n	80133ea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801335e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013362:	2b04      	cmp	r3, #4
 8013364:	d009      	beq.n	801337a <dhcp_parse_reply+0x2e6>
 8013366:	4b10      	ldr	r3, [pc, #64]	; (80133a8 <dhcp_parse_reply+0x314>)
 8013368:	f240 6259 	movw	r2, #1625	; 0x659
 801336c:	490f      	ldr	r1, [pc, #60]	; (80133ac <dhcp_parse_reply+0x318>)
 801336e:	4810      	ldr	r0, [pc, #64]	; (80133b0 <dhcp_parse_reply+0x31c>)
 8013370:	f003 fce8 	bl	8016d44 <iprintf>
 8013374:	f06f 0305 	mvn.w	r3, #5
 8013378:	e14a      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801337a:	2302      	movs	r3, #2
 801337c:	623b      	str	r3, [r7, #32]
        break;
 801337e:	e034      	b.n	80133ea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013384:	2b04      	cmp	r3, #4
 8013386:	d009      	beq.n	801339c <dhcp_parse_reply+0x308>
 8013388:	4b07      	ldr	r3, [pc, #28]	; (80133a8 <dhcp_parse_reply+0x314>)
 801338a:	f240 625d 	movw	r2, #1629	; 0x65d
 801338e:	4907      	ldr	r1, [pc, #28]	; (80133ac <dhcp_parse_reply+0x318>)
 8013390:	4807      	ldr	r0, [pc, #28]	; (80133b0 <dhcp_parse_reply+0x31c>)
 8013392:	f003 fcd7 	bl	8016d44 <iprintf>
 8013396:	f06f 0305 	mvn.w	r3, #5
 801339a:	e139      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801339c:	2304      	movs	r3, #4
 801339e:	623b      	str	r3, [r7, #32]
        break;
 80133a0:	e023      	b.n	80133ea <dhcp_parse_reply+0x356>
 80133a2:	bf00      	nop
 80133a4:	20006e90 	.word	0x20006e90
 80133a8:	0801cf78 	.word	0x0801cf78
 80133ac:	0801d200 	.word	0x0801d200
 80133b0:	0801cfd8 	.word	0x0801cfd8
 80133b4:	0801d20c 	.word	0x0801d20c
 80133b8:	0801d220 	.word	0x0801d220
 80133bc:	0801d22c 	.word	0x0801d22c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80133c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133c4:	2b04      	cmp	r3, #4
 80133c6:	d009      	beq.n	80133dc <dhcp_parse_reply+0x348>
 80133c8:	4b93      	ldr	r3, [pc, #588]	; (8013618 <dhcp_parse_reply+0x584>)
 80133ca:	f240 6261 	movw	r2, #1633	; 0x661
 80133ce:	4993      	ldr	r1, [pc, #588]	; (801361c <dhcp_parse_reply+0x588>)
 80133d0:	4893      	ldr	r0, [pc, #588]	; (8013620 <dhcp_parse_reply+0x58c>)
 80133d2:	f003 fcb7 	bl	8016d44 <iprintf>
 80133d6:	f06f 0305 	mvn.w	r3, #5
 80133da:	e119      	b.n	8013610 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80133dc:	2305      	movs	r3, #5
 80133de:	623b      	str	r3, [r7, #32]
        break;
 80133e0:	e003      	b.n	80133ea <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80133e2:	2300      	movs	r3, #0
 80133e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80133e8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80133ea:	7dfb      	ldrb	r3, [r7, #23]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d103      	bne.n	80133f8 <dhcp_parse_reply+0x364>
      offset++;
 80133f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133f2:	3301      	adds	r3, #1
 80133f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80133f6:	e0a1      	b.n	801353c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80133f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133fe:	4413      	add	r3, r2
 8013400:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013404:	4293      	cmp	r3, r2
 8013406:	dd02      	ble.n	801340e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013408:	f06f 0301 	mvn.w	r3, #1
 801340c:	e100      	b.n	8013610 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801340e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013412:	b29a      	uxth	r2, r3
 8013414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013416:	4413      	add	r3, r2
 8013418:	b29b      	uxth	r3, r3
 801341a:	3302      	adds	r3, #2
 801341c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801341e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013422:	2b00      	cmp	r3, #0
 8013424:	f000 808a 	beq.w	801353c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	2b00      	cmp	r3, #0
 8013430:	db02      	blt.n	8013438 <dhcp_parse_reply+0x3a4>
 8013432:	6a3b      	ldr	r3, [r7, #32]
 8013434:	2b07      	cmp	r3, #7
 8013436:	dd06      	ble.n	8013446 <dhcp_parse_reply+0x3b2>
 8013438:	4b77      	ldr	r3, [pc, #476]	; (8013618 <dhcp_parse_reply+0x584>)
 801343a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801343e:	4979      	ldr	r1, [pc, #484]	; (8013624 <dhcp_parse_reply+0x590>)
 8013440:	4877      	ldr	r0, [pc, #476]	; (8013620 <dhcp_parse_reply+0x58c>)
 8013442:	f003 fc7f 	bl	8016d44 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013446:	4a78      	ldr	r2, [pc, #480]	; (8013628 <dhcp_parse_reply+0x594>)
 8013448:	6a3b      	ldr	r3, [r7, #32]
 801344a:	4413      	add	r3, r2
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d174      	bne.n	801353c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013456:	2b04      	cmp	r3, #4
 8013458:	bf28      	it	cs
 801345a:	2304      	movcs	r3, #4
 801345c:	b2db      	uxtb	r3, r3
 801345e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013460:	8bfb      	ldrh	r3, [r7, #30]
 8013462:	8aba      	ldrh	r2, [r7, #20]
 8013464:	f107 0108 	add.w	r1, r7, #8
 8013468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801346a:	f7f8 fcc7 	bl	800bdfc <pbuf_copy_partial>
 801346e:	4603      	mov	r3, r0
 8013470:	461a      	mov	r2, r3
 8013472:	8abb      	ldrh	r3, [r7, #20]
 8013474:	4293      	cmp	r3, r2
 8013476:	d002      	beq.n	801347e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013478:	f06f 0301 	mvn.w	r3, #1
 801347c:	e0c8      	b.n	8013610 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801347e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013482:	2b04      	cmp	r3, #4
 8013484:	d933      	bls.n	80134ee <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801348a:	f003 0303 	and.w	r3, r3, #3
 801348e:	b2db      	uxtb	r3, r3
 8013490:	2b00      	cmp	r3, #0
 8013492:	d009      	beq.n	80134a8 <dhcp_parse_reply+0x414>
 8013494:	4b60      	ldr	r3, [pc, #384]	; (8013618 <dhcp_parse_reply+0x584>)
 8013496:	f240 6281 	movw	r2, #1665	; 0x681
 801349a:	4964      	ldr	r1, [pc, #400]	; (801362c <dhcp_parse_reply+0x598>)
 801349c:	4860      	ldr	r0, [pc, #384]	; (8013620 <dhcp_parse_reply+0x58c>)
 801349e:	f003 fc51 	bl	8016d44 <iprintf>
 80134a2:	f06f 0305 	mvn.w	r3, #5
 80134a6:	e0b3      	b.n	8013610 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80134a8:	4a5f      	ldr	r2, [pc, #380]	; (8013628 <dhcp_parse_reply+0x594>)
 80134aa:	6a3b      	ldr	r3, [r7, #32]
 80134ac:	4413      	add	r3, r2
 80134ae:	2201      	movs	r2, #1
 80134b0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7f7 f820 	bl	800a4fa <lwip_htonl>
 80134ba:	4602      	mov	r2, r0
 80134bc:	495c      	ldr	r1, [pc, #368]	; (8013630 <dhcp_parse_reply+0x59c>)
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80134c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134c8:	3b04      	subs	r3, #4
 80134ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80134ce:	8bfb      	ldrh	r3, [r7, #30]
 80134d0:	3304      	adds	r3, #4
 80134d2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80134d4:	8a7a      	ldrh	r2, [r7, #18]
 80134d6:	8bfb      	ldrh	r3, [r7, #30]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d202      	bcs.n	80134e2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80134dc:	f06f 0301 	mvn.w	r3, #1
 80134e0:	e096      	b.n	8013610 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80134e2:	8a7b      	ldrh	r3, [r7, #18]
 80134e4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80134e6:	6a3b      	ldr	r3, [r7, #32]
 80134e8:	3301      	adds	r3, #1
 80134ea:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80134ec:	e79e      	b.n	801342c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80134ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134f2:	2b04      	cmp	r3, #4
 80134f4:	d106      	bne.n	8013504 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7f6 fffe 	bl	800a4fa <lwip_htonl>
 80134fe:	4603      	mov	r3, r0
 8013500:	60bb      	str	r3, [r7, #8]
 8013502:	e011      	b.n	8013528 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013508:	2b01      	cmp	r3, #1
 801350a:	d009      	beq.n	8013520 <dhcp_parse_reply+0x48c>
 801350c:	4b42      	ldr	r3, [pc, #264]	; (8013618 <dhcp_parse_reply+0x584>)
 801350e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013512:	4948      	ldr	r1, [pc, #288]	; (8013634 <dhcp_parse_reply+0x5a0>)
 8013514:	4842      	ldr	r0, [pc, #264]	; (8013620 <dhcp_parse_reply+0x58c>)
 8013516:	f003 fc15 	bl	8016d44 <iprintf>
 801351a:	f06f 0305 	mvn.w	r3, #5
 801351e:	e077      	b.n	8013610 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013520:	f107 0308 	add.w	r3, r7, #8
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013528:	4a3f      	ldr	r2, [pc, #252]	; (8013628 <dhcp_parse_reply+0x594>)
 801352a:	6a3b      	ldr	r3, [r7, #32]
 801352c:	4413      	add	r3, r2
 801352e:	2201      	movs	r2, #1
 8013530:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	493e      	ldr	r1, [pc, #248]	; (8013630 <dhcp_parse_reply+0x59c>)
 8013536:	6a3b      	ldr	r3, [r7, #32]
 8013538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353e:	895b      	ldrh	r3, [r3, #10]
 8013540:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013542:	429a      	cmp	r2, r3
 8013544:	d324      	bcc.n	8013590 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	895b      	ldrh	r3, [r3, #10]
 801354a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801354c:	1ad3      	subs	r3, r2, r3
 801354e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013552:	895b      	ldrh	r3, [r3, #10]
 8013554:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801355a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801355c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801355e:	429a      	cmp	r2, r3
 8013560:	d213      	bcs.n	801358a <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356a:	2b00      	cmp	r3, #0
 801356c:	d109      	bne.n	8013582 <dhcp_parse_reply+0x4ee>
 801356e:	4b2a      	ldr	r3, [pc, #168]	; (8013618 <dhcp_parse_reply+0x584>)
 8013570:	f240 629d 	movw	r2, #1693	; 0x69d
 8013574:	4930      	ldr	r1, [pc, #192]	; (8013638 <dhcp_parse_reply+0x5a4>)
 8013576:	482a      	ldr	r0, [pc, #168]	; (8013620 <dhcp_parse_reply+0x58c>)
 8013578:	f003 fbe4 	bl	8016d44 <iprintf>
 801357c:	f06f 0305 	mvn.w	r3, #5
 8013580:	e046      	b.n	8013610 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013588:	e002      	b.n	8013590 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801358a:	f06f 0301 	mvn.w	r3, #1
 801358e:	e03f      	b.n	8013610 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00a      	beq.n	80135ac <dhcp_parse_reply+0x518>
 8013596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801359a:	429a      	cmp	r2, r3
 801359c:	d206      	bcs.n	80135ac <dhcp_parse_reply+0x518>
 801359e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135a2:	4413      	add	r3, r2
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	2bff      	cmp	r3, #255	; 0xff
 80135a8:	f47f adb7 	bne.w	801311a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80135ac:	4b1e      	ldr	r3, [pc, #120]	; (8013628 <dhcp_parse_reply+0x594>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d018      	beq.n	80135e6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80135b4:	4b1e      	ldr	r3, [pc, #120]	; (8013630 <dhcp_parse_reply+0x59c>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80135ba:	4b1b      	ldr	r3, [pc, #108]	; (8013628 <dhcp_parse_reply+0x594>)
 80135bc:	2200      	movs	r2, #0
 80135be:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d102      	bne.n	80135cc <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80135c6:	2301      	movs	r3, #1
 80135c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135ca:	e00c      	b.n	80135e6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	2b02      	cmp	r3, #2
 80135d0:	d102      	bne.n	80135d8 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80135d2:	2301      	movs	r3, #1
 80135d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80135d6:	e006      	b.n	80135e6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2b03      	cmp	r3, #3
 80135dc:	d103      	bne.n	80135e6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80135de:	2301      	movs	r3, #1
 80135e0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80135e2:	2301      	movs	r3, #1
 80135e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80135e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d006      	beq.n	80135fa <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80135f0:	236c      	movs	r3, #108	; 0x6c
 80135f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80135f4:	23ec      	movs	r3, #236	; 0xec
 80135f6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80135f8:	e569      	b.n	80130ce <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80135fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d006      	beq.n	801360e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013604:	232c      	movs	r3, #44	; 0x2c
 8013606:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013608:	236c      	movs	r3, #108	; 0x6c
 801360a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801360c:	e55f      	b.n	80130ce <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801360e:	2300      	movs	r3, #0
}
 8013610:	4618      	mov	r0, r3
 8013612:	3740      	adds	r7, #64	; 0x40
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	0801cf78 	.word	0x0801cf78
 801361c:	0801d200 	.word	0x0801d200
 8013620:	0801cfd8 	.word	0x0801cfd8
 8013624:	0801d244 	.word	0x0801d244
 8013628:	20006e90 	.word	0x20006e90
 801362c:	0801d258 	.word	0x0801d258
 8013630:	20006e98 	.word	0x20006e98
 8013634:	0801d270 	.word	0x0801d270
 8013638:	0801d284 	.word	0x0801d284

0801363c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b08a      	sub	sp, #40	; 0x28
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
 8013648:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801364a:	4b60      	ldr	r3, [pc, #384]	; (80137cc <dhcp_recv+0x190>)
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013650:	6a3b      	ldr	r3, [r7, #32]
 8013652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013654:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	2b00      	cmp	r3, #0
 8013660:	f000 809d 	beq.w	801379e <dhcp_recv+0x162>
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	791b      	ldrb	r3, [r3, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f000 8098 	beq.w	801379e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	895b      	ldrh	r3, [r3, #10]
 8013672:	2b2b      	cmp	r3, #43	; 0x2b
 8013674:	f240 8095 	bls.w	80137a2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	2b02      	cmp	r3, #2
 801367e:	f040 8092 	bne.w	80137a6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013682:	2300      	movs	r3, #0
 8013684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013688:	e012      	b.n	80136b0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801368e:	6a3a      	ldr	r2, [r7, #32]
 8013690:	4413      	add	r3, r2
 8013692:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801369a:	69b9      	ldr	r1, [r7, #24]
 801369c:	440b      	add	r3, r1
 801369e:	7f1b      	ldrb	r3, [r3, #28]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	f040 8082 	bne.w	80137aa <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80136a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136aa:	3301      	adds	r3, #1
 80136ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d203      	bcs.n	80136c6 <dhcp_recv+0x8a>
 80136be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c2:	2b05      	cmp	r3, #5
 80136c4:	d9e1      	bls.n	801368a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7f6 ff15 	bl	800a4fa <lwip_htonl>
 80136d0:	4602      	mov	r2, r0
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d169      	bne.n	80137ae <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80136da:	69f9      	ldr	r1, [r7, #28]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7ff fcd9 	bl	8013094 <dhcp_parse_reply>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d164      	bne.n	80137b2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80136e8:	4b39      	ldr	r3, [pc, #228]	; (80137d0 <dhcp_recv+0x194>)
 80136ea:	785b      	ldrb	r3, [r3, #1]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d062      	beq.n	80137b6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80136f6:	4b37      	ldr	r3, [pc, #220]	; (80137d4 <dhcp_recv+0x198>)
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80136fc:	7cfb      	ldrb	r3, [r7, #19]
 80136fe:	2b05      	cmp	r3, #5
 8013700:	d12a      	bne.n	8013758 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	795b      	ldrb	r3, [r3, #5]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d112      	bne.n	8013730 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801370a:	6979      	ldr	r1, [r7, #20]
 801370c:	6a38      	ldr	r0, [r7, #32]
 801370e:	f7fe fe53 	bl	80123b8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013712:	6a3b      	ldr	r3, [r7, #32]
 8013714:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013718:	f003 0308 	and.w	r3, r3, #8
 801371c:	2b00      	cmp	r3, #0
 801371e:	d003      	beq.n	8013728 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013720:	6a38      	ldr	r0, [r7, #32]
 8013722:	f7fe fbc1 	bl	8011ea8 <dhcp_check>
 8013726:	e049      	b.n	80137bc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013728:	6a38      	ldr	r0, [r7, #32]
 801372a:	f7ff f867 	bl	80127fc <dhcp_bind>
 801372e:	e045      	b.n	80137bc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	795b      	ldrb	r3, [r3, #5]
 8013734:	2b03      	cmp	r3, #3
 8013736:	d007      	beq.n	8013748 <dhcp_recv+0x10c>
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	795b      	ldrb	r3, [r3, #5]
 801373c:	2b04      	cmp	r3, #4
 801373e:	d003      	beq.n	8013748 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013744:	2b05      	cmp	r3, #5
 8013746:	d139      	bne.n	80137bc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013748:	6979      	ldr	r1, [r7, #20]
 801374a:	6a38      	ldr	r0, [r7, #32]
 801374c:	f7fe fe34 	bl	80123b8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013750:	6a38      	ldr	r0, [r7, #32]
 8013752:	f7ff f853 	bl	80127fc <dhcp_bind>
 8013756:	e031      	b.n	80137bc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013758:	7cfb      	ldrb	r3, [r7, #19]
 801375a:	2b06      	cmp	r3, #6
 801375c:	d113      	bne.n	8013786 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013762:	2b03      	cmp	r3, #3
 8013764:	d00b      	beq.n	801377e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	795b      	ldrb	r3, [r3, #5]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d007      	beq.n	801377e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013772:	2b04      	cmp	r3, #4
 8013774:	d003      	beq.n	801377e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	795b      	ldrb	r3, [r3, #5]
 801377a:	2b05      	cmp	r3, #5
 801377c:	d103      	bne.n	8013786 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801377e:	6a38      	ldr	r0, [r7, #32]
 8013780:	f7fe fb78 	bl	8011e74 <dhcp_handle_nak>
 8013784:	e01a      	b.n	80137bc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013786:	7cfb      	ldrb	r3, [r7, #19]
 8013788:	2b02      	cmp	r3, #2
 801378a:	d116      	bne.n	80137ba <dhcp_recv+0x17e>
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	795b      	ldrb	r3, [r3, #5]
 8013790:	2b06      	cmp	r3, #6
 8013792:	d112      	bne.n	80137ba <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013794:	6979      	ldr	r1, [r7, #20]
 8013796:	6a38      	ldr	r0, [r7, #32]
 8013798:	f7fe fbba 	bl	8011f10 <dhcp_handle_offer>
 801379c:	e00e      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801379e:	bf00      	nop
 80137a0:	e00c      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80137a2:	bf00      	nop
 80137a4:	e00a      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80137a6:	bf00      	nop
 80137a8:	e008      	b.n	80137bc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80137aa:	bf00      	nop
 80137ac:	e006      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80137ae:	bf00      	nop
 80137b0:	e004      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80137b2:	bf00      	nop
 80137b4:	e002      	b.n	80137bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80137b6:	bf00      	nop
 80137b8:	e000      	b.n	80137bc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80137ba:	bf00      	nop
  pbuf_free(p);
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f7f8 f923 	bl	800ba08 <pbuf_free>
}
 80137c2:	bf00      	nop
 80137c4:	3728      	adds	r7, #40	; 0x28
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	20003910 	.word	0x20003910
 80137d0:	20006e90 	.word	0x20006e90
 80137d4:	20006e98 	.word	0x20006e98

080137d8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b088      	sub	sp, #32
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	603b      	str	r3, [r7, #0]
 80137e4:	4613      	mov	r3, r2
 80137e6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d108      	bne.n	8013800 <dhcp_create_msg+0x28>
 80137ee:	4b5f      	ldr	r3, [pc, #380]	; (801396c <dhcp_create_msg+0x194>)
 80137f0:	f240 7269 	movw	r2, #1897	; 0x769
 80137f4:	495e      	ldr	r1, [pc, #376]	; (8013970 <dhcp_create_msg+0x198>)
 80137f6:	485f      	ldr	r0, [pc, #380]	; (8013974 <dhcp_create_msg+0x19c>)
 80137f8:	f003 faa4 	bl	8016d44 <iprintf>
 80137fc:	2300      	movs	r3, #0
 80137fe:	e0b1      	b.n	8013964 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d108      	bne.n	8013818 <dhcp_create_msg+0x40>
 8013806:	4b59      	ldr	r3, [pc, #356]	; (801396c <dhcp_create_msg+0x194>)
 8013808:	f240 726a 	movw	r2, #1898	; 0x76a
 801380c:	495a      	ldr	r1, [pc, #360]	; (8013978 <dhcp_create_msg+0x1a0>)
 801380e:	4859      	ldr	r0, [pc, #356]	; (8013974 <dhcp_create_msg+0x19c>)
 8013810:	f003 fa98 	bl	8016d44 <iprintf>
 8013814:	2300      	movs	r3, #0
 8013816:	e0a5      	b.n	8013964 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013818:	f44f 7220 	mov.w	r2, #640	; 0x280
 801381c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013820:	2036      	movs	r0, #54	; 0x36
 8013822:	f7f7 fe0d 	bl	800b440 <pbuf_alloc>
 8013826:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d101      	bne.n	8013832 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801382e:	2300      	movs	r3, #0
 8013830:	e098      	b.n	8013964 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	895b      	ldrh	r3, [r3, #10]
 8013836:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801383a:	d206      	bcs.n	801384a <dhcp_create_msg+0x72>
 801383c:	4b4b      	ldr	r3, [pc, #300]	; (801396c <dhcp_create_msg+0x194>)
 801383e:	f240 7271 	movw	r2, #1905	; 0x771
 8013842:	494e      	ldr	r1, [pc, #312]	; (801397c <dhcp_create_msg+0x1a4>)
 8013844:	484b      	ldr	r0, [pc, #300]	; (8013974 <dhcp_create_msg+0x19c>)
 8013846:	f003 fa7d 	bl	8016d44 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801384a:	79fb      	ldrb	r3, [r7, #7]
 801384c:	2b03      	cmp	r3, #3
 801384e:	d103      	bne.n	8013858 <dhcp_create_msg+0x80>
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	795b      	ldrb	r3, [r3, #5]
 8013854:	2b03      	cmp	r3, #3
 8013856:	d10d      	bne.n	8013874 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	799b      	ldrb	r3, [r3, #6]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d105      	bne.n	801386c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013860:	f003 fa88 	bl	8016d74 <rand>
 8013864:	4603      	mov	r3, r0
 8013866:	461a      	mov	r2, r3
 8013868:	4b45      	ldr	r3, [pc, #276]	; (8013980 <dhcp_create_msg+0x1a8>)
 801386a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801386c:	4b44      	ldr	r3, [pc, #272]	; (8013980 <dhcp_create_msg+0x1a8>)
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801387a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801387e:	2100      	movs	r1, #0
 8013880:	6978      	ldr	r0, [r7, #20]
 8013882:	f002 fc0f 	bl	80160a4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2201      	movs	r2, #1
 801388a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	2201      	movs	r2, #1
 8013890:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7f6 fe2a 	bl	800a4fa <lwip_htonl>
 80138a6:	4602      	mov	r2, r0
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80138ac:	79fb      	ldrb	r3, [r7, #7]
 80138ae:	2b08      	cmp	r3, #8
 80138b0:	d010      	beq.n	80138d4 <dhcp_create_msg+0xfc>
 80138b2:	79fb      	ldrb	r3, [r7, #7]
 80138b4:	2b04      	cmp	r3, #4
 80138b6:	d00d      	beq.n	80138d4 <dhcp_create_msg+0xfc>
 80138b8:	79fb      	ldrb	r3, [r7, #7]
 80138ba:	2b07      	cmp	r3, #7
 80138bc:	d00a      	beq.n	80138d4 <dhcp_create_msg+0xfc>
 80138be:	79fb      	ldrb	r3, [r7, #7]
 80138c0:	2b03      	cmp	r3, #3
 80138c2:	d10c      	bne.n	80138de <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80138c8:	2b05      	cmp	r3, #5
 80138ca:	d003      	beq.n	80138d4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	795b      	ldrb	r3, [r3, #5]
 80138d0:	2b04      	cmp	r3, #4
 80138d2:	d104      	bne.n	80138de <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	3304      	adds	r3, #4
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80138de:	2300      	movs	r3, #0
 80138e0:	83fb      	strh	r3, [r7, #30]
 80138e2:	e00c      	b.n	80138fe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80138e4:	8bfa      	ldrh	r2, [r7, #30]
 80138e6:	8bfb      	ldrh	r3, [r7, #30]
 80138e8:	68f9      	ldr	r1, [r7, #12]
 80138ea:	440a      	add	r2, r1
 80138ec:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80138f0:	697a      	ldr	r2, [r7, #20]
 80138f2:	4413      	add	r3, r2
 80138f4:	460a      	mov	r2, r1
 80138f6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80138f8:	8bfb      	ldrh	r3, [r7, #30]
 80138fa:	3301      	adds	r3, #1
 80138fc:	83fb      	strh	r3, [r7, #30]
 80138fe:	8bfb      	ldrh	r3, [r7, #30]
 8013900:	2b05      	cmp	r3, #5
 8013902:	d9ef      	bls.n	80138e4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2200      	movs	r2, #0
 8013908:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801390c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013910:	2200      	movs	r2, #0
 8013912:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013916:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801391a:	2200      	movs	r2, #0
 801391c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013920:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013924:	2200      	movs	r2, #0
 8013926:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801392a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013934:	2301      	movs	r3, #1
 8013936:	2235      	movs	r2, #53	; 0x35
 8013938:	2000      	movs	r0, #0
 801393a:	f7ff fadb 	bl	8012ef4 <dhcp_option>
 801393e:	4603      	mov	r3, r0
 8013940:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013948:	79fa      	ldrb	r2, [r7, #7]
 801394a:	8a7b      	ldrh	r3, [r7, #18]
 801394c:	4618      	mov	r0, r3
 801394e:	f7ff fb05 	bl	8012f5c <dhcp_option_byte>
 8013952:	4603      	mov	r3, r0
 8013954:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d002      	beq.n	8013962 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	8a7a      	ldrh	r2, [r7, #18]
 8013960:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013962:	69bb      	ldr	r3, [r7, #24]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3720      	adds	r7, #32
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	0801cf78 	.word	0x0801cf78
 8013970:	0801d298 	.word	0x0801d298
 8013974:	0801cfd8 	.word	0x0801cfd8
 8013978:	0801d2b8 	.word	0x0801d2b8
 801397c:	0801d2d8 	.word	0x0801d2d8
 8013980:	20000388 	.word	0x20000388

08013984 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	4603      	mov	r3, r0
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013992:	89fb      	ldrh	r3, [r7, #14]
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	81fa      	strh	r2, [r7, #14]
 8013998:	461a      	mov	r2, r3
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	4413      	add	r3, r2
 801399e:	22ff      	movs	r2, #255	; 0xff
 80139a0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80139a2:	e007      	b.n	80139b4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80139a4:	89fb      	ldrh	r3, [r7, #14]
 80139a6:	1c5a      	adds	r2, r3, #1
 80139a8:	81fa      	strh	r2, [r7, #14]
 80139aa:	461a      	mov	r2, r3
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	4413      	add	r3, r2
 80139b0:	2200      	movs	r2, #0
 80139b2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80139b4:	89fb      	ldrh	r3, [r7, #14]
 80139b6:	2b43      	cmp	r3, #67	; 0x43
 80139b8:	d904      	bls.n	80139c4 <dhcp_option_trailer+0x40>
 80139ba:	89fb      	ldrh	r3, [r7, #14]
 80139bc:	f003 0303 	and.w	r3, r3, #3
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <dhcp_option_trailer+0x46>
 80139c4:	89fb      	ldrh	r3, [r7, #14]
 80139c6:	2b43      	cmp	r3, #67	; 0x43
 80139c8:	d9ec      	bls.n	80139a4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80139ca:	89fb      	ldrh	r3, [r7, #14]
 80139cc:	33f0      	adds	r3, #240	; 0xf0
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4619      	mov	r1, r3
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7f7 fe92 	bl	800b6fc <pbuf_realloc>
}
 80139d8:	bf00      	nop
 80139da:	3710      	adds	r7, #16
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}

080139e0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b085      	sub	sp, #20
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d017      	beq.n	8013a1e <dhcp_supplied_address+0x3e>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d013      	beq.n	8013a1e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139fa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	795b      	ldrb	r3, [r3, #5]
 8013a00:	2b0a      	cmp	r3, #10
 8013a02:	d007      	beq.n	8013a14 <dhcp_supplied_address+0x34>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	795b      	ldrb	r3, [r3, #5]
 8013a08:	2b05      	cmp	r3, #5
 8013a0a:	d003      	beq.n	8013a14 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013a10:	2b04      	cmp	r3, #4
 8013a12:	d101      	bne.n	8013a18 <dhcp_supplied_address+0x38>
 8013a14:	2301      	movs	r3, #1
 8013a16:	e000      	b.n	8013a1a <dhcp_supplied_address+0x3a>
 8013a18:	2300      	movs	r3, #0
 8013a1a:	b2db      	uxtb	r3, r3
 8013a1c:	e000      	b.n	8013a20 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013a1e:	2300      	movs	r3, #0
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3714      	adds	r7, #20
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013a34:	4915      	ldr	r1, [pc, #84]	; (8013a8c <etharp_free_entry+0x60>)
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	440b      	add	r3, r1
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d013      	beq.n	8013a70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013a48:	4910      	ldr	r1, [pc, #64]	; (8013a8c <etharp_free_entry+0x60>)
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	005b      	lsls	r3, r3, #1
 8013a50:	4413      	add	r3, r2
 8013a52:	00db      	lsls	r3, r3, #3
 8013a54:	440b      	add	r3, r1
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f7 ffd5 	bl	800ba08 <pbuf_free>
    arp_table[i].q = NULL;
 8013a5e:	490b      	ldr	r1, [pc, #44]	; (8013a8c <etharp_free_entry+0x60>)
 8013a60:	687a      	ldr	r2, [r7, #4]
 8013a62:	4613      	mov	r3, r2
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	4413      	add	r3, r2
 8013a68:	00db      	lsls	r3, r3, #3
 8013a6a:	440b      	add	r3, r1
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013a70:	4906      	ldr	r1, [pc, #24]	; (8013a8c <etharp_free_entry+0x60>)
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	4613      	mov	r3, r2
 8013a76:	005b      	lsls	r3, r3, #1
 8013a78:	4413      	add	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	440b      	add	r3, r1
 8013a7e:	3314      	adds	r3, #20
 8013a80:	2200      	movs	r2, #0
 8013a82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013a84:	bf00      	nop
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	2000038c 	.word	0x2000038c

08013a90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a96:	2300      	movs	r3, #0
 8013a98:	607b      	str	r3, [r7, #4]
 8013a9a:	e096      	b.n	8013bca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013a9c:	494f      	ldr	r1, [pc, #316]	; (8013bdc <etharp_tmr+0x14c>)
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	005b      	lsls	r3, r3, #1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	00db      	lsls	r3, r3, #3
 8013aa8:	440b      	add	r3, r1
 8013aaa:	3314      	adds	r3, #20
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ab0:	78fb      	ldrb	r3, [r7, #3]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f000 8086 	beq.w	8013bc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013ab8:	4948      	ldr	r1, [pc, #288]	; (8013bdc <etharp_tmr+0x14c>)
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	4613      	mov	r3, r2
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	4413      	add	r3, r2
 8013ac2:	00db      	lsls	r3, r3, #3
 8013ac4:	440b      	add	r3, r1
 8013ac6:	3312      	adds	r3, #18
 8013ac8:	881b      	ldrh	r3, [r3, #0]
 8013aca:	3301      	adds	r3, #1
 8013acc:	b298      	uxth	r0, r3
 8013ace:	4943      	ldr	r1, [pc, #268]	; (8013bdc <etharp_tmr+0x14c>)
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	005b      	lsls	r3, r3, #1
 8013ad6:	4413      	add	r3, r2
 8013ad8:	00db      	lsls	r3, r3, #3
 8013ada:	440b      	add	r3, r1
 8013adc:	3312      	adds	r3, #18
 8013ade:	4602      	mov	r2, r0
 8013ae0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ae2:	493e      	ldr	r1, [pc, #248]	; (8013bdc <etharp_tmr+0x14c>)
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	005b      	lsls	r3, r3, #1
 8013aea:	4413      	add	r3, r2
 8013aec:	00db      	lsls	r3, r3, #3
 8013aee:	440b      	add	r3, r1
 8013af0:	3312      	adds	r3, #18
 8013af2:	881b      	ldrh	r3, [r3, #0]
 8013af4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013af8:	d215      	bcs.n	8013b26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013afa:	4938      	ldr	r1, [pc, #224]	; (8013bdc <etharp_tmr+0x14c>)
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	4613      	mov	r3, r2
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	4413      	add	r3, r2
 8013b04:	00db      	lsls	r3, r3, #3
 8013b06:	440b      	add	r3, r1
 8013b08:	3314      	adds	r3, #20
 8013b0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d10e      	bne.n	8013b2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013b10:	4932      	ldr	r1, [pc, #200]	; (8013bdc <etharp_tmr+0x14c>)
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	4613      	mov	r3, r2
 8013b16:	005b      	lsls	r3, r3, #1
 8013b18:	4413      	add	r3, r2
 8013b1a:	00db      	lsls	r3, r3, #3
 8013b1c:	440b      	add	r3, r1
 8013b1e:	3312      	adds	r3, #18
 8013b20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b22:	2b04      	cmp	r3, #4
 8013b24:	d903      	bls.n	8013b2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff ff80 	bl	8013a2c <etharp_free_entry>
 8013b2c:	e04a      	b.n	8013bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013b2e:	492b      	ldr	r1, [pc, #172]	; (8013bdc <etharp_tmr+0x14c>)
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	4613      	mov	r3, r2
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	4413      	add	r3, r2
 8013b38:	00db      	lsls	r3, r3, #3
 8013b3a:	440b      	add	r3, r1
 8013b3c:	3314      	adds	r3, #20
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	2b03      	cmp	r3, #3
 8013b42:	d10a      	bne.n	8013b5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013b44:	4925      	ldr	r1, [pc, #148]	; (8013bdc <etharp_tmr+0x14c>)
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	005b      	lsls	r3, r3, #1
 8013b4c:	4413      	add	r3, r2
 8013b4e:	00db      	lsls	r3, r3, #3
 8013b50:	440b      	add	r3, r1
 8013b52:	3314      	adds	r3, #20
 8013b54:	2204      	movs	r2, #4
 8013b56:	701a      	strb	r2, [r3, #0]
 8013b58:	e034      	b.n	8013bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013b5a:	4920      	ldr	r1, [pc, #128]	; (8013bdc <etharp_tmr+0x14c>)
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	3314      	adds	r3, #20
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	2b04      	cmp	r3, #4
 8013b6e:	d10a      	bne.n	8013b86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013b70:	491a      	ldr	r1, [pc, #104]	; (8013bdc <etharp_tmr+0x14c>)
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	440b      	add	r3, r1
 8013b7e:	3314      	adds	r3, #20
 8013b80:	2202      	movs	r2, #2
 8013b82:	701a      	strb	r2, [r3, #0]
 8013b84:	e01e      	b.n	8013bc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013b86:	4915      	ldr	r1, [pc, #84]	; (8013bdc <etharp_tmr+0x14c>)
 8013b88:	687a      	ldr	r2, [r7, #4]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	005b      	lsls	r3, r3, #1
 8013b8e:	4413      	add	r3, r2
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	440b      	add	r3, r1
 8013b94:	3314      	adds	r3, #20
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d113      	bne.n	8013bc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013b9c:	490f      	ldr	r1, [pc, #60]	; (8013bdc <etharp_tmr+0x14c>)
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3308      	adds	r3, #8
 8013bac:	6818      	ldr	r0, [r3, #0]
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	4413      	add	r3, r2
 8013bb6:	00db      	lsls	r3, r3, #3
 8013bb8:	4a08      	ldr	r2, [pc, #32]	; (8013bdc <etharp_tmr+0x14c>)
 8013bba:	4413      	add	r3, r2
 8013bbc:	3304      	adds	r3, #4
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	f000 fe72 	bl	80148a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	607b      	str	r3, [r7, #4]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b09      	cmp	r3, #9
 8013bce:	f77f af65 	ble.w	8013a9c <etharp_tmr+0xc>
      }
    }
  }
}
 8013bd2:	bf00      	nop
 8013bd4:	bf00      	nop
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	2000038c 	.word	0x2000038c

08013be0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b08a      	sub	sp, #40	; 0x28
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	460b      	mov	r3, r1
 8013bea:	607a      	str	r2, [r7, #4]
 8013bec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013bee:	230a      	movs	r3, #10
 8013bf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013bf2:	230a      	movs	r3, #10
 8013bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013bf6:	230a      	movs	r3, #10
 8013bf8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013bfe:	230a      	movs	r3, #10
 8013c00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	83bb      	strh	r3, [r7, #28]
 8013c06:	2300      	movs	r3, #0
 8013c08:	837b      	strh	r3, [r7, #26]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c0e:	2300      	movs	r3, #0
 8013c10:	843b      	strh	r3, [r7, #32]
 8013c12:	e0ae      	b.n	8013d72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013c14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c18:	49a6      	ldr	r1, [pc, #664]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	005b      	lsls	r3, r3, #1
 8013c1e:	4413      	add	r3, r2
 8013c20:	00db      	lsls	r3, r3, #3
 8013c22:	440b      	add	r3, r1
 8013c24:	3314      	adds	r3, #20
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013c2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013c2e:	2b0a      	cmp	r3, #10
 8013c30:	d105      	bne.n	8013c3e <etharp_find_entry+0x5e>
 8013c32:	7dfb      	ldrb	r3, [r7, #23]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d102      	bne.n	8013c3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013c38:	8c3b      	ldrh	r3, [r7, #32]
 8013c3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8013c3c:	e095      	b.n	8013d6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013c3e:	7dfb      	ldrb	r3, [r7, #23]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f000 8092 	beq.w	8013d6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013c46:	7dfb      	ldrb	r3, [r7, #23]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d009      	beq.n	8013c60 <etharp_find_entry+0x80>
 8013c4c:	7dfb      	ldrb	r3, [r7, #23]
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d806      	bhi.n	8013c60 <etharp_find_entry+0x80>
 8013c52:	4b99      	ldr	r3, [pc, #612]	; (8013eb8 <etharp_find_entry+0x2d8>)
 8013c54:	f240 1223 	movw	r2, #291	; 0x123
 8013c58:	4998      	ldr	r1, [pc, #608]	; (8013ebc <etharp_find_entry+0x2dc>)
 8013c5a:	4899      	ldr	r0, [pc, #612]	; (8013ec0 <etharp_find_entry+0x2e0>)
 8013c5c:	f003 f872 	bl	8016d44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d020      	beq.n	8013ca8 <etharp_find_entry+0xc8>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	6819      	ldr	r1, [r3, #0]
 8013c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c6e:	4891      	ldr	r0, [pc, #580]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013c70:	4613      	mov	r3, r2
 8013c72:	005b      	lsls	r3, r3, #1
 8013c74:	4413      	add	r3, r2
 8013c76:	00db      	lsls	r3, r3, #3
 8013c78:	4403      	add	r3, r0
 8013c7a:	3304      	adds	r3, #4
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	4299      	cmp	r1, r3
 8013c80:	d112      	bne.n	8013ca8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00c      	beq.n	8013ca2 <etharp_find_entry+0xc2>
 8013c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c8c:	4989      	ldr	r1, [pc, #548]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013c8e:	4613      	mov	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	4413      	add	r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	440b      	add	r3, r1
 8013c98:	3308      	adds	r3, #8
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d102      	bne.n	8013ca8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ca6:	e100      	b.n	8013eaa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013ca8:	7dfb      	ldrb	r3, [r7, #23]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d140      	bne.n	8013d30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cb2:	4980      	ldr	r1, [pc, #512]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	005b      	lsls	r3, r3, #1
 8013cb8:	4413      	add	r3, r2
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	440b      	add	r3, r1
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d01a      	beq.n	8013cfa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cc8:	497a      	ldr	r1, [pc, #488]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013cca:	4613      	mov	r3, r2
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	4413      	add	r3, r2
 8013cd0:	00db      	lsls	r3, r3, #3
 8013cd2:	440b      	add	r3, r1
 8013cd4:	3312      	adds	r3, #18
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	8bba      	ldrh	r2, [r7, #28]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d845      	bhi.n	8013d6a <etharp_find_entry+0x18a>
            old_queue = i;
 8013cde:	8c3b      	ldrh	r3, [r7, #32]
 8013ce0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ce6:	4973      	ldr	r1, [pc, #460]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013ce8:	4613      	mov	r3, r2
 8013cea:	005b      	lsls	r3, r3, #1
 8013cec:	4413      	add	r3, r2
 8013cee:	00db      	lsls	r3, r3, #3
 8013cf0:	440b      	add	r3, r1
 8013cf2:	3312      	adds	r3, #18
 8013cf4:	881b      	ldrh	r3, [r3, #0]
 8013cf6:	83bb      	strh	r3, [r7, #28]
 8013cf8:	e037      	b.n	8013d6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013cfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cfe:	496d      	ldr	r1, [pc, #436]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013d00:	4613      	mov	r3, r2
 8013d02:	005b      	lsls	r3, r3, #1
 8013d04:	4413      	add	r3, r2
 8013d06:	00db      	lsls	r3, r3, #3
 8013d08:	440b      	add	r3, r1
 8013d0a:	3312      	adds	r3, #18
 8013d0c:	881b      	ldrh	r3, [r3, #0]
 8013d0e:	8b7a      	ldrh	r2, [r7, #26]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d82a      	bhi.n	8013d6a <etharp_find_entry+0x18a>
            old_pending = i;
 8013d14:	8c3b      	ldrh	r3, [r7, #32]
 8013d16:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013d18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d1c:	4965      	ldr	r1, [pc, #404]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013d1e:	4613      	mov	r3, r2
 8013d20:	005b      	lsls	r3, r3, #1
 8013d22:	4413      	add	r3, r2
 8013d24:	00db      	lsls	r3, r3, #3
 8013d26:	440b      	add	r3, r1
 8013d28:	3312      	adds	r3, #18
 8013d2a:	881b      	ldrh	r3, [r3, #0]
 8013d2c:	837b      	strh	r3, [r7, #26]
 8013d2e:	e01c      	b.n	8013d6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013d30:	7dfb      	ldrb	r3, [r7, #23]
 8013d32:	2b01      	cmp	r3, #1
 8013d34:	d919      	bls.n	8013d6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d3a:	495e      	ldr	r1, [pc, #376]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	005b      	lsls	r3, r3, #1
 8013d40:	4413      	add	r3, r2
 8013d42:	00db      	lsls	r3, r3, #3
 8013d44:	440b      	add	r3, r1
 8013d46:	3312      	adds	r3, #18
 8013d48:	881b      	ldrh	r3, [r3, #0]
 8013d4a:	8b3a      	ldrh	r2, [r7, #24]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d80c      	bhi.n	8013d6a <etharp_find_entry+0x18a>
            old_stable = i;
 8013d50:	8c3b      	ldrh	r3, [r7, #32]
 8013d52:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013d54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d58:	4956      	ldr	r1, [pc, #344]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	4413      	add	r3, r2
 8013d60:	00db      	lsls	r3, r3, #3
 8013d62:	440b      	add	r3, r1
 8013d64:	3312      	adds	r3, #18
 8013d66:	881b      	ldrh	r3, [r3, #0]
 8013d68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d6a:	8c3b      	ldrh	r3, [r7, #32]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	843b      	strh	r3, [r7, #32]
 8013d72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d76:	2b09      	cmp	r3, #9
 8013d78:	f77f af4c 	ble.w	8013c14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013d7c:	7afb      	ldrb	r3, [r7, #11]
 8013d7e:	f003 0302 	and.w	r3, r3, #2
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d108      	bne.n	8013d98 <etharp_find_entry+0x1b8>
 8013d86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013d8a:	2b0a      	cmp	r3, #10
 8013d8c:	d107      	bne.n	8013d9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013d8e:	7afb      	ldrb	r3, [r7, #11]
 8013d90:	f003 0301 	and.w	r3, r3, #1
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013d98:	f04f 33ff 	mov.w	r3, #4294967295
 8013d9c:	e085      	b.n	8013eaa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013d9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013da2:	2b09      	cmp	r3, #9
 8013da4:	dc02      	bgt.n	8013dac <etharp_find_entry+0x1cc>
    i = empty;
 8013da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013da8:	843b      	strh	r3, [r7, #32]
 8013daa:	e039      	b.n	8013e20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013dac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013db0:	2b09      	cmp	r3, #9
 8013db2:	dc14      	bgt.n	8013dde <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013db6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dbc:	493d      	ldr	r1, [pc, #244]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4413      	add	r3, r2
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	440b      	add	r3, r1
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d018      	beq.n	8013e00 <etharp_find_entry+0x220>
 8013dce:	4b3a      	ldr	r3, [pc, #232]	; (8013eb8 <etharp_find_entry+0x2d8>)
 8013dd0:	f240 126d 	movw	r2, #365	; 0x16d
 8013dd4:	493b      	ldr	r1, [pc, #236]	; (8013ec4 <etharp_find_entry+0x2e4>)
 8013dd6:	483a      	ldr	r0, [pc, #232]	; (8013ec0 <etharp_find_entry+0x2e0>)
 8013dd8:	f002 ffb4 	bl	8016d44 <iprintf>
 8013ddc:	e010      	b.n	8013e00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013dde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013de2:	2b09      	cmp	r3, #9
 8013de4:	dc02      	bgt.n	8013dec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013de8:	843b      	strh	r3, [r7, #32]
 8013dea:	e009      	b.n	8013e00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013dec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013df0:	2b09      	cmp	r3, #9
 8013df2:	dc02      	bgt.n	8013dfa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013df4:	8bfb      	ldrh	r3, [r7, #30]
 8013df6:	843b      	strh	r3, [r7, #32]
 8013df8:	e002      	b.n	8013e00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfe:	e054      	b.n	8013eaa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e04:	2b09      	cmp	r3, #9
 8013e06:	dd06      	ble.n	8013e16 <etharp_find_entry+0x236>
 8013e08:	4b2b      	ldr	r3, [pc, #172]	; (8013eb8 <etharp_find_entry+0x2d8>)
 8013e0a:	f240 127f 	movw	r2, #383	; 0x17f
 8013e0e:	492e      	ldr	r1, [pc, #184]	; (8013ec8 <etharp_find_entry+0x2e8>)
 8013e10:	482b      	ldr	r0, [pc, #172]	; (8013ec0 <etharp_find_entry+0x2e0>)
 8013e12:	f002 ff97 	bl	8016d44 <iprintf>
    etharp_free_entry(i);
 8013e16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff fe06 	bl	8013a2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e24:	2b09      	cmp	r3, #9
 8013e26:	dd06      	ble.n	8013e36 <etharp_find_entry+0x256>
 8013e28:	4b23      	ldr	r3, [pc, #140]	; (8013eb8 <etharp_find_entry+0x2d8>)
 8013e2a:	f240 1283 	movw	r2, #387	; 0x183
 8013e2e:	4926      	ldr	r1, [pc, #152]	; (8013ec8 <etharp_find_entry+0x2e8>)
 8013e30:	4823      	ldr	r0, [pc, #140]	; (8013ec0 <etharp_find_entry+0x2e0>)
 8013e32:	f002 ff87 	bl	8016d44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e3a:	491e      	ldr	r1, [pc, #120]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	4413      	add	r3, r2
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	440b      	add	r3, r1
 8013e46:	3314      	adds	r3, #20
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d006      	beq.n	8013e5c <etharp_find_entry+0x27c>
 8013e4e:	4b1a      	ldr	r3, [pc, #104]	; (8013eb8 <etharp_find_entry+0x2d8>)
 8013e50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013e54:	491d      	ldr	r1, [pc, #116]	; (8013ecc <etharp_find_entry+0x2ec>)
 8013e56:	481a      	ldr	r0, [pc, #104]	; (8013ec0 <etharp_find_entry+0x2e0>)
 8013e58:	f002 ff74 	bl	8016d44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00b      	beq.n	8013e7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6819      	ldr	r1, [r3, #0]
 8013e6a:	4812      	ldr	r0, [pc, #72]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013e6c:	4613      	mov	r3, r2
 8013e6e:	005b      	lsls	r3, r3, #1
 8013e70:	4413      	add	r3, r2
 8013e72:	00db      	lsls	r3, r3, #3
 8013e74:	4403      	add	r3, r0
 8013e76:	3304      	adds	r3, #4
 8013e78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013e7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e7e:	490d      	ldr	r1, [pc, #52]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013e80:	4613      	mov	r3, r2
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	4413      	add	r3, r2
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	440b      	add	r3, r1
 8013e8a:	3312      	adds	r3, #18
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013e90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e94:	4907      	ldr	r1, [pc, #28]	; (8013eb4 <etharp_find_entry+0x2d4>)
 8013e96:	4613      	mov	r3, r2
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	440b      	add	r3, r1
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013ea6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3728      	adds	r7, #40	; 0x28
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	2000038c 	.word	0x2000038c
 8013eb8:	0801d318 	.word	0x0801d318
 8013ebc:	0801d350 	.word	0x0801d350
 8013ec0:	0801d390 	.word	0x0801d390
 8013ec4:	0801d3b8 	.word	0x0801d3b8
 8013ec8:	0801d3d0 	.word	0x0801d3d0
 8013ecc:	0801d3e4 	.word	0x0801d3e4

08013ed0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b088      	sub	sp, #32
 8013ed4:	af02      	add	r7, sp, #8
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	607a      	str	r2, [r7, #4]
 8013edc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ee4:	2b06      	cmp	r3, #6
 8013ee6:	d006      	beq.n	8013ef6 <etharp_update_arp_entry+0x26>
 8013ee8:	4b48      	ldr	r3, [pc, #288]	; (801400c <etharp_update_arp_entry+0x13c>)
 8013eea:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013eee:	4948      	ldr	r1, [pc, #288]	; (8014010 <etharp_update_arp_entry+0x140>)
 8013ef0:	4848      	ldr	r0, [pc, #288]	; (8014014 <etharp_update_arp_entry+0x144>)
 8013ef2:	f002 ff27 	bl	8016d44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d012      	beq.n	8013f22 <etharp_update_arp_entry+0x52>
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d00e      	beq.n	8013f22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	68f9      	ldr	r1, [r7, #12]
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f001 f920 	bl	8015150 <ip4_addr_isbroadcast_u32>
 8013f10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d105      	bne.n	8013f22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f1e:	2be0      	cmp	r3, #224	; 0xe0
 8013f20:	d102      	bne.n	8013f28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f22:	f06f 030f 	mvn.w	r3, #15
 8013f26:	e06c      	b.n	8014002 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013f28:	78fb      	ldrb	r3, [r7, #3]
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	68b8      	ldr	r0, [r7, #8]
 8013f30:	f7ff fe56 	bl	8013be0 <etharp_find_entry>
 8013f34:	4603      	mov	r3, r0
 8013f36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013f38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	da02      	bge.n	8013f46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013f40:	8afb      	ldrh	r3, [r7, #22]
 8013f42:	b25b      	sxtb	r3, r3
 8013f44:	e05d      	b.n	8014002 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013f46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f4a:	4933      	ldr	r1, [pc, #204]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	4413      	add	r3, r2
 8013f52:	00db      	lsls	r3, r3, #3
 8013f54:	440b      	add	r3, r1
 8013f56:	3314      	adds	r3, #20
 8013f58:	2202      	movs	r2, #2
 8013f5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f60:	492d      	ldr	r1, [pc, #180]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013f62:	4613      	mov	r3, r2
 8013f64:	005b      	lsls	r3, r3, #1
 8013f66:	4413      	add	r3, r2
 8013f68:	00db      	lsls	r3, r3, #3
 8013f6a:	440b      	add	r3, r1
 8013f6c:	3308      	adds	r3, #8
 8013f6e:	68fa      	ldr	r2, [r7, #12]
 8013f70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	3308      	adds	r3, #8
 8013f80:	4a25      	ldr	r2, [pc, #148]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013f82:	4413      	add	r3, r2
 8013f84:	3304      	adds	r3, #4
 8013f86:	2206      	movs	r2, #6
 8013f88:	6879      	ldr	r1, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f002 f862 	bl	8016054 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013f90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f94:	4920      	ldr	r1, [pc, #128]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013f96:	4613      	mov	r3, r2
 8013f98:	005b      	lsls	r3, r3, #1
 8013f9a:	4413      	add	r3, r2
 8013f9c:	00db      	lsls	r3, r3, #3
 8013f9e:	440b      	add	r3, r1
 8013fa0:	3312      	adds	r3, #18
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013fa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013faa:	491b      	ldr	r1, [pc, #108]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	440b      	add	r3, r1
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d021      	beq.n	8014000 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013fbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fc0:	4915      	ldr	r1, [pc, #84]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	005b      	lsls	r3, r3, #1
 8013fc6:	4413      	add	r3, r2
 8013fc8:	00db      	lsls	r3, r3, #3
 8013fca:	440b      	add	r3, r1
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fd4:	4910      	ldr	r1, [pc, #64]	; (8014018 <etharp_update_arp_entry+0x148>)
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	005b      	lsls	r3, r3, #1
 8013fda:	4413      	add	r3, r2
 8013fdc:	00db      	lsls	r3, r3, #3
 8013fde:	440b      	add	r3, r1
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6939      	ldr	r1, [r7, #16]
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f001 ffb3 	bl	8015f60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013ffa:	6938      	ldr	r0, [r7, #16]
 8013ffc:	f7f7 fd04 	bl	800ba08 <pbuf_free>
  }
  return ERR_OK;
 8014000:	2300      	movs	r3, #0
}
 8014002:	4618      	mov	r0, r3
 8014004:	3718      	adds	r7, #24
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}
 801400a:	bf00      	nop
 801400c:	0801d318 	.word	0x0801d318
 8014010:	0801d410 	.word	0x0801d410
 8014014:	0801d390 	.word	0x0801d390
 8014018:	2000038c 	.word	0x2000038c

0801401c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b084      	sub	sp, #16
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014024:	2300      	movs	r3, #0
 8014026:	60fb      	str	r3, [r7, #12]
 8014028:	e01e      	b.n	8014068 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801402a:	4913      	ldr	r1, [pc, #76]	; (8014078 <etharp_cleanup_netif+0x5c>)
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	4613      	mov	r3, r2
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	4413      	add	r3, r2
 8014034:	00db      	lsls	r3, r3, #3
 8014036:	440b      	add	r3, r1
 8014038:	3314      	adds	r3, #20
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801403e:	7afb      	ldrb	r3, [r7, #11]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00e      	beq.n	8014062 <etharp_cleanup_netif+0x46>
 8014044:	490c      	ldr	r1, [pc, #48]	; (8014078 <etharp_cleanup_netif+0x5c>)
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	4613      	mov	r3, r2
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	440b      	add	r3, r1
 8014052:	3308      	adds	r3, #8
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	429a      	cmp	r2, r3
 801405a:	d102      	bne.n	8014062 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	f7ff fce5 	bl	8013a2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	3301      	adds	r3, #1
 8014066:	60fb      	str	r3, [r7, #12]
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2b09      	cmp	r3, #9
 801406c:	dddd      	ble.n	801402a <etharp_cleanup_netif+0xe>
    }
  }
}
 801406e:	bf00      	nop
 8014070:	bf00      	nop
 8014072:	3710      	adds	r7, #16
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	2000038c 	.word	0x2000038c

0801407c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801407c:	b5b0      	push	{r4, r5, r7, lr}
 801407e:	b08a      	sub	sp, #40	; 0x28
 8014080:	af04      	add	r7, sp, #16
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d107      	bne.n	801409c <etharp_input+0x20>
 801408c:	4b3f      	ldr	r3, [pc, #252]	; (801418c <etharp_input+0x110>)
 801408e:	f240 228a 	movw	r2, #650	; 0x28a
 8014092:	493f      	ldr	r1, [pc, #252]	; (8014190 <etharp_input+0x114>)
 8014094:	483f      	ldr	r0, [pc, #252]	; (8014194 <etharp_input+0x118>)
 8014096:	f002 fe55 	bl	8016d44 <iprintf>
 801409a:	e074      	b.n	8014186 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140ac:	d10c      	bne.n	80140c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140b2:	2b06      	cmp	r3, #6
 80140b4:	d108      	bne.n	80140c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140ba:	2b04      	cmp	r3, #4
 80140bc:	d104      	bne.n	80140c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	885b      	ldrh	r3, [r3, #2]
 80140c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80140c4:	2b08      	cmp	r3, #8
 80140c6:	d003      	beq.n	80140d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7f7 fc9d 	bl	800ba08 <pbuf_free>
    return;
 80140ce:	e05a      	b.n	8014186 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	330e      	adds	r3, #14
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	3318      	adds	r3, #24
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	3304      	adds	r3, #4
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d102      	bne.n	80140f0 <etharp_input+0x74>
    for_us = 0;
 80140ea:	2300      	movs	r3, #0
 80140ec:	75fb      	strb	r3, [r7, #23]
 80140ee:	e009      	b.n	8014104 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	3304      	adds	r3, #4
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	bf0c      	ite	eq
 80140fc:	2301      	moveq	r3, #1
 80140fe:	2300      	movne	r3, #0
 8014100:	b2db      	uxtb	r3, r3
 8014102:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	f103 0208 	add.w	r2, r3, #8
 801410a:	7dfb      	ldrb	r3, [r7, #23]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d001      	beq.n	8014114 <etharp_input+0x98>
 8014110:	2301      	movs	r3, #1
 8014112:	e000      	b.n	8014116 <etharp_input+0x9a>
 8014114:	2302      	movs	r3, #2
 8014116:	f107 010c 	add.w	r1, r7, #12
 801411a:	6838      	ldr	r0, [r7, #0]
 801411c:	f7ff fed8 	bl	8013ed0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	88db      	ldrh	r3, [r3, #6]
 8014124:	b29b      	uxth	r3, r3
 8014126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801412a:	d003      	beq.n	8014134 <etharp_input+0xb8>
 801412c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014130:	d01e      	beq.n	8014170 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014132:	e025      	b.n	8014180 <etharp_input+0x104>
      if (for_us) {
 8014134:	7dfb      	ldrb	r3, [r7, #23]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d021      	beq.n	801417e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014150:	693a      	ldr	r2, [r7, #16]
 8014152:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014154:	2102      	movs	r1, #2
 8014156:	9103      	str	r1, [sp, #12]
 8014158:	f107 010c 	add.w	r1, r7, #12
 801415c:	9102      	str	r1, [sp, #8]
 801415e:	9201      	str	r2, [sp, #4]
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	462b      	mov	r3, r5
 8014164:	4622      	mov	r2, r4
 8014166:	4601      	mov	r1, r0
 8014168:	6838      	ldr	r0, [r7, #0]
 801416a:	f000 faef 	bl	801474c <etharp_raw>
      break;
 801416e:	e006      	b.n	801417e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014170:	f107 030c 	add.w	r3, r7, #12
 8014174:	4619      	mov	r1, r3
 8014176:	6838      	ldr	r0, [r7, #0]
 8014178:	f7fe f9fc 	bl	8012574 <dhcp_arp_reply>
      break;
 801417c:	e000      	b.n	8014180 <etharp_input+0x104>
      break;
 801417e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f7f7 fc41 	bl	800ba08 <pbuf_free>
}
 8014186:	3718      	adds	r7, #24
 8014188:	46bd      	mov	sp, r7
 801418a:	bdb0      	pop	{r4, r5, r7, pc}
 801418c:	0801d318 	.word	0x0801d318
 8014190:	0801d468 	.word	0x0801d468
 8014194:	0801d390 	.word	0x0801d390

08014198 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b086      	sub	sp, #24
 801419c:	af02      	add	r7, sp, #8
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	4613      	mov	r3, r2
 80141a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80141a6:	79fa      	ldrb	r2, [r7, #7]
 80141a8:	4944      	ldr	r1, [pc, #272]	; (80142bc <etharp_output_to_arp_index+0x124>)
 80141aa:	4613      	mov	r3, r2
 80141ac:	005b      	lsls	r3, r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	00db      	lsls	r3, r3, #3
 80141b2:	440b      	add	r3, r1
 80141b4:	3314      	adds	r3, #20
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d806      	bhi.n	80141ca <etharp_output_to_arp_index+0x32>
 80141bc:	4b40      	ldr	r3, [pc, #256]	; (80142c0 <etharp_output_to_arp_index+0x128>)
 80141be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80141c2:	4940      	ldr	r1, [pc, #256]	; (80142c4 <etharp_output_to_arp_index+0x12c>)
 80141c4:	4840      	ldr	r0, [pc, #256]	; (80142c8 <etharp_output_to_arp_index+0x130>)
 80141c6:	f002 fdbd 	bl	8016d44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80141ca:	79fa      	ldrb	r2, [r7, #7]
 80141cc:	493b      	ldr	r1, [pc, #236]	; (80142bc <etharp_output_to_arp_index+0x124>)
 80141ce:	4613      	mov	r3, r2
 80141d0:	005b      	lsls	r3, r3, #1
 80141d2:	4413      	add	r3, r2
 80141d4:	00db      	lsls	r3, r3, #3
 80141d6:	440b      	add	r3, r1
 80141d8:	3314      	adds	r3, #20
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	2b02      	cmp	r3, #2
 80141de:	d153      	bne.n	8014288 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80141e0:	79fa      	ldrb	r2, [r7, #7]
 80141e2:	4936      	ldr	r1, [pc, #216]	; (80142bc <etharp_output_to_arp_index+0x124>)
 80141e4:	4613      	mov	r3, r2
 80141e6:	005b      	lsls	r3, r3, #1
 80141e8:	4413      	add	r3, r2
 80141ea:	00db      	lsls	r3, r3, #3
 80141ec:	440b      	add	r3, r1
 80141ee:	3312      	adds	r3, #18
 80141f0:	881b      	ldrh	r3, [r3, #0]
 80141f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80141f6:	d919      	bls.n	801422c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80141f8:	79fa      	ldrb	r2, [r7, #7]
 80141fa:	4613      	mov	r3, r2
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	4413      	add	r3, r2
 8014200:	00db      	lsls	r3, r3, #3
 8014202:	4a2e      	ldr	r2, [pc, #184]	; (80142bc <etharp_output_to_arp_index+0x124>)
 8014204:	4413      	add	r3, r2
 8014206:	3304      	adds	r3, #4
 8014208:	4619      	mov	r1, r3
 801420a:	68f8      	ldr	r0, [r7, #12]
 801420c:	f000 fb4c 	bl	80148a8 <etharp_request>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d138      	bne.n	8014288 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014216:	79fa      	ldrb	r2, [r7, #7]
 8014218:	4928      	ldr	r1, [pc, #160]	; (80142bc <etharp_output_to_arp_index+0x124>)
 801421a:	4613      	mov	r3, r2
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	4413      	add	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	440b      	add	r3, r1
 8014224:	3314      	adds	r3, #20
 8014226:	2203      	movs	r2, #3
 8014228:	701a      	strb	r2, [r3, #0]
 801422a:	e02d      	b.n	8014288 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801422c:	79fa      	ldrb	r2, [r7, #7]
 801422e:	4923      	ldr	r1, [pc, #140]	; (80142bc <etharp_output_to_arp_index+0x124>)
 8014230:	4613      	mov	r3, r2
 8014232:	005b      	lsls	r3, r3, #1
 8014234:	4413      	add	r3, r2
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	440b      	add	r3, r1
 801423a:	3312      	adds	r3, #18
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014242:	d321      	bcc.n	8014288 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014244:	79fa      	ldrb	r2, [r7, #7]
 8014246:	4613      	mov	r3, r2
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	4a1b      	ldr	r2, [pc, #108]	; (80142bc <etharp_output_to_arp_index+0x124>)
 8014250:	4413      	add	r3, r2
 8014252:	1d19      	adds	r1, r3, #4
 8014254:	79fa      	ldrb	r2, [r7, #7]
 8014256:	4613      	mov	r3, r2
 8014258:	005b      	lsls	r3, r3, #1
 801425a:	4413      	add	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	3308      	adds	r3, #8
 8014260:	4a16      	ldr	r2, [pc, #88]	; (80142bc <etharp_output_to_arp_index+0x124>)
 8014262:	4413      	add	r3, r2
 8014264:	3304      	adds	r3, #4
 8014266:	461a      	mov	r2, r3
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f000 fafb 	bl	8014864 <etharp_request_dst>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d109      	bne.n	8014288 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014274:	79fa      	ldrb	r2, [r7, #7]
 8014276:	4911      	ldr	r1, [pc, #68]	; (80142bc <etharp_output_to_arp_index+0x124>)
 8014278:	4613      	mov	r3, r2
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	4413      	add	r3, r2
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	440b      	add	r3, r1
 8014282:	3314      	adds	r3, #20
 8014284:	2203      	movs	r2, #3
 8014286:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801428e:	79fa      	ldrb	r2, [r7, #7]
 8014290:	4613      	mov	r3, r2
 8014292:	005b      	lsls	r3, r3, #1
 8014294:	4413      	add	r3, r2
 8014296:	00db      	lsls	r3, r3, #3
 8014298:	3308      	adds	r3, #8
 801429a:	4a08      	ldr	r2, [pc, #32]	; (80142bc <etharp_output_to_arp_index+0x124>)
 801429c:	4413      	add	r3, r2
 801429e:	3304      	adds	r3, #4
 80142a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80142a4:	9200      	str	r2, [sp, #0]
 80142a6:	460a      	mov	r2, r1
 80142a8:	68b9      	ldr	r1, [r7, #8]
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	f001 fe58 	bl	8015f60 <ethernet_output>
 80142b0:	4603      	mov	r3, r0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	2000038c 	.word	0x2000038c
 80142c0:	0801d318 	.word	0x0801d318
 80142c4:	0801d488 	.word	0x0801d488
 80142c8:	0801d390 	.word	0x0801d390

080142cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b08a      	sub	sp, #40	; 0x28
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d106      	bne.n	80142f0 <etharp_output+0x24>
 80142e2:	4b73      	ldr	r3, [pc, #460]	; (80144b0 <etharp_output+0x1e4>)
 80142e4:	f240 321e 	movw	r2, #798	; 0x31e
 80142e8:	4972      	ldr	r1, [pc, #456]	; (80144b4 <etharp_output+0x1e8>)
 80142ea:	4873      	ldr	r0, [pc, #460]	; (80144b8 <etharp_output+0x1ec>)
 80142ec:	f002 fd2a 	bl	8016d44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d106      	bne.n	8014304 <etharp_output+0x38>
 80142f6:	4b6e      	ldr	r3, [pc, #440]	; (80144b0 <etharp_output+0x1e4>)
 80142f8:	f240 321f 	movw	r2, #799	; 0x31f
 80142fc:	496f      	ldr	r1, [pc, #444]	; (80144bc <etharp_output+0x1f0>)
 80142fe:	486e      	ldr	r0, [pc, #440]	; (80144b8 <etharp_output+0x1ec>)
 8014300:	f002 fd20 	bl	8016d44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d106      	bne.n	8014318 <etharp_output+0x4c>
 801430a:	4b69      	ldr	r3, [pc, #420]	; (80144b0 <etharp_output+0x1e4>)
 801430c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014310:	496b      	ldr	r1, [pc, #428]	; (80144c0 <etharp_output+0x1f4>)
 8014312:	4869      	ldr	r0, [pc, #420]	; (80144b8 <etharp_output+0x1ec>)
 8014314:	f002 fd16 	bl	8016d44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	68f9      	ldr	r1, [r7, #12]
 801431e:	4618      	mov	r0, r3
 8014320:	f000 ff16 	bl	8015150 <ip4_addr_isbroadcast_u32>
 8014324:	4603      	mov	r3, r0
 8014326:	2b00      	cmp	r3, #0
 8014328:	d002      	beq.n	8014330 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801432a:	4b66      	ldr	r3, [pc, #408]	; (80144c4 <etharp_output+0x1f8>)
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	e0af      	b.n	8014490 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014338:	2be0      	cmp	r3, #224	; 0xe0
 801433a:	d118      	bne.n	801436e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801433c:	2301      	movs	r3, #1
 801433e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014340:	2300      	movs	r3, #0
 8014342:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014344:	235e      	movs	r3, #94	; 0x5e
 8014346:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	3301      	adds	r3, #1
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014352:	b2db      	uxtb	r3, r3
 8014354:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	3302      	adds	r3, #2
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	3303      	adds	r3, #3
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014366:	f107 0310 	add.w	r3, r7, #16
 801436a:	61fb      	str	r3, [r7, #28]
 801436c:	e090      	b.n	8014490 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	3304      	adds	r3, #4
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	405a      	eors	r2, r3
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	3308      	adds	r3, #8
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4013      	ands	r3, r2
 8014382:	2b00      	cmp	r3, #0
 8014384:	d012      	beq.n	80143ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801438c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014390:	4293      	cmp	r3, r2
 8014392:	d00b      	beq.n	80143ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	330c      	adds	r3, #12
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d003      	beq.n	80143a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	330c      	adds	r3, #12
 80143a2:	61bb      	str	r3, [r7, #24]
 80143a4:	e002      	b.n	80143ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80143a6:	f06f 0303 	mvn.w	r3, #3
 80143aa:	e07d      	b.n	80144a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80143ac:	4b46      	ldr	r3, [pc, #280]	; (80144c8 <etharp_output+0x1fc>)
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	4619      	mov	r1, r3
 80143b2:	4a46      	ldr	r2, [pc, #280]	; (80144cc <etharp_output+0x200>)
 80143b4:	460b      	mov	r3, r1
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	440b      	add	r3, r1
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	4413      	add	r3, r2
 80143be:	3314      	adds	r3, #20
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	2b01      	cmp	r3, #1
 80143c4:	d925      	bls.n	8014412 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80143c6:	4b40      	ldr	r3, [pc, #256]	; (80144c8 <etharp_output+0x1fc>)
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	4619      	mov	r1, r3
 80143cc:	4a3f      	ldr	r2, [pc, #252]	; (80144cc <etharp_output+0x200>)
 80143ce:	460b      	mov	r3, r1
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	440b      	add	r3, r1
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	4413      	add	r3, r2
 80143d8:	3308      	adds	r3, #8
 80143da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d117      	bne.n	8014412 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	4b38      	ldr	r3, [pc, #224]	; (80144c8 <etharp_output+0x1fc>)
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	4618      	mov	r0, r3
 80143ec:	4937      	ldr	r1, [pc, #220]	; (80144cc <etharp_output+0x200>)
 80143ee:	4603      	mov	r3, r0
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4403      	add	r3, r0
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	3304      	adds	r3, #4
 80143fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d108      	bne.n	8014412 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014400:	4b31      	ldr	r3, [pc, #196]	; (80144c8 <etharp_output+0x1fc>)
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	461a      	mov	r2, r3
 8014406:	68b9      	ldr	r1, [r7, #8]
 8014408:	68f8      	ldr	r0, [r7, #12]
 801440a:	f7ff fec5 	bl	8014198 <etharp_output_to_arp_index>
 801440e:	4603      	mov	r3, r0
 8014410:	e04a      	b.n	80144a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014412:	2300      	movs	r3, #0
 8014414:	75fb      	strb	r3, [r7, #23]
 8014416:	e031      	b.n	801447c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014418:	7dfa      	ldrb	r2, [r7, #23]
 801441a:	492c      	ldr	r1, [pc, #176]	; (80144cc <etharp_output+0x200>)
 801441c:	4613      	mov	r3, r2
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	4413      	add	r3, r2
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	440b      	add	r3, r1
 8014426:	3314      	adds	r3, #20
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	2b01      	cmp	r3, #1
 801442c:	d923      	bls.n	8014476 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801442e:	7dfa      	ldrb	r2, [r7, #23]
 8014430:	4926      	ldr	r1, [pc, #152]	; (80144cc <etharp_output+0x200>)
 8014432:	4613      	mov	r3, r2
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	4413      	add	r3, r2
 8014438:	00db      	lsls	r3, r3, #3
 801443a:	440b      	add	r3, r1
 801443c:	3308      	adds	r3, #8
 801443e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	429a      	cmp	r2, r3
 8014444:	d117      	bne.n	8014476 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	6819      	ldr	r1, [r3, #0]
 801444a:	7dfa      	ldrb	r2, [r7, #23]
 801444c:	481f      	ldr	r0, [pc, #124]	; (80144cc <etharp_output+0x200>)
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	4403      	add	r3, r0
 8014458:	3304      	adds	r3, #4
 801445a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801445c:	4299      	cmp	r1, r3
 801445e:	d10a      	bne.n	8014476 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014460:	4a19      	ldr	r2, [pc, #100]	; (80144c8 <etharp_output+0x1fc>)
 8014462:	7dfb      	ldrb	r3, [r7, #23]
 8014464:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014466:	7dfb      	ldrb	r3, [r7, #23]
 8014468:	461a      	mov	r2, r3
 801446a:	68b9      	ldr	r1, [r7, #8]
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	f7ff fe93 	bl	8014198 <etharp_output_to_arp_index>
 8014472:	4603      	mov	r3, r0
 8014474:	e018      	b.n	80144a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014476:	7dfb      	ldrb	r3, [r7, #23]
 8014478:	3301      	adds	r3, #1
 801447a:	75fb      	strb	r3, [r7, #23]
 801447c:	7dfb      	ldrb	r3, [r7, #23]
 801447e:	2b09      	cmp	r3, #9
 8014480:	d9ca      	bls.n	8014418 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014482:	68ba      	ldr	r2, [r7, #8]
 8014484:	69b9      	ldr	r1, [r7, #24]
 8014486:	68f8      	ldr	r0, [r7, #12]
 8014488:	f000 f822 	bl	80144d0 <etharp_query>
 801448c:	4603      	mov	r3, r0
 801448e:	e00b      	b.n	80144a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801449a:	9300      	str	r3, [sp, #0]
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	68b9      	ldr	r1, [r7, #8]
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f001 fd5d 	bl	8015f60 <ethernet_output>
 80144a6:	4603      	mov	r3, r0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3720      	adds	r7, #32
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	0801d318 	.word	0x0801d318
 80144b4:	0801d468 	.word	0x0801d468
 80144b8:	0801d390 	.word	0x0801d390
 80144bc:	0801d4b8 	.word	0x0801d4b8
 80144c0:	0801d458 	.word	0x0801d458
 80144c4:	0801dadc 	.word	0x0801dadc
 80144c8:	2000047c 	.word	0x2000047c
 80144cc:	2000038c 	.word	0x2000038c

080144d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b08c      	sub	sp, #48	; 0x30
 80144d4:	af02      	add	r7, sp, #8
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	60b9      	str	r1, [r7, #8]
 80144da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	332a      	adds	r3, #42	; 0x2a
 80144e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80144e2:	23ff      	movs	r3, #255	; 0xff
 80144e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	68f9      	ldr	r1, [r7, #12]
 80144f2:	4618      	mov	r0, r3
 80144f4:	f000 fe2c 	bl	8015150 <ip4_addr_isbroadcast_u32>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10c      	bne.n	8014518 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014506:	2be0      	cmp	r3, #224	; 0xe0
 8014508:	d006      	beq.n	8014518 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d003      	beq.n	8014518 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d102      	bne.n	801451e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014518:	f06f 030f 	mvn.w	r3, #15
 801451c:	e101      	b.n	8014722 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	2101      	movs	r1, #1
 8014522:	68b8      	ldr	r0, [r7, #8]
 8014524:	f7ff fb5c 	bl	8013be0 <etharp_find_entry>
 8014528:	4603      	mov	r3, r0
 801452a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801452c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014530:	2b00      	cmp	r3, #0
 8014532:	da02      	bge.n	801453a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014534:	8a7b      	ldrh	r3, [r7, #18]
 8014536:	b25b      	sxtb	r3, r3
 8014538:	e0f3      	b.n	8014722 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801453a:	8a7b      	ldrh	r3, [r7, #18]
 801453c:	2b7e      	cmp	r3, #126	; 0x7e
 801453e:	d906      	bls.n	801454e <etharp_query+0x7e>
 8014540:	4b7a      	ldr	r3, [pc, #488]	; (801472c <etharp_query+0x25c>)
 8014542:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014546:	497a      	ldr	r1, [pc, #488]	; (8014730 <etharp_query+0x260>)
 8014548:	487a      	ldr	r0, [pc, #488]	; (8014734 <etharp_query+0x264>)
 801454a:	f002 fbfb 	bl	8016d44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801454e:	8a7b      	ldrh	r3, [r7, #18]
 8014550:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014552:	7c7a      	ldrb	r2, [r7, #17]
 8014554:	4978      	ldr	r1, [pc, #480]	; (8014738 <etharp_query+0x268>)
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3314      	adds	r3, #20
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d115      	bne.n	8014594 <etharp_query+0xc4>
    is_new_entry = 1;
 8014568:	2301      	movs	r3, #1
 801456a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801456c:	7c7a      	ldrb	r2, [r7, #17]
 801456e:	4972      	ldr	r1, [pc, #456]	; (8014738 <etharp_query+0x268>)
 8014570:	4613      	mov	r3, r2
 8014572:	005b      	lsls	r3, r3, #1
 8014574:	4413      	add	r3, r2
 8014576:	00db      	lsls	r3, r3, #3
 8014578:	440b      	add	r3, r1
 801457a:	3314      	adds	r3, #20
 801457c:	2201      	movs	r2, #1
 801457e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014580:	7c7a      	ldrb	r2, [r7, #17]
 8014582:	496d      	ldr	r1, [pc, #436]	; (8014738 <etharp_query+0x268>)
 8014584:	4613      	mov	r3, r2
 8014586:	005b      	lsls	r3, r3, #1
 8014588:	4413      	add	r3, r2
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	440b      	add	r3, r1
 801458e:	3308      	adds	r3, #8
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014594:	7c7a      	ldrb	r2, [r7, #17]
 8014596:	4968      	ldr	r1, [pc, #416]	; (8014738 <etharp_query+0x268>)
 8014598:	4613      	mov	r3, r2
 801459a:	005b      	lsls	r3, r3, #1
 801459c:	4413      	add	r3, r2
 801459e:	00db      	lsls	r3, r3, #3
 80145a0:	440b      	add	r3, r1
 80145a2:	3314      	adds	r3, #20
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d011      	beq.n	80145ce <etharp_query+0xfe>
 80145aa:	7c7a      	ldrb	r2, [r7, #17]
 80145ac:	4962      	ldr	r1, [pc, #392]	; (8014738 <etharp_query+0x268>)
 80145ae:	4613      	mov	r3, r2
 80145b0:	005b      	lsls	r3, r3, #1
 80145b2:	4413      	add	r3, r2
 80145b4:	00db      	lsls	r3, r3, #3
 80145b6:	440b      	add	r3, r1
 80145b8:	3314      	adds	r3, #20
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d806      	bhi.n	80145ce <etharp_query+0xfe>
 80145c0:	4b5a      	ldr	r3, [pc, #360]	; (801472c <etharp_query+0x25c>)
 80145c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80145c6:	495d      	ldr	r1, [pc, #372]	; (801473c <etharp_query+0x26c>)
 80145c8:	485a      	ldr	r0, [pc, #360]	; (8014734 <etharp_query+0x264>)
 80145ca:	f002 fbbb 	bl	8016d44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80145ce:	6a3b      	ldr	r3, [r7, #32]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d102      	bne.n	80145da <etharp_query+0x10a>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d10c      	bne.n	80145f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80145da:	68b9      	ldr	r1, [r7, #8]
 80145dc:	68f8      	ldr	r0, [r7, #12]
 80145de:	f000 f963 	bl	80148a8 <etharp_request>
 80145e2:	4603      	mov	r3, r0
 80145e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d102      	bne.n	80145f4 <etharp_query+0x124>
      return result;
 80145ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80145f2:	e096      	b.n	8014722 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d106      	bne.n	8014608 <etharp_query+0x138>
 80145fa:	4b4c      	ldr	r3, [pc, #304]	; (801472c <etharp_query+0x25c>)
 80145fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014600:	494f      	ldr	r1, [pc, #316]	; (8014740 <etharp_query+0x270>)
 8014602:	484c      	ldr	r0, [pc, #304]	; (8014734 <etharp_query+0x264>)
 8014604:	f002 fb9e 	bl	8016d44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014608:	7c7a      	ldrb	r2, [r7, #17]
 801460a:	494b      	ldr	r1, [pc, #300]	; (8014738 <etharp_query+0x268>)
 801460c:	4613      	mov	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	4413      	add	r3, r2
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	440b      	add	r3, r1
 8014616:	3314      	adds	r3, #20
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	2b01      	cmp	r3, #1
 801461c:	d917      	bls.n	801464e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801461e:	4a49      	ldr	r2, [pc, #292]	; (8014744 <etharp_query+0x274>)
 8014620:	7c7b      	ldrb	r3, [r7, #17]
 8014622:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014624:	7c7a      	ldrb	r2, [r7, #17]
 8014626:	4613      	mov	r3, r2
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	4413      	add	r3, r2
 801462c:	00db      	lsls	r3, r3, #3
 801462e:	3308      	adds	r3, #8
 8014630:	4a41      	ldr	r2, [pc, #260]	; (8014738 <etharp_query+0x268>)
 8014632:	4413      	add	r3, r2
 8014634:	3304      	adds	r3, #4
 8014636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801463a:	9200      	str	r2, [sp, #0]
 801463c:	697a      	ldr	r2, [r7, #20]
 801463e:	6879      	ldr	r1, [r7, #4]
 8014640:	68f8      	ldr	r0, [r7, #12]
 8014642:	f001 fc8d 	bl	8015f60 <ethernet_output>
 8014646:	4603      	mov	r3, r0
 8014648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801464c:	e067      	b.n	801471e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801464e:	7c7a      	ldrb	r2, [r7, #17]
 8014650:	4939      	ldr	r1, [pc, #228]	; (8014738 <etharp_query+0x268>)
 8014652:	4613      	mov	r3, r2
 8014654:	005b      	lsls	r3, r3, #1
 8014656:	4413      	add	r3, r2
 8014658:	00db      	lsls	r3, r3, #3
 801465a:	440b      	add	r3, r1
 801465c:	3314      	adds	r3, #20
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	2b01      	cmp	r3, #1
 8014662:	d15c      	bne.n	801471e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801466c:	e01c      	b.n	80146a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	895a      	ldrh	r2, [r3, #10]
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	891b      	ldrh	r3, [r3, #8]
 8014676:	429a      	cmp	r2, r3
 8014678:	d10a      	bne.n	8014690 <etharp_query+0x1c0>
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d006      	beq.n	8014690 <etharp_query+0x1c0>
 8014682:	4b2a      	ldr	r3, [pc, #168]	; (801472c <etharp_query+0x25c>)
 8014684:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014688:	492f      	ldr	r1, [pc, #188]	; (8014748 <etharp_query+0x278>)
 801468a:	482a      	ldr	r0, [pc, #168]	; (8014734 <etharp_query+0x264>)
 801468c:	f002 fb5a 	bl	8016d44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	7b1b      	ldrb	r3, [r3, #12]
 8014694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014698:	2b00      	cmp	r3, #0
 801469a:	d002      	beq.n	80146a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801469c:	2301      	movs	r3, #1
 801469e:	61bb      	str	r3, [r7, #24]
        break;
 80146a0:	e005      	b.n	80146ae <etharp_query+0x1de>
      }
      p = p->next;
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d1df      	bne.n	801466e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d007      	beq.n	80146c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80146ba:	200e      	movs	r0, #14
 80146bc:	f7f7 fc10 	bl	800bee0 <pbuf_clone>
 80146c0:	61f8      	str	r0, [r7, #28]
 80146c2:	e004      	b.n	80146ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80146c8:	69f8      	ldr	r0, [r7, #28]
 80146ca:	f7f7 fa3d 	bl	800bb48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d021      	beq.n	8014718 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80146d4:	7c7a      	ldrb	r2, [r7, #17]
 80146d6:	4918      	ldr	r1, [pc, #96]	; (8014738 <etharp_query+0x268>)
 80146d8:	4613      	mov	r3, r2
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	4413      	add	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	440b      	add	r3, r1
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00a      	beq.n	80146fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80146e8:	7c7a      	ldrb	r2, [r7, #17]
 80146ea:	4913      	ldr	r1, [pc, #76]	; (8014738 <etharp_query+0x268>)
 80146ec:	4613      	mov	r3, r2
 80146ee:	005b      	lsls	r3, r3, #1
 80146f0:	4413      	add	r3, r2
 80146f2:	00db      	lsls	r3, r3, #3
 80146f4:	440b      	add	r3, r1
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f7 f985 	bl	800ba08 <pbuf_free>
      }
      arp_table[i].q = p;
 80146fe:	7c7a      	ldrb	r2, [r7, #17]
 8014700:	490d      	ldr	r1, [pc, #52]	; (8014738 <etharp_query+0x268>)
 8014702:	4613      	mov	r3, r2
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	4413      	add	r3, r2
 8014708:	00db      	lsls	r3, r3, #3
 801470a:	440b      	add	r3, r1
 801470c:	69fa      	ldr	r2, [r7, #28]
 801470e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014710:	2300      	movs	r3, #0
 8014712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014716:	e002      	b.n	801471e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014718:	23ff      	movs	r3, #255	; 0xff
 801471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801471e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014722:	4618      	mov	r0, r3
 8014724:	3728      	adds	r7, #40	; 0x28
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	0801d318 	.word	0x0801d318
 8014730:	0801d4c4 	.word	0x0801d4c4
 8014734:	0801d390 	.word	0x0801d390
 8014738:	2000038c 	.word	0x2000038c
 801473c:	0801d4d4 	.word	0x0801d4d4
 8014740:	0801d4b8 	.word	0x0801d4b8
 8014744:	2000047c 	.word	0x2000047c
 8014748:	0801d4fc 	.word	0x0801d4fc

0801474c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08a      	sub	sp, #40	; 0x28
 8014750:	af02      	add	r7, sp, #8
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
 8014758:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801475a:	2300      	movs	r3, #0
 801475c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d106      	bne.n	8014772 <etharp_raw+0x26>
 8014764:	4b3a      	ldr	r3, [pc, #232]	; (8014850 <etharp_raw+0x104>)
 8014766:	f240 4257 	movw	r2, #1111	; 0x457
 801476a:	493a      	ldr	r1, [pc, #232]	; (8014854 <etharp_raw+0x108>)
 801476c:	483a      	ldr	r0, [pc, #232]	; (8014858 <etharp_raw+0x10c>)
 801476e:	f002 fae9 	bl	8016d44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014772:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014776:	211c      	movs	r1, #28
 8014778:	200e      	movs	r0, #14
 801477a:	f7f6 fe61 	bl	800b440 <pbuf_alloc>
 801477e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d102      	bne.n	801478c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014786:	f04f 33ff 	mov.w	r3, #4294967295
 801478a:	e05d      	b.n	8014848 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	895b      	ldrh	r3, [r3, #10]
 8014790:	2b1b      	cmp	r3, #27
 8014792:	d806      	bhi.n	80147a2 <etharp_raw+0x56>
 8014794:	4b2e      	ldr	r3, [pc, #184]	; (8014850 <etharp_raw+0x104>)
 8014796:	f240 4262 	movw	r2, #1122	; 0x462
 801479a:	4930      	ldr	r1, [pc, #192]	; (801485c <etharp_raw+0x110>)
 801479c:	482e      	ldr	r0, [pc, #184]	; (8014858 <etharp_raw+0x10c>)
 801479e:	f002 fad1 	bl	8016d44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80147a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7f5 fe90 	bl	800a4d0 <lwip_htons>
 80147b0:	4603      	mov	r3, r0
 80147b2:	461a      	mov	r2, r3
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80147be:	2b06      	cmp	r3, #6
 80147c0:	d006      	beq.n	80147d0 <etharp_raw+0x84>
 80147c2:	4b23      	ldr	r3, [pc, #140]	; (8014850 <etharp_raw+0x104>)
 80147c4:	f240 4269 	movw	r2, #1129	; 0x469
 80147c8:	4925      	ldr	r1, [pc, #148]	; (8014860 <etharp_raw+0x114>)
 80147ca:	4823      	ldr	r0, [pc, #140]	; (8014858 <etharp_raw+0x10c>)
 80147cc:	f002 faba 	bl	8016d44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	3308      	adds	r3, #8
 80147d4:	2206      	movs	r2, #6
 80147d6:	6839      	ldr	r1, [r7, #0]
 80147d8:	4618      	mov	r0, r3
 80147da:	f001 fc3b 	bl	8016054 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	3312      	adds	r3, #18
 80147e2:	2206      	movs	r2, #6
 80147e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147e6:	4618      	mov	r0, r3
 80147e8:	f001 fc34 	bl	8016054 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	330e      	adds	r3, #14
 80147f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147f2:	6812      	ldr	r2, [r2, #0]
 80147f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	3318      	adds	r3, #24
 80147fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147fc:	6812      	ldr	r2, [r2, #0]
 80147fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	2200      	movs	r2, #0
 8014804:	701a      	strb	r2, [r3, #0]
 8014806:	2200      	movs	r2, #0
 8014808:	f042 0201 	orr.w	r2, r2, #1
 801480c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	2200      	movs	r2, #0
 8014812:	f042 0208 	orr.w	r2, r2, #8
 8014816:	709a      	strb	r2, [r3, #2]
 8014818:	2200      	movs	r2, #0
 801481a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	2206      	movs	r2, #6
 8014820:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	2204      	movs	r2, #4
 8014826:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014828:	f640 0306 	movw	r3, #2054	; 0x806
 801482c:	9300      	str	r3, [sp, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	69b9      	ldr	r1, [r7, #24]
 8014834:	68f8      	ldr	r0, [r7, #12]
 8014836:	f001 fb93 	bl	8015f60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801483a:	69b8      	ldr	r0, [r7, #24]
 801483c:	f7f7 f8e4 	bl	800ba08 <pbuf_free>
  p = NULL;
 8014840:	2300      	movs	r3, #0
 8014842:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014844:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3720      	adds	r7, #32
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	0801d318 	.word	0x0801d318
 8014854:	0801d468 	.word	0x0801d468
 8014858:	0801d390 	.word	0x0801d390
 801485c:	0801d518 	.word	0x0801d518
 8014860:	0801d54c 	.word	0x0801d54c

08014864 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b088      	sub	sp, #32
 8014868:	af04      	add	r7, sp, #16
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014880:	2201      	movs	r2, #1
 8014882:	9203      	str	r2, [sp, #12]
 8014884:	68ba      	ldr	r2, [r7, #8]
 8014886:	9202      	str	r2, [sp, #8]
 8014888:	4a06      	ldr	r2, [pc, #24]	; (80148a4 <etharp_request_dst+0x40>)
 801488a:	9201      	str	r2, [sp, #4]
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	4603      	mov	r3, r0
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f7ff ff5a 	bl	801474c <etharp_raw>
 8014898:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801489a:	4618      	mov	r0, r3
 801489c:	3710      	adds	r7, #16
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	0801dae4 	.word	0x0801dae4

080148a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80148b2:	4a05      	ldr	r2, [pc, #20]	; (80148c8 <etharp_request+0x20>)
 80148b4:	6839      	ldr	r1, [r7, #0]
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7ff ffd4 	bl	8014864 <etharp_request_dst>
 80148bc:	4603      	mov	r3, r0
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	0801dadc 	.word	0x0801dadc

080148cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b08e      	sub	sp, #56	; 0x38
 80148d0:	af04      	add	r7, sp, #16
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80148d6:	4b79      	ldr	r3, [pc, #484]	; (8014abc <icmp_input+0x1f0>)
 80148d8:	689b      	ldr	r3, [r3, #8]
 80148da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80148dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	f003 030f 	and.w	r3, r3, #15
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80148ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148ee:	2b13      	cmp	r3, #19
 80148f0:	f240 80cd 	bls.w	8014a8e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	895b      	ldrh	r3, [r3, #10]
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	f240 80ca 	bls.w	8014a92 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014908:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801490c:	2b00      	cmp	r3, #0
 801490e:	f000 80b7 	beq.w	8014a80 <icmp_input+0x1b4>
 8014912:	2b08      	cmp	r3, #8
 8014914:	f040 80b7 	bne.w	8014a86 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014918:	4b69      	ldr	r3, [pc, #420]	; (8014ac0 <icmp_input+0x1f4>)
 801491a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801491c:	4b67      	ldr	r3, [pc, #412]	; (8014abc <icmp_input+0x1f0>)
 801491e:	695b      	ldr	r3, [r3, #20]
 8014920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014924:	2be0      	cmp	r3, #224	; 0xe0
 8014926:	f000 80bb 	beq.w	8014aa0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801492a:	4b64      	ldr	r3, [pc, #400]	; (8014abc <icmp_input+0x1f0>)
 801492c:	695b      	ldr	r3, [r3, #20]
 801492e:	4a63      	ldr	r2, [pc, #396]	; (8014abc <icmp_input+0x1f0>)
 8014930:	6812      	ldr	r2, [r2, #0]
 8014932:	4611      	mov	r1, r2
 8014934:	4618      	mov	r0, r3
 8014936:	f000 fc0b 	bl	8015150 <ip4_addr_isbroadcast_u32>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	f040 80b1 	bne.w	8014aa4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	891b      	ldrh	r3, [r3, #8]
 8014946:	2b07      	cmp	r3, #7
 8014948:	f240 80a5 	bls.w	8014a96 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801494c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801494e:	330e      	adds	r3, #14
 8014950:	4619      	mov	r1, r3
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f7f6 ffc2 	bl	800b8dc <pbuf_add_header>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d04b      	beq.n	80149f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	891a      	ldrh	r2, [r3, #8]
 8014962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014964:	4413      	add	r3, r2
 8014966:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	891b      	ldrh	r3, [r3, #8]
 801496c:	8b7a      	ldrh	r2, [r7, #26]
 801496e:	429a      	cmp	r2, r3
 8014970:	f0c0 809a 	bcc.w	8014aa8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014974:	8b7b      	ldrh	r3, [r7, #26]
 8014976:	f44f 7220 	mov.w	r2, #640	; 0x280
 801497a:	4619      	mov	r1, r3
 801497c:	200e      	movs	r0, #14
 801497e:	f7f6 fd5f 	bl	800b440 <pbuf_alloc>
 8014982:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 8090 	beq.w	8014aac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	895b      	ldrh	r3, [r3, #10]
 8014990:	461a      	mov	r2, r3
 8014992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014994:	3308      	adds	r3, #8
 8014996:	429a      	cmp	r2, r3
 8014998:	d203      	bcs.n	80149a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801499a:	6978      	ldr	r0, [r7, #20]
 801499c:	f7f7 f834 	bl	800ba08 <pbuf_free>
          goto icmperr;
 80149a0:	e085      	b.n	8014aae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80149a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149aa:	4618      	mov	r0, r3
 80149ac:	f001 fb52 	bl	8016054 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80149b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149b2:	4619      	mov	r1, r3
 80149b4:	6978      	ldr	r0, [r7, #20]
 80149b6:	f7f6 ffa1 	bl	800b8fc <pbuf_remove_header>
 80149ba:	4603      	mov	r3, r0
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d009      	beq.n	80149d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80149c0:	4b40      	ldr	r3, [pc, #256]	; (8014ac4 <icmp_input+0x1f8>)
 80149c2:	22b6      	movs	r2, #182	; 0xb6
 80149c4:	4940      	ldr	r1, [pc, #256]	; (8014ac8 <icmp_input+0x1fc>)
 80149c6:	4841      	ldr	r0, [pc, #260]	; (8014acc <icmp_input+0x200>)
 80149c8:	f002 f9bc 	bl	8016d44 <iprintf>
          pbuf_free(r);
 80149cc:	6978      	ldr	r0, [r7, #20]
 80149ce:	f7f7 f81b 	bl	800ba08 <pbuf_free>
          goto icmperr;
 80149d2:	e06c      	b.n	8014aae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80149d4:	6879      	ldr	r1, [r7, #4]
 80149d6:	6978      	ldr	r0, [r7, #20]
 80149d8:	f7f7 f93e 	bl	800bc58 <pbuf_copy>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d003      	beq.n	80149ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80149e2:	6978      	ldr	r0, [r7, #20]
 80149e4:	f7f7 f810 	bl	800ba08 <pbuf_free>
          goto icmperr;
 80149e8:	e061      	b.n	8014aae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7f7 f80c 	bl	800ba08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	607b      	str	r3, [r7, #4]
 80149f4:	e00f      	b.n	8014a16 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80149f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149f8:	330e      	adds	r3, #14
 80149fa:	4619      	mov	r1, r3
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7f6 ff7d 	bl	800b8fc <pbuf_remove_header>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d006      	beq.n	8014a16 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014a08:	4b2e      	ldr	r3, [pc, #184]	; (8014ac4 <icmp_input+0x1f8>)
 8014a0a:	22c7      	movs	r2, #199	; 0xc7
 8014a0c:	4930      	ldr	r1, [pc, #192]	; (8014ad0 <icmp_input+0x204>)
 8014a0e:	482f      	ldr	r0, [pc, #188]	; (8014acc <icmp_input+0x200>)
 8014a10:	f002 f998 	bl	8016d44 <iprintf>
          goto icmperr;
 8014a14:	e04b      	b.n	8014aae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a1e:	4619      	mov	r1, r3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f7f6 ff5b 	bl	800b8dc <pbuf_add_header>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d12b      	bne.n	8014a84 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014a3a:	4b20      	ldr	r3, [pc, #128]	; (8014abc <icmp_input+0x1f0>)
 8014a3c:	691a      	ldr	r2, [r3, #16]
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	2200      	movs	r2, #0
 8014a46:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	709a      	strb	r2, [r3, #2]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	22ff      	movs	r2, #255	; 0xff
 8014a56:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	729a      	strb	r2, [r3, #10]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	9302      	str	r3, [sp, #8]
 8014a66:	2301      	movs	r3, #1
 8014a68:	9301      	str	r3, [sp, #4]
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	23ff      	movs	r3, #255	; 0xff
 8014a70:	2200      	movs	r2, #0
 8014a72:	69f9      	ldr	r1, [r7, #28]
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f000 fa93 	bl	8014fa0 <ip4_output_if>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014a7e:	e001      	b.n	8014a84 <icmp_input+0x1b8>
      break;
 8014a80:	bf00      	nop
 8014a82:	e000      	b.n	8014a86 <icmp_input+0x1ba>
      break;
 8014a84:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f7f6 ffbe 	bl	800ba08 <pbuf_free>
  return;
 8014a8c:	e013      	b.n	8014ab6 <icmp_input+0x1ea>
    goto lenerr;
 8014a8e:	bf00      	nop
 8014a90:	e002      	b.n	8014a98 <icmp_input+0x1cc>
    goto lenerr;
 8014a92:	bf00      	nop
 8014a94:	e000      	b.n	8014a98 <icmp_input+0x1cc>
        goto lenerr;
 8014a96:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7f6 ffb5 	bl	800ba08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014a9e:	e00a      	b.n	8014ab6 <icmp_input+0x1ea>
        goto icmperr;
 8014aa0:	bf00      	nop
 8014aa2:	e004      	b.n	8014aae <icmp_input+0x1e2>
        goto icmperr;
 8014aa4:	bf00      	nop
 8014aa6:	e002      	b.n	8014aae <icmp_input+0x1e2>
          goto icmperr;
 8014aa8:	bf00      	nop
 8014aaa:	e000      	b.n	8014aae <icmp_input+0x1e2>
          goto icmperr;
 8014aac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f7f6 ffaa 	bl	800ba08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ab4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ab6:	3728      	adds	r7, #40	; 0x28
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	20003910 	.word	0x20003910
 8014ac0:	20003924 	.word	0x20003924
 8014ac4:	0801d590 	.word	0x0801d590
 8014ac8:	0801d5c8 	.word	0x0801d5c8
 8014acc:	0801d600 	.word	0x0801d600
 8014ad0:	0801d628 	.word	0x0801d628

08014ad4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	460b      	mov	r3, r1
 8014ade:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014ae0:	78fb      	ldrb	r3, [r7, #3]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	2103      	movs	r1, #3
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f000 f814 	bl	8014b14 <icmp_send_response>
}
 8014aec:	bf00      	nop
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	460b      	mov	r3, r1
 8014afe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014b00:	78fb      	ldrb	r3, [r7, #3]
 8014b02:	461a      	mov	r2, r3
 8014b04:	210b      	movs	r1, #11
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f000 f804 	bl	8014b14 <icmp_send_response>
}
 8014b0c:	bf00      	nop
 8014b0e:	3708      	adds	r7, #8
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b08c      	sub	sp, #48	; 0x30
 8014b18:	af04      	add	r7, sp, #16
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	70fb      	strb	r3, [r7, #3]
 8014b20:	4613      	mov	r3, r2
 8014b22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014b24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b28:	2124      	movs	r1, #36	; 0x24
 8014b2a:	2022      	movs	r0, #34	; 0x22
 8014b2c:	f7f6 fc88 	bl	800b440 <pbuf_alloc>
 8014b30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d04c      	beq.n	8014bd2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	895b      	ldrh	r3, [r3, #10]
 8014b3c:	2b23      	cmp	r3, #35	; 0x23
 8014b3e:	d806      	bhi.n	8014b4e <icmp_send_response+0x3a>
 8014b40:	4b26      	ldr	r3, [pc, #152]	; (8014bdc <icmp_send_response+0xc8>)
 8014b42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014b46:	4926      	ldr	r1, [pc, #152]	; (8014be0 <icmp_send_response+0xcc>)
 8014b48:	4826      	ldr	r0, [pc, #152]	; (8014be4 <icmp_send_response+0xd0>)
 8014b4a:	f002 f8fb 	bl	8016d44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	78fa      	ldrb	r2, [r7, #3]
 8014b5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	78ba      	ldrb	r2, [r7, #2]
 8014b64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	711a      	strb	r2, [r3, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	2200      	movs	r2, #0
 8014b74:	719a      	strb	r2, [r3, #6]
 8014b76:	2200      	movs	r2, #0
 8014b78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	f103 0008 	add.w	r0, r3, #8
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	221c      	movs	r2, #28
 8014b88:	4619      	mov	r1, r3
 8014b8a:	f001 fa63 	bl	8016054 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	68db      	ldr	r3, [r3, #12]
 8014b92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014b94:	f107 030c 	add.w	r3, r7, #12
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f000 f825 	bl	8014be8 <ip4_route>
 8014b9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d011      	beq.n	8014bca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	709a      	strb	r2, [r3, #2]
 8014bac:	2200      	movs	r2, #0
 8014bae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014bb0:	f107 020c 	add.w	r2, r7, #12
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	9302      	str	r3, [sp, #8]
 8014bb8:	2301      	movs	r3, #1
 8014bba:	9301      	str	r3, [sp, #4]
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	9300      	str	r3, [sp, #0]
 8014bc0:	23ff      	movs	r3, #255	; 0xff
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	69f8      	ldr	r0, [r7, #28]
 8014bc6:	f000 f9eb 	bl	8014fa0 <ip4_output_if>
  }
  pbuf_free(q);
 8014bca:	69f8      	ldr	r0, [r7, #28]
 8014bcc:	f7f6 ff1c 	bl	800ba08 <pbuf_free>
 8014bd0:	e000      	b.n	8014bd4 <icmp_send_response+0xc0>
    return;
 8014bd2:	bf00      	nop
}
 8014bd4:	3720      	adds	r7, #32
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	0801d590 	.word	0x0801d590
 8014be0:	0801d65c 	.word	0x0801d65c
 8014be4:	0801d600 	.word	0x0801d600

08014be8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014bf0:	4b33      	ldr	r3, [pc, #204]	; (8014cc0 <ip4_route+0xd8>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	e036      	b.n	8014c66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014bfe:	f003 0301 	and.w	r3, r3, #1
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d02b      	beq.n	8014c60 <ip4_route+0x78>
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c0e:	089b      	lsrs	r3, r3, #2
 8014c10:	f003 0301 	and.w	r3, r3, #1
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d022      	beq.n	8014c60 <ip4_route+0x78>
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d01d      	beq.n	8014c60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	405a      	eors	r2, r3
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	3308      	adds	r3, #8
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	4013      	ands	r3, r2
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d101      	bne.n	8014c40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	e038      	b.n	8014cb2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c46:	f003 0302 	and.w	r3, r3, #2
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d108      	bne.n	8014c60 <ip4_route+0x78>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	330c      	adds	r3, #12
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d101      	bne.n	8014c60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	e028      	b.n	8014cb2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	60fb      	str	r3, [r7, #12]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1c5      	bne.n	8014bf8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c6c:	4b15      	ldr	r3, [pc, #84]	; (8014cc4 <ip4_route+0xdc>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d01a      	beq.n	8014caa <ip4_route+0xc2>
 8014c74:	4b13      	ldr	r3, [pc, #76]	; (8014cc4 <ip4_route+0xdc>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c7c:	f003 0301 	and.w	r3, r3, #1
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d012      	beq.n	8014caa <ip4_route+0xc2>
 8014c84:	4b0f      	ldr	r3, [pc, #60]	; (8014cc4 <ip4_route+0xdc>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c8c:	f003 0304 	and.w	r3, r3, #4
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d00a      	beq.n	8014caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014c94:	4b0b      	ldr	r3, [pc, #44]	; (8014cc4 <ip4_route+0xdc>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	3304      	adds	r3, #4
 8014c9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d004      	beq.n	8014caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8014ca8:	d101      	bne.n	8014cae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014caa:	2300      	movs	r3, #0
 8014cac:	e001      	b.n	8014cb2 <ip4_route+0xca>
  }

  return netif_default;
 8014cae:	4b05      	ldr	r3, [pc, #20]	; (8014cc4 <ip4_route+0xdc>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3714      	adds	r7, #20
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbc:	4770      	bx	lr
 8014cbe:	bf00      	nop
 8014cc0:	20006e64 	.word	0x20006e64
 8014cc4:	20006e68 	.word	0x20006e68

08014cc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014cd6:	f003 0301 	and.w	r3, r3, #1
 8014cda:	b2db      	uxtb	r3, r3
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d016      	beq.n	8014d0e <ip4_input_accept+0x46>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	3304      	adds	r3, #4
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d011      	beq.n	8014d0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014cea:	4b0b      	ldr	r3, [pc, #44]	; (8014d18 <ip4_input_accept+0x50>)
 8014cec:	695a      	ldr	r2, [r3, #20]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d008      	beq.n	8014d0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014cf8:	4b07      	ldr	r3, [pc, #28]	; (8014d18 <ip4_input_accept+0x50>)
 8014cfa:	695b      	ldr	r3, [r3, #20]
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f000 fa26 	bl	8015150 <ip4_addr_isbroadcast_u32>
 8014d04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d001      	beq.n	8014d0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	e000      	b.n	8014d10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	20003910 	.word	0x20003910

08014d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b088      	sub	sp, #32
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014d26:	2301      	movs	r3, #1
 8014d28:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	091b      	lsrs	r3, r3, #4
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	2b04      	cmp	r3, #4
 8014d3a:	d004      	beq.n	8014d46 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7f6 fe63 	bl	800ba08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	e123      	b.n	8014f8e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014d46:	69fb      	ldr	r3, [r7, #28]
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	f003 030f 	and.w	r3, r3, #15
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	885b      	ldrh	r3, [r3, #2]
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f5 fbb7 	bl	800a4d0 <lwip_htons>
 8014d62:	4603      	mov	r3, r0
 8014d64:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	891b      	ldrh	r3, [r3, #8]
 8014d6a:	8a3a      	ldrh	r2, [r7, #16]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d204      	bcs.n	8014d7a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014d70:	8a3b      	ldrh	r3, [r7, #16]
 8014d72:	4619      	mov	r1, r3
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7f6 fcc1 	bl	800b6fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	895b      	ldrh	r3, [r3, #10]
 8014d7e:	8a7a      	ldrh	r2, [r7, #18]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d807      	bhi.n	8014d94 <ip4_input+0x78>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	891b      	ldrh	r3, [r3, #8]
 8014d88:	8a3a      	ldrh	r2, [r7, #16]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d802      	bhi.n	8014d94 <ip4_input+0x78>
 8014d8e:	8a7b      	ldrh	r3, [r7, #18]
 8014d90:	2b13      	cmp	r3, #19
 8014d92:	d804      	bhi.n	8014d9e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7f6 fe37 	bl	800ba08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e0f7      	b.n	8014f8e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	691b      	ldr	r3, [r3, #16]
 8014da2:	4a7d      	ldr	r2, [pc, #500]	; (8014f98 <ip4_input+0x27c>)
 8014da4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014da6:	69fb      	ldr	r3, [r7, #28]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	4a7b      	ldr	r2, [pc, #492]	; (8014f98 <ip4_input+0x27c>)
 8014dac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014dae:	4b7a      	ldr	r3, [pc, #488]	; (8014f98 <ip4_input+0x27c>)
 8014db0:	695b      	ldr	r3, [r3, #20]
 8014db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014db6:	2be0      	cmp	r3, #224	; 0xe0
 8014db8:	d112      	bne.n	8014de0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014dc0:	f003 0301 	and.w	r3, r3, #1
 8014dc4:	b2db      	uxtb	r3, r3
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d007      	beq.n	8014dda <ip4_input+0xbe>
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	3304      	adds	r3, #4
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d002      	beq.n	8014dda <ip4_input+0xbe>
      netif = inp;
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	61bb      	str	r3, [r7, #24]
 8014dd8:	e02a      	b.n	8014e30 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	61bb      	str	r3, [r7, #24]
 8014dde:	e027      	b.n	8014e30 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014de0:	6838      	ldr	r0, [r7, #0]
 8014de2:	f7ff ff71 	bl	8014cc8 <ip4_input_accept>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d002      	beq.n	8014df2 <ip4_input+0xd6>
      netif = inp;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	61bb      	str	r3, [r7, #24]
 8014df0:	e01e      	b.n	8014e30 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014df2:	2300      	movs	r3, #0
 8014df4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014df6:	4b68      	ldr	r3, [pc, #416]	; (8014f98 <ip4_input+0x27c>)
 8014df8:	695b      	ldr	r3, [r3, #20]
 8014dfa:	b2db      	uxtb	r3, r3
 8014dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8014dfe:	d017      	beq.n	8014e30 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014e00:	4b66      	ldr	r3, [pc, #408]	; (8014f9c <ip4_input+0x280>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	61bb      	str	r3, [r7, #24]
 8014e06:	e00e      	b.n	8014e26 <ip4_input+0x10a>
          if (netif == inp) {
 8014e08:	69ba      	ldr	r2, [r7, #24]
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d006      	beq.n	8014e1e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014e10:	69b8      	ldr	r0, [r7, #24]
 8014e12:	f7ff ff59 	bl	8014cc8 <ip4_input_accept>
 8014e16:	4603      	mov	r3, r0
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d108      	bne.n	8014e2e <ip4_input+0x112>
 8014e1c:	e000      	b.n	8014e20 <ip4_input+0x104>
            continue;
 8014e1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	61bb      	str	r3, [r7, #24]
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1ed      	bne.n	8014e08 <ip4_input+0xec>
 8014e2c:	e000      	b.n	8014e30 <ip4_input+0x114>
            break;
 8014e2e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014e30:	69bb      	ldr	r3, [r7, #24]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d111      	bne.n	8014e5a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	7a5b      	ldrb	r3, [r3, #9]
 8014e3a:	2b11      	cmp	r3, #17
 8014e3c:	d10d      	bne.n	8014e5a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8014e3e:	8a7b      	ldrh	r3, [r7, #18]
 8014e40:	69fa      	ldr	r2, [r7, #28]
 8014e42:	4413      	add	r3, r2
 8014e44:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	885b      	ldrh	r3, [r3, #2]
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8014e50:	d103      	bne.n	8014e5a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d017      	beq.n	8014e90 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8014e60:	4b4d      	ldr	r3, [pc, #308]	; (8014f98 <ip4_input+0x27c>)
 8014e62:	691b      	ldr	r3, [r3, #16]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d013      	beq.n	8014e90 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e68:	4b4b      	ldr	r3, [pc, #300]	; (8014f98 <ip4_input+0x27c>)
 8014e6a:	691b      	ldr	r3, [r3, #16]
 8014e6c:	6839      	ldr	r1, [r7, #0]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 f96e 	bl	8015150 <ip4_addr_isbroadcast_u32>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d105      	bne.n	8014e86 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014e7a:	4b47      	ldr	r3, [pc, #284]	; (8014f98 <ip4_input+0x27c>)
 8014e7c:	691b      	ldr	r3, [r3, #16]
 8014e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e82:	2be0      	cmp	r3, #224	; 0xe0
 8014e84:	d104      	bne.n	8014e90 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7f6 fdbe 	bl	800ba08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	e07e      	b.n	8014f8e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d104      	bne.n	8014ea0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7f6 fdb6 	bl	800ba08 <pbuf_free>
    return ERR_OK;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e076      	b.n	8014f8e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	88db      	ldrh	r3, [r3, #6]
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	461a      	mov	r2, r3
 8014ea8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014eac:	4013      	ands	r3, r2
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d00b      	beq.n	8014eca <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f000 fc92 	bl	80157dc <ip4_reass>
 8014eb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d101      	bne.n	8014ec4 <ip4_input+0x1a8>
      return ERR_OK;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	e064      	b.n	8014f8e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014eca:	4a33      	ldr	r2, [pc, #204]	; (8014f98 <ip4_input+0x27c>)
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014ed0:	4a31      	ldr	r2, [pc, #196]	; (8014f98 <ip4_input+0x27c>)
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014ed6:	4a30      	ldr	r2, [pc, #192]	; (8014f98 <ip4_input+0x27c>)
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	f003 030f 	and.w	r3, r3, #15
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	b29a      	uxth	r2, r3
 8014eec:	4b2a      	ldr	r3, [pc, #168]	; (8014f98 <ip4_input+0x27c>)
 8014eee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014ef0:	8a7b      	ldrh	r3, [r7, #18]
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f7f6 fd01 	bl	800b8fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014efa:	69fb      	ldr	r3, [r7, #28]
 8014efc:	7a5b      	ldrb	r3, [r3, #9]
 8014efe:	2b11      	cmp	r3, #17
 8014f00:	d006      	beq.n	8014f10 <ip4_input+0x1f4>
 8014f02:	2b11      	cmp	r3, #17
 8014f04:	dc13      	bgt.n	8014f2e <ip4_input+0x212>
 8014f06:	2b01      	cmp	r3, #1
 8014f08:	d00c      	beq.n	8014f24 <ip4_input+0x208>
 8014f0a:	2b06      	cmp	r3, #6
 8014f0c:	d005      	beq.n	8014f1a <ip4_input+0x1fe>
 8014f0e:	e00e      	b.n	8014f2e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014f10:	6839      	ldr	r1, [r7, #0]
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7fc fb24 	bl	8011560 <udp_input>
        break;
 8014f18:	e026      	b.n	8014f68 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014f1a:	6839      	ldr	r1, [r7, #0]
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7f8 fbab 	bl	800d678 <tcp_input>
        break;
 8014f22:	e021      	b.n	8014f68 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff fcd0 	bl	80148cc <icmp_input>
        break;
 8014f2c:	e01c      	b.n	8014f68 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f2e:	4b1a      	ldr	r3, [pc, #104]	; (8014f98 <ip4_input+0x27c>)
 8014f30:	695b      	ldr	r3, [r3, #20]
 8014f32:	69b9      	ldr	r1, [r7, #24]
 8014f34:	4618      	mov	r0, r3
 8014f36:	f000 f90b 	bl	8015150 <ip4_addr_isbroadcast_u32>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d10f      	bne.n	8014f60 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f40:	4b15      	ldr	r3, [pc, #84]	; (8014f98 <ip4_input+0x27c>)
 8014f42:	695b      	ldr	r3, [r3, #20]
 8014f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f48:	2be0      	cmp	r3, #224	; 0xe0
 8014f4a:	d009      	beq.n	8014f60 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014f50:	4619      	mov	r1, r3
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f7f6 fd45 	bl	800b9e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014f58:	2102      	movs	r1, #2
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff fdba 	bl	8014ad4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7f6 fd51 	bl	800ba08 <pbuf_free>
        break;
 8014f66:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014f68:	4b0b      	ldr	r3, [pc, #44]	; (8014f98 <ip4_input+0x27c>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014f6e:	4b0a      	ldr	r3, [pc, #40]	; (8014f98 <ip4_input+0x27c>)
 8014f70:	2200      	movs	r2, #0
 8014f72:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014f74:	4b08      	ldr	r3, [pc, #32]	; (8014f98 <ip4_input+0x27c>)
 8014f76:	2200      	movs	r2, #0
 8014f78:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014f7a:	4b07      	ldr	r3, [pc, #28]	; (8014f98 <ip4_input+0x27c>)
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014f80:	4b05      	ldr	r3, [pc, #20]	; (8014f98 <ip4_input+0x27c>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014f86:	4b04      	ldr	r3, [pc, #16]	; (8014f98 <ip4_input+0x27c>)
 8014f88:	2200      	movs	r2, #0
 8014f8a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014f8c:	2300      	movs	r3, #0
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3720      	adds	r7, #32
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	20003910 	.word	0x20003910
 8014f9c:	20006e64 	.word	0x20006e64

08014fa0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b08a      	sub	sp, #40	; 0x28
 8014fa4:	af04      	add	r7, sp, #16
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
 8014fac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d009      	beq.n	8014fcc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d003      	beq.n	8014fc6 <ip4_output_if+0x26>
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d102      	bne.n	8014fcc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc8:	3304      	adds	r3, #4
 8014fca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014fcc:	78fa      	ldrb	r2, [r7, #3]
 8014fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fd0:	9302      	str	r3, [sp, #8]
 8014fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	4613      	mov	r3, r2
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	6979      	ldr	r1, [r7, #20]
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f000 f805 	bl	8014ff4 <ip4_output_if_src>
 8014fea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3718      	adds	r7, #24
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b088      	sub	sp, #32
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	607a      	str	r2, [r7, #4]
 8015000:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	7b9b      	ldrb	r3, [r3, #14]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d006      	beq.n	8015018 <ip4_output_if_src+0x24>
 801500a:	4b4b      	ldr	r3, [pc, #300]	; (8015138 <ip4_output_if_src+0x144>)
 801500c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015010:	494a      	ldr	r1, [pc, #296]	; (801513c <ip4_output_if_src+0x148>)
 8015012:	484b      	ldr	r0, [pc, #300]	; (8015140 <ip4_output_if_src+0x14c>)
 8015014:	f001 fe96 	bl	8016d44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d060      	beq.n	80150e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801501e:	2314      	movs	r3, #20
 8015020:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015022:	2114      	movs	r1, #20
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f7f6 fc59 	bl	800b8dc <pbuf_add_header>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d002      	beq.n	8015036 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015030:	f06f 0301 	mvn.w	r3, #1
 8015034:	e07c      	b.n	8015130 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	895b      	ldrh	r3, [r3, #10]
 8015040:	2b13      	cmp	r3, #19
 8015042:	d806      	bhi.n	8015052 <ip4_output_if_src+0x5e>
 8015044:	4b3c      	ldr	r3, [pc, #240]	; (8015138 <ip4_output_if_src+0x144>)
 8015046:	f44f 7262 	mov.w	r2, #904	; 0x388
 801504a:	493e      	ldr	r1, [pc, #248]	; (8015144 <ip4_output_if_src+0x150>)
 801504c:	483c      	ldr	r0, [pc, #240]	; (8015140 <ip4_output_if_src+0x14c>)
 801504e:	f001 fe79 	bl	8016d44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801505e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	69fb      	ldr	r3, [r7, #28]
 8015066:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015068:	8b7b      	ldrh	r3, [r7, #26]
 801506a:	089b      	lsrs	r3, r3, #2
 801506c:	b29b      	uxth	r3, r3
 801506e:	b2db      	uxtb	r3, r3
 8015070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015074:	b2da      	uxtb	r2, r3
 8015076:	69fb      	ldr	r3, [r7, #28]
 8015078:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801507a:	69fb      	ldr	r3, [r7, #28]
 801507c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015080:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	891b      	ldrh	r3, [r3, #8]
 8015086:	4618      	mov	r0, r3
 8015088:	f7f5 fa22 	bl	800a4d0 <lwip_htons>
 801508c:	4603      	mov	r3, r0
 801508e:	461a      	mov	r2, r3
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	2200      	movs	r2, #0
 8015098:	719a      	strb	r2, [r3, #6]
 801509a:	2200      	movs	r2, #0
 801509c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801509e:	4b2a      	ldr	r3, [pc, #168]	; (8015148 <ip4_output_if_src+0x154>)
 80150a0:	881b      	ldrh	r3, [r3, #0]
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7f5 fa14 	bl	800a4d0 <lwip_htons>
 80150a8:	4603      	mov	r3, r0
 80150aa:	461a      	mov	r2, r3
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80150b0:	4b25      	ldr	r3, [pc, #148]	; (8015148 <ip4_output_if_src+0x154>)
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	3301      	adds	r3, #1
 80150b6:	b29a      	uxth	r2, r3
 80150b8:	4b23      	ldr	r3, [pc, #140]	; (8015148 <ip4_output_if_src+0x154>)
 80150ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d104      	bne.n	80150cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80150c2:	4b22      	ldr	r3, [pc, #136]	; (801514c <ip4_output_if_src+0x158>)
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	60da      	str	r2, [r3, #12]
 80150ca:	e003      	b.n	80150d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	2200      	movs	r2, #0
 80150d8:	729a      	strb	r2, [r3, #10]
 80150da:	2200      	movs	r2, #0
 80150dc:	72da      	strb	r2, [r3, #11]
 80150de:	e00f      	b.n	8015100 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	895b      	ldrh	r3, [r3, #10]
 80150e4:	2b13      	cmp	r3, #19
 80150e6:	d802      	bhi.n	80150ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80150e8:	f06f 0301 	mvn.w	r3, #1
 80150ec:	e020      	b.n	8015130 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	691b      	ldr	r3, [r3, #16]
 80150f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80150fa:	f107 0314 	add.w	r3, r7, #20
 80150fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015104:	2b00      	cmp	r3, #0
 8015106:	d00c      	beq.n	8015122 <ip4_output_if_src+0x12e>
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	891a      	ldrh	r2, [r3, #8]
 801510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015110:	429a      	cmp	r2, r3
 8015112:	d906      	bls.n	8015122 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f000 fd4d 	bl	8015bb8 <ip4_frag>
 801511e:	4603      	mov	r3, r0
 8015120:	e006      	b.n	8015130 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	695b      	ldr	r3, [r3, #20]
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	68f9      	ldr	r1, [r7, #12]
 801512a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801512c:	4798      	blx	r3
 801512e:	4603      	mov	r3, r0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3720      	adds	r7, #32
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	0801d688 	.word	0x0801d688
 801513c:	0801d6bc 	.word	0x0801d6bc
 8015140:	0801d6c8 	.word	0x0801d6c8
 8015144:	0801d6f0 	.word	0x0801d6f0
 8015148:	2000047e 	.word	0x2000047e
 801514c:	0801dad4 	.word	0x0801dad4

08015150 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015150:	b480      	push	{r7}
 8015152:	b085      	sub	sp, #20
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015164:	d002      	beq.n	801516c <ip4_addr_isbroadcast_u32+0x1c>
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d101      	bne.n	8015170 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801516c:	2301      	movs	r3, #1
 801516e:	e02a      	b.n	80151c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015176:	f003 0302 	and.w	r3, r3, #2
 801517a:	2b00      	cmp	r3, #0
 801517c:	d101      	bne.n	8015182 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801517e:	2300      	movs	r3, #0
 8015180:	e021      	b.n	80151c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	3304      	adds	r3, #4
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	687a      	ldr	r2, [r7, #4]
 801518a:	429a      	cmp	r2, r3
 801518c:	d101      	bne.n	8015192 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801518e:	2300      	movs	r3, #0
 8015190:	e019      	b.n	80151c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	3304      	adds	r3, #4
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	405a      	eors	r2, r3
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	3308      	adds	r3, #8
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	4013      	ands	r3, r2
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d10d      	bne.n	80151c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	3308      	adds	r3, #8
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	43da      	mvns	r2, r3
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	3308      	adds	r3, #8
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80151bc:	429a      	cmp	r2, r3
 80151be:	d101      	bne.n	80151c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80151c0:	2301      	movs	r3, #1
 80151c2:	e000      	b.n	80151c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80151c4:	2300      	movs	r3, #0
  }
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3714      	adds	r7, #20
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
	...

080151d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80151da:	2300      	movs	r3, #0
 80151dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80151de:	4b12      	ldr	r3, [pc, #72]	; (8015228 <ip_reass_tmr+0x54>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80151e4:	e018      	b.n	8015218 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	7fdb      	ldrb	r3, [r3, #31]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d00b      	beq.n	8015206 <ip_reass_tmr+0x32>
      r->timer--;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	7fdb      	ldrb	r3, [r3, #31]
 80151f2:	3b01      	subs	r3, #1
 80151f4:	b2da      	uxtb	r2, r3
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	e008      	b.n	8015218 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015210:	68b9      	ldr	r1, [r7, #8]
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f000 f80a 	bl	801522c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1e3      	bne.n	80151e6 <ip_reass_tmr+0x12>
    }
  }
}
 801521e:	bf00      	nop
 8015220:	bf00      	nop
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	20000480 	.word	0x20000480

0801522c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b088      	sub	sp, #32
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015236:	2300      	movs	r3, #0
 8015238:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	429a      	cmp	r2, r3
 8015240:	d105      	bne.n	801524e <ip_reass_free_complete_datagram+0x22>
 8015242:	4b45      	ldr	r3, [pc, #276]	; (8015358 <ip_reass_free_complete_datagram+0x12c>)
 8015244:	22ab      	movs	r2, #171	; 0xab
 8015246:	4945      	ldr	r1, [pc, #276]	; (801535c <ip_reass_free_complete_datagram+0x130>)
 8015248:	4845      	ldr	r0, [pc, #276]	; (8015360 <ip_reass_free_complete_datagram+0x134>)
 801524a:	f001 fd7b 	bl	8016d44 <iprintf>
  if (prev != NULL) {
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d00a      	beq.n	801526a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	429a      	cmp	r2, r3
 801525c:	d005      	beq.n	801526a <ip_reass_free_complete_datagram+0x3e>
 801525e:	4b3e      	ldr	r3, [pc, #248]	; (8015358 <ip_reass_free_complete_datagram+0x12c>)
 8015260:	22ad      	movs	r2, #173	; 0xad
 8015262:	4940      	ldr	r1, [pc, #256]	; (8015364 <ip_reass_free_complete_datagram+0x138>)
 8015264:	483e      	ldr	r0, [pc, #248]	; (8015360 <ip_reass_free_complete_datagram+0x134>)
 8015266:	f001 fd6d 	bl	8016d44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	889b      	ldrh	r3, [r3, #4]
 8015276:	b29b      	uxth	r3, r3
 8015278:	2b00      	cmp	r3, #0
 801527a:	d12a      	bne.n	80152d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	6858      	ldr	r0, [r3, #4]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3308      	adds	r3, #8
 8015292:	2214      	movs	r2, #20
 8015294:	4619      	mov	r1, r3
 8015296:	f000 fedd 	bl	8016054 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801529a:	2101      	movs	r1, #1
 801529c:	69b8      	ldr	r0, [r7, #24]
 801529e:	f7ff fc29 	bl	8014af4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80152a2:	69b8      	ldr	r0, [r7, #24]
 80152a4:	f7f6 fc38 	bl	800bb18 <pbuf_clen>
 80152a8:	4603      	mov	r3, r0
 80152aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80152ac:	8bfa      	ldrh	r2, [r7, #30]
 80152ae:	8a7b      	ldrh	r3, [r7, #18]
 80152b0:	4413      	add	r3, r2
 80152b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152b6:	db05      	blt.n	80152c4 <ip_reass_free_complete_datagram+0x98>
 80152b8:	4b27      	ldr	r3, [pc, #156]	; (8015358 <ip_reass_free_complete_datagram+0x12c>)
 80152ba:	22bc      	movs	r2, #188	; 0xbc
 80152bc:	492a      	ldr	r1, [pc, #168]	; (8015368 <ip_reass_free_complete_datagram+0x13c>)
 80152be:	4828      	ldr	r0, [pc, #160]	; (8015360 <ip_reass_free_complete_datagram+0x134>)
 80152c0:	f001 fd40 	bl	8016d44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80152c4:	8bfa      	ldrh	r2, [r7, #30]
 80152c6:	8a7b      	ldrh	r3, [r7, #18]
 80152c8:	4413      	add	r3, r2
 80152ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80152cc:	69b8      	ldr	r0, [r7, #24]
 80152ce:	f7f6 fb9b 	bl	800ba08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80152d8:	e01f      	b.n	801531a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80152da:	69bb      	ldr	r3, [r7, #24]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f7f6 fc14 	bl	800bb18 <pbuf_clen>
 80152f0:	4603      	mov	r3, r0
 80152f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80152f4:	8bfa      	ldrh	r2, [r7, #30]
 80152f6:	8a7b      	ldrh	r3, [r7, #18]
 80152f8:	4413      	add	r3, r2
 80152fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152fe:	db05      	blt.n	801530c <ip_reass_free_complete_datagram+0xe0>
 8015300:	4b15      	ldr	r3, [pc, #84]	; (8015358 <ip_reass_free_complete_datagram+0x12c>)
 8015302:	22cc      	movs	r2, #204	; 0xcc
 8015304:	4918      	ldr	r1, [pc, #96]	; (8015368 <ip_reass_free_complete_datagram+0x13c>)
 8015306:	4816      	ldr	r0, [pc, #88]	; (8015360 <ip_reass_free_complete_datagram+0x134>)
 8015308:	f001 fd1c 	bl	8016d44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801530c:	8bfa      	ldrh	r2, [r7, #30]
 801530e:	8a7b      	ldrh	r3, [r7, #18]
 8015310:	4413      	add	r3, r2
 8015312:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f7f6 fb77 	bl	800ba08 <pbuf_free>
  while (p != NULL) {
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d1dc      	bne.n	80152da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015320:	6839      	ldr	r1, [r7, #0]
 8015322:	6878      	ldr	r0, [r7, #4]
 8015324:	f000 f8c2 	bl	80154ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015328:	4b10      	ldr	r3, [pc, #64]	; (801536c <ip_reass_free_complete_datagram+0x140>)
 801532a:	881b      	ldrh	r3, [r3, #0]
 801532c:	8bfa      	ldrh	r2, [r7, #30]
 801532e:	429a      	cmp	r2, r3
 8015330:	d905      	bls.n	801533e <ip_reass_free_complete_datagram+0x112>
 8015332:	4b09      	ldr	r3, [pc, #36]	; (8015358 <ip_reass_free_complete_datagram+0x12c>)
 8015334:	22d2      	movs	r2, #210	; 0xd2
 8015336:	490e      	ldr	r1, [pc, #56]	; (8015370 <ip_reass_free_complete_datagram+0x144>)
 8015338:	4809      	ldr	r0, [pc, #36]	; (8015360 <ip_reass_free_complete_datagram+0x134>)
 801533a:	f001 fd03 	bl	8016d44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801533e:	4b0b      	ldr	r3, [pc, #44]	; (801536c <ip_reass_free_complete_datagram+0x140>)
 8015340:	881a      	ldrh	r2, [r3, #0]
 8015342:	8bfb      	ldrh	r3, [r7, #30]
 8015344:	1ad3      	subs	r3, r2, r3
 8015346:	b29a      	uxth	r2, r3
 8015348:	4b08      	ldr	r3, [pc, #32]	; (801536c <ip_reass_free_complete_datagram+0x140>)
 801534a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801534c:	8bfb      	ldrh	r3, [r7, #30]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3720      	adds	r7, #32
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	0801d720 	.word	0x0801d720
 801535c:	0801d75c 	.word	0x0801d75c
 8015360:	0801d768 	.word	0x0801d768
 8015364:	0801d790 	.word	0x0801d790
 8015368:	0801d7a4 	.word	0x0801d7a4
 801536c:	20000484 	.word	0x20000484
 8015370:	0801d7c4 	.word	0x0801d7c4

08015374 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08a      	sub	sp, #40	; 0x28
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801537e:	2300      	movs	r3, #0
 8015380:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015382:	2300      	movs	r3, #0
 8015384:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015386:	2300      	movs	r3, #0
 8015388:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801538a:	2300      	movs	r3, #0
 801538c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801538e:	2300      	movs	r3, #0
 8015390:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015392:	4b28      	ldr	r3, [pc, #160]	; (8015434 <ip_reass_remove_oldest_datagram+0xc0>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015398:	e030      	b.n	80153fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	695a      	ldr	r2, [r3, #20]
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d10c      	bne.n	80153c0 <ip_reass_remove_oldest_datagram+0x4c>
 80153a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a8:	699a      	ldr	r2, [r3, #24]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	691b      	ldr	r3, [r3, #16]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d106      	bne.n	80153c0 <ip_reass_remove_oldest_datagram+0x4c>
 80153b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b4:	899a      	ldrh	r2, [r3, #12]
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	889b      	ldrh	r3, [r3, #4]
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	429a      	cmp	r2, r3
 80153be:	d014      	beq.n	80153ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	3301      	adds	r3, #1
 80153c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80153c6:	6a3b      	ldr	r3, [r7, #32]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d104      	bne.n	80153d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80153cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	61bb      	str	r3, [r7, #24]
 80153d4:	e009      	b.n	80153ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	7fda      	ldrb	r2, [r3, #31]
 80153da:	6a3b      	ldr	r3, [r7, #32]
 80153dc:	7fdb      	ldrb	r3, [r3, #31]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d803      	bhi.n	80153ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80153e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d001      	beq.n	80153f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80153f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80153f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80153fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d1cb      	bne.n	801539a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015402:	6a3b      	ldr	r3, [r7, #32]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d008      	beq.n	801541a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015408:	69b9      	ldr	r1, [r7, #24]
 801540a:	6a38      	ldr	r0, [r7, #32]
 801540c:	f7ff ff0e 	bl	801522c <ip_reass_free_complete_datagram>
 8015410:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015412:	697a      	ldr	r2, [r7, #20]
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	4413      	add	r3, r2
 8015418:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801541a:	697a      	ldr	r2, [r7, #20]
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	429a      	cmp	r2, r3
 8015420:	da02      	bge.n	8015428 <ip_reass_remove_oldest_datagram+0xb4>
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	2b01      	cmp	r3, #1
 8015426:	dcac      	bgt.n	8015382 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015428:	697b      	ldr	r3, [r7, #20]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3728      	adds	r7, #40	; 0x28
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	20000480 	.word	0x20000480

08015438 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015442:	2004      	movs	r0, #4
 8015444:	f7f5 fc9a 	bl	800ad7c <memp_malloc>
 8015448:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d110      	bne.n	8015472 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015450:	6839      	ldr	r1, [r7, #0]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7ff ff8e 	bl	8015374 <ip_reass_remove_oldest_datagram>
 8015458:	4602      	mov	r2, r0
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	4293      	cmp	r3, r2
 801545e:	dc03      	bgt.n	8015468 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015460:	2004      	movs	r0, #4
 8015462:	f7f5 fc8b 	bl	800ad7c <memp_malloc>
 8015466:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d101      	bne.n	8015472 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801546e:	2300      	movs	r3, #0
 8015470:	e016      	b.n	80154a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015472:	2220      	movs	r2, #32
 8015474:	2100      	movs	r1, #0
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f000 fe14 	bl	80160a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	220f      	movs	r2, #15
 8015480:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015482:	4b09      	ldr	r3, [pc, #36]	; (80154a8 <ip_reass_enqueue_new_datagram+0x70>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801548a:	4a07      	ldr	r2, [pc, #28]	; (80154a8 <ip_reass_enqueue_new_datagram+0x70>)
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3308      	adds	r3, #8
 8015494:	2214      	movs	r2, #20
 8015496:	6879      	ldr	r1, [r7, #4]
 8015498:	4618      	mov	r0, r3
 801549a:	f000 fddb 	bl	8016054 <memcpy>
  return ipr;
 801549e:	68fb      	ldr	r3, [r7, #12]
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	3710      	adds	r7, #16
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	20000480 	.word	0x20000480

080154ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
 80154b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80154b6:	4b10      	ldr	r3, [pc, #64]	; (80154f8 <ip_reass_dequeue_datagram+0x4c>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d104      	bne.n	80154ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4a0c      	ldr	r2, [pc, #48]	; (80154f8 <ip_reass_dequeue_datagram+0x4c>)
 80154c6:	6013      	str	r3, [r2, #0]
 80154c8:	e00d      	b.n	80154e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d106      	bne.n	80154de <ip_reass_dequeue_datagram+0x32>
 80154d0:	4b0a      	ldr	r3, [pc, #40]	; (80154fc <ip_reass_dequeue_datagram+0x50>)
 80154d2:	f240 1245 	movw	r2, #325	; 0x145
 80154d6:	490a      	ldr	r1, [pc, #40]	; (8015500 <ip_reass_dequeue_datagram+0x54>)
 80154d8:	480a      	ldr	r0, [pc, #40]	; (8015504 <ip_reass_dequeue_datagram+0x58>)
 80154da:	f001 fc33 	bl	8016d44 <iprintf>
    prev->next = ipr->next;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681a      	ldr	r2, [r3, #0]
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80154e6:	6879      	ldr	r1, [r7, #4]
 80154e8:	2004      	movs	r0, #4
 80154ea:	f7f5 fc93 	bl	800ae14 <memp_free>
}
 80154ee:	bf00      	nop
 80154f0:	3708      	adds	r7, #8
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	20000480 	.word	0x20000480
 80154fc:	0801d720 	.word	0x0801d720
 8015500:	0801d7e8 	.word	0x0801d7e8
 8015504:	0801d768 	.word	0x0801d768

08015508 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b08c      	sub	sp, #48	; 0x30
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015514:	2300      	movs	r3, #0
 8015516:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015518:	2301      	movs	r3, #1
 801551a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	885b      	ldrh	r3, [r3, #2]
 8015526:	b29b      	uxth	r3, r3
 8015528:	4618      	mov	r0, r3
 801552a:	f7f4 ffd1 	bl	800a4d0 <lwip_htons>
 801552e:	4603      	mov	r3, r0
 8015530:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	f003 030f 	and.w	r3, r3, #15
 801553a:	b2db      	uxtb	r3, r3
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015540:	7e7b      	ldrb	r3, [r7, #25]
 8015542:	b29b      	uxth	r3, r3
 8015544:	8b7a      	ldrh	r2, [r7, #26]
 8015546:	429a      	cmp	r2, r3
 8015548:	d202      	bcs.n	8015550 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801554a:	f04f 33ff 	mov.w	r3, #4294967295
 801554e:	e135      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015550:	7e7b      	ldrb	r3, [r7, #25]
 8015552:	b29b      	uxth	r3, r3
 8015554:	8b7a      	ldrh	r2, [r7, #26]
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	88db      	ldrh	r3, [r3, #6]
 801555e:	b29b      	uxth	r3, r3
 8015560:	4618      	mov	r0, r3
 8015562:	f7f4 ffb5 	bl	800a4d0 <lwip_htons>
 8015566:	4603      	mov	r3, r0
 8015568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801556c:	b29b      	uxth	r3, r3
 801556e:	00db      	lsls	r3, r3, #3
 8015570:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557a:	2200      	movs	r2, #0
 801557c:	701a      	strb	r2, [r3, #0]
 801557e:	2200      	movs	r2, #0
 8015580:	705a      	strb	r2, [r3, #1]
 8015582:	2200      	movs	r2, #0
 8015584:	709a      	strb	r2, [r3, #2]
 8015586:	2200      	movs	r2, #0
 8015588:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558c:	8afa      	ldrh	r2, [r7, #22]
 801558e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015590:	8afa      	ldrh	r2, [r7, #22]
 8015592:	8b7b      	ldrh	r3, [r7, #26]
 8015594:	4413      	add	r3, r2
 8015596:	b29a      	uxth	r2, r3
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559e:	88db      	ldrh	r3, [r3, #6]
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	8afa      	ldrh	r2, [r7, #22]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d902      	bls.n	80155ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155a8:	f04f 33ff 	mov.w	r3, #4294967295
 80155ac:	e106      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	627b      	str	r3, [r7, #36]	; 0x24
 80155b4:	e068      	b.n	8015688 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80155b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80155bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155be:	889b      	ldrh	r3, [r3, #4]
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	889b      	ldrh	r3, [r3, #4]
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d235      	bcs.n	8015638 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80155cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80155d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d020      	beq.n	801561a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80155d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155da:	889b      	ldrh	r3, [r3, #4]
 80155dc:	b29a      	uxth	r2, r3
 80155de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e0:	88db      	ldrh	r3, [r3, #6]
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d307      	bcc.n	80155f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80155e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ea:	88db      	ldrh	r3, [r3, #6]
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	889b      	ldrh	r3, [r3, #4]
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d902      	bls.n	80155fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295
 80155fc:	e0de      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80155fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015600:	68ba      	ldr	r2, [r7, #8]
 8015602:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015606:	88db      	ldrh	r3, [r3, #6]
 8015608:	b29a      	uxth	r2, r3
 801560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560c:	889b      	ldrh	r3, [r3, #4]
 801560e:	b29b      	uxth	r3, r3
 8015610:	429a      	cmp	r2, r3
 8015612:	d03d      	beq.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015614:	2300      	movs	r3, #0
 8015616:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015618:	e03a      	b.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561c:	88db      	ldrh	r3, [r3, #6]
 801561e:	b29a      	uxth	r2, r3
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	889b      	ldrh	r3, [r3, #4]
 8015624:	b29b      	uxth	r3, r3
 8015626:	429a      	cmp	r2, r3
 8015628:	d902      	bls.n	8015630 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801562a:	f04f 33ff 	mov.w	r3, #4294967295
 801562e:	e0c5      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	68ba      	ldr	r2, [r7, #8]
 8015634:	605a      	str	r2, [r3, #4]
      break;
 8015636:	e02b      	b.n	8015690 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	889b      	ldrh	r3, [r3, #4]
 801563c:	b29a      	uxth	r2, r3
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	889b      	ldrh	r3, [r3, #4]
 8015642:	b29b      	uxth	r3, r3
 8015644:	429a      	cmp	r2, r3
 8015646:	d102      	bne.n	801564e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015648:	f04f 33ff 	mov.w	r3, #4294967295
 801564c:	e0b6      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015650:	889b      	ldrh	r3, [r3, #4]
 8015652:	b29a      	uxth	r2, r3
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	88db      	ldrh	r3, [r3, #6]
 8015658:	b29b      	uxth	r3, r3
 801565a:	429a      	cmp	r2, r3
 801565c:	d202      	bcs.n	8015664 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801565e:	f04f 33ff 	mov.w	r3, #4294967295
 8015662:	e0ab      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015666:	2b00      	cmp	r3, #0
 8015668:	d009      	beq.n	801567e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566c:	88db      	ldrh	r3, [r3, #6]
 801566e:	b29a      	uxth	r2, r3
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	889b      	ldrh	r3, [r3, #4]
 8015674:	b29b      	uxth	r3, r3
 8015676:	429a      	cmp	r2, r3
 8015678:	d001      	beq.n	801567e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801567a:	2300      	movs	r3, #0
 801567c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568a:	2b00      	cmp	r3, #0
 801568c:	d193      	bne.n	80155b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801568e:	e000      	b.n	8015692 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015690:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	2b00      	cmp	r3, #0
 8015696:	d12d      	bne.n	80156f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801569a:	2b00      	cmp	r3, #0
 801569c:	d01c      	beq.n	80156d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	88db      	ldrh	r3, [r3, #6]
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	889b      	ldrh	r3, [r3, #4]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d906      	bls.n	80156bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80156ae:	4b45      	ldr	r3, [pc, #276]	; (80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156b0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80156b4:	4944      	ldr	r1, [pc, #272]	; (80157c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80156b6:	4845      	ldr	r0, [pc, #276]	; (80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156b8:	f001 fb44 	bl	8016d44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80156bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156be:	68ba      	ldr	r2, [r7, #8]
 80156c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80156c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c4:	88db      	ldrh	r3, [r3, #6]
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ca:	889b      	ldrh	r3, [r3, #4]
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d010      	beq.n	80156f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80156d2:	2300      	movs	r3, #0
 80156d4:	623b      	str	r3, [r7, #32]
 80156d6:	e00d      	b.n	80156f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d006      	beq.n	80156ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80156e0:	4b38      	ldr	r3, [pc, #224]	; (80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156e2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80156e6:	493a      	ldr	r1, [pc, #232]	; (80157d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80156e8:	4838      	ldr	r0, [pc, #224]	; (80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156ea:	f001 fb2b 	bl	8016d44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	68ba      	ldr	r2, [r7, #8]
 80156f2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d105      	bne.n	8015706 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	7f9b      	ldrb	r3, [r3, #30]
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	2b00      	cmp	r3, #0
 8015704:	d059      	beq.n	80157ba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015706:	6a3b      	ldr	r3, [r7, #32]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d04f      	beq.n	80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d006      	beq.n	8015722 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	889b      	ldrh	r3, [r3, #4]
 801571c:	b29b      	uxth	r3, r3
 801571e:	2b00      	cmp	r3, #0
 8015720:	d002      	beq.n	8015728 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	623b      	str	r3, [r7, #32]
 8015726:	e041      	b.n	80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015732:	e012      	b.n	801575a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	88db      	ldrh	r3, [r3, #6]
 801573e:	b29a      	uxth	r2, r3
 8015740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015742:	889b      	ldrh	r3, [r3, #4]
 8015744:	b29b      	uxth	r3, r3
 8015746:	429a      	cmp	r2, r3
 8015748:	d002      	beq.n	8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801574a:	2300      	movs	r3, #0
 801574c:	623b      	str	r3, [r7, #32]
            break;
 801574e:	e007      	b.n	8015760 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1e9      	bne.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015760:	6a3b      	ldr	r3, [r7, #32]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d022      	beq.n	80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801576e:	4b15      	ldr	r3, [pc, #84]	; (80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015770:	f240 12df 	movw	r2, #479	; 0x1df
 8015774:	4917      	ldr	r1, [pc, #92]	; (80157d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015776:	4815      	ldr	r0, [pc, #84]	; (80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015778:	f001 fae4 	bl	8016d44 <iprintf>
          LWIP_ASSERT("sanity check",
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015784:	429a      	cmp	r2, r3
 8015786:	d106      	bne.n	8015796 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015788:	4b0e      	ldr	r3, [pc, #56]	; (80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801578a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801578e:	4911      	ldr	r1, [pc, #68]	; (80157d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015790:	480e      	ldr	r0, [pc, #56]	; (80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015792:	f001 fad7 	bl	8016d44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d006      	beq.n	80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801579e:	4b09      	ldr	r3, [pc, #36]	; (80157c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157a0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80157a4:	490c      	ldr	r1, [pc, #48]	; (80157d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80157a6:	4809      	ldr	r0, [pc, #36]	; (80157cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157a8:	f001 facc 	bl	8016d44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80157ac:	6a3b      	ldr	r3, [r7, #32]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	bf14      	ite	ne
 80157b2:	2301      	movne	r3, #1
 80157b4:	2300      	moveq	r3, #0
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	e000      	b.n	80157bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80157ba:	2300      	movs	r3, #0
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3730      	adds	r7, #48	; 0x30
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	0801d720 	.word	0x0801d720
 80157c8:	0801d804 	.word	0x0801d804
 80157cc:	0801d768 	.word	0x0801d768
 80157d0:	0801d824 	.word	0x0801d824
 80157d4:	0801d85c 	.word	0x0801d85c
 80157d8:	0801d86c 	.word	0x0801d86c

080157dc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b08e      	sub	sp, #56	; 0x38
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80157ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	f003 030f 	and.w	r3, r3, #15
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	2b14      	cmp	r3, #20
 80157fa:	f040 8167 	bne.w	8015acc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80157fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015800:	88db      	ldrh	r3, [r3, #6]
 8015802:	b29b      	uxth	r3, r3
 8015804:	4618      	mov	r0, r3
 8015806:	f7f4 fe63 	bl	800a4d0 <lwip_htons>
 801580a:	4603      	mov	r3, r0
 801580c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015810:	b29b      	uxth	r3, r3
 8015812:	00db      	lsls	r3, r3, #3
 8015814:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	b29b      	uxth	r3, r3
 801581c:	4618      	mov	r0, r3
 801581e:	f7f4 fe57 	bl	800a4d0 <lwip_htons>
 8015822:	4603      	mov	r3, r0
 8015824:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015828:	781b      	ldrb	r3, [r3, #0]
 801582a:	f003 030f 	and.w	r3, r3, #15
 801582e:	b2db      	uxtb	r3, r3
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801583a:	b29b      	uxth	r3, r3
 801583c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801583e:	429a      	cmp	r2, r3
 8015840:	f0c0 8146 	bcc.w	8015ad0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015848:	b29b      	uxth	r3, r3
 801584a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801584c:	1ad3      	subs	r3, r2, r3
 801584e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7f6 f961 	bl	800bb18 <pbuf_clen>
 8015856:	4603      	mov	r3, r0
 8015858:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801585a:	4b9f      	ldr	r3, [pc, #636]	; (8015ad8 <ip4_reass+0x2fc>)
 801585c:	881b      	ldrh	r3, [r3, #0]
 801585e:	461a      	mov	r2, r3
 8015860:	8c3b      	ldrh	r3, [r7, #32]
 8015862:	4413      	add	r3, r2
 8015864:	2b0a      	cmp	r3, #10
 8015866:	dd10      	ble.n	801588a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015868:	8c3b      	ldrh	r3, [r7, #32]
 801586a:	4619      	mov	r1, r3
 801586c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801586e:	f7ff fd81 	bl	8015374 <ip_reass_remove_oldest_datagram>
 8015872:	4603      	mov	r3, r0
 8015874:	2b00      	cmp	r3, #0
 8015876:	f000 812d 	beq.w	8015ad4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801587a:	4b97      	ldr	r3, [pc, #604]	; (8015ad8 <ip4_reass+0x2fc>)
 801587c:	881b      	ldrh	r3, [r3, #0]
 801587e:	461a      	mov	r2, r3
 8015880:	8c3b      	ldrh	r3, [r7, #32]
 8015882:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015884:	2b0a      	cmp	r3, #10
 8015886:	f300 8125 	bgt.w	8015ad4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801588a:	4b94      	ldr	r3, [pc, #592]	; (8015adc <ip4_reass+0x300>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	633b      	str	r3, [r7, #48]	; 0x30
 8015890:	e015      	b.n	80158be <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015894:	695a      	ldr	r2, [r3, #20]
 8015896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015898:	68db      	ldr	r3, [r3, #12]
 801589a:	429a      	cmp	r2, r3
 801589c:	d10c      	bne.n	80158b8 <ip4_reass+0xdc>
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	699a      	ldr	r2, [r3, #24]
 80158a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a4:	691b      	ldr	r3, [r3, #16]
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d106      	bne.n	80158b8 <ip4_reass+0xdc>
 80158aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ac:	899a      	ldrh	r2, [r3, #12]
 80158ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b0:	889b      	ldrh	r3, [r3, #4]
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d006      	beq.n	80158c6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80158b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	633b      	str	r3, [r7, #48]	; 0x30
 80158be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d1e6      	bne.n	8015892 <ip4_reass+0xb6>
 80158c4:	e000      	b.n	80158c8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80158c6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80158c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d109      	bne.n	80158e2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80158ce:	8c3b      	ldrh	r3, [r7, #32]
 80158d0:	4619      	mov	r1, r3
 80158d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158d4:	f7ff fdb0 	bl	8015438 <ip_reass_enqueue_new_datagram>
 80158d8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80158da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d11c      	bne.n	801591a <ip4_reass+0x13e>
      goto nullreturn;
 80158e0:	e109      	b.n	8015af6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80158e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e4:	88db      	ldrh	r3, [r3, #6]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7f4 fdf1 	bl	800a4d0 <lwip_htons>
 80158ee:	4603      	mov	r3, r0
 80158f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d110      	bne.n	801591a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	89db      	ldrh	r3, [r3, #14]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f4 fde7 	bl	800a4d0 <lwip_htons>
 8015902:	4603      	mov	r3, r0
 8015904:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015908:	2b00      	cmp	r3, #0
 801590a:	d006      	beq.n	801591a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590e:	3308      	adds	r3, #8
 8015910:	2214      	movs	r2, #20
 8015912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015914:	4618      	mov	r0, r3
 8015916:	f000 fb9d 	bl	8016054 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591c:	88db      	ldrh	r3, [r3, #6]
 801591e:	b29b      	uxth	r3, r3
 8015920:	f003 0320 	and.w	r3, r3, #32
 8015924:	2b00      	cmp	r3, #0
 8015926:	bf0c      	ite	eq
 8015928:	2301      	moveq	r3, #1
 801592a:	2300      	movne	r3, #0
 801592c:	b2db      	uxtb	r3, r3
 801592e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015930:	69fb      	ldr	r3, [r7, #28]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d00e      	beq.n	8015954 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015936:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801593a:	4413      	add	r3, r2
 801593c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801593e:	8b7a      	ldrh	r2, [r7, #26]
 8015940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015942:	429a      	cmp	r2, r3
 8015944:	f0c0 80a0 	bcc.w	8015a88 <ip4_reass+0x2ac>
 8015948:	8b7b      	ldrh	r3, [r7, #26]
 801594a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801594e:	4293      	cmp	r3, r2
 8015950:	f200 809a 	bhi.w	8015a88 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015954:	69fa      	ldr	r2, [r7, #28]
 8015956:	6879      	ldr	r1, [r7, #4]
 8015958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801595a:	f7ff fdd5 	bl	8015508 <ip_reass_chain_frag_into_datagram_and_validate>
 801595e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015966:	f000 8091 	beq.w	8015a8c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801596a:	4b5b      	ldr	r3, [pc, #364]	; (8015ad8 <ip4_reass+0x2fc>)
 801596c:	881a      	ldrh	r2, [r3, #0]
 801596e:	8c3b      	ldrh	r3, [r7, #32]
 8015970:	4413      	add	r3, r2
 8015972:	b29a      	uxth	r2, r3
 8015974:	4b58      	ldr	r3, [pc, #352]	; (8015ad8 <ip4_reass+0x2fc>)
 8015976:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015978:	69fb      	ldr	r3, [r7, #28]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d00d      	beq.n	801599a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801597e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015982:	4413      	add	r3, r2
 8015984:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015988:	8a7a      	ldrh	r2, [r7, #18]
 801598a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801598e:	7f9b      	ldrb	r3, [r3, #30]
 8015990:	f043 0301 	orr.w	r3, r3, #1
 8015994:	b2da      	uxtb	r2, r3
 8015996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015998:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b01      	cmp	r3, #1
 801599e:	d171      	bne.n	8015a84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80159a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a2:	8b9b      	ldrh	r3, [r3, #28]
 80159a4:	3314      	adds	r3, #20
 80159a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80159a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80159b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80159ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159bc:	3308      	adds	r3, #8
 80159be:	2214      	movs	r2, #20
 80159c0:	4619      	mov	r1, r3
 80159c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159c4:	f000 fb46 	bl	8016054 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80159c8:	8a3b      	ldrh	r3, [r7, #16]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7f4 fd80 	bl	800a4d0 <lwip_htons>
 80159d0:	4603      	mov	r3, r0
 80159d2:	461a      	mov	r2, r3
 80159d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80159d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159da:	2200      	movs	r2, #0
 80159dc:	719a      	strb	r2, [r3, #6]
 80159de:	2200      	movs	r2, #0
 80159e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80159e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e4:	2200      	movs	r2, #0
 80159e6:	729a      	strb	r2, [r3, #10]
 80159e8:	2200      	movs	r2, #0
 80159ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80159f2:	e00d      	b.n	8015a10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80159f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80159fa:	2114      	movs	r1, #20
 80159fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80159fe:	f7f5 ff7d 	bl	800b8fc <pbuf_remove_header>
      pbuf_cat(p, r);
 8015a02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f7f6 f8c1 	bl	800bb8c <pbuf_cat>
      r = iprh->next_pbuf;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1ee      	bne.n	80159f4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015a16:	4b31      	ldr	r3, [pc, #196]	; (8015adc <ip4_reass+0x300>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d102      	bne.n	8015a26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015a20:	2300      	movs	r3, #0
 8015a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a24:	e010      	b.n	8015a48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a26:	4b2d      	ldr	r3, [pc, #180]	; (8015adc <ip4_reass+0x300>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a2c:	e007      	b.n	8015a3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d006      	beq.n	8015a46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d1f4      	bne.n	8015a2e <ip4_reass+0x252>
 8015a44:	e000      	b.n	8015a48 <ip4_reass+0x26c>
          break;
 8015a46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a4c:	f7ff fd2e 	bl	80154ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7f6 f861 	bl	800bb18 <pbuf_clen>
 8015a56:	4603      	mov	r3, r0
 8015a58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015a5a:	4b1f      	ldr	r3, [pc, #124]	; (8015ad8 <ip4_reass+0x2fc>)
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	8c3a      	ldrh	r2, [r7, #32]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d906      	bls.n	8015a72 <ip4_reass+0x296>
 8015a64:	4b1e      	ldr	r3, [pc, #120]	; (8015ae0 <ip4_reass+0x304>)
 8015a66:	f240 229b 	movw	r2, #667	; 0x29b
 8015a6a:	491e      	ldr	r1, [pc, #120]	; (8015ae4 <ip4_reass+0x308>)
 8015a6c:	481e      	ldr	r0, [pc, #120]	; (8015ae8 <ip4_reass+0x30c>)
 8015a6e:	f001 f969 	bl	8016d44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015a72:	4b19      	ldr	r3, [pc, #100]	; (8015ad8 <ip4_reass+0x2fc>)
 8015a74:	881a      	ldrh	r2, [r3, #0]
 8015a76:	8c3b      	ldrh	r3, [r7, #32]
 8015a78:	1ad3      	subs	r3, r2, r3
 8015a7a:	b29a      	uxth	r2, r3
 8015a7c:	4b16      	ldr	r3, [pc, #88]	; (8015ad8 <ip4_reass+0x2fc>)
 8015a7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	e03c      	b.n	8015afe <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015a84:	2300      	movs	r3, #0
 8015a86:	e03a      	b.n	8015afe <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015a88:	bf00      	nop
 8015a8a:	e000      	b.n	8015a8e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015a8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d106      	bne.n	8015aa2 <ip4_reass+0x2c6>
 8015a94:	4b12      	ldr	r3, [pc, #72]	; (8015ae0 <ip4_reass+0x304>)
 8015a96:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015a9a:	4914      	ldr	r1, [pc, #80]	; (8015aec <ip4_reass+0x310>)
 8015a9c:	4812      	ldr	r0, [pc, #72]	; (8015ae8 <ip4_reass+0x30c>)
 8015a9e:	f001 f951 	bl	8016d44 <iprintf>
  if (ipr->p == NULL) {
 8015aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d124      	bne.n	8015af4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015aaa:	4b0c      	ldr	r3, [pc, #48]	; (8015adc <ip4_reass+0x300>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ab0:	429a      	cmp	r2, r3
 8015ab2:	d006      	beq.n	8015ac2 <ip4_reass+0x2e6>
 8015ab4:	4b0a      	ldr	r3, [pc, #40]	; (8015ae0 <ip4_reass+0x304>)
 8015ab6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015aba:	490d      	ldr	r1, [pc, #52]	; (8015af0 <ip4_reass+0x314>)
 8015abc:	480a      	ldr	r0, [pc, #40]	; (8015ae8 <ip4_reass+0x30c>)
 8015abe:	f001 f941 	bl	8016d44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ac6:	f7ff fcf1 	bl	80154ac <ip_reass_dequeue_datagram>
 8015aca:	e014      	b.n	8015af6 <ip4_reass+0x31a>
    goto nullreturn;
 8015acc:	bf00      	nop
 8015ace:	e012      	b.n	8015af6 <ip4_reass+0x31a>
    goto nullreturn;
 8015ad0:	bf00      	nop
 8015ad2:	e010      	b.n	8015af6 <ip4_reass+0x31a>
      goto nullreturn;
 8015ad4:	bf00      	nop
 8015ad6:	e00e      	b.n	8015af6 <ip4_reass+0x31a>
 8015ad8:	20000484 	.word	0x20000484
 8015adc:	20000480 	.word	0x20000480
 8015ae0:	0801d720 	.word	0x0801d720
 8015ae4:	0801d890 	.word	0x0801d890
 8015ae8:	0801d768 	.word	0x0801d768
 8015aec:	0801d8ac 	.word	0x0801d8ac
 8015af0:	0801d8b8 	.word	0x0801d8b8
  }

nullreturn:
 8015af4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7f5 ff86 	bl	800ba08 <pbuf_free>
  return NULL;
 8015afc:	2300      	movs	r3, #0
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3738      	adds	r7, #56	; 0x38
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop

08015b08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015b0c:	2005      	movs	r0, #5
 8015b0e:	f7f5 f935 	bl	800ad7c <memp_malloc>
 8015b12:	4603      	mov	r3, r0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b082      	sub	sp, #8
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d106      	bne.n	8015b34 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015b26:	4b07      	ldr	r3, [pc, #28]	; (8015b44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015b28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015b2c:	4906      	ldr	r1, [pc, #24]	; (8015b48 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015b2e:	4807      	ldr	r0, [pc, #28]	; (8015b4c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015b30:	f001 f908 	bl	8016d44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	2005      	movs	r0, #5
 8015b38:	f7f5 f96c 	bl	800ae14 <memp_free>
}
 8015b3c:	bf00      	nop
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	0801d720 	.word	0x0801d720
 8015b48:	0801d8d8 	.word	0x0801d8d8
 8015b4c:	0801d768 	.word	0x0801d768

08015b50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b084      	sub	sp, #16
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d106      	bne.n	8015b70 <ipfrag_free_pbuf_custom+0x20>
 8015b62:	4b11      	ldr	r3, [pc, #68]	; (8015ba8 <ipfrag_free_pbuf_custom+0x58>)
 8015b64:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015b68:	4910      	ldr	r1, [pc, #64]	; (8015bac <ipfrag_free_pbuf_custom+0x5c>)
 8015b6a:	4811      	ldr	r0, [pc, #68]	; (8015bb0 <ipfrag_free_pbuf_custom+0x60>)
 8015b6c:	f001 f8ea 	bl	8016d44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015b70:	68fa      	ldr	r2, [r7, #12]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d006      	beq.n	8015b86 <ipfrag_free_pbuf_custom+0x36>
 8015b78:	4b0b      	ldr	r3, [pc, #44]	; (8015ba8 <ipfrag_free_pbuf_custom+0x58>)
 8015b7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015b7e:	490d      	ldr	r1, [pc, #52]	; (8015bb4 <ipfrag_free_pbuf_custom+0x64>)
 8015b80:	480b      	ldr	r0, [pc, #44]	; (8015bb0 <ipfrag_free_pbuf_custom+0x60>)
 8015b82:	f001 f8df 	bl	8016d44 <iprintf>
  if (pcr->original != NULL) {
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	695b      	ldr	r3, [r3, #20]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d004      	beq.n	8015b98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	695b      	ldr	r3, [r3, #20]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7f5 ff38 	bl	800ba08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f7ff ffbd 	bl	8015b18 <ip_frag_free_pbuf_custom_ref>
}
 8015b9e:	bf00      	nop
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	0801d720 	.word	0x0801d720
 8015bac:	0801d8e4 	.word	0x0801d8e4
 8015bb0:	0801d768 	.word	0x0801d768
 8015bb4:	0801d8f0 	.word	0x0801d8f0

08015bb8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b094      	sub	sp, #80	; 0x50
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bce:	3b14      	subs	r3, #20
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	da00      	bge.n	8015bd6 <ip4_frag+0x1e>
 8015bd4:	3307      	adds	r3, #7
 8015bd6:	10db      	asrs	r3, r3, #3
 8015bd8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015bda:	2314      	movs	r3, #20
 8015bdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	f003 030f 	and.w	r3, r3, #15
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	009b      	lsls	r3, r3, #2
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b14      	cmp	r3, #20
 8015bf8:	d002      	beq.n	8015c00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015bfa:	f06f 0305 	mvn.w	r3, #5
 8015bfe:	e110      	b.n	8015e22 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	895b      	ldrh	r3, [r3, #10]
 8015c04:	2b13      	cmp	r3, #19
 8015c06:	d809      	bhi.n	8015c1c <ip4_frag+0x64>
 8015c08:	4b88      	ldr	r3, [pc, #544]	; (8015e2c <ip4_frag+0x274>)
 8015c0a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015c0e:	4988      	ldr	r1, [pc, #544]	; (8015e30 <ip4_frag+0x278>)
 8015c10:	4888      	ldr	r0, [pc, #544]	; (8015e34 <ip4_frag+0x27c>)
 8015c12:	f001 f897 	bl	8016d44 <iprintf>
 8015c16:	f06f 0305 	mvn.w	r3, #5
 8015c1a:	e102      	b.n	8015e22 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1e:	88db      	ldrh	r3, [r3, #6]
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7f4 fc54 	bl	800a4d0 <lwip_htons>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015c2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015c36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	891b      	ldrh	r3, [r3, #8]
 8015c42:	3b14      	subs	r3, #20
 8015c44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015c48:	e0e1      	b.n	8015e0e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015c4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c4c:	00db      	lsls	r3, r3, #3
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c54:	4293      	cmp	r3, r2
 8015c56:	bf28      	it	cs
 8015c58:	4613      	movcs	r3, r2
 8015c5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015c5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c60:	2114      	movs	r1, #20
 8015c62:	200e      	movs	r0, #14
 8015c64:	f7f5 fbec 	bl	800b440 <pbuf_alloc>
 8015c68:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f000 80d5 	beq.w	8015e1c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c74:	895b      	ldrh	r3, [r3, #10]
 8015c76:	2b13      	cmp	r3, #19
 8015c78:	d806      	bhi.n	8015c88 <ip4_frag+0xd0>
 8015c7a:	4b6c      	ldr	r3, [pc, #432]	; (8015e2c <ip4_frag+0x274>)
 8015c7c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015c80:	496d      	ldr	r1, [pc, #436]	; (8015e38 <ip4_frag+0x280>)
 8015c82:	486c      	ldr	r0, [pc, #432]	; (8015e34 <ip4_frag+0x27c>)
 8015c84:	f001 f85e 	bl	8016d44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	2214      	movs	r2, #20
 8015c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f9df 	bl	8016054 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015c9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015c9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015ca2:	e064      	b.n	8015d6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	895a      	ldrh	r2, [r3, #10]
 8015ca8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	895b      	ldrh	r3, [r3, #10]
 8015cb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d906      	bls.n	8015cc6 <ip4_frag+0x10e>
 8015cb8:	4b5c      	ldr	r3, [pc, #368]	; (8015e2c <ip4_frag+0x274>)
 8015cba:	f240 322d 	movw	r2, #813	; 0x32d
 8015cbe:	495f      	ldr	r1, [pc, #380]	; (8015e3c <ip4_frag+0x284>)
 8015cc0:	485c      	ldr	r0, [pc, #368]	; (8015e34 <ip4_frag+0x27c>)
 8015cc2:	f001 f83f 	bl	8016d44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015cc6:	8bfa      	ldrh	r2, [r7, #30]
 8015cc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ccc:	4293      	cmp	r3, r2
 8015cce:	bf28      	it	cs
 8015cd0:	4613      	movcs	r3, r2
 8015cd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015cd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d105      	bne.n	8015cea <ip4_frag+0x132>
        poff = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	60fb      	str	r3, [r7, #12]
        continue;
 8015ce8:	e041      	b.n	8015d6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015cea:	f7ff ff0d 	bl	8015b08 <ip_frag_alloc_pbuf_custom_ref>
 8015cee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015cf0:	69bb      	ldr	r3, [r7, #24]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d103      	bne.n	8015cfe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cf8:	f7f5 fe86 	bl	800ba08 <pbuf_free>
        goto memerr;
 8015cfc:	e08f      	b.n	8015e1e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015cfe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d06:	4413      	add	r3, r2
 8015d08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015d0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015d10:	9201      	str	r2, [sp, #4]
 8015d12:	9300      	str	r3, [sp, #0]
 8015d14:	4603      	mov	r3, r0
 8015d16:	2241      	movs	r2, #65	; 0x41
 8015d18:	2000      	movs	r0, #0
 8015d1a:	f7f5 fcbb 	bl	800b694 <pbuf_alloced_custom>
 8015d1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d106      	bne.n	8015d34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015d26:	69b8      	ldr	r0, [r7, #24]
 8015d28:	f7ff fef6 	bl	8015b18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d2e:	f7f5 fe6b 	bl	800ba08 <pbuf_free>
        goto memerr;
 8015d32:	e074      	b.n	8015e1e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f7f5 ff07 	bl	800bb48 <pbuf_ref>
      pcr->original = p;
 8015d3a:	69bb      	ldr	r3, [r7, #24]
 8015d3c:	68fa      	ldr	r2, [r7, #12]
 8015d3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	4a3f      	ldr	r2, [pc, #252]	; (8015e40 <ip4_frag+0x288>)
 8015d44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015d46:	6979      	ldr	r1, [r7, #20]
 8015d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d4a:	f7f5 ff1f 	bl	800bb8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015d4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015d52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015d5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d004      	beq.n	8015d6e <ip4_frag+0x1b6>
        poff = 0;
 8015d64:	2300      	movs	r3, #0
 8015d66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015d6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d196      	bne.n	8015ca4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015d76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d7c:	4413      	add	r3, r2
 8015d7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d84:	f1a3 0213 	sub.w	r2, r3, #19
 8015d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	bfcc      	ite	gt
 8015d90:	2301      	movgt	r3, #1
 8015d92:	2300      	movle	r3, #0
 8015d94:	b2db      	uxtb	r3, r3
 8015d96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015d98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015da0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d002      	beq.n	8015dae <ip4_frag+0x1f6>
 8015da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d003      	beq.n	8015db6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015dae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015db4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015db6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f4 fb89 	bl	800a4d0 <lwip_htons>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015dc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015dc8:	3314      	adds	r3, #20
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7f4 fb7f 	bl	800a4d0 <lwip_htons>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ddc:	2200      	movs	r2, #0
 8015dde:	729a      	strb	r2, [r3, #10]
 8015de0:	2200      	movs	r2, #0
 8015de2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	695b      	ldr	r3, [r3, #20]
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015dec:	68b8      	ldr	r0, [r7, #8]
 8015dee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015df2:	f7f5 fe09 	bl	800ba08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015df6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015e02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015e06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e08:	4413      	add	r3, r2
 8015e0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015e0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	f47f af19 	bne.w	8015c4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	e002      	b.n	8015e22 <ip4_frag+0x26a>
      goto memerr;
 8015e1c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3748      	adds	r7, #72	; 0x48
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	0801d720 	.word	0x0801d720
 8015e30:	0801d8fc 	.word	0x0801d8fc
 8015e34:	0801d768 	.word	0x0801d768
 8015e38:	0801d918 	.word	0x0801d918
 8015e3c:	0801d938 	.word	0x0801d938
 8015e40:	08015b51 	.word	0x08015b51

08015e44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b086      	sub	sp, #24
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015e4e:	230e      	movs	r3, #14
 8015e50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	895b      	ldrh	r3, [r3, #10]
 8015e56:	2b0e      	cmp	r3, #14
 8015e58:	d96e      	bls.n	8015f38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	7bdb      	ldrb	r3, [r3, #15]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d106      	bne.n	8015e70 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015e68:	3301      	adds	r3, #1
 8015e6a:	b2da      	uxtb	r2, r3
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	7b1a      	ldrb	r2, [r3, #12]
 8015e7a:	7b5b      	ldrb	r3, [r3, #13]
 8015e7c:	021b      	lsls	r3, r3, #8
 8015e7e:	4313      	orrs	r3, r2
 8015e80:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	f003 0301 	and.w	r3, r3, #1
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d023      	beq.n	8015ed6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d10f      	bne.n	8015eb6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	785b      	ldrb	r3, [r3, #1]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d11b      	bne.n	8015ed6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ea2:	2b5e      	cmp	r3, #94	; 0x5e
 8015ea4:	d117      	bne.n	8015ed6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	7b5b      	ldrb	r3, [r3, #13]
 8015eaa:	f043 0310 	orr.w	r3, r3, #16
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	735a      	strb	r2, [r3, #13]
 8015eb4:	e00f      	b.n	8015ed6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015eb6:	693b      	ldr	r3, [r7, #16]
 8015eb8:	2206      	movs	r2, #6
 8015eba:	4928      	ldr	r1, [pc, #160]	; (8015f5c <ethernet_input+0x118>)
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f000 f8bb 	bl	8016038 <memcmp>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d106      	bne.n	8015ed6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	7b5b      	ldrb	r3, [r3, #13]
 8015ecc:	f043 0308 	orr.w	r3, r3, #8
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015ed6:	89fb      	ldrh	r3, [r7, #14]
 8015ed8:	2b08      	cmp	r3, #8
 8015eda:	d003      	beq.n	8015ee4 <ethernet_input+0xa0>
 8015edc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015ee0:	d014      	beq.n	8015f0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015ee2:	e032      	b.n	8015f4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015eea:	f003 0308 	and.w	r3, r3, #8
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d024      	beq.n	8015f3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015ef2:	8afb      	ldrh	r3, [r7, #22]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7f5 fd00 	bl	800b8fc <pbuf_remove_header>
 8015efc:	4603      	mov	r3, r0
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d11e      	bne.n	8015f40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015f02:	6839      	ldr	r1, [r7, #0]
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7fe ff09 	bl	8014d1c <ip4_input>
      break;
 8015f0a:	e013      	b.n	8015f34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f12:	f003 0308 	and.w	r3, r3, #8
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d014      	beq.n	8015f44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015f1a:	8afb      	ldrh	r3, [r7, #22]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7f5 fcec 	bl	800b8fc <pbuf_remove_header>
 8015f24:	4603      	mov	r3, r0
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d10e      	bne.n	8015f48 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7fe f8a5 	bl	801407c <etharp_input>
      break;
 8015f32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015f34:	2300      	movs	r3, #0
 8015f36:	e00c      	b.n	8015f52 <ethernet_input+0x10e>
    goto free_and_return;
 8015f38:	bf00      	nop
 8015f3a:	e006      	b.n	8015f4a <ethernet_input+0x106>
        goto free_and_return;
 8015f3c:	bf00      	nop
 8015f3e:	e004      	b.n	8015f4a <ethernet_input+0x106>
        goto free_and_return;
 8015f40:	bf00      	nop
 8015f42:	e002      	b.n	8015f4a <ethernet_input+0x106>
        goto free_and_return;
 8015f44:	bf00      	nop
 8015f46:	e000      	b.n	8015f4a <ethernet_input+0x106>
        goto free_and_return;
 8015f48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7f5 fd5c 	bl	800ba08 <pbuf_free>
  return ERR_OK;
 8015f50:	2300      	movs	r3, #0
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3718      	adds	r7, #24
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	0801dadc 	.word	0x0801dadc

08015f60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b086      	sub	sp, #24
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	607a      	str	r2, [r7, #4]
 8015f6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015f6e:	8c3b      	ldrh	r3, [r7, #32]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7f4 faad 	bl	800a4d0 <lwip_htons>
 8015f76:	4603      	mov	r3, r0
 8015f78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015f7a:	210e      	movs	r1, #14
 8015f7c:	68b8      	ldr	r0, [r7, #8]
 8015f7e:	f7f5 fcad 	bl	800b8dc <pbuf_add_header>
 8015f82:	4603      	mov	r3, r0
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d125      	bne.n	8015fd4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	8afa      	ldrh	r2, [r7, #22]
 8015f92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	2206      	movs	r2, #6
 8015f98:	6839      	ldr	r1, [r7, #0]
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f000 f85a 	bl	8016054 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	3306      	adds	r3, #6
 8015fa4:	2206      	movs	r2, #6
 8015fa6:	6879      	ldr	r1, [r7, #4]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f000 f853 	bl	8016054 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015fb4:	2b06      	cmp	r3, #6
 8015fb6:	d006      	beq.n	8015fc6 <ethernet_output+0x66>
 8015fb8:	4b0a      	ldr	r3, [pc, #40]	; (8015fe4 <ethernet_output+0x84>)
 8015fba:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015fbe:	490a      	ldr	r1, [pc, #40]	; (8015fe8 <ethernet_output+0x88>)
 8015fc0:	480a      	ldr	r0, [pc, #40]	; (8015fec <ethernet_output+0x8c>)
 8015fc2:	f000 febf 	bl	8016d44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	699b      	ldr	r3, [r3, #24]
 8015fca:	68b9      	ldr	r1, [r7, #8]
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	4798      	blx	r3
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	e002      	b.n	8015fda <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015fd4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015fd6:	f06f 0301 	mvn.w	r3, #1
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3718      	adds	r7, #24
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	0801d948 	.word	0x0801d948
 8015fe8:	0801d980 	.word	0x0801d980
 8015fec:	0801d9b4 	.word	0x0801d9b4

08015ff0 <__libc_init_array>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	4d0d      	ldr	r5, [pc, #52]	; (8016028 <__libc_init_array+0x38>)
 8015ff4:	4c0d      	ldr	r4, [pc, #52]	; (801602c <__libc_init_array+0x3c>)
 8015ff6:	1b64      	subs	r4, r4, r5
 8015ff8:	10a4      	asrs	r4, r4, #2
 8015ffa:	2600      	movs	r6, #0
 8015ffc:	42a6      	cmp	r6, r4
 8015ffe:	d109      	bne.n	8016014 <__libc_init_array+0x24>
 8016000:	4d0b      	ldr	r5, [pc, #44]	; (8016030 <__libc_init_array+0x40>)
 8016002:	4c0c      	ldr	r4, [pc, #48]	; (8016034 <__libc_init_array+0x44>)
 8016004:	f004 fd8e 	bl	801ab24 <_init>
 8016008:	1b64      	subs	r4, r4, r5
 801600a:	10a4      	asrs	r4, r4, #2
 801600c:	2600      	movs	r6, #0
 801600e:	42a6      	cmp	r6, r4
 8016010:	d105      	bne.n	801601e <__libc_init_array+0x2e>
 8016012:	bd70      	pop	{r4, r5, r6, pc}
 8016014:	f855 3b04 	ldr.w	r3, [r5], #4
 8016018:	4798      	blx	r3
 801601a:	3601      	adds	r6, #1
 801601c:	e7ee      	b.n	8015ffc <__libc_init_array+0xc>
 801601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016022:	4798      	blx	r3
 8016024:	3601      	adds	r6, #1
 8016026:	e7f2      	b.n	801600e <__libc_init_array+0x1e>
 8016028:	0801e878 	.word	0x0801e878
 801602c:	0801e878 	.word	0x0801e878
 8016030:	0801e878 	.word	0x0801e878
 8016034:	0801e87c 	.word	0x0801e87c

08016038 <memcmp>:
 8016038:	b530      	push	{r4, r5, lr}
 801603a:	3901      	subs	r1, #1
 801603c:	2400      	movs	r4, #0
 801603e:	42a2      	cmp	r2, r4
 8016040:	d101      	bne.n	8016046 <memcmp+0xe>
 8016042:	2000      	movs	r0, #0
 8016044:	e005      	b.n	8016052 <memcmp+0x1a>
 8016046:	5d03      	ldrb	r3, [r0, r4]
 8016048:	3401      	adds	r4, #1
 801604a:	5d0d      	ldrb	r5, [r1, r4]
 801604c:	42ab      	cmp	r3, r5
 801604e:	d0f6      	beq.n	801603e <memcmp+0x6>
 8016050:	1b58      	subs	r0, r3, r5
 8016052:	bd30      	pop	{r4, r5, pc}

08016054 <memcpy>:
 8016054:	440a      	add	r2, r1
 8016056:	4291      	cmp	r1, r2
 8016058:	f100 33ff 	add.w	r3, r0, #4294967295
 801605c:	d100      	bne.n	8016060 <memcpy+0xc>
 801605e:	4770      	bx	lr
 8016060:	b510      	push	{r4, lr}
 8016062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016066:	f803 4f01 	strb.w	r4, [r3, #1]!
 801606a:	4291      	cmp	r1, r2
 801606c:	d1f9      	bne.n	8016062 <memcpy+0xe>
 801606e:	bd10      	pop	{r4, pc}

08016070 <memmove>:
 8016070:	4288      	cmp	r0, r1
 8016072:	b510      	push	{r4, lr}
 8016074:	eb01 0402 	add.w	r4, r1, r2
 8016078:	d902      	bls.n	8016080 <memmove+0x10>
 801607a:	4284      	cmp	r4, r0
 801607c:	4623      	mov	r3, r4
 801607e:	d807      	bhi.n	8016090 <memmove+0x20>
 8016080:	1e43      	subs	r3, r0, #1
 8016082:	42a1      	cmp	r1, r4
 8016084:	d008      	beq.n	8016098 <memmove+0x28>
 8016086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801608a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801608e:	e7f8      	b.n	8016082 <memmove+0x12>
 8016090:	4402      	add	r2, r0
 8016092:	4601      	mov	r1, r0
 8016094:	428a      	cmp	r2, r1
 8016096:	d100      	bne.n	801609a <memmove+0x2a>
 8016098:	bd10      	pop	{r4, pc}
 801609a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801609e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80160a2:	e7f7      	b.n	8016094 <memmove+0x24>

080160a4 <memset>:
 80160a4:	4402      	add	r2, r0
 80160a6:	4603      	mov	r3, r0
 80160a8:	4293      	cmp	r3, r2
 80160aa:	d100      	bne.n	80160ae <memset+0xa>
 80160ac:	4770      	bx	lr
 80160ae:	f803 1b01 	strb.w	r1, [r3], #1
 80160b2:	e7f9      	b.n	80160a8 <memset+0x4>

080160b4 <__cvt>:
 80160b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b6:	ed2d 8b02 	vpush	{d8}
 80160ba:	eeb0 8b40 	vmov.f64	d8, d0
 80160be:	b085      	sub	sp, #20
 80160c0:	4617      	mov	r7, r2
 80160c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80160c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80160c6:	ee18 2a90 	vmov	r2, s17
 80160ca:	f025 0520 	bic.w	r5, r5, #32
 80160ce:	2a00      	cmp	r2, #0
 80160d0:	bfb6      	itet	lt
 80160d2:	222d      	movlt	r2, #45	; 0x2d
 80160d4:	2200      	movge	r2, #0
 80160d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80160da:	2d46      	cmp	r5, #70	; 0x46
 80160dc:	460c      	mov	r4, r1
 80160de:	701a      	strb	r2, [r3, #0]
 80160e0:	d004      	beq.n	80160ec <__cvt+0x38>
 80160e2:	2d45      	cmp	r5, #69	; 0x45
 80160e4:	d100      	bne.n	80160e8 <__cvt+0x34>
 80160e6:	3401      	adds	r4, #1
 80160e8:	2102      	movs	r1, #2
 80160ea:	e000      	b.n	80160ee <__cvt+0x3a>
 80160ec:	2103      	movs	r1, #3
 80160ee:	ab03      	add	r3, sp, #12
 80160f0:	9301      	str	r3, [sp, #4]
 80160f2:	ab02      	add	r3, sp, #8
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	4622      	mov	r2, r4
 80160f8:	4633      	mov	r3, r6
 80160fa:	eeb0 0b48 	vmov.f64	d0, d8
 80160fe:	f001 fe1b 	bl	8017d38 <_dtoa_r>
 8016102:	2d47      	cmp	r5, #71	; 0x47
 8016104:	d109      	bne.n	801611a <__cvt+0x66>
 8016106:	07fb      	lsls	r3, r7, #31
 8016108:	d407      	bmi.n	801611a <__cvt+0x66>
 801610a:	9b03      	ldr	r3, [sp, #12]
 801610c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801610e:	1a1b      	subs	r3, r3, r0
 8016110:	6013      	str	r3, [r2, #0]
 8016112:	b005      	add	sp, #20
 8016114:	ecbd 8b02 	vpop	{d8}
 8016118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801611a:	2d46      	cmp	r5, #70	; 0x46
 801611c:	eb00 0204 	add.w	r2, r0, r4
 8016120:	d10c      	bne.n	801613c <__cvt+0x88>
 8016122:	7803      	ldrb	r3, [r0, #0]
 8016124:	2b30      	cmp	r3, #48	; 0x30
 8016126:	d107      	bne.n	8016138 <__cvt+0x84>
 8016128:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016130:	bf1c      	itt	ne
 8016132:	f1c4 0401 	rsbne	r4, r4, #1
 8016136:	6034      	strne	r4, [r6, #0]
 8016138:	6833      	ldr	r3, [r6, #0]
 801613a:	441a      	add	r2, r3
 801613c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016144:	bf08      	it	eq
 8016146:	9203      	streq	r2, [sp, #12]
 8016148:	2130      	movs	r1, #48	; 0x30
 801614a:	9b03      	ldr	r3, [sp, #12]
 801614c:	4293      	cmp	r3, r2
 801614e:	d2dc      	bcs.n	801610a <__cvt+0x56>
 8016150:	1c5c      	adds	r4, r3, #1
 8016152:	9403      	str	r4, [sp, #12]
 8016154:	7019      	strb	r1, [r3, #0]
 8016156:	e7f8      	b.n	801614a <__cvt+0x96>

08016158 <__exponent>:
 8016158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801615a:	4603      	mov	r3, r0
 801615c:	2900      	cmp	r1, #0
 801615e:	bfb8      	it	lt
 8016160:	4249      	neglt	r1, r1
 8016162:	f803 2b02 	strb.w	r2, [r3], #2
 8016166:	bfb4      	ite	lt
 8016168:	222d      	movlt	r2, #45	; 0x2d
 801616a:	222b      	movge	r2, #43	; 0x2b
 801616c:	2909      	cmp	r1, #9
 801616e:	7042      	strb	r2, [r0, #1]
 8016170:	dd2a      	ble.n	80161c8 <__exponent+0x70>
 8016172:	f10d 0407 	add.w	r4, sp, #7
 8016176:	46a4      	mov	ip, r4
 8016178:	270a      	movs	r7, #10
 801617a:	46a6      	mov	lr, r4
 801617c:	460a      	mov	r2, r1
 801617e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016182:	fb07 1516 	mls	r5, r7, r6, r1
 8016186:	3530      	adds	r5, #48	; 0x30
 8016188:	2a63      	cmp	r2, #99	; 0x63
 801618a:	f104 34ff 	add.w	r4, r4, #4294967295
 801618e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016192:	4631      	mov	r1, r6
 8016194:	dcf1      	bgt.n	801617a <__exponent+0x22>
 8016196:	3130      	adds	r1, #48	; 0x30
 8016198:	f1ae 0502 	sub.w	r5, lr, #2
 801619c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80161a0:	1c44      	adds	r4, r0, #1
 80161a2:	4629      	mov	r1, r5
 80161a4:	4561      	cmp	r1, ip
 80161a6:	d30a      	bcc.n	80161be <__exponent+0x66>
 80161a8:	f10d 0209 	add.w	r2, sp, #9
 80161ac:	eba2 020e 	sub.w	r2, r2, lr
 80161b0:	4565      	cmp	r5, ip
 80161b2:	bf88      	it	hi
 80161b4:	2200      	movhi	r2, #0
 80161b6:	4413      	add	r3, r2
 80161b8:	1a18      	subs	r0, r3, r0
 80161ba:	b003      	add	sp, #12
 80161bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80161c6:	e7ed      	b.n	80161a4 <__exponent+0x4c>
 80161c8:	2330      	movs	r3, #48	; 0x30
 80161ca:	3130      	adds	r1, #48	; 0x30
 80161cc:	7083      	strb	r3, [r0, #2]
 80161ce:	70c1      	strb	r1, [r0, #3]
 80161d0:	1d03      	adds	r3, r0, #4
 80161d2:	e7f1      	b.n	80161b8 <__exponent+0x60>
 80161d4:	0000      	movs	r0, r0
	...

080161d8 <_printf_float>:
 80161d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161dc:	b08b      	sub	sp, #44	; 0x2c
 80161de:	460c      	mov	r4, r1
 80161e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80161e4:	4616      	mov	r6, r2
 80161e6:	461f      	mov	r7, r3
 80161e8:	4605      	mov	r5, r0
 80161ea:	f002 ffa3 	bl	8019134 <_localeconv_r>
 80161ee:	f8d0 b000 	ldr.w	fp, [r0]
 80161f2:	4658      	mov	r0, fp
 80161f4:	f7ea f824 	bl	8000240 <strlen>
 80161f8:	2300      	movs	r3, #0
 80161fa:	9308      	str	r3, [sp, #32]
 80161fc:	f8d8 3000 	ldr.w	r3, [r8]
 8016200:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016204:	6822      	ldr	r2, [r4, #0]
 8016206:	3307      	adds	r3, #7
 8016208:	f023 0307 	bic.w	r3, r3, #7
 801620c:	f103 0108 	add.w	r1, r3, #8
 8016210:	f8c8 1000 	str.w	r1, [r8]
 8016214:	4682      	mov	sl, r0
 8016216:	e9d3 0100 	ldrd	r0, r1, [r3]
 801621a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801621e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016480 <_printf_float+0x2a8>
 8016222:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8016226:	eeb0 6bc0 	vabs.f64	d6, d0
 801622a:	eeb4 6b47 	vcmp.f64	d6, d7
 801622e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016232:	dd24      	ble.n	801627e <_printf_float+0xa6>
 8016234:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623c:	d502      	bpl.n	8016244 <_printf_float+0x6c>
 801623e:	232d      	movs	r3, #45	; 0x2d
 8016240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016244:	4b90      	ldr	r3, [pc, #576]	; (8016488 <_printf_float+0x2b0>)
 8016246:	4891      	ldr	r0, [pc, #580]	; (801648c <_printf_float+0x2b4>)
 8016248:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801624c:	bf94      	ite	ls
 801624e:	4698      	movls	r8, r3
 8016250:	4680      	movhi	r8, r0
 8016252:	2303      	movs	r3, #3
 8016254:	6123      	str	r3, [r4, #16]
 8016256:	f022 0204 	bic.w	r2, r2, #4
 801625a:	2300      	movs	r3, #0
 801625c:	6022      	str	r2, [r4, #0]
 801625e:	9304      	str	r3, [sp, #16]
 8016260:	9700      	str	r7, [sp, #0]
 8016262:	4633      	mov	r3, r6
 8016264:	aa09      	add	r2, sp, #36	; 0x24
 8016266:	4621      	mov	r1, r4
 8016268:	4628      	mov	r0, r5
 801626a:	f000 f9d3 	bl	8016614 <_printf_common>
 801626e:	3001      	adds	r0, #1
 8016270:	f040 808a 	bne.w	8016388 <_printf_float+0x1b0>
 8016274:	f04f 30ff 	mov.w	r0, #4294967295
 8016278:	b00b      	add	sp, #44	; 0x2c
 801627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627e:	eeb4 0b40 	vcmp.f64	d0, d0
 8016282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016286:	d709      	bvc.n	801629c <_printf_float+0xc4>
 8016288:	ee10 3a90 	vmov	r3, s1
 801628c:	2b00      	cmp	r3, #0
 801628e:	bfbc      	itt	lt
 8016290:	232d      	movlt	r3, #45	; 0x2d
 8016292:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016296:	487e      	ldr	r0, [pc, #504]	; (8016490 <_printf_float+0x2b8>)
 8016298:	4b7e      	ldr	r3, [pc, #504]	; (8016494 <_printf_float+0x2bc>)
 801629a:	e7d5      	b.n	8016248 <_printf_float+0x70>
 801629c:	6863      	ldr	r3, [r4, #4]
 801629e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80162a2:	9104      	str	r1, [sp, #16]
 80162a4:	1c59      	adds	r1, r3, #1
 80162a6:	d13c      	bne.n	8016322 <_printf_float+0x14a>
 80162a8:	2306      	movs	r3, #6
 80162aa:	6063      	str	r3, [r4, #4]
 80162ac:	2300      	movs	r3, #0
 80162ae:	9303      	str	r3, [sp, #12]
 80162b0:	ab08      	add	r3, sp, #32
 80162b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80162b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80162ba:	ab07      	add	r3, sp, #28
 80162bc:	6861      	ldr	r1, [r4, #4]
 80162be:	9300      	str	r3, [sp, #0]
 80162c0:	6022      	str	r2, [r4, #0]
 80162c2:	f10d 031b 	add.w	r3, sp, #27
 80162c6:	4628      	mov	r0, r5
 80162c8:	f7ff fef4 	bl	80160b4 <__cvt>
 80162cc:	9b04      	ldr	r3, [sp, #16]
 80162ce:	9907      	ldr	r1, [sp, #28]
 80162d0:	2b47      	cmp	r3, #71	; 0x47
 80162d2:	4680      	mov	r8, r0
 80162d4:	d108      	bne.n	80162e8 <_printf_float+0x110>
 80162d6:	1cc8      	adds	r0, r1, #3
 80162d8:	db02      	blt.n	80162e0 <_printf_float+0x108>
 80162da:	6863      	ldr	r3, [r4, #4]
 80162dc:	4299      	cmp	r1, r3
 80162de:	dd41      	ble.n	8016364 <_printf_float+0x18c>
 80162e0:	f1a9 0902 	sub.w	r9, r9, #2
 80162e4:	fa5f f989 	uxtb.w	r9, r9
 80162e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80162ec:	d820      	bhi.n	8016330 <_printf_float+0x158>
 80162ee:	3901      	subs	r1, #1
 80162f0:	464a      	mov	r2, r9
 80162f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162f6:	9107      	str	r1, [sp, #28]
 80162f8:	f7ff ff2e 	bl	8016158 <__exponent>
 80162fc:	9a08      	ldr	r2, [sp, #32]
 80162fe:	9004      	str	r0, [sp, #16]
 8016300:	1813      	adds	r3, r2, r0
 8016302:	2a01      	cmp	r2, #1
 8016304:	6123      	str	r3, [r4, #16]
 8016306:	dc02      	bgt.n	801630e <_printf_float+0x136>
 8016308:	6822      	ldr	r2, [r4, #0]
 801630a:	07d2      	lsls	r2, r2, #31
 801630c:	d501      	bpl.n	8016312 <_printf_float+0x13a>
 801630e:	3301      	adds	r3, #1
 8016310:	6123      	str	r3, [r4, #16]
 8016312:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d0a2      	beq.n	8016260 <_printf_float+0x88>
 801631a:	232d      	movs	r3, #45	; 0x2d
 801631c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016320:	e79e      	b.n	8016260 <_printf_float+0x88>
 8016322:	9904      	ldr	r1, [sp, #16]
 8016324:	2947      	cmp	r1, #71	; 0x47
 8016326:	d1c1      	bne.n	80162ac <_printf_float+0xd4>
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1bf      	bne.n	80162ac <_printf_float+0xd4>
 801632c:	2301      	movs	r3, #1
 801632e:	e7bc      	b.n	80162aa <_printf_float+0xd2>
 8016330:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016334:	d118      	bne.n	8016368 <_printf_float+0x190>
 8016336:	2900      	cmp	r1, #0
 8016338:	6863      	ldr	r3, [r4, #4]
 801633a:	dd0b      	ble.n	8016354 <_printf_float+0x17c>
 801633c:	6121      	str	r1, [r4, #16]
 801633e:	b913      	cbnz	r3, 8016346 <_printf_float+0x16e>
 8016340:	6822      	ldr	r2, [r4, #0]
 8016342:	07d0      	lsls	r0, r2, #31
 8016344:	d502      	bpl.n	801634c <_printf_float+0x174>
 8016346:	3301      	adds	r3, #1
 8016348:	440b      	add	r3, r1
 801634a:	6123      	str	r3, [r4, #16]
 801634c:	2300      	movs	r3, #0
 801634e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016350:	9304      	str	r3, [sp, #16]
 8016352:	e7de      	b.n	8016312 <_printf_float+0x13a>
 8016354:	b913      	cbnz	r3, 801635c <_printf_float+0x184>
 8016356:	6822      	ldr	r2, [r4, #0]
 8016358:	07d2      	lsls	r2, r2, #31
 801635a:	d501      	bpl.n	8016360 <_printf_float+0x188>
 801635c:	3302      	adds	r3, #2
 801635e:	e7f4      	b.n	801634a <_printf_float+0x172>
 8016360:	2301      	movs	r3, #1
 8016362:	e7f2      	b.n	801634a <_printf_float+0x172>
 8016364:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016368:	9b08      	ldr	r3, [sp, #32]
 801636a:	4299      	cmp	r1, r3
 801636c:	db05      	blt.n	801637a <_printf_float+0x1a2>
 801636e:	6823      	ldr	r3, [r4, #0]
 8016370:	6121      	str	r1, [r4, #16]
 8016372:	07d8      	lsls	r0, r3, #31
 8016374:	d5ea      	bpl.n	801634c <_printf_float+0x174>
 8016376:	1c4b      	adds	r3, r1, #1
 8016378:	e7e7      	b.n	801634a <_printf_float+0x172>
 801637a:	2900      	cmp	r1, #0
 801637c:	bfd4      	ite	le
 801637e:	f1c1 0202 	rsble	r2, r1, #2
 8016382:	2201      	movgt	r2, #1
 8016384:	4413      	add	r3, r2
 8016386:	e7e0      	b.n	801634a <_printf_float+0x172>
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	055a      	lsls	r2, r3, #21
 801638c:	d407      	bmi.n	801639e <_printf_float+0x1c6>
 801638e:	6923      	ldr	r3, [r4, #16]
 8016390:	4642      	mov	r2, r8
 8016392:	4631      	mov	r1, r6
 8016394:	4628      	mov	r0, r5
 8016396:	47b8      	blx	r7
 8016398:	3001      	adds	r0, #1
 801639a:	d12a      	bne.n	80163f2 <_printf_float+0x21a>
 801639c:	e76a      	b.n	8016274 <_printf_float+0x9c>
 801639e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80163a2:	f240 80e2 	bls.w	801656a <_printf_float+0x392>
 80163a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80163aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80163ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b2:	d133      	bne.n	801641c <_printf_float+0x244>
 80163b4:	4a38      	ldr	r2, [pc, #224]	; (8016498 <_printf_float+0x2c0>)
 80163b6:	2301      	movs	r3, #1
 80163b8:	4631      	mov	r1, r6
 80163ba:	4628      	mov	r0, r5
 80163bc:	47b8      	blx	r7
 80163be:	3001      	adds	r0, #1
 80163c0:	f43f af58 	beq.w	8016274 <_printf_float+0x9c>
 80163c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	db02      	blt.n	80163d2 <_printf_float+0x1fa>
 80163cc:	6823      	ldr	r3, [r4, #0]
 80163ce:	07d8      	lsls	r0, r3, #31
 80163d0:	d50f      	bpl.n	80163f2 <_printf_float+0x21a>
 80163d2:	4653      	mov	r3, sl
 80163d4:	465a      	mov	r2, fp
 80163d6:	4631      	mov	r1, r6
 80163d8:	4628      	mov	r0, r5
 80163da:	47b8      	blx	r7
 80163dc:	3001      	adds	r0, #1
 80163de:	f43f af49 	beq.w	8016274 <_printf_float+0x9c>
 80163e2:	f04f 0800 	mov.w	r8, #0
 80163e6:	f104 091a 	add.w	r9, r4, #26
 80163ea:	9b08      	ldr	r3, [sp, #32]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	4543      	cmp	r3, r8
 80163f0:	dc09      	bgt.n	8016406 <_printf_float+0x22e>
 80163f2:	6823      	ldr	r3, [r4, #0]
 80163f4:	079b      	lsls	r3, r3, #30
 80163f6:	f100 8108 	bmi.w	801660a <_printf_float+0x432>
 80163fa:	68e0      	ldr	r0, [r4, #12]
 80163fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163fe:	4298      	cmp	r0, r3
 8016400:	bfb8      	it	lt
 8016402:	4618      	movlt	r0, r3
 8016404:	e738      	b.n	8016278 <_printf_float+0xa0>
 8016406:	2301      	movs	r3, #1
 8016408:	464a      	mov	r2, r9
 801640a:	4631      	mov	r1, r6
 801640c:	4628      	mov	r0, r5
 801640e:	47b8      	blx	r7
 8016410:	3001      	adds	r0, #1
 8016412:	f43f af2f 	beq.w	8016274 <_printf_float+0x9c>
 8016416:	f108 0801 	add.w	r8, r8, #1
 801641a:	e7e6      	b.n	80163ea <_printf_float+0x212>
 801641c:	9b07      	ldr	r3, [sp, #28]
 801641e:	2b00      	cmp	r3, #0
 8016420:	dc3c      	bgt.n	801649c <_printf_float+0x2c4>
 8016422:	4a1d      	ldr	r2, [pc, #116]	; (8016498 <_printf_float+0x2c0>)
 8016424:	2301      	movs	r3, #1
 8016426:	4631      	mov	r1, r6
 8016428:	4628      	mov	r0, r5
 801642a:	47b8      	blx	r7
 801642c:	3001      	adds	r0, #1
 801642e:	f43f af21 	beq.w	8016274 <_printf_float+0x9c>
 8016432:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016436:	4313      	orrs	r3, r2
 8016438:	d102      	bne.n	8016440 <_printf_float+0x268>
 801643a:	6823      	ldr	r3, [r4, #0]
 801643c:	07d9      	lsls	r1, r3, #31
 801643e:	d5d8      	bpl.n	80163f2 <_printf_float+0x21a>
 8016440:	4653      	mov	r3, sl
 8016442:	465a      	mov	r2, fp
 8016444:	4631      	mov	r1, r6
 8016446:	4628      	mov	r0, r5
 8016448:	47b8      	blx	r7
 801644a:	3001      	adds	r0, #1
 801644c:	f43f af12 	beq.w	8016274 <_printf_float+0x9c>
 8016450:	f04f 0900 	mov.w	r9, #0
 8016454:	f104 0a1a 	add.w	sl, r4, #26
 8016458:	9b07      	ldr	r3, [sp, #28]
 801645a:	425b      	negs	r3, r3
 801645c:	454b      	cmp	r3, r9
 801645e:	dc01      	bgt.n	8016464 <_printf_float+0x28c>
 8016460:	9b08      	ldr	r3, [sp, #32]
 8016462:	e795      	b.n	8016390 <_printf_float+0x1b8>
 8016464:	2301      	movs	r3, #1
 8016466:	4652      	mov	r2, sl
 8016468:	4631      	mov	r1, r6
 801646a:	4628      	mov	r0, r5
 801646c:	47b8      	blx	r7
 801646e:	3001      	adds	r0, #1
 8016470:	f43f af00 	beq.w	8016274 <_printf_float+0x9c>
 8016474:	f109 0901 	add.w	r9, r9, #1
 8016478:	e7ee      	b.n	8016458 <_printf_float+0x280>
 801647a:	bf00      	nop
 801647c:	f3af 8000 	nop.w
 8016480:	ffffffff 	.word	0xffffffff
 8016484:	7fefffff 	.word	0x7fefffff
 8016488:	0801dbf0 	.word	0x0801dbf0
 801648c:	0801dbf4 	.word	0x0801dbf4
 8016490:	0801dbfc 	.word	0x0801dbfc
 8016494:	0801dbf8 	.word	0x0801dbf8
 8016498:	0801dc00 	.word	0x0801dc00
 801649c:	9a08      	ldr	r2, [sp, #32]
 801649e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164a0:	429a      	cmp	r2, r3
 80164a2:	bfa8      	it	ge
 80164a4:	461a      	movge	r2, r3
 80164a6:	2a00      	cmp	r2, #0
 80164a8:	4691      	mov	r9, r2
 80164aa:	dc38      	bgt.n	801651e <_printf_float+0x346>
 80164ac:	2300      	movs	r3, #0
 80164ae:	9305      	str	r3, [sp, #20]
 80164b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164b4:	f104 021a 	add.w	r2, r4, #26
 80164b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164ba:	9905      	ldr	r1, [sp, #20]
 80164bc:	9304      	str	r3, [sp, #16]
 80164be:	eba3 0309 	sub.w	r3, r3, r9
 80164c2:	428b      	cmp	r3, r1
 80164c4:	dc33      	bgt.n	801652e <_printf_float+0x356>
 80164c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80164ca:	429a      	cmp	r2, r3
 80164cc:	db3c      	blt.n	8016548 <_printf_float+0x370>
 80164ce:	6823      	ldr	r3, [r4, #0]
 80164d0:	07da      	lsls	r2, r3, #31
 80164d2:	d439      	bmi.n	8016548 <_printf_float+0x370>
 80164d4:	9a08      	ldr	r2, [sp, #32]
 80164d6:	9b04      	ldr	r3, [sp, #16]
 80164d8:	9907      	ldr	r1, [sp, #28]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	eba2 0901 	sub.w	r9, r2, r1
 80164e0:	4599      	cmp	r9, r3
 80164e2:	bfa8      	it	ge
 80164e4:	4699      	movge	r9, r3
 80164e6:	f1b9 0f00 	cmp.w	r9, #0
 80164ea:	dc35      	bgt.n	8016558 <_printf_float+0x380>
 80164ec:	f04f 0800 	mov.w	r8, #0
 80164f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164f4:	f104 0a1a 	add.w	sl, r4, #26
 80164f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80164fc:	1a9b      	subs	r3, r3, r2
 80164fe:	eba3 0309 	sub.w	r3, r3, r9
 8016502:	4543      	cmp	r3, r8
 8016504:	f77f af75 	ble.w	80163f2 <_printf_float+0x21a>
 8016508:	2301      	movs	r3, #1
 801650a:	4652      	mov	r2, sl
 801650c:	4631      	mov	r1, r6
 801650e:	4628      	mov	r0, r5
 8016510:	47b8      	blx	r7
 8016512:	3001      	adds	r0, #1
 8016514:	f43f aeae 	beq.w	8016274 <_printf_float+0x9c>
 8016518:	f108 0801 	add.w	r8, r8, #1
 801651c:	e7ec      	b.n	80164f8 <_printf_float+0x320>
 801651e:	4613      	mov	r3, r2
 8016520:	4631      	mov	r1, r6
 8016522:	4642      	mov	r2, r8
 8016524:	4628      	mov	r0, r5
 8016526:	47b8      	blx	r7
 8016528:	3001      	adds	r0, #1
 801652a:	d1bf      	bne.n	80164ac <_printf_float+0x2d4>
 801652c:	e6a2      	b.n	8016274 <_printf_float+0x9c>
 801652e:	2301      	movs	r3, #1
 8016530:	4631      	mov	r1, r6
 8016532:	4628      	mov	r0, r5
 8016534:	9204      	str	r2, [sp, #16]
 8016536:	47b8      	blx	r7
 8016538:	3001      	adds	r0, #1
 801653a:	f43f ae9b 	beq.w	8016274 <_printf_float+0x9c>
 801653e:	9b05      	ldr	r3, [sp, #20]
 8016540:	9a04      	ldr	r2, [sp, #16]
 8016542:	3301      	adds	r3, #1
 8016544:	9305      	str	r3, [sp, #20]
 8016546:	e7b7      	b.n	80164b8 <_printf_float+0x2e0>
 8016548:	4653      	mov	r3, sl
 801654a:	465a      	mov	r2, fp
 801654c:	4631      	mov	r1, r6
 801654e:	4628      	mov	r0, r5
 8016550:	47b8      	blx	r7
 8016552:	3001      	adds	r0, #1
 8016554:	d1be      	bne.n	80164d4 <_printf_float+0x2fc>
 8016556:	e68d      	b.n	8016274 <_printf_float+0x9c>
 8016558:	9a04      	ldr	r2, [sp, #16]
 801655a:	464b      	mov	r3, r9
 801655c:	4442      	add	r2, r8
 801655e:	4631      	mov	r1, r6
 8016560:	4628      	mov	r0, r5
 8016562:	47b8      	blx	r7
 8016564:	3001      	adds	r0, #1
 8016566:	d1c1      	bne.n	80164ec <_printf_float+0x314>
 8016568:	e684      	b.n	8016274 <_printf_float+0x9c>
 801656a:	9a08      	ldr	r2, [sp, #32]
 801656c:	2a01      	cmp	r2, #1
 801656e:	dc01      	bgt.n	8016574 <_printf_float+0x39c>
 8016570:	07db      	lsls	r3, r3, #31
 8016572:	d537      	bpl.n	80165e4 <_printf_float+0x40c>
 8016574:	2301      	movs	r3, #1
 8016576:	4642      	mov	r2, r8
 8016578:	4631      	mov	r1, r6
 801657a:	4628      	mov	r0, r5
 801657c:	47b8      	blx	r7
 801657e:	3001      	adds	r0, #1
 8016580:	f43f ae78 	beq.w	8016274 <_printf_float+0x9c>
 8016584:	4653      	mov	r3, sl
 8016586:	465a      	mov	r2, fp
 8016588:	4631      	mov	r1, r6
 801658a:	4628      	mov	r0, r5
 801658c:	47b8      	blx	r7
 801658e:	3001      	adds	r0, #1
 8016590:	f43f ae70 	beq.w	8016274 <_printf_float+0x9c>
 8016594:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016598:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a0:	d01b      	beq.n	80165da <_printf_float+0x402>
 80165a2:	9b08      	ldr	r3, [sp, #32]
 80165a4:	f108 0201 	add.w	r2, r8, #1
 80165a8:	3b01      	subs	r3, #1
 80165aa:	4631      	mov	r1, r6
 80165ac:	4628      	mov	r0, r5
 80165ae:	47b8      	blx	r7
 80165b0:	3001      	adds	r0, #1
 80165b2:	d10e      	bne.n	80165d2 <_printf_float+0x3fa>
 80165b4:	e65e      	b.n	8016274 <_printf_float+0x9c>
 80165b6:	2301      	movs	r3, #1
 80165b8:	464a      	mov	r2, r9
 80165ba:	4631      	mov	r1, r6
 80165bc:	4628      	mov	r0, r5
 80165be:	47b8      	blx	r7
 80165c0:	3001      	adds	r0, #1
 80165c2:	f43f ae57 	beq.w	8016274 <_printf_float+0x9c>
 80165c6:	f108 0801 	add.w	r8, r8, #1
 80165ca:	9b08      	ldr	r3, [sp, #32]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	4543      	cmp	r3, r8
 80165d0:	dcf1      	bgt.n	80165b6 <_printf_float+0x3de>
 80165d2:	9b04      	ldr	r3, [sp, #16]
 80165d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165d8:	e6db      	b.n	8016392 <_printf_float+0x1ba>
 80165da:	f04f 0800 	mov.w	r8, #0
 80165de:	f104 091a 	add.w	r9, r4, #26
 80165e2:	e7f2      	b.n	80165ca <_printf_float+0x3f2>
 80165e4:	2301      	movs	r3, #1
 80165e6:	4642      	mov	r2, r8
 80165e8:	e7df      	b.n	80165aa <_printf_float+0x3d2>
 80165ea:	2301      	movs	r3, #1
 80165ec:	464a      	mov	r2, r9
 80165ee:	4631      	mov	r1, r6
 80165f0:	4628      	mov	r0, r5
 80165f2:	47b8      	blx	r7
 80165f4:	3001      	adds	r0, #1
 80165f6:	f43f ae3d 	beq.w	8016274 <_printf_float+0x9c>
 80165fa:	f108 0801 	add.w	r8, r8, #1
 80165fe:	68e3      	ldr	r3, [r4, #12]
 8016600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016602:	1a5b      	subs	r3, r3, r1
 8016604:	4543      	cmp	r3, r8
 8016606:	dcf0      	bgt.n	80165ea <_printf_float+0x412>
 8016608:	e6f7      	b.n	80163fa <_printf_float+0x222>
 801660a:	f04f 0800 	mov.w	r8, #0
 801660e:	f104 0919 	add.w	r9, r4, #25
 8016612:	e7f4      	b.n	80165fe <_printf_float+0x426>

08016614 <_printf_common>:
 8016614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016618:	4616      	mov	r6, r2
 801661a:	4699      	mov	r9, r3
 801661c:	688a      	ldr	r2, [r1, #8]
 801661e:	690b      	ldr	r3, [r1, #16]
 8016620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016624:	4293      	cmp	r3, r2
 8016626:	bfb8      	it	lt
 8016628:	4613      	movlt	r3, r2
 801662a:	6033      	str	r3, [r6, #0]
 801662c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016630:	4607      	mov	r7, r0
 8016632:	460c      	mov	r4, r1
 8016634:	b10a      	cbz	r2, 801663a <_printf_common+0x26>
 8016636:	3301      	adds	r3, #1
 8016638:	6033      	str	r3, [r6, #0]
 801663a:	6823      	ldr	r3, [r4, #0]
 801663c:	0699      	lsls	r1, r3, #26
 801663e:	bf42      	ittt	mi
 8016640:	6833      	ldrmi	r3, [r6, #0]
 8016642:	3302      	addmi	r3, #2
 8016644:	6033      	strmi	r3, [r6, #0]
 8016646:	6825      	ldr	r5, [r4, #0]
 8016648:	f015 0506 	ands.w	r5, r5, #6
 801664c:	d106      	bne.n	801665c <_printf_common+0x48>
 801664e:	f104 0a19 	add.w	sl, r4, #25
 8016652:	68e3      	ldr	r3, [r4, #12]
 8016654:	6832      	ldr	r2, [r6, #0]
 8016656:	1a9b      	subs	r3, r3, r2
 8016658:	42ab      	cmp	r3, r5
 801665a:	dc26      	bgt.n	80166aa <_printf_common+0x96>
 801665c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016660:	1e13      	subs	r3, r2, #0
 8016662:	6822      	ldr	r2, [r4, #0]
 8016664:	bf18      	it	ne
 8016666:	2301      	movne	r3, #1
 8016668:	0692      	lsls	r2, r2, #26
 801666a:	d42b      	bmi.n	80166c4 <_printf_common+0xb0>
 801666c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016670:	4649      	mov	r1, r9
 8016672:	4638      	mov	r0, r7
 8016674:	47c0      	blx	r8
 8016676:	3001      	adds	r0, #1
 8016678:	d01e      	beq.n	80166b8 <_printf_common+0xa4>
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	68e5      	ldr	r5, [r4, #12]
 801667e:	6832      	ldr	r2, [r6, #0]
 8016680:	f003 0306 	and.w	r3, r3, #6
 8016684:	2b04      	cmp	r3, #4
 8016686:	bf08      	it	eq
 8016688:	1aad      	subeq	r5, r5, r2
 801668a:	68a3      	ldr	r3, [r4, #8]
 801668c:	6922      	ldr	r2, [r4, #16]
 801668e:	bf0c      	ite	eq
 8016690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016694:	2500      	movne	r5, #0
 8016696:	4293      	cmp	r3, r2
 8016698:	bfc4      	itt	gt
 801669a:	1a9b      	subgt	r3, r3, r2
 801669c:	18ed      	addgt	r5, r5, r3
 801669e:	2600      	movs	r6, #0
 80166a0:	341a      	adds	r4, #26
 80166a2:	42b5      	cmp	r5, r6
 80166a4:	d11a      	bne.n	80166dc <_printf_common+0xc8>
 80166a6:	2000      	movs	r0, #0
 80166a8:	e008      	b.n	80166bc <_printf_common+0xa8>
 80166aa:	2301      	movs	r3, #1
 80166ac:	4652      	mov	r2, sl
 80166ae:	4649      	mov	r1, r9
 80166b0:	4638      	mov	r0, r7
 80166b2:	47c0      	blx	r8
 80166b4:	3001      	adds	r0, #1
 80166b6:	d103      	bne.n	80166c0 <_printf_common+0xac>
 80166b8:	f04f 30ff 	mov.w	r0, #4294967295
 80166bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c0:	3501      	adds	r5, #1
 80166c2:	e7c6      	b.n	8016652 <_printf_common+0x3e>
 80166c4:	18e1      	adds	r1, r4, r3
 80166c6:	1c5a      	adds	r2, r3, #1
 80166c8:	2030      	movs	r0, #48	; 0x30
 80166ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166ce:	4422      	add	r2, r4
 80166d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166d8:	3302      	adds	r3, #2
 80166da:	e7c7      	b.n	801666c <_printf_common+0x58>
 80166dc:	2301      	movs	r3, #1
 80166de:	4622      	mov	r2, r4
 80166e0:	4649      	mov	r1, r9
 80166e2:	4638      	mov	r0, r7
 80166e4:	47c0      	blx	r8
 80166e6:	3001      	adds	r0, #1
 80166e8:	d0e6      	beq.n	80166b8 <_printf_common+0xa4>
 80166ea:	3601      	adds	r6, #1
 80166ec:	e7d9      	b.n	80166a2 <_printf_common+0x8e>
	...

080166f0 <_printf_i>:
 80166f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166f4:	460c      	mov	r4, r1
 80166f6:	4691      	mov	r9, r2
 80166f8:	7e27      	ldrb	r7, [r4, #24]
 80166fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166fc:	2f78      	cmp	r7, #120	; 0x78
 80166fe:	4680      	mov	r8, r0
 8016700:	469a      	mov	sl, r3
 8016702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016706:	d807      	bhi.n	8016718 <_printf_i+0x28>
 8016708:	2f62      	cmp	r7, #98	; 0x62
 801670a:	d80a      	bhi.n	8016722 <_printf_i+0x32>
 801670c:	2f00      	cmp	r7, #0
 801670e:	f000 80d8 	beq.w	80168c2 <_printf_i+0x1d2>
 8016712:	2f58      	cmp	r7, #88	; 0x58
 8016714:	f000 80a3 	beq.w	801685e <_printf_i+0x16e>
 8016718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801671c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016720:	e03a      	b.n	8016798 <_printf_i+0xa8>
 8016722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016726:	2b15      	cmp	r3, #21
 8016728:	d8f6      	bhi.n	8016718 <_printf_i+0x28>
 801672a:	a001      	add	r0, pc, #4	; (adr r0, 8016730 <_printf_i+0x40>)
 801672c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016730:	08016789 	.word	0x08016789
 8016734:	0801679d 	.word	0x0801679d
 8016738:	08016719 	.word	0x08016719
 801673c:	08016719 	.word	0x08016719
 8016740:	08016719 	.word	0x08016719
 8016744:	08016719 	.word	0x08016719
 8016748:	0801679d 	.word	0x0801679d
 801674c:	08016719 	.word	0x08016719
 8016750:	08016719 	.word	0x08016719
 8016754:	08016719 	.word	0x08016719
 8016758:	08016719 	.word	0x08016719
 801675c:	080168a9 	.word	0x080168a9
 8016760:	080167cd 	.word	0x080167cd
 8016764:	0801688b 	.word	0x0801688b
 8016768:	08016719 	.word	0x08016719
 801676c:	08016719 	.word	0x08016719
 8016770:	080168cb 	.word	0x080168cb
 8016774:	08016719 	.word	0x08016719
 8016778:	080167cd 	.word	0x080167cd
 801677c:	08016719 	.word	0x08016719
 8016780:	08016719 	.word	0x08016719
 8016784:	08016893 	.word	0x08016893
 8016788:	680b      	ldr	r3, [r1, #0]
 801678a:	1d1a      	adds	r2, r3, #4
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	600a      	str	r2, [r1, #0]
 8016790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016798:	2301      	movs	r3, #1
 801679a:	e0a3      	b.n	80168e4 <_printf_i+0x1f4>
 801679c:	6825      	ldr	r5, [r4, #0]
 801679e:	6808      	ldr	r0, [r1, #0]
 80167a0:	062e      	lsls	r6, r5, #24
 80167a2:	f100 0304 	add.w	r3, r0, #4
 80167a6:	d50a      	bpl.n	80167be <_printf_i+0xce>
 80167a8:	6805      	ldr	r5, [r0, #0]
 80167aa:	600b      	str	r3, [r1, #0]
 80167ac:	2d00      	cmp	r5, #0
 80167ae:	da03      	bge.n	80167b8 <_printf_i+0xc8>
 80167b0:	232d      	movs	r3, #45	; 0x2d
 80167b2:	426d      	negs	r5, r5
 80167b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167b8:	485e      	ldr	r0, [pc, #376]	; (8016934 <_printf_i+0x244>)
 80167ba:	230a      	movs	r3, #10
 80167bc:	e019      	b.n	80167f2 <_printf_i+0x102>
 80167be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80167c2:	6805      	ldr	r5, [r0, #0]
 80167c4:	600b      	str	r3, [r1, #0]
 80167c6:	bf18      	it	ne
 80167c8:	b22d      	sxthne	r5, r5
 80167ca:	e7ef      	b.n	80167ac <_printf_i+0xbc>
 80167cc:	680b      	ldr	r3, [r1, #0]
 80167ce:	6825      	ldr	r5, [r4, #0]
 80167d0:	1d18      	adds	r0, r3, #4
 80167d2:	6008      	str	r0, [r1, #0]
 80167d4:	0628      	lsls	r0, r5, #24
 80167d6:	d501      	bpl.n	80167dc <_printf_i+0xec>
 80167d8:	681d      	ldr	r5, [r3, #0]
 80167da:	e002      	b.n	80167e2 <_printf_i+0xf2>
 80167dc:	0669      	lsls	r1, r5, #25
 80167de:	d5fb      	bpl.n	80167d8 <_printf_i+0xe8>
 80167e0:	881d      	ldrh	r5, [r3, #0]
 80167e2:	4854      	ldr	r0, [pc, #336]	; (8016934 <_printf_i+0x244>)
 80167e4:	2f6f      	cmp	r7, #111	; 0x6f
 80167e6:	bf0c      	ite	eq
 80167e8:	2308      	moveq	r3, #8
 80167ea:	230a      	movne	r3, #10
 80167ec:	2100      	movs	r1, #0
 80167ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167f2:	6866      	ldr	r6, [r4, #4]
 80167f4:	60a6      	str	r6, [r4, #8]
 80167f6:	2e00      	cmp	r6, #0
 80167f8:	bfa2      	ittt	ge
 80167fa:	6821      	ldrge	r1, [r4, #0]
 80167fc:	f021 0104 	bicge.w	r1, r1, #4
 8016800:	6021      	strge	r1, [r4, #0]
 8016802:	b90d      	cbnz	r5, 8016808 <_printf_i+0x118>
 8016804:	2e00      	cmp	r6, #0
 8016806:	d04d      	beq.n	80168a4 <_printf_i+0x1b4>
 8016808:	4616      	mov	r6, r2
 801680a:	fbb5 f1f3 	udiv	r1, r5, r3
 801680e:	fb03 5711 	mls	r7, r3, r1, r5
 8016812:	5dc7      	ldrb	r7, [r0, r7]
 8016814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016818:	462f      	mov	r7, r5
 801681a:	42bb      	cmp	r3, r7
 801681c:	460d      	mov	r5, r1
 801681e:	d9f4      	bls.n	801680a <_printf_i+0x11a>
 8016820:	2b08      	cmp	r3, #8
 8016822:	d10b      	bne.n	801683c <_printf_i+0x14c>
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	07df      	lsls	r7, r3, #31
 8016828:	d508      	bpl.n	801683c <_printf_i+0x14c>
 801682a:	6923      	ldr	r3, [r4, #16]
 801682c:	6861      	ldr	r1, [r4, #4]
 801682e:	4299      	cmp	r1, r3
 8016830:	bfde      	ittt	le
 8016832:	2330      	movle	r3, #48	; 0x30
 8016834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016838:	f106 36ff 	addle.w	r6, r6, #4294967295
 801683c:	1b92      	subs	r2, r2, r6
 801683e:	6122      	str	r2, [r4, #16]
 8016840:	f8cd a000 	str.w	sl, [sp]
 8016844:	464b      	mov	r3, r9
 8016846:	aa03      	add	r2, sp, #12
 8016848:	4621      	mov	r1, r4
 801684a:	4640      	mov	r0, r8
 801684c:	f7ff fee2 	bl	8016614 <_printf_common>
 8016850:	3001      	adds	r0, #1
 8016852:	d14c      	bne.n	80168ee <_printf_i+0x1fe>
 8016854:	f04f 30ff 	mov.w	r0, #4294967295
 8016858:	b004      	add	sp, #16
 801685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801685e:	4835      	ldr	r0, [pc, #212]	; (8016934 <_printf_i+0x244>)
 8016860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	680e      	ldr	r6, [r1, #0]
 8016868:	061f      	lsls	r7, r3, #24
 801686a:	f856 5b04 	ldr.w	r5, [r6], #4
 801686e:	600e      	str	r6, [r1, #0]
 8016870:	d514      	bpl.n	801689c <_printf_i+0x1ac>
 8016872:	07d9      	lsls	r1, r3, #31
 8016874:	bf44      	itt	mi
 8016876:	f043 0320 	orrmi.w	r3, r3, #32
 801687a:	6023      	strmi	r3, [r4, #0]
 801687c:	b91d      	cbnz	r5, 8016886 <_printf_i+0x196>
 801687e:	6823      	ldr	r3, [r4, #0]
 8016880:	f023 0320 	bic.w	r3, r3, #32
 8016884:	6023      	str	r3, [r4, #0]
 8016886:	2310      	movs	r3, #16
 8016888:	e7b0      	b.n	80167ec <_printf_i+0xfc>
 801688a:	6823      	ldr	r3, [r4, #0]
 801688c:	f043 0320 	orr.w	r3, r3, #32
 8016890:	6023      	str	r3, [r4, #0]
 8016892:	2378      	movs	r3, #120	; 0x78
 8016894:	4828      	ldr	r0, [pc, #160]	; (8016938 <_printf_i+0x248>)
 8016896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801689a:	e7e3      	b.n	8016864 <_printf_i+0x174>
 801689c:	065e      	lsls	r6, r3, #25
 801689e:	bf48      	it	mi
 80168a0:	b2ad      	uxthmi	r5, r5
 80168a2:	e7e6      	b.n	8016872 <_printf_i+0x182>
 80168a4:	4616      	mov	r6, r2
 80168a6:	e7bb      	b.n	8016820 <_printf_i+0x130>
 80168a8:	680b      	ldr	r3, [r1, #0]
 80168aa:	6826      	ldr	r6, [r4, #0]
 80168ac:	6960      	ldr	r0, [r4, #20]
 80168ae:	1d1d      	adds	r5, r3, #4
 80168b0:	600d      	str	r5, [r1, #0]
 80168b2:	0635      	lsls	r5, r6, #24
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	d501      	bpl.n	80168bc <_printf_i+0x1cc>
 80168b8:	6018      	str	r0, [r3, #0]
 80168ba:	e002      	b.n	80168c2 <_printf_i+0x1d2>
 80168bc:	0671      	lsls	r1, r6, #25
 80168be:	d5fb      	bpl.n	80168b8 <_printf_i+0x1c8>
 80168c0:	8018      	strh	r0, [r3, #0]
 80168c2:	2300      	movs	r3, #0
 80168c4:	6123      	str	r3, [r4, #16]
 80168c6:	4616      	mov	r6, r2
 80168c8:	e7ba      	b.n	8016840 <_printf_i+0x150>
 80168ca:	680b      	ldr	r3, [r1, #0]
 80168cc:	1d1a      	adds	r2, r3, #4
 80168ce:	600a      	str	r2, [r1, #0]
 80168d0:	681e      	ldr	r6, [r3, #0]
 80168d2:	6862      	ldr	r2, [r4, #4]
 80168d4:	2100      	movs	r1, #0
 80168d6:	4630      	mov	r0, r6
 80168d8:	f7e9 fcba 	bl	8000250 <memchr>
 80168dc:	b108      	cbz	r0, 80168e2 <_printf_i+0x1f2>
 80168de:	1b80      	subs	r0, r0, r6
 80168e0:	6060      	str	r0, [r4, #4]
 80168e2:	6863      	ldr	r3, [r4, #4]
 80168e4:	6123      	str	r3, [r4, #16]
 80168e6:	2300      	movs	r3, #0
 80168e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168ec:	e7a8      	b.n	8016840 <_printf_i+0x150>
 80168ee:	6923      	ldr	r3, [r4, #16]
 80168f0:	4632      	mov	r2, r6
 80168f2:	4649      	mov	r1, r9
 80168f4:	4640      	mov	r0, r8
 80168f6:	47d0      	blx	sl
 80168f8:	3001      	adds	r0, #1
 80168fa:	d0ab      	beq.n	8016854 <_printf_i+0x164>
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	079b      	lsls	r3, r3, #30
 8016900:	d413      	bmi.n	801692a <_printf_i+0x23a>
 8016902:	68e0      	ldr	r0, [r4, #12]
 8016904:	9b03      	ldr	r3, [sp, #12]
 8016906:	4298      	cmp	r0, r3
 8016908:	bfb8      	it	lt
 801690a:	4618      	movlt	r0, r3
 801690c:	e7a4      	b.n	8016858 <_printf_i+0x168>
 801690e:	2301      	movs	r3, #1
 8016910:	4632      	mov	r2, r6
 8016912:	4649      	mov	r1, r9
 8016914:	4640      	mov	r0, r8
 8016916:	47d0      	blx	sl
 8016918:	3001      	adds	r0, #1
 801691a:	d09b      	beq.n	8016854 <_printf_i+0x164>
 801691c:	3501      	adds	r5, #1
 801691e:	68e3      	ldr	r3, [r4, #12]
 8016920:	9903      	ldr	r1, [sp, #12]
 8016922:	1a5b      	subs	r3, r3, r1
 8016924:	42ab      	cmp	r3, r5
 8016926:	dcf2      	bgt.n	801690e <_printf_i+0x21e>
 8016928:	e7eb      	b.n	8016902 <_printf_i+0x212>
 801692a:	2500      	movs	r5, #0
 801692c:	f104 0619 	add.w	r6, r4, #25
 8016930:	e7f5      	b.n	801691e <_printf_i+0x22e>
 8016932:	bf00      	nop
 8016934:	0801dc02 	.word	0x0801dc02
 8016938:	0801dc13 	.word	0x0801dc13

0801693c <_scanf_float>:
 801693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016940:	b087      	sub	sp, #28
 8016942:	4617      	mov	r7, r2
 8016944:	9303      	str	r3, [sp, #12]
 8016946:	688b      	ldr	r3, [r1, #8]
 8016948:	1e5a      	subs	r2, r3, #1
 801694a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801694e:	bf83      	ittte	hi
 8016950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016954:	195b      	addhi	r3, r3, r5
 8016956:	9302      	strhi	r3, [sp, #8]
 8016958:	2300      	movls	r3, #0
 801695a:	bf86      	itte	hi
 801695c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016960:	608b      	strhi	r3, [r1, #8]
 8016962:	9302      	strls	r3, [sp, #8]
 8016964:	680b      	ldr	r3, [r1, #0]
 8016966:	468b      	mov	fp, r1
 8016968:	2500      	movs	r5, #0
 801696a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801696e:	f84b 3b1c 	str.w	r3, [fp], #28
 8016972:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016976:	4680      	mov	r8, r0
 8016978:	460c      	mov	r4, r1
 801697a:	465e      	mov	r6, fp
 801697c:	46aa      	mov	sl, r5
 801697e:	46a9      	mov	r9, r5
 8016980:	9501      	str	r5, [sp, #4]
 8016982:	68a2      	ldr	r2, [r4, #8]
 8016984:	b152      	cbz	r2, 801699c <_scanf_float+0x60>
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	2b4e      	cmp	r3, #78	; 0x4e
 801698c:	d864      	bhi.n	8016a58 <_scanf_float+0x11c>
 801698e:	2b40      	cmp	r3, #64	; 0x40
 8016990:	d83c      	bhi.n	8016a0c <_scanf_float+0xd0>
 8016992:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016996:	b2c8      	uxtb	r0, r1
 8016998:	280e      	cmp	r0, #14
 801699a:	d93a      	bls.n	8016a12 <_scanf_float+0xd6>
 801699c:	f1b9 0f00 	cmp.w	r9, #0
 80169a0:	d003      	beq.n	80169aa <_scanf_float+0x6e>
 80169a2:	6823      	ldr	r3, [r4, #0]
 80169a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80169a8:	6023      	str	r3, [r4, #0]
 80169aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80169ae:	f1ba 0f01 	cmp.w	sl, #1
 80169b2:	f200 8113 	bhi.w	8016bdc <_scanf_float+0x2a0>
 80169b6:	455e      	cmp	r6, fp
 80169b8:	f200 8105 	bhi.w	8016bc6 <_scanf_float+0x28a>
 80169bc:	2501      	movs	r5, #1
 80169be:	4628      	mov	r0, r5
 80169c0:	b007      	add	sp, #28
 80169c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80169ca:	2a0d      	cmp	r2, #13
 80169cc:	d8e6      	bhi.n	801699c <_scanf_float+0x60>
 80169ce:	a101      	add	r1, pc, #4	; (adr r1, 80169d4 <_scanf_float+0x98>)
 80169d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80169d4:	08016b13 	.word	0x08016b13
 80169d8:	0801699d 	.word	0x0801699d
 80169dc:	0801699d 	.word	0x0801699d
 80169e0:	0801699d 	.word	0x0801699d
 80169e4:	08016b73 	.word	0x08016b73
 80169e8:	08016b4b 	.word	0x08016b4b
 80169ec:	0801699d 	.word	0x0801699d
 80169f0:	0801699d 	.word	0x0801699d
 80169f4:	08016b21 	.word	0x08016b21
 80169f8:	0801699d 	.word	0x0801699d
 80169fc:	0801699d 	.word	0x0801699d
 8016a00:	0801699d 	.word	0x0801699d
 8016a04:	0801699d 	.word	0x0801699d
 8016a08:	08016ad9 	.word	0x08016ad9
 8016a0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016a10:	e7db      	b.n	80169ca <_scanf_float+0x8e>
 8016a12:	290e      	cmp	r1, #14
 8016a14:	d8c2      	bhi.n	801699c <_scanf_float+0x60>
 8016a16:	a001      	add	r0, pc, #4	; (adr r0, 8016a1c <_scanf_float+0xe0>)
 8016a18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016a1c:	08016acb 	.word	0x08016acb
 8016a20:	0801699d 	.word	0x0801699d
 8016a24:	08016acb 	.word	0x08016acb
 8016a28:	08016b5f 	.word	0x08016b5f
 8016a2c:	0801699d 	.word	0x0801699d
 8016a30:	08016a79 	.word	0x08016a79
 8016a34:	08016ab5 	.word	0x08016ab5
 8016a38:	08016ab5 	.word	0x08016ab5
 8016a3c:	08016ab5 	.word	0x08016ab5
 8016a40:	08016ab5 	.word	0x08016ab5
 8016a44:	08016ab5 	.word	0x08016ab5
 8016a48:	08016ab5 	.word	0x08016ab5
 8016a4c:	08016ab5 	.word	0x08016ab5
 8016a50:	08016ab5 	.word	0x08016ab5
 8016a54:	08016ab5 	.word	0x08016ab5
 8016a58:	2b6e      	cmp	r3, #110	; 0x6e
 8016a5a:	d809      	bhi.n	8016a70 <_scanf_float+0x134>
 8016a5c:	2b60      	cmp	r3, #96	; 0x60
 8016a5e:	d8b2      	bhi.n	80169c6 <_scanf_float+0x8a>
 8016a60:	2b54      	cmp	r3, #84	; 0x54
 8016a62:	d077      	beq.n	8016b54 <_scanf_float+0x218>
 8016a64:	2b59      	cmp	r3, #89	; 0x59
 8016a66:	d199      	bne.n	801699c <_scanf_float+0x60>
 8016a68:	2d07      	cmp	r5, #7
 8016a6a:	d197      	bne.n	801699c <_scanf_float+0x60>
 8016a6c:	2508      	movs	r5, #8
 8016a6e:	e029      	b.n	8016ac4 <_scanf_float+0x188>
 8016a70:	2b74      	cmp	r3, #116	; 0x74
 8016a72:	d06f      	beq.n	8016b54 <_scanf_float+0x218>
 8016a74:	2b79      	cmp	r3, #121	; 0x79
 8016a76:	e7f6      	b.n	8016a66 <_scanf_float+0x12a>
 8016a78:	6821      	ldr	r1, [r4, #0]
 8016a7a:	05c8      	lsls	r0, r1, #23
 8016a7c:	d51a      	bpl.n	8016ab4 <_scanf_float+0x178>
 8016a7e:	9b02      	ldr	r3, [sp, #8]
 8016a80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a84:	6021      	str	r1, [r4, #0]
 8016a86:	f109 0901 	add.w	r9, r9, #1
 8016a8a:	b11b      	cbz	r3, 8016a94 <_scanf_float+0x158>
 8016a8c:	3b01      	subs	r3, #1
 8016a8e:	3201      	adds	r2, #1
 8016a90:	9302      	str	r3, [sp, #8]
 8016a92:	60a2      	str	r2, [r4, #8]
 8016a94:	68a3      	ldr	r3, [r4, #8]
 8016a96:	3b01      	subs	r3, #1
 8016a98:	60a3      	str	r3, [r4, #8]
 8016a9a:	6923      	ldr	r3, [r4, #16]
 8016a9c:	3301      	adds	r3, #1
 8016a9e:	6123      	str	r3, [r4, #16]
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	3b01      	subs	r3, #1
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	607b      	str	r3, [r7, #4]
 8016aa8:	f340 8084 	ble.w	8016bb4 <_scanf_float+0x278>
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	603b      	str	r3, [r7, #0]
 8016ab2:	e766      	b.n	8016982 <_scanf_float+0x46>
 8016ab4:	eb1a 0f05 	cmn.w	sl, r5
 8016ab8:	f47f af70 	bne.w	801699c <_scanf_float+0x60>
 8016abc:	6822      	ldr	r2, [r4, #0]
 8016abe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016ac2:	6022      	str	r2, [r4, #0]
 8016ac4:	f806 3b01 	strb.w	r3, [r6], #1
 8016ac8:	e7e4      	b.n	8016a94 <_scanf_float+0x158>
 8016aca:	6822      	ldr	r2, [r4, #0]
 8016acc:	0610      	lsls	r0, r2, #24
 8016ace:	f57f af65 	bpl.w	801699c <_scanf_float+0x60>
 8016ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ad6:	e7f4      	b.n	8016ac2 <_scanf_float+0x186>
 8016ad8:	f1ba 0f00 	cmp.w	sl, #0
 8016adc:	d10e      	bne.n	8016afc <_scanf_float+0x1c0>
 8016ade:	f1b9 0f00 	cmp.w	r9, #0
 8016ae2:	d10e      	bne.n	8016b02 <_scanf_float+0x1c6>
 8016ae4:	6822      	ldr	r2, [r4, #0]
 8016ae6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016aea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016aee:	d108      	bne.n	8016b02 <_scanf_float+0x1c6>
 8016af0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016af4:	6022      	str	r2, [r4, #0]
 8016af6:	f04f 0a01 	mov.w	sl, #1
 8016afa:	e7e3      	b.n	8016ac4 <_scanf_float+0x188>
 8016afc:	f1ba 0f02 	cmp.w	sl, #2
 8016b00:	d055      	beq.n	8016bae <_scanf_float+0x272>
 8016b02:	2d01      	cmp	r5, #1
 8016b04:	d002      	beq.n	8016b0c <_scanf_float+0x1d0>
 8016b06:	2d04      	cmp	r5, #4
 8016b08:	f47f af48 	bne.w	801699c <_scanf_float+0x60>
 8016b0c:	3501      	adds	r5, #1
 8016b0e:	b2ed      	uxtb	r5, r5
 8016b10:	e7d8      	b.n	8016ac4 <_scanf_float+0x188>
 8016b12:	f1ba 0f01 	cmp.w	sl, #1
 8016b16:	f47f af41 	bne.w	801699c <_scanf_float+0x60>
 8016b1a:	f04f 0a02 	mov.w	sl, #2
 8016b1e:	e7d1      	b.n	8016ac4 <_scanf_float+0x188>
 8016b20:	b97d      	cbnz	r5, 8016b42 <_scanf_float+0x206>
 8016b22:	f1b9 0f00 	cmp.w	r9, #0
 8016b26:	f47f af3c 	bne.w	80169a2 <_scanf_float+0x66>
 8016b2a:	6822      	ldr	r2, [r4, #0]
 8016b2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016b30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016b34:	f47f af39 	bne.w	80169aa <_scanf_float+0x6e>
 8016b38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b3c:	6022      	str	r2, [r4, #0]
 8016b3e:	2501      	movs	r5, #1
 8016b40:	e7c0      	b.n	8016ac4 <_scanf_float+0x188>
 8016b42:	2d03      	cmp	r5, #3
 8016b44:	d0e2      	beq.n	8016b0c <_scanf_float+0x1d0>
 8016b46:	2d05      	cmp	r5, #5
 8016b48:	e7de      	b.n	8016b08 <_scanf_float+0x1cc>
 8016b4a:	2d02      	cmp	r5, #2
 8016b4c:	f47f af26 	bne.w	801699c <_scanf_float+0x60>
 8016b50:	2503      	movs	r5, #3
 8016b52:	e7b7      	b.n	8016ac4 <_scanf_float+0x188>
 8016b54:	2d06      	cmp	r5, #6
 8016b56:	f47f af21 	bne.w	801699c <_scanf_float+0x60>
 8016b5a:	2507      	movs	r5, #7
 8016b5c:	e7b2      	b.n	8016ac4 <_scanf_float+0x188>
 8016b5e:	6822      	ldr	r2, [r4, #0]
 8016b60:	0591      	lsls	r1, r2, #22
 8016b62:	f57f af1b 	bpl.w	801699c <_scanf_float+0x60>
 8016b66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016b6a:	6022      	str	r2, [r4, #0]
 8016b6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016b70:	e7a8      	b.n	8016ac4 <_scanf_float+0x188>
 8016b72:	6822      	ldr	r2, [r4, #0]
 8016b74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016b78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016b7c:	d006      	beq.n	8016b8c <_scanf_float+0x250>
 8016b7e:	0550      	lsls	r0, r2, #21
 8016b80:	f57f af0c 	bpl.w	801699c <_scanf_float+0x60>
 8016b84:	f1b9 0f00 	cmp.w	r9, #0
 8016b88:	f43f af0f 	beq.w	80169aa <_scanf_float+0x6e>
 8016b8c:	0591      	lsls	r1, r2, #22
 8016b8e:	bf58      	it	pl
 8016b90:	9901      	ldrpl	r1, [sp, #4]
 8016b92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b96:	bf58      	it	pl
 8016b98:	eba9 0101 	subpl.w	r1, r9, r1
 8016b9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016ba0:	bf58      	it	pl
 8016ba2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016ba6:	6022      	str	r2, [r4, #0]
 8016ba8:	f04f 0900 	mov.w	r9, #0
 8016bac:	e78a      	b.n	8016ac4 <_scanf_float+0x188>
 8016bae:	f04f 0a03 	mov.w	sl, #3
 8016bb2:	e787      	b.n	8016ac4 <_scanf_float+0x188>
 8016bb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016bb8:	4639      	mov	r1, r7
 8016bba:	4640      	mov	r0, r8
 8016bbc:	4798      	blx	r3
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	f43f aedf 	beq.w	8016982 <_scanf_float+0x46>
 8016bc4:	e6ea      	b.n	801699c <_scanf_float+0x60>
 8016bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016bce:	463a      	mov	r2, r7
 8016bd0:	4640      	mov	r0, r8
 8016bd2:	4798      	blx	r3
 8016bd4:	6923      	ldr	r3, [r4, #16]
 8016bd6:	3b01      	subs	r3, #1
 8016bd8:	6123      	str	r3, [r4, #16]
 8016bda:	e6ec      	b.n	80169b6 <_scanf_float+0x7a>
 8016bdc:	1e6b      	subs	r3, r5, #1
 8016bde:	2b06      	cmp	r3, #6
 8016be0:	d825      	bhi.n	8016c2e <_scanf_float+0x2f2>
 8016be2:	2d02      	cmp	r5, #2
 8016be4:	d836      	bhi.n	8016c54 <_scanf_float+0x318>
 8016be6:	455e      	cmp	r6, fp
 8016be8:	f67f aee8 	bls.w	80169bc <_scanf_float+0x80>
 8016bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bf0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016bf4:	463a      	mov	r2, r7
 8016bf6:	4640      	mov	r0, r8
 8016bf8:	4798      	blx	r3
 8016bfa:	6923      	ldr	r3, [r4, #16]
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	6123      	str	r3, [r4, #16]
 8016c00:	e7f1      	b.n	8016be6 <_scanf_float+0x2aa>
 8016c02:	9802      	ldr	r0, [sp, #8]
 8016c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016c0c:	9002      	str	r0, [sp, #8]
 8016c0e:	463a      	mov	r2, r7
 8016c10:	4640      	mov	r0, r8
 8016c12:	4798      	blx	r3
 8016c14:	6923      	ldr	r3, [r4, #16]
 8016c16:	3b01      	subs	r3, #1
 8016c18:	6123      	str	r3, [r4, #16]
 8016c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c1e:	fa5f fa8a 	uxtb.w	sl, sl
 8016c22:	f1ba 0f02 	cmp.w	sl, #2
 8016c26:	d1ec      	bne.n	8016c02 <_scanf_float+0x2c6>
 8016c28:	3d03      	subs	r5, #3
 8016c2a:	b2ed      	uxtb	r5, r5
 8016c2c:	1b76      	subs	r6, r6, r5
 8016c2e:	6823      	ldr	r3, [r4, #0]
 8016c30:	05da      	lsls	r2, r3, #23
 8016c32:	d52f      	bpl.n	8016c94 <_scanf_float+0x358>
 8016c34:	055b      	lsls	r3, r3, #21
 8016c36:	d510      	bpl.n	8016c5a <_scanf_float+0x31e>
 8016c38:	455e      	cmp	r6, fp
 8016c3a:	f67f aebf 	bls.w	80169bc <_scanf_float+0x80>
 8016c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c46:	463a      	mov	r2, r7
 8016c48:	4640      	mov	r0, r8
 8016c4a:	4798      	blx	r3
 8016c4c:	6923      	ldr	r3, [r4, #16]
 8016c4e:	3b01      	subs	r3, #1
 8016c50:	6123      	str	r3, [r4, #16]
 8016c52:	e7f1      	b.n	8016c38 <_scanf_float+0x2fc>
 8016c54:	46aa      	mov	sl, r5
 8016c56:	9602      	str	r6, [sp, #8]
 8016c58:	e7df      	b.n	8016c1a <_scanf_float+0x2de>
 8016c5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016c5e:	6923      	ldr	r3, [r4, #16]
 8016c60:	2965      	cmp	r1, #101	; 0x65
 8016c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c66:	f106 35ff 	add.w	r5, r6, #4294967295
 8016c6a:	6123      	str	r3, [r4, #16]
 8016c6c:	d00c      	beq.n	8016c88 <_scanf_float+0x34c>
 8016c6e:	2945      	cmp	r1, #69	; 0x45
 8016c70:	d00a      	beq.n	8016c88 <_scanf_float+0x34c>
 8016c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c76:	463a      	mov	r2, r7
 8016c78:	4640      	mov	r0, r8
 8016c7a:	4798      	blx	r3
 8016c7c:	6923      	ldr	r3, [r4, #16]
 8016c7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016c82:	3b01      	subs	r3, #1
 8016c84:	1eb5      	subs	r5, r6, #2
 8016c86:	6123      	str	r3, [r4, #16]
 8016c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c8c:	463a      	mov	r2, r7
 8016c8e:	4640      	mov	r0, r8
 8016c90:	4798      	blx	r3
 8016c92:	462e      	mov	r6, r5
 8016c94:	6825      	ldr	r5, [r4, #0]
 8016c96:	f015 0510 	ands.w	r5, r5, #16
 8016c9a:	d14d      	bne.n	8016d38 <_scanf_float+0x3fc>
 8016c9c:	7035      	strb	r5, [r6, #0]
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ca8:	d11a      	bne.n	8016ce0 <_scanf_float+0x3a4>
 8016caa:	9b01      	ldr	r3, [sp, #4]
 8016cac:	454b      	cmp	r3, r9
 8016cae:	eba3 0209 	sub.w	r2, r3, r9
 8016cb2:	d122      	bne.n	8016cfa <_scanf_float+0x3be>
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	4659      	mov	r1, fp
 8016cb8:	4640      	mov	r0, r8
 8016cba:	f000 fec3 	bl	8017a44 <_strtod_r>
 8016cbe:	9b03      	ldr	r3, [sp, #12]
 8016cc0:	6821      	ldr	r1, [r4, #0]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f011 0f02 	tst.w	r1, #2
 8016cc8:	f103 0204 	add.w	r2, r3, #4
 8016ccc:	d020      	beq.n	8016d10 <_scanf_float+0x3d4>
 8016cce:	9903      	ldr	r1, [sp, #12]
 8016cd0:	600a      	str	r2, [r1, #0]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	ed83 0b00 	vstr	d0, [r3]
 8016cd8:	68e3      	ldr	r3, [r4, #12]
 8016cda:	3301      	adds	r3, #1
 8016cdc:	60e3      	str	r3, [r4, #12]
 8016cde:	e66e      	b.n	80169be <_scanf_float+0x82>
 8016ce0:	9b04      	ldr	r3, [sp, #16]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d0e6      	beq.n	8016cb4 <_scanf_float+0x378>
 8016ce6:	9905      	ldr	r1, [sp, #20]
 8016ce8:	230a      	movs	r3, #10
 8016cea:	462a      	mov	r2, r5
 8016cec:	3101      	adds	r1, #1
 8016cee:	4640      	mov	r0, r8
 8016cf0:	f000 ff76 	bl	8017be0 <_strtol_r>
 8016cf4:	9b04      	ldr	r3, [sp, #16]
 8016cf6:	9e05      	ldr	r6, [sp, #20]
 8016cf8:	1ac2      	subs	r2, r0, r3
 8016cfa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016cfe:	429e      	cmp	r6, r3
 8016d00:	bf28      	it	cs
 8016d02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016d06:	490d      	ldr	r1, [pc, #52]	; (8016d3c <_scanf_float+0x400>)
 8016d08:	4630      	mov	r0, r6
 8016d0a:	f000 f879 	bl	8016e00 <siprintf>
 8016d0e:	e7d1      	b.n	8016cb4 <_scanf_float+0x378>
 8016d10:	f011 0f04 	tst.w	r1, #4
 8016d14:	9903      	ldr	r1, [sp, #12]
 8016d16:	600a      	str	r2, [r1, #0]
 8016d18:	d1db      	bne.n	8016cd2 <_scanf_float+0x396>
 8016d1a:	eeb4 0b40 	vcmp.f64	d0, d0
 8016d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d22:	681e      	ldr	r6, [r3, #0]
 8016d24:	d705      	bvc.n	8016d32 <_scanf_float+0x3f6>
 8016d26:	4806      	ldr	r0, [pc, #24]	; (8016d40 <_scanf_float+0x404>)
 8016d28:	f000 f864 	bl	8016df4 <nanf>
 8016d2c:	ed86 0a00 	vstr	s0, [r6]
 8016d30:	e7d2      	b.n	8016cd8 <_scanf_float+0x39c>
 8016d32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016d36:	e7f9      	b.n	8016d2c <_scanf_float+0x3f0>
 8016d38:	2500      	movs	r5, #0
 8016d3a:	e640      	b.n	80169be <_scanf_float+0x82>
 8016d3c:	0801dc24 	.word	0x0801dc24
 8016d40:	0801dd2b 	.word	0x0801dd2b

08016d44 <iprintf>:
 8016d44:	b40f      	push	{r0, r1, r2, r3}
 8016d46:	4b0a      	ldr	r3, [pc, #40]	; (8016d70 <iprintf+0x2c>)
 8016d48:	b513      	push	{r0, r1, r4, lr}
 8016d4a:	681c      	ldr	r4, [r3, #0]
 8016d4c:	b124      	cbz	r4, 8016d58 <iprintf+0x14>
 8016d4e:	69a3      	ldr	r3, [r4, #24]
 8016d50:	b913      	cbnz	r3, 8016d58 <iprintf+0x14>
 8016d52:	4620      	mov	r0, r4
 8016d54:	f001 fdd0 	bl	80188f8 <__sinit>
 8016d58:	ab05      	add	r3, sp, #20
 8016d5a:	9a04      	ldr	r2, [sp, #16]
 8016d5c:	68a1      	ldr	r1, [r4, #8]
 8016d5e:	9301      	str	r3, [sp, #4]
 8016d60:	4620      	mov	r0, r4
 8016d62:	f003 f905 	bl	8019f70 <_vfiprintf_r>
 8016d66:	b002      	add	sp, #8
 8016d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d6c:	b004      	add	sp, #16
 8016d6e:	4770      	bx	lr
 8016d70:	2000005c 	.word	0x2000005c

08016d74 <rand>:
 8016d74:	4b17      	ldr	r3, [pc, #92]	; (8016dd4 <rand+0x60>)
 8016d76:	b510      	push	{r4, lr}
 8016d78:	681c      	ldr	r4, [r3, #0]
 8016d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016d7c:	b9b3      	cbnz	r3, 8016dac <rand+0x38>
 8016d7e:	2018      	movs	r0, #24
 8016d80:	f002 f9e0 	bl	8019144 <malloc>
 8016d84:	63a0      	str	r0, [r4, #56]	; 0x38
 8016d86:	b928      	cbnz	r0, 8016d94 <rand+0x20>
 8016d88:	4602      	mov	r2, r0
 8016d8a:	4b13      	ldr	r3, [pc, #76]	; (8016dd8 <rand+0x64>)
 8016d8c:	4813      	ldr	r0, [pc, #76]	; (8016ddc <rand+0x68>)
 8016d8e:	214e      	movs	r1, #78	; 0x4e
 8016d90:	f000 ff28 	bl	8017be4 <__assert_func>
 8016d94:	4a12      	ldr	r2, [pc, #72]	; (8016de0 <rand+0x6c>)
 8016d96:	4b13      	ldr	r3, [pc, #76]	; (8016de4 <rand+0x70>)
 8016d98:	e9c0 2300 	strd	r2, r3, [r0]
 8016d9c:	4b12      	ldr	r3, [pc, #72]	; (8016de8 <rand+0x74>)
 8016d9e:	6083      	str	r3, [r0, #8]
 8016da0:	230b      	movs	r3, #11
 8016da2:	8183      	strh	r3, [r0, #12]
 8016da4:	2201      	movs	r2, #1
 8016da6:	2300      	movs	r3, #0
 8016da8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016dac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016dae:	480f      	ldr	r0, [pc, #60]	; (8016dec <rand+0x78>)
 8016db0:	690a      	ldr	r2, [r1, #16]
 8016db2:	694b      	ldr	r3, [r1, #20]
 8016db4:	4c0e      	ldr	r4, [pc, #56]	; (8016df0 <rand+0x7c>)
 8016db6:	4350      	muls	r0, r2
 8016db8:	fb04 0003 	mla	r0, r4, r3, r0
 8016dbc:	fba2 3404 	umull	r3, r4, r2, r4
 8016dc0:	1c5a      	adds	r2, r3, #1
 8016dc2:	4404      	add	r4, r0
 8016dc4:	f144 0000 	adc.w	r0, r4, #0
 8016dc8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016dcc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016dd0:	bd10      	pop	{r4, pc}
 8016dd2:	bf00      	nop
 8016dd4:	2000005c 	.word	0x2000005c
 8016dd8:	0801dc29 	.word	0x0801dc29
 8016ddc:	0801dc40 	.word	0x0801dc40
 8016de0:	abcd330e 	.word	0xabcd330e
 8016de4:	e66d1234 	.word	0xe66d1234
 8016de8:	0005deec 	.word	0x0005deec
 8016dec:	5851f42d 	.word	0x5851f42d
 8016df0:	4c957f2d 	.word	0x4c957f2d

08016df4 <nanf>:
 8016df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016dfc <nanf+0x8>
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop
 8016dfc:	7fc00000 	.word	0x7fc00000

08016e00 <siprintf>:
 8016e00:	b40e      	push	{r1, r2, r3}
 8016e02:	b500      	push	{lr}
 8016e04:	b09c      	sub	sp, #112	; 0x70
 8016e06:	ab1d      	add	r3, sp, #116	; 0x74
 8016e08:	9002      	str	r0, [sp, #8]
 8016e0a:	9006      	str	r0, [sp, #24]
 8016e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e10:	4809      	ldr	r0, [pc, #36]	; (8016e38 <siprintf+0x38>)
 8016e12:	9107      	str	r1, [sp, #28]
 8016e14:	9104      	str	r1, [sp, #16]
 8016e16:	4909      	ldr	r1, [pc, #36]	; (8016e3c <siprintf+0x3c>)
 8016e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e1c:	9105      	str	r1, [sp, #20]
 8016e1e:	6800      	ldr	r0, [r0, #0]
 8016e20:	9301      	str	r3, [sp, #4]
 8016e22:	a902      	add	r1, sp, #8
 8016e24:	f002 ff7a 	bl	8019d1c <_svfiprintf_r>
 8016e28:	9b02      	ldr	r3, [sp, #8]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	701a      	strb	r2, [r3, #0]
 8016e2e:	b01c      	add	sp, #112	; 0x70
 8016e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e34:	b003      	add	sp, #12
 8016e36:	4770      	bx	lr
 8016e38:	2000005c 	.word	0x2000005c
 8016e3c:	ffff0208 	.word	0xffff0208

08016e40 <strncmp>:
 8016e40:	b510      	push	{r4, lr}
 8016e42:	b16a      	cbz	r2, 8016e60 <strncmp+0x20>
 8016e44:	3901      	subs	r1, #1
 8016e46:	1884      	adds	r4, r0, r2
 8016e48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016e4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d103      	bne.n	8016e5c <strncmp+0x1c>
 8016e54:	42a0      	cmp	r0, r4
 8016e56:	d001      	beq.n	8016e5c <strncmp+0x1c>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1f5      	bne.n	8016e48 <strncmp+0x8>
 8016e5c:	1a98      	subs	r0, r3, r2
 8016e5e:	bd10      	pop	{r4, pc}
 8016e60:	4610      	mov	r0, r2
 8016e62:	e7fc      	b.n	8016e5e <strncmp+0x1e>

08016e64 <sulp>:
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	4604      	mov	r4, r0
 8016e68:	460d      	mov	r5, r1
 8016e6a:	4616      	mov	r6, r2
 8016e6c:	ec45 4b10 	vmov	d0, r4, r5
 8016e70:	f002 fcee 	bl	8019850 <__ulp>
 8016e74:	b17e      	cbz	r6, 8016e96 <sulp+0x32>
 8016e76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	dd09      	ble.n	8016e96 <sulp+0x32>
 8016e82:	051b      	lsls	r3, r3, #20
 8016e84:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016e88:	2000      	movs	r0, #0
 8016e8a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8016e8e:	ec41 0b17 	vmov	d7, r0, r1
 8016e92:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016e96:	bd70      	pop	{r4, r5, r6, pc}

08016e98 <_strtod_l>:
 8016e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9c:	ed2d 8b0c 	vpush	{d8-d13}
 8016ea0:	b09d      	sub	sp, #116	; 0x74
 8016ea2:	461f      	mov	r7, r3
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	9318      	str	r3, [sp, #96]	; 0x60
 8016ea8:	4ba6      	ldr	r3, [pc, #664]	; (8017144 <_strtod_l+0x2ac>)
 8016eaa:	9213      	str	r2, [sp, #76]	; 0x4c
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	9308      	str	r3, [sp, #32]
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	468a      	mov	sl, r1
 8016eb6:	f7e9 f9c3 	bl	8000240 <strlen>
 8016eba:	f04f 0800 	mov.w	r8, #0
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	f04f 0900 	mov.w	r9, #0
 8016ec4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016eca:	781a      	ldrb	r2, [r3, #0]
 8016ecc:	2a2b      	cmp	r2, #43	; 0x2b
 8016ece:	d04d      	beq.n	8016f6c <_strtod_l+0xd4>
 8016ed0:	d83a      	bhi.n	8016f48 <_strtod_l+0xb0>
 8016ed2:	2a0d      	cmp	r2, #13
 8016ed4:	d833      	bhi.n	8016f3e <_strtod_l+0xa6>
 8016ed6:	2a08      	cmp	r2, #8
 8016ed8:	d833      	bhi.n	8016f42 <_strtod_l+0xaa>
 8016eda:	2a00      	cmp	r2, #0
 8016edc:	d03d      	beq.n	8016f5a <_strtod_l+0xc2>
 8016ede:	2300      	movs	r3, #0
 8016ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ee2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016ee4:	7833      	ldrb	r3, [r6, #0]
 8016ee6:	2b30      	cmp	r3, #48	; 0x30
 8016ee8:	f040 80b6 	bne.w	8017058 <_strtod_l+0x1c0>
 8016eec:	7873      	ldrb	r3, [r6, #1]
 8016eee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ef2:	2b58      	cmp	r3, #88	; 0x58
 8016ef4:	d16d      	bne.n	8016fd2 <_strtod_l+0x13a>
 8016ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ef8:	9301      	str	r3, [sp, #4]
 8016efa:	ab18      	add	r3, sp, #96	; 0x60
 8016efc:	9702      	str	r7, [sp, #8]
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	4a91      	ldr	r2, [pc, #580]	; (8017148 <_strtod_l+0x2b0>)
 8016f02:	ab19      	add	r3, sp, #100	; 0x64
 8016f04:	a917      	add	r1, sp, #92	; 0x5c
 8016f06:	4620      	mov	r0, r4
 8016f08:	f001 fe0c 	bl	8018b24 <__gethex>
 8016f0c:	f010 0507 	ands.w	r5, r0, #7
 8016f10:	4607      	mov	r7, r0
 8016f12:	d005      	beq.n	8016f20 <_strtod_l+0x88>
 8016f14:	2d06      	cmp	r5, #6
 8016f16:	d12b      	bne.n	8016f70 <_strtod_l+0xd8>
 8016f18:	3601      	adds	r6, #1
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8016f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	f040 856e 	bne.w	8017a04 <_strtod_l+0xb6c>
 8016f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f2a:	b1e3      	cbz	r3, 8016f66 <_strtod_l+0xce>
 8016f2c:	ec49 8b17 	vmov	d7, r8, r9
 8016f30:	eeb1 0b47 	vneg.f64	d0, d7
 8016f34:	b01d      	add	sp, #116	; 0x74
 8016f36:	ecbd 8b0c 	vpop	{d8-d13}
 8016f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3e:	2a20      	cmp	r2, #32
 8016f40:	d1cd      	bne.n	8016ede <_strtod_l+0x46>
 8016f42:	3301      	adds	r3, #1
 8016f44:	9317      	str	r3, [sp, #92]	; 0x5c
 8016f46:	e7bf      	b.n	8016ec8 <_strtod_l+0x30>
 8016f48:	2a2d      	cmp	r2, #45	; 0x2d
 8016f4a:	d1c8      	bne.n	8016ede <_strtod_l+0x46>
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f50:	1c5a      	adds	r2, r3, #1
 8016f52:	9217      	str	r2, [sp, #92]	; 0x5c
 8016f54:	785b      	ldrb	r3, [r3, #1]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d1c3      	bne.n	8016ee2 <_strtod_l+0x4a>
 8016f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f5c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	f040 854d 	bne.w	8017a00 <_strtod_l+0xb68>
 8016f66:	ec49 8b10 	vmov	d0, r8, r9
 8016f6a:	e7e3      	b.n	8016f34 <_strtod_l+0x9c>
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	e7ee      	b.n	8016f4e <_strtod_l+0xb6>
 8016f70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f72:	b13a      	cbz	r2, 8016f84 <_strtod_l+0xec>
 8016f74:	2135      	movs	r1, #53	; 0x35
 8016f76:	a81a      	add	r0, sp, #104	; 0x68
 8016f78:	f002 fd76 	bl	8019a68 <__copybits>
 8016f7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f002 f93a 	bl	80191f8 <_Bfree>
 8016f84:	3d01      	subs	r5, #1
 8016f86:	2d05      	cmp	r5, #5
 8016f88:	d807      	bhi.n	8016f9a <_strtod_l+0x102>
 8016f8a:	e8df f005 	tbb	[pc, r5]
 8016f8e:	0b0e      	.short	0x0b0e
 8016f90:	030e1d18 	.word	0x030e1d18
 8016f94:	f04f 0900 	mov.w	r9, #0
 8016f98:	46c8      	mov	r8, r9
 8016f9a:	073b      	lsls	r3, r7, #28
 8016f9c:	d5c0      	bpl.n	8016f20 <_strtod_l+0x88>
 8016f9e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8016fa2:	e7bd      	b.n	8016f20 <_strtod_l+0x88>
 8016fa4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8016fa8:	e7f7      	b.n	8016f9a <_strtod_l+0x102>
 8016faa:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8016fae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016fb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016fb4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016fb8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016fbc:	e7ed      	b.n	8016f9a <_strtod_l+0x102>
 8016fbe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801714c <_strtod_l+0x2b4>
 8016fc2:	f04f 0800 	mov.w	r8, #0
 8016fc6:	e7e8      	b.n	8016f9a <_strtod_l+0x102>
 8016fc8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016fcc:	f04f 38ff 	mov.w	r8, #4294967295
 8016fd0:	e7e3      	b.n	8016f9a <_strtod_l+0x102>
 8016fd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fd4:	1c5a      	adds	r2, r3, #1
 8016fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8016fd8:	785b      	ldrb	r3, [r3, #1]
 8016fda:	2b30      	cmp	r3, #48	; 0x30
 8016fdc:	d0f9      	beq.n	8016fd2 <_strtod_l+0x13a>
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d09e      	beq.n	8016f20 <_strtod_l+0x88>
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	9306      	str	r3, [sp, #24]
 8016fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8016fea:	2300      	movs	r3, #0
 8016fec:	9304      	str	r3, [sp, #16]
 8016fee:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff0:	461e      	mov	r6, r3
 8016ff2:	220a      	movs	r2, #10
 8016ff4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016ff6:	f890 b000 	ldrb.w	fp, [r0]
 8016ffa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8016ffe:	b2d9      	uxtb	r1, r3
 8017000:	2909      	cmp	r1, #9
 8017002:	d92b      	bls.n	801705c <_strtod_l+0x1c4>
 8017004:	9908      	ldr	r1, [sp, #32]
 8017006:	462a      	mov	r2, r5
 8017008:	f7ff ff1a 	bl	8016e40 <strncmp>
 801700c:	2800      	cmp	r0, #0
 801700e:	d035      	beq.n	801707c <_strtod_l+0x1e4>
 8017010:	2000      	movs	r0, #0
 8017012:	465a      	mov	r2, fp
 8017014:	4633      	mov	r3, r6
 8017016:	4683      	mov	fp, r0
 8017018:	4601      	mov	r1, r0
 801701a:	2a65      	cmp	r2, #101	; 0x65
 801701c:	d001      	beq.n	8017022 <_strtod_l+0x18a>
 801701e:	2a45      	cmp	r2, #69	; 0x45
 8017020:	d118      	bne.n	8017054 <_strtod_l+0x1bc>
 8017022:	b91b      	cbnz	r3, 801702c <_strtod_l+0x194>
 8017024:	9b06      	ldr	r3, [sp, #24]
 8017026:	4303      	orrs	r3, r0
 8017028:	d097      	beq.n	8016f5a <_strtod_l+0xc2>
 801702a:	2300      	movs	r3, #0
 801702c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8017030:	f10a 0201 	add.w	r2, sl, #1
 8017034:	9217      	str	r2, [sp, #92]	; 0x5c
 8017036:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801703a:	2a2b      	cmp	r2, #43	; 0x2b
 801703c:	d077      	beq.n	801712e <_strtod_l+0x296>
 801703e:	2a2d      	cmp	r2, #45	; 0x2d
 8017040:	d07d      	beq.n	801713e <_strtod_l+0x2a6>
 8017042:	f04f 0e00 	mov.w	lr, #0
 8017046:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801704a:	2d09      	cmp	r5, #9
 801704c:	f240 8084 	bls.w	8017158 <_strtod_l+0x2c0>
 8017050:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8017054:	2500      	movs	r5, #0
 8017056:	e09f      	b.n	8017198 <_strtod_l+0x300>
 8017058:	2300      	movs	r3, #0
 801705a:	e7c3      	b.n	8016fe4 <_strtod_l+0x14c>
 801705c:	2e08      	cmp	r6, #8
 801705e:	bfd5      	itete	le
 8017060:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8017062:	9904      	ldrgt	r1, [sp, #16]
 8017064:	fb02 3301 	mlale	r3, r2, r1, r3
 8017068:	fb02 3301 	mlagt	r3, r2, r1, r3
 801706c:	f100 0001 	add.w	r0, r0, #1
 8017070:	bfd4      	ite	le
 8017072:	930a      	strle	r3, [sp, #40]	; 0x28
 8017074:	9304      	strgt	r3, [sp, #16]
 8017076:	3601      	adds	r6, #1
 8017078:	9017      	str	r0, [sp, #92]	; 0x5c
 801707a:	e7bb      	b.n	8016ff4 <_strtod_l+0x15c>
 801707c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801707e:	195a      	adds	r2, r3, r5
 8017080:	9217      	str	r2, [sp, #92]	; 0x5c
 8017082:	5d5a      	ldrb	r2, [r3, r5]
 8017084:	b3ae      	cbz	r6, 80170f2 <_strtod_l+0x25a>
 8017086:	4683      	mov	fp, r0
 8017088:	4633      	mov	r3, r6
 801708a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801708e:	2909      	cmp	r1, #9
 8017090:	d912      	bls.n	80170b8 <_strtod_l+0x220>
 8017092:	2101      	movs	r1, #1
 8017094:	e7c1      	b.n	801701a <_strtod_l+0x182>
 8017096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017098:	1c5a      	adds	r2, r3, #1
 801709a:	9217      	str	r2, [sp, #92]	; 0x5c
 801709c:	785a      	ldrb	r2, [r3, #1]
 801709e:	3001      	adds	r0, #1
 80170a0:	2a30      	cmp	r2, #48	; 0x30
 80170a2:	d0f8      	beq.n	8017096 <_strtod_l+0x1fe>
 80170a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80170a8:	2b08      	cmp	r3, #8
 80170aa:	f200 84b0 	bhi.w	8017a0e <_strtod_l+0xb76>
 80170ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170b0:	930c      	str	r3, [sp, #48]	; 0x30
 80170b2:	4683      	mov	fp, r0
 80170b4:	2000      	movs	r0, #0
 80170b6:	4603      	mov	r3, r0
 80170b8:	3a30      	subs	r2, #48	; 0x30
 80170ba:	f100 0101 	add.w	r1, r0, #1
 80170be:	d012      	beq.n	80170e6 <_strtod_l+0x24e>
 80170c0:	448b      	add	fp, r1
 80170c2:	eb00 0c03 	add.w	ip, r0, r3
 80170c6:	4619      	mov	r1, r3
 80170c8:	250a      	movs	r5, #10
 80170ca:	4561      	cmp	r1, ip
 80170cc:	d113      	bne.n	80170f6 <_strtod_l+0x25e>
 80170ce:	1819      	adds	r1, r3, r0
 80170d0:	2908      	cmp	r1, #8
 80170d2:	f103 0301 	add.w	r3, r3, #1
 80170d6:	4403      	add	r3, r0
 80170d8:	dc1d      	bgt.n	8017116 <_strtod_l+0x27e>
 80170da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170dc:	210a      	movs	r1, #10
 80170de:	fb01 2200 	mla	r2, r1, r0, r2
 80170e2:	920a      	str	r2, [sp, #40]	; 0x28
 80170e4:	2100      	movs	r1, #0
 80170e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80170e8:	1c50      	adds	r0, r2, #1
 80170ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80170ec:	7852      	ldrb	r2, [r2, #1]
 80170ee:	4608      	mov	r0, r1
 80170f0:	e7cb      	b.n	801708a <_strtod_l+0x1f2>
 80170f2:	4630      	mov	r0, r6
 80170f4:	e7d4      	b.n	80170a0 <_strtod_l+0x208>
 80170f6:	2908      	cmp	r1, #8
 80170f8:	dc04      	bgt.n	8017104 <_strtod_l+0x26c>
 80170fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80170fc:	436f      	muls	r7, r5
 80170fe:	970a      	str	r7, [sp, #40]	; 0x28
 8017100:	3101      	adds	r1, #1
 8017102:	e7e2      	b.n	80170ca <_strtod_l+0x232>
 8017104:	f101 0e01 	add.w	lr, r1, #1
 8017108:	f1be 0f10 	cmp.w	lr, #16
 801710c:	bfde      	ittt	le
 801710e:	9f04      	ldrle	r7, [sp, #16]
 8017110:	436f      	mulle	r7, r5
 8017112:	9704      	strle	r7, [sp, #16]
 8017114:	e7f4      	b.n	8017100 <_strtod_l+0x268>
 8017116:	2b10      	cmp	r3, #16
 8017118:	bfdf      	itttt	le
 801711a:	9804      	ldrle	r0, [sp, #16]
 801711c:	210a      	movle	r1, #10
 801711e:	fb01 2200 	mlale	r2, r1, r0, r2
 8017122:	9204      	strle	r2, [sp, #16]
 8017124:	e7de      	b.n	80170e4 <_strtod_l+0x24c>
 8017126:	f04f 0b00 	mov.w	fp, #0
 801712a:	2101      	movs	r1, #1
 801712c:	e77a      	b.n	8017024 <_strtod_l+0x18c>
 801712e:	f04f 0e00 	mov.w	lr, #0
 8017132:	f10a 0202 	add.w	r2, sl, #2
 8017136:	9217      	str	r2, [sp, #92]	; 0x5c
 8017138:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801713c:	e783      	b.n	8017046 <_strtod_l+0x1ae>
 801713e:	f04f 0e01 	mov.w	lr, #1
 8017142:	e7f6      	b.n	8017132 <_strtod_l+0x29a>
 8017144:	0801de78 	.word	0x0801de78
 8017148:	0801dca0 	.word	0x0801dca0
 801714c:	7ff00000 	.word	0x7ff00000
 8017150:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017152:	1c55      	adds	r5, r2, #1
 8017154:	9517      	str	r5, [sp, #92]	; 0x5c
 8017156:	7852      	ldrb	r2, [r2, #1]
 8017158:	2a30      	cmp	r2, #48	; 0x30
 801715a:	d0f9      	beq.n	8017150 <_strtod_l+0x2b8>
 801715c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8017160:	2d08      	cmp	r5, #8
 8017162:	f63f af77 	bhi.w	8017054 <_strtod_l+0x1bc>
 8017166:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801716a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801716c:	9208      	str	r2, [sp, #32]
 801716e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017170:	1c55      	adds	r5, r2, #1
 8017172:	9517      	str	r5, [sp, #92]	; 0x5c
 8017174:	7852      	ldrb	r2, [r2, #1]
 8017176:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801717a:	2f09      	cmp	r7, #9
 801717c:	d937      	bls.n	80171ee <_strtod_l+0x356>
 801717e:	9f08      	ldr	r7, [sp, #32]
 8017180:	1bed      	subs	r5, r5, r7
 8017182:	2d08      	cmp	r5, #8
 8017184:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017188:	dc02      	bgt.n	8017190 <_strtod_l+0x2f8>
 801718a:	4565      	cmp	r5, ip
 801718c:	bfa8      	it	ge
 801718e:	4665      	movge	r5, ip
 8017190:	f1be 0f00 	cmp.w	lr, #0
 8017194:	d000      	beq.n	8017198 <_strtod_l+0x300>
 8017196:	426d      	negs	r5, r5
 8017198:	2b00      	cmp	r3, #0
 801719a:	d14f      	bne.n	801723c <_strtod_l+0x3a4>
 801719c:	9b06      	ldr	r3, [sp, #24]
 801719e:	4303      	orrs	r3, r0
 80171a0:	f47f aebe 	bne.w	8016f20 <_strtod_l+0x88>
 80171a4:	2900      	cmp	r1, #0
 80171a6:	f47f aed8 	bne.w	8016f5a <_strtod_l+0xc2>
 80171aa:	2a69      	cmp	r2, #105	; 0x69
 80171ac:	d027      	beq.n	80171fe <_strtod_l+0x366>
 80171ae:	dc24      	bgt.n	80171fa <_strtod_l+0x362>
 80171b0:	2a49      	cmp	r2, #73	; 0x49
 80171b2:	d024      	beq.n	80171fe <_strtod_l+0x366>
 80171b4:	2a4e      	cmp	r2, #78	; 0x4e
 80171b6:	f47f aed0 	bne.w	8016f5a <_strtod_l+0xc2>
 80171ba:	499b      	ldr	r1, [pc, #620]	; (8017428 <_strtod_l+0x590>)
 80171bc:	a817      	add	r0, sp, #92	; 0x5c
 80171be:	f001 ff09 	bl	8018fd4 <__match>
 80171c2:	2800      	cmp	r0, #0
 80171c4:	f43f aec9 	beq.w	8016f5a <_strtod_l+0xc2>
 80171c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	2b28      	cmp	r3, #40	; 0x28
 80171ce:	d12d      	bne.n	801722c <_strtod_l+0x394>
 80171d0:	4996      	ldr	r1, [pc, #600]	; (801742c <_strtod_l+0x594>)
 80171d2:	aa1a      	add	r2, sp, #104	; 0x68
 80171d4:	a817      	add	r0, sp, #92	; 0x5c
 80171d6:	f001 ff11 	bl	8018ffc <__hexnan>
 80171da:	2805      	cmp	r0, #5
 80171dc:	d126      	bne.n	801722c <_strtod_l+0x394>
 80171de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80171e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80171e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80171ec:	e698      	b.n	8016f20 <_strtod_l+0x88>
 80171ee:	250a      	movs	r5, #10
 80171f0:	fb05 250c 	mla	r5, r5, ip, r2
 80171f4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80171f8:	e7b9      	b.n	801716e <_strtod_l+0x2d6>
 80171fa:	2a6e      	cmp	r2, #110	; 0x6e
 80171fc:	e7db      	b.n	80171b6 <_strtod_l+0x31e>
 80171fe:	498c      	ldr	r1, [pc, #560]	; (8017430 <_strtod_l+0x598>)
 8017200:	a817      	add	r0, sp, #92	; 0x5c
 8017202:	f001 fee7 	bl	8018fd4 <__match>
 8017206:	2800      	cmp	r0, #0
 8017208:	f43f aea7 	beq.w	8016f5a <_strtod_l+0xc2>
 801720c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801720e:	4989      	ldr	r1, [pc, #548]	; (8017434 <_strtod_l+0x59c>)
 8017210:	3b01      	subs	r3, #1
 8017212:	a817      	add	r0, sp, #92	; 0x5c
 8017214:	9317      	str	r3, [sp, #92]	; 0x5c
 8017216:	f001 fedd 	bl	8018fd4 <__match>
 801721a:	b910      	cbnz	r0, 8017222 <_strtod_l+0x38a>
 801721c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801721e:	3301      	adds	r3, #1
 8017220:	9317      	str	r3, [sp, #92]	; 0x5c
 8017222:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8017448 <_strtod_l+0x5b0>
 8017226:	f04f 0800 	mov.w	r8, #0
 801722a:	e679      	b.n	8016f20 <_strtod_l+0x88>
 801722c:	4882      	ldr	r0, [pc, #520]	; (8017438 <_strtod_l+0x5a0>)
 801722e:	f002 ffcf 	bl	801a1d0 <nan>
 8017232:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017236:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801723a:	e671      	b.n	8016f20 <_strtod_l+0x88>
 801723c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8017240:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017244:	eba5 020b 	sub.w	r2, r5, fp
 8017248:	2e00      	cmp	r6, #0
 801724a:	bf08      	it	eq
 801724c:	461e      	moveq	r6, r3
 801724e:	2b10      	cmp	r3, #16
 8017250:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017254:	9206      	str	r2, [sp, #24]
 8017256:	461a      	mov	r2, r3
 8017258:	bfa8      	it	ge
 801725a:	2210      	movge	r2, #16
 801725c:	2b09      	cmp	r3, #9
 801725e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8017262:	dd0e      	ble.n	8017282 <_strtod_l+0x3ea>
 8017264:	4975      	ldr	r1, [pc, #468]	; (801743c <_strtod_l+0x5a4>)
 8017266:	eddd 7a04 	vldr	s15, [sp, #16]
 801726a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801726e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8017272:	ed9d 5b08 	vldr	d5, [sp, #32]
 8017276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801727a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801727e:	ec59 8b17 	vmov	r8, r9, d7
 8017282:	2b0f      	cmp	r3, #15
 8017284:	dc37      	bgt.n	80172f6 <_strtod_l+0x45e>
 8017286:	9906      	ldr	r1, [sp, #24]
 8017288:	2900      	cmp	r1, #0
 801728a:	f43f ae49 	beq.w	8016f20 <_strtod_l+0x88>
 801728e:	dd23      	ble.n	80172d8 <_strtod_l+0x440>
 8017290:	2916      	cmp	r1, #22
 8017292:	dc0b      	bgt.n	80172ac <_strtod_l+0x414>
 8017294:	4b69      	ldr	r3, [pc, #420]	; (801743c <_strtod_l+0x5a4>)
 8017296:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801729a:	ed93 7b00 	vldr	d7, [r3]
 801729e:	ec49 8b16 	vmov	d6, r8, r9
 80172a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172a6:	ec59 8b17 	vmov	r8, r9, d7
 80172aa:	e639      	b.n	8016f20 <_strtod_l+0x88>
 80172ac:	9806      	ldr	r0, [sp, #24]
 80172ae:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80172b2:	4281      	cmp	r1, r0
 80172b4:	db1f      	blt.n	80172f6 <_strtod_l+0x45e>
 80172b6:	4a61      	ldr	r2, [pc, #388]	; (801743c <_strtod_l+0x5a4>)
 80172b8:	f1c3 030f 	rsb	r3, r3, #15
 80172bc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80172c0:	ed91 7b00 	vldr	d7, [r1]
 80172c4:	ec49 8b16 	vmov	d6, r8, r9
 80172c8:	1ac3      	subs	r3, r0, r3
 80172ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80172ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172d2:	ed92 6b00 	vldr	d6, [r2]
 80172d6:	e7e4      	b.n	80172a2 <_strtod_l+0x40a>
 80172d8:	9906      	ldr	r1, [sp, #24]
 80172da:	3116      	adds	r1, #22
 80172dc:	db0b      	blt.n	80172f6 <_strtod_l+0x45e>
 80172de:	4b57      	ldr	r3, [pc, #348]	; (801743c <_strtod_l+0x5a4>)
 80172e0:	ebab 0505 	sub.w	r5, fp, r5
 80172e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80172e8:	ed95 7b00 	vldr	d7, [r5]
 80172ec:	ec49 8b16 	vmov	d6, r8, r9
 80172f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80172f4:	e7d7      	b.n	80172a6 <_strtod_l+0x40e>
 80172f6:	9906      	ldr	r1, [sp, #24]
 80172f8:	1a9a      	subs	r2, r3, r2
 80172fa:	440a      	add	r2, r1
 80172fc:	2a00      	cmp	r2, #0
 80172fe:	dd74      	ble.n	80173ea <_strtod_l+0x552>
 8017300:	f012 000f 	ands.w	r0, r2, #15
 8017304:	d00a      	beq.n	801731c <_strtod_l+0x484>
 8017306:	494d      	ldr	r1, [pc, #308]	; (801743c <_strtod_l+0x5a4>)
 8017308:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801730c:	ed91 7b00 	vldr	d7, [r1]
 8017310:	ec49 8b16 	vmov	d6, r8, r9
 8017314:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017318:	ec59 8b17 	vmov	r8, r9, d7
 801731c:	f032 020f 	bics.w	r2, r2, #15
 8017320:	d04f      	beq.n	80173c2 <_strtod_l+0x52a>
 8017322:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8017326:	dd22      	ble.n	801736e <_strtod_l+0x4d6>
 8017328:	2500      	movs	r5, #0
 801732a:	462e      	mov	r6, r5
 801732c:	950a      	str	r5, [sp, #40]	; 0x28
 801732e:	462f      	mov	r7, r5
 8017330:	2322      	movs	r3, #34	; 0x22
 8017332:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8017448 <_strtod_l+0x5b0>
 8017336:	6023      	str	r3, [r4, #0]
 8017338:	f04f 0800 	mov.w	r8, #0
 801733c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801733e:	2b00      	cmp	r3, #0
 8017340:	f43f adee 	beq.w	8016f20 <_strtod_l+0x88>
 8017344:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017346:	4620      	mov	r0, r4
 8017348:	f001 ff56 	bl	80191f8 <_Bfree>
 801734c:	4639      	mov	r1, r7
 801734e:	4620      	mov	r0, r4
 8017350:	f001 ff52 	bl	80191f8 <_Bfree>
 8017354:	4631      	mov	r1, r6
 8017356:	4620      	mov	r0, r4
 8017358:	f001 ff4e 	bl	80191f8 <_Bfree>
 801735c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801735e:	4620      	mov	r0, r4
 8017360:	f001 ff4a 	bl	80191f8 <_Bfree>
 8017364:	4629      	mov	r1, r5
 8017366:	4620      	mov	r0, r4
 8017368:	f001 ff46 	bl	80191f8 <_Bfree>
 801736c:	e5d8      	b.n	8016f20 <_strtod_l+0x88>
 801736e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8017372:	2000      	movs	r0, #0
 8017374:	4f32      	ldr	r7, [pc, #200]	; (8017440 <_strtod_l+0x5a8>)
 8017376:	1112      	asrs	r2, r2, #4
 8017378:	4601      	mov	r1, r0
 801737a:	2a01      	cmp	r2, #1
 801737c:	dc24      	bgt.n	80173c8 <_strtod_l+0x530>
 801737e:	b108      	cbz	r0, 8017384 <_strtod_l+0x4ec>
 8017380:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017384:	4a2e      	ldr	r2, [pc, #184]	; (8017440 <_strtod_l+0x5a8>)
 8017386:	482f      	ldr	r0, [pc, #188]	; (8017444 <_strtod_l+0x5ac>)
 8017388:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801738c:	ed91 7b00 	vldr	d7, [r1]
 8017390:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017394:	ec49 8b16 	vmov	d6, r8, r9
 8017398:	ee27 7b06 	vmul.f64	d7, d7, d6
 801739c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80173a0:	9905      	ldr	r1, [sp, #20]
 80173a2:	4a29      	ldr	r2, [pc, #164]	; (8017448 <_strtod_l+0x5b0>)
 80173a4:	400a      	ands	r2, r1
 80173a6:	4282      	cmp	r2, r0
 80173a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80173ac:	d8bc      	bhi.n	8017328 <_strtod_l+0x490>
 80173ae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80173b2:	4282      	cmp	r2, r0
 80173b4:	bf86      	itte	hi
 80173b6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801744c <_strtod_l+0x5b4>
 80173ba:	f04f 38ff 	movhi.w	r8, #4294967295
 80173be:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80173c2:	2200      	movs	r2, #0
 80173c4:	9204      	str	r2, [sp, #16]
 80173c6:	e07f      	b.n	80174c8 <_strtod_l+0x630>
 80173c8:	f012 0f01 	tst.w	r2, #1
 80173cc:	d00a      	beq.n	80173e4 <_strtod_l+0x54c>
 80173ce:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80173d2:	ed90 7b00 	vldr	d7, [r0]
 80173d6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80173da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80173de:	ed8d 7b04 	vstr	d7, [sp, #16]
 80173e2:	2001      	movs	r0, #1
 80173e4:	3101      	adds	r1, #1
 80173e6:	1052      	asrs	r2, r2, #1
 80173e8:	e7c7      	b.n	801737a <_strtod_l+0x4e2>
 80173ea:	d0ea      	beq.n	80173c2 <_strtod_l+0x52a>
 80173ec:	4252      	negs	r2, r2
 80173ee:	f012 000f 	ands.w	r0, r2, #15
 80173f2:	d00a      	beq.n	801740a <_strtod_l+0x572>
 80173f4:	4911      	ldr	r1, [pc, #68]	; (801743c <_strtod_l+0x5a4>)
 80173f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80173fa:	ed91 7b00 	vldr	d7, [r1]
 80173fe:	ec49 8b16 	vmov	d6, r8, r9
 8017402:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017406:	ec59 8b17 	vmov	r8, r9, d7
 801740a:	1112      	asrs	r2, r2, #4
 801740c:	d0d9      	beq.n	80173c2 <_strtod_l+0x52a>
 801740e:	2a1f      	cmp	r2, #31
 8017410:	dd1e      	ble.n	8017450 <_strtod_l+0x5b8>
 8017412:	2500      	movs	r5, #0
 8017414:	462e      	mov	r6, r5
 8017416:	950a      	str	r5, [sp, #40]	; 0x28
 8017418:	462f      	mov	r7, r5
 801741a:	2322      	movs	r3, #34	; 0x22
 801741c:	f04f 0800 	mov.w	r8, #0
 8017420:	f04f 0900 	mov.w	r9, #0
 8017424:	6023      	str	r3, [r4, #0]
 8017426:	e789      	b.n	801733c <_strtod_l+0x4a4>
 8017428:	0801dbfd 	.word	0x0801dbfd
 801742c:	0801dcb4 	.word	0x0801dcb4
 8017430:	0801dbf5 	.word	0x0801dbf5
 8017434:	0801dd2f 	.word	0x0801dd2f
 8017438:	0801dd2b 	.word	0x0801dd2b
 801743c:	0801df18 	.word	0x0801df18
 8017440:	0801def0 	.word	0x0801def0
 8017444:	7ca00000 	.word	0x7ca00000
 8017448:	7ff00000 	.word	0x7ff00000
 801744c:	7fefffff 	.word	0x7fefffff
 8017450:	f012 0110 	ands.w	r1, r2, #16
 8017454:	bf18      	it	ne
 8017456:	216a      	movne	r1, #106	; 0x6a
 8017458:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801745c:	9104      	str	r1, [sp, #16]
 801745e:	49c0      	ldr	r1, [pc, #768]	; (8017760 <_strtod_l+0x8c8>)
 8017460:	2000      	movs	r0, #0
 8017462:	07d7      	lsls	r7, r2, #31
 8017464:	d508      	bpl.n	8017478 <_strtod_l+0x5e0>
 8017466:	ed9d 6b08 	vldr	d6, [sp, #32]
 801746a:	ed91 7b00 	vldr	d7, [r1]
 801746e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017472:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017476:	2001      	movs	r0, #1
 8017478:	1052      	asrs	r2, r2, #1
 801747a:	f101 0108 	add.w	r1, r1, #8
 801747e:	d1f0      	bne.n	8017462 <_strtod_l+0x5ca>
 8017480:	b108      	cbz	r0, 8017486 <_strtod_l+0x5ee>
 8017482:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8017486:	9a04      	ldr	r2, [sp, #16]
 8017488:	b1ba      	cbz	r2, 80174ba <_strtod_l+0x622>
 801748a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801748e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8017492:	2a00      	cmp	r2, #0
 8017494:	4649      	mov	r1, r9
 8017496:	dd10      	ble.n	80174ba <_strtod_l+0x622>
 8017498:	2a1f      	cmp	r2, #31
 801749a:	f340 8132 	ble.w	8017702 <_strtod_l+0x86a>
 801749e:	2a34      	cmp	r2, #52	; 0x34
 80174a0:	bfde      	ittt	le
 80174a2:	3a20      	suble	r2, #32
 80174a4:	f04f 30ff 	movle.w	r0, #4294967295
 80174a8:	fa00 f202 	lslle.w	r2, r0, r2
 80174ac:	f04f 0800 	mov.w	r8, #0
 80174b0:	bfcc      	ite	gt
 80174b2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80174b6:	ea02 0901 	andle.w	r9, r2, r1
 80174ba:	ec49 8b17 	vmov	d7, r8, r9
 80174be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80174c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c6:	d0a4      	beq.n	8017412 <_strtod_l+0x57a>
 80174c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174ca:	9200      	str	r2, [sp, #0]
 80174cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80174ce:	4632      	mov	r2, r6
 80174d0:	4620      	mov	r0, r4
 80174d2:	f001 fefd 	bl	80192d0 <__s2b>
 80174d6:	900a      	str	r0, [sp, #40]	; 0x28
 80174d8:	2800      	cmp	r0, #0
 80174da:	f43f af25 	beq.w	8017328 <_strtod_l+0x490>
 80174de:	9b06      	ldr	r3, [sp, #24]
 80174e0:	ebab 0505 	sub.w	r5, fp, r5
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	bfb4      	ite	lt
 80174e8:	462b      	movlt	r3, r5
 80174ea:	2300      	movge	r3, #0
 80174ec:	930c      	str	r3, [sp, #48]	; 0x30
 80174ee:	9b06      	ldr	r3, [sp, #24]
 80174f0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8017748 <_strtod_l+0x8b0>
 80174f4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017750 <_strtod_l+0x8b8>
 80174f8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8017758 <_strtod_l+0x8c0>
 80174fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017500:	2500      	movs	r5, #0
 8017502:	9312      	str	r3, [sp, #72]	; 0x48
 8017504:	462e      	mov	r6, r5
 8017506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017508:	4620      	mov	r0, r4
 801750a:	6859      	ldr	r1, [r3, #4]
 801750c:	f001 fe34 	bl	8019178 <_Balloc>
 8017510:	4607      	mov	r7, r0
 8017512:	2800      	cmp	r0, #0
 8017514:	f43f af0c 	beq.w	8017330 <_strtod_l+0x498>
 8017518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801751a:	691a      	ldr	r2, [r3, #16]
 801751c:	3202      	adds	r2, #2
 801751e:	f103 010c 	add.w	r1, r3, #12
 8017522:	0092      	lsls	r2, r2, #2
 8017524:	300c      	adds	r0, #12
 8017526:	f7fe fd95 	bl	8016054 <memcpy>
 801752a:	ec49 8b10 	vmov	d0, r8, r9
 801752e:	aa1a      	add	r2, sp, #104	; 0x68
 8017530:	a919      	add	r1, sp, #100	; 0x64
 8017532:	4620      	mov	r0, r4
 8017534:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8017538:	f002 fa06 	bl	8019948 <__d2b>
 801753c:	9018      	str	r0, [sp, #96]	; 0x60
 801753e:	2800      	cmp	r0, #0
 8017540:	f43f aef6 	beq.w	8017330 <_strtod_l+0x498>
 8017544:	2101      	movs	r1, #1
 8017546:	4620      	mov	r0, r4
 8017548:	f001 ff5c 	bl	8019404 <__i2b>
 801754c:	4606      	mov	r6, r0
 801754e:	2800      	cmp	r0, #0
 8017550:	f43f aeee 	beq.w	8017330 <_strtod_l+0x498>
 8017554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017556:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017558:	2b00      	cmp	r3, #0
 801755a:	bfab      	itete	ge
 801755c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801755e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8017560:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8017564:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8017568:	bfac      	ite	ge
 801756a:	eb03 0b02 	addge.w	fp, r3, r2
 801756e:	eba2 0a03 	sublt.w	sl, r2, r3
 8017572:	9a04      	ldr	r2, [sp, #16]
 8017574:	1a9b      	subs	r3, r3, r2
 8017576:	440b      	add	r3, r1
 8017578:	4a7a      	ldr	r2, [pc, #488]	; (8017764 <_strtod_l+0x8cc>)
 801757a:	3b01      	subs	r3, #1
 801757c:	4293      	cmp	r3, r2
 801757e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8017582:	f280 80d1 	bge.w	8017728 <_strtod_l+0x890>
 8017586:	1ad2      	subs	r2, r2, r3
 8017588:	2a1f      	cmp	r2, #31
 801758a:	eba1 0102 	sub.w	r1, r1, r2
 801758e:	f04f 0001 	mov.w	r0, #1
 8017592:	f300 80bd 	bgt.w	8017710 <_strtod_l+0x878>
 8017596:	fa00 f302 	lsl.w	r3, r0, r2
 801759a:	930e      	str	r3, [sp, #56]	; 0x38
 801759c:	2300      	movs	r3, #0
 801759e:	930d      	str	r3, [sp, #52]	; 0x34
 80175a0:	eb0b 0301 	add.w	r3, fp, r1
 80175a4:	9a04      	ldr	r2, [sp, #16]
 80175a6:	459b      	cmp	fp, r3
 80175a8:	448a      	add	sl, r1
 80175aa:	4492      	add	sl, r2
 80175ac:	465a      	mov	r2, fp
 80175ae:	bfa8      	it	ge
 80175b0:	461a      	movge	r2, r3
 80175b2:	4552      	cmp	r2, sl
 80175b4:	bfa8      	it	ge
 80175b6:	4652      	movge	r2, sl
 80175b8:	2a00      	cmp	r2, #0
 80175ba:	bfc2      	ittt	gt
 80175bc:	1a9b      	subgt	r3, r3, r2
 80175be:	ebaa 0a02 	subgt.w	sl, sl, r2
 80175c2:	ebab 0b02 	subgt.w	fp, fp, r2
 80175c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80175c8:	2a00      	cmp	r2, #0
 80175ca:	dd18      	ble.n	80175fe <_strtod_l+0x766>
 80175cc:	4631      	mov	r1, r6
 80175ce:	4620      	mov	r0, r4
 80175d0:	9315      	str	r3, [sp, #84]	; 0x54
 80175d2:	f001 ffd3 	bl	801957c <__pow5mult>
 80175d6:	4606      	mov	r6, r0
 80175d8:	2800      	cmp	r0, #0
 80175da:	f43f aea9 	beq.w	8017330 <_strtod_l+0x498>
 80175de:	4601      	mov	r1, r0
 80175e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80175e2:	4620      	mov	r0, r4
 80175e4:	f001 ff24 	bl	8019430 <__multiply>
 80175e8:	9014      	str	r0, [sp, #80]	; 0x50
 80175ea:	2800      	cmp	r0, #0
 80175ec:	f43f aea0 	beq.w	8017330 <_strtod_l+0x498>
 80175f0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80175f2:	4620      	mov	r0, r4
 80175f4:	f001 fe00 	bl	80191f8 <_Bfree>
 80175f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80175fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175fc:	9218      	str	r2, [sp, #96]	; 0x60
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f300 8097 	bgt.w	8017732 <_strtod_l+0x89a>
 8017604:	9b06      	ldr	r3, [sp, #24]
 8017606:	2b00      	cmp	r3, #0
 8017608:	dd08      	ble.n	801761c <_strtod_l+0x784>
 801760a:	4639      	mov	r1, r7
 801760c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801760e:	4620      	mov	r0, r4
 8017610:	f001 ffb4 	bl	801957c <__pow5mult>
 8017614:	4607      	mov	r7, r0
 8017616:	2800      	cmp	r0, #0
 8017618:	f43f ae8a 	beq.w	8017330 <_strtod_l+0x498>
 801761c:	f1ba 0f00 	cmp.w	sl, #0
 8017620:	dd08      	ble.n	8017634 <_strtod_l+0x79c>
 8017622:	4639      	mov	r1, r7
 8017624:	4652      	mov	r2, sl
 8017626:	4620      	mov	r0, r4
 8017628:	f002 f802 	bl	8019630 <__lshift>
 801762c:	4607      	mov	r7, r0
 801762e:	2800      	cmp	r0, #0
 8017630:	f43f ae7e 	beq.w	8017330 <_strtod_l+0x498>
 8017634:	f1bb 0f00 	cmp.w	fp, #0
 8017638:	dd08      	ble.n	801764c <_strtod_l+0x7b4>
 801763a:	4631      	mov	r1, r6
 801763c:	465a      	mov	r2, fp
 801763e:	4620      	mov	r0, r4
 8017640:	f001 fff6 	bl	8019630 <__lshift>
 8017644:	4606      	mov	r6, r0
 8017646:	2800      	cmp	r0, #0
 8017648:	f43f ae72 	beq.w	8017330 <_strtod_l+0x498>
 801764c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801764e:	463a      	mov	r2, r7
 8017650:	4620      	mov	r0, r4
 8017652:	f002 f875 	bl	8019740 <__mdiff>
 8017656:	4605      	mov	r5, r0
 8017658:	2800      	cmp	r0, #0
 801765a:	f43f ae69 	beq.w	8017330 <_strtod_l+0x498>
 801765e:	2300      	movs	r3, #0
 8017660:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017664:	60c3      	str	r3, [r0, #12]
 8017666:	4631      	mov	r1, r6
 8017668:	f002 f84e 	bl	8019708 <__mcmp>
 801766c:	2800      	cmp	r0, #0
 801766e:	da7f      	bge.n	8017770 <_strtod_l+0x8d8>
 8017670:	ea5a 0308 	orrs.w	r3, sl, r8
 8017674:	f040 80a5 	bne.w	80177c2 <_strtod_l+0x92a>
 8017678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801767c:	2b00      	cmp	r3, #0
 801767e:	f040 80a0 	bne.w	80177c2 <_strtod_l+0x92a>
 8017682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017686:	0d1b      	lsrs	r3, r3, #20
 8017688:	051b      	lsls	r3, r3, #20
 801768a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801768e:	f240 8098 	bls.w	80177c2 <_strtod_l+0x92a>
 8017692:	696b      	ldr	r3, [r5, #20]
 8017694:	b91b      	cbnz	r3, 801769e <_strtod_l+0x806>
 8017696:	692b      	ldr	r3, [r5, #16]
 8017698:	2b01      	cmp	r3, #1
 801769a:	f340 8092 	ble.w	80177c2 <_strtod_l+0x92a>
 801769e:	4629      	mov	r1, r5
 80176a0:	2201      	movs	r2, #1
 80176a2:	4620      	mov	r0, r4
 80176a4:	f001 ffc4 	bl	8019630 <__lshift>
 80176a8:	4631      	mov	r1, r6
 80176aa:	4605      	mov	r5, r0
 80176ac:	f002 f82c 	bl	8019708 <__mcmp>
 80176b0:	2800      	cmp	r0, #0
 80176b2:	f340 8086 	ble.w	80177c2 <_strtod_l+0x92a>
 80176b6:	9904      	ldr	r1, [sp, #16]
 80176b8:	4a2b      	ldr	r2, [pc, #172]	; (8017768 <_strtod_l+0x8d0>)
 80176ba:	464b      	mov	r3, r9
 80176bc:	2900      	cmp	r1, #0
 80176be:	f000 80a1 	beq.w	8017804 <_strtod_l+0x96c>
 80176c2:	ea02 0109 	and.w	r1, r2, r9
 80176c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80176ca:	f300 809b 	bgt.w	8017804 <_strtod_l+0x96c>
 80176ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80176d2:	f77f aea2 	ble.w	801741a <_strtod_l+0x582>
 80176d6:	4a25      	ldr	r2, [pc, #148]	; (801776c <_strtod_l+0x8d4>)
 80176d8:	2300      	movs	r3, #0
 80176da:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80176de:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80176e2:	ec49 8b17 	vmov	d7, r8, r9
 80176e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80176ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80176ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80176f2:	4313      	orrs	r3, r2
 80176f4:	bf08      	it	eq
 80176f6:	2322      	moveq	r3, #34	; 0x22
 80176f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80176fc:	bf08      	it	eq
 80176fe:	6023      	streq	r3, [r4, #0]
 8017700:	e620      	b.n	8017344 <_strtod_l+0x4ac>
 8017702:	f04f 31ff 	mov.w	r1, #4294967295
 8017706:	fa01 f202 	lsl.w	r2, r1, r2
 801770a:	ea02 0808 	and.w	r8, r2, r8
 801770e:	e6d4      	b.n	80174ba <_strtod_l+0x622>
 8017710:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017714:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017718:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801771c:	33e2      	adds	r3, #226	; 0xe2
 801771e:	fa00 f303 	lsl.w	r3, r0, r3
 8017722:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8017726:	e73b      	b.n	80175a0 <_strtod_l+0x708>
 8017728:	2000      	movs	r0, #0
 801772a:	2301      	movs	r3, #1
 801772c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8017730:	e736      	b.n	80175a0 <_strtod_l+0x708>
 8017732:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017734:	461a      	mov	r2, r3
 8017736:	4620      	mov	r0, r4
 8017738:	f001 ff7a 	bl	8019630 <__lshift>
 801773c:	9018      	str	r0, [sp, #96]	; 0x60
 801773e:	2800      	cmp	r0, #0
 8017740:	f47f af60 	bne.w	8017604 <_strtod_l+0x76c>
 8017744:	e5f4      	b.n	8017330 <_strtod_l+0x498>
 8017746:	bf00      	nop
 8017748:	94a03595 	.word	0x94a03595
 801774c:	3fcfffff 	.word	0x3fcfffff
 8017750:	94a03595 	.word	0x94a03595
 8017754:	3fdfffff 	.word	0x3fdfffff
 8017758:	35afe535 	.word	0x35afe535
 801775c:	3fe00000 	.word	0x3fe00000
 8017760:	0801dcc8 	.word	0x0801dcc8
 8017764:	fffffc02 	.word	0xfffffc02
 8017768:	7ff00000 	.word	0x7ff00000
 801776c:	39500000 	.word	0x39500000
 8017770:	46cb      	mov	fp, r9
 8017772:	d165      	bne.n	8017840 <_strtod_l+0x9a8>
 8017774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017778:	f1ba 0f00 	cmp.w	sl, #0
 801777c:	d02a      	beq.n	80177d4 <_strtod_l+0x93c>
 801777e:	4aaa      	ldr	r2, [pc, #680]	; (8017a28 <_strtod_l+0xb90>)
 8017780:	4293      	cmp	r3, r2
 8017782:	d12b      	bne.n	80177dc <_strtod_l+0x944>
 8017784:	9b04      	ldr	r3, [sp, #16]
 8017786:	4641      	mov	r1, r8
 8017788:	b1fb      	cbz	r3, 80177ca <_strtod_l+0x932>
 801778a:	4aa8      	ldr	r2, [pc, #672]	; (8017a2c <_strtod_l+0xb94>)
 801778c:	ea09 0202 	and.w	r2, r9, r2
 8017790:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017794:	f04f 30ff 	mov.w	r0, #4294967295
 8017798:	d81a      	bhi.n	80177d0 <_strtod_l+0x938>
 801779a:	0d12      	lsrs	r2, r2, #20
 801779c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80177a0:	fa00 f303 	lsl.w	r3, r0, r3
 80177a4:	4299      	cmp	r1, r3
 80177a6:	d119      	bne.n	80177dc <_strtod_l+0x944>
 80177a8:	4ba1      	ldr	r3, [pc, #644]	; (8017a30 <_strtod_l+0xb98>)
 80177aa:	459b      	cmp	fp, r3
 80177ac:	d102      	bne.n	80177b4 <_strtod_l+0x91c>
 80177ae:	3101      	adds	r1, #1
 80177b0:	f43f adbe 	beq.w	8017330 <_strtod_l+0x498>
 80177b4:	4b9d      	ldr	r3, [pc, #628]	; (8017a2c <_strtod_l+0xb94>)
 80177b6:	ea0b 0303 	and.w	r3, fp, r3
 80177ba:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80177be:	f04f 0800 	mov.w	r8, #0
 80177c2:	9b04      	ldr	r3, [sp, #16]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d186      	bne.n	80176d6 <_strtod_l+0x83e>
 80177c8:	e5bc      	b.n	8017344 <_strtod_l+0x4ac>
 80177ca:	f04f 33ff 	mov.w	r3, #4294967295
 80177ce:	e7e9      	b.n	80177a4 <_strtod_l+0x90c>
 80177d0:	4603      	mov	r3, r0
 80177d2:	e7e7      	b.n	80177a4 <_strtod_l+0x90c>
 80177d4:	ea53 0308 	orrs.w	r3, r3, r8
 80177d8:	f43f af6d 	beq.w	80176b6 <_strtod_l+0x81e>
 80177dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177de:	b1db      	cbz	r3, 8017818 <_strtod_l+0x980>
 80177e0:	ea13 0f0b 	tst.w	r3, fp
 80177e4:	d0ed      	beq.n	80177c2 <_strtod_l+0x92a>
 80177e6:	9a04      	ldr	r2, [sp, #16]
 80177e8:	4640      	mov	r0, r8
 80177ea:	4649      	mov	r1, r9
 80177ec:	f1ba 0f00 	cmp.w	sl, #0
 80177f0:	d016      	beq.n	8017820 <_strtod_l+0x988>
 80177f2:	f7ff fb37 	bl	8016e64 <sulp>
 80177f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80177fa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80177fe:	ec59 8b17 	vmov	r8, r9, d7
 8017802:	e7de      	b.n	80177c2 <_strtod_l+0x92a>
 8017804:	4013      	ands	r3, r2
 8017806:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801780a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801780e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017812:	f04f 38ff 	mov.w	r8, #4294967295
 8017816:	e7d4      	b.n	80177c2 <_strtod_l+0x92a>
 8017818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801781a:	ea13 0f08 	tst.w	r3, r8
 801781e:	e7e1      	b.n	80177e4 <_strtod_l+0x94c>
 8017820:	f7ff fb20 	bl	8016e64 <sulp>
 8017824:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017828:	ee37 7b40 	vsub.f64	d7, d7, d0
 801782c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017830:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017838:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801783c:	d1c1      	bne.n	80177c2 <_strtod_l+0x92a>
 801783e:	e5ec      	b.n	801741a <_strtod_l+0x582>
 8017840:	4631      	mov	r1, r6
 8017842:	4628      	mov	r0, r5
 8017844:	f002 f8dc 	bl	8019a00 <__ratio>
 8017848:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801784c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017854:	d867      	bhi.n	8017926 <_strtod_l+0xa8e>
 8017856:	f1ba 0f00 	cmp.w	sl, #0
 801785a:	d044      	beq.n	80178e6 <_strtod_l+0xa4e>
 801785c:	4b75      	ldr	r3, [pc, #468]	; (8017a34 <_strtod_l+0xb9c>)
 801785e:	2200      	movs	r2, #0
 8017860:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8017864:	4971      	ldr	r1, [pc, #452]	; (8017a2c <_strtod_l+0xb94>)
 8017866:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017a40 <_strtod_l+0xba8>
 801786a:	ea0b 0001 	and.w	r0, fp, r1
 801786e:	4560      	cmp	r0, ip
 8017870:	900d      	str	r0, [sp, #52]	; 0x34
 8017872:	f040 808b 	bne.w	801798c <_strtod_l+0xaf4>
 8017876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801787a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801787e:	ec49 8b10 	vmov	d0, r8, r9
 8017882:	ec43 2b1c 	vmov	d12, r2, r3
 8017886:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801788a:	f001 ffe1 	bl	8019850 <__ulp>
 801788e:	ec49 8b1d 	vmov	d13, r8, r9
 8017892:	eeac db00 	vfma.f64	d13, d12, d0
 8017896:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801789a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801789c:	4963      	ldr	r1, [pc, #396]	; (8017a2c <_strtod_l+0xb94>)
 801789e:	4a66      	ldr	r2, [pc, #408]	; (8017a38 <_strtod_l+0xba0>)
 80178a0:	4019      	ands	r1, r3
 80178a2:	4291      	cmp	r1, r2
 80178a4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80178a8:	d947      	bls.n	801793a <_strtod_l+0xaa2>
 80178aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80178b0:	4293      	cmp	r3, r2
 80178b2:	d103      	bne.n	80178bc <_strtod_l+0xa24>
 80178b4:	9b08      	ldr	r3, [sp, #32]
 80178b6:	3301      	adds	r3, #1
 80178b8:	f43f ad3a 	beq.w	8017330 <_strtod_l+0x498>
 80178bc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8017a30 <_strtod_l+0xb98>
 80178c0:	f04f 38ff 	mov.w	r8, #4294967295
 80178c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80178c6:	4620      	mov	r0, r4
 80178c8:	f001 fc96 	bl	80191f8 <_Bfree>
 80178cc:	4639      	mov	r1, r7
 80178ce:	4620      	mov	r0, r4
 80178d0:	f001 fc92 	bl	80191f8 <_Bfree>
 80178d4:	4631      	mov	r1, r6
 80178d6:	4620      	mov	r0, r4
 80178d8:	f001 fc8e 	bl	80191f8 <_Bfree>
 80178dc:	4629      	mov	r1, r5
 80178de:	4620      	mov	r0, r4
 80178e0:	f001 fc8a 	bl	80191f8 <_Bfree>
 80178e4:	e60f      	b.n	8017506 <_strtod_l+0x66e>
 80178e6:	f1b8 0f00 	cmp.w	r8, #0
 80178ea:	d112      	bne.n	8017912 <_strtod_l+0xa7a>
 80178ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80178f0:	b9b3      	cbnz	r3, 8017920 <_strtod_l+0xa88>
 80178f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80178f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80178fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017902:	d401      	bmi.n	8017908 <_strtod_l+0xa70>
 8017904:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017908:	eeb1 7b48 	vneg.f64	d7, d8
 801790c:	ec53 2b17 	vmov	r2, r3, d7
 8017910:	e7a8      	b.n	8017864 <_strtod_l+0x9cc>
 8017912:	f1b8 0f01 	cmp.w	r8, #1
 8017916:	d103      	bne.n	8017920 <_strtod_l+0xa88>
 8017918:	f1b9 0f00 	cmp.w	r9, #0
 801791c:	f43f ad7d 	beq.w	801741a <_strtod_l+0x582>
 8017920:	4b46      	ldr	r3, [pc, #280]	; (8017a3c <_strtod_l+0xba4>)
 8017922:	2200      	movs	r2, #0
 8017924:	e79c      	b.n	8017860 <_strtod_l+0x9c8>
 8017926:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801792a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801792e:	f1ba 0f00 	cmp.w	sl, #0
 8017932:	d0e9      	beq.n	8017908 <_strtod_l+0xa70>
 8017934:	ec53 2b18 	vmov	r2, r3, d8
 8017938:	e794      	b.n	8017864 <_strtod_l+0x9cc>
 801793a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801793e:	9b04      	ldr	r3, [sp, #16]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d1bf      	bne.n	80178c4 <_strtod_l+0xa2c>
 8017944:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801794a:	0d1b      	lsrs	r3, r3, #20
 801794c:	051b      	lsls	r3, r3, #20
 801794e:	429a      	cmp	r2, r3
 8017950:	d1b8      	bne.n	80178c4 <_strtod_l+0xa2c>
 8017952:	ec51 0b18 	vmov	r0, r1, d8
 8017956:	f7e8 fe9f 	bl	8000698 <__aeabi_d2lz>
 801795a:	f7e8 fe57 	bl	800060c <__aeabi_l2d>
 801795e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017962:	ec41 0b17 	vmov	d7, r0, r1
 8017966:	ea43 0308 	orr.w	r3, r3, r8
 801796a:	ea53 030a 	orrs.w	r3, r3, sl
 801796e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017972:	d03e      	beq.n	80179f2 <_strtod_l+0xb5a>
 8017974:	eeb4 8bca 	vcmpe.f64	d8, d10
 8017978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801797c:	f53f ace2 	bmi.w	8017344 <_strtod_l+0x4ac>
 8017980:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017988:	dd9c      	ble.n	80178c4 <_strtod_l+0xa2c>
 801798a:	e4db      	b.n	8017344 <_strtod_l+0x4ac>
 801798c:	9904      	ldr	r1, [sp, #16]
 801798e:	b301      	cbz	r1, 80179d2 <_strtod_l+0xb3a>
 8017990:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017992:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017996:	d81c      	bhi.n	80179d2 <_strtod_l+0xb3a>
 8017998:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017a20 <_strtod_l+0xb88>
 801799c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80179a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a4:	d811      	bhi.n	80179ca <_strtod_l+0xb32>
 80179a6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80179aa:	ee18 3a10 	vmov	r3, s16
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	bf38      	it	cc
 80179b2:	2301      	movcc	r3, #1
 80179b4:	ee08 3a10 	vmov	s16, r3
 80179b8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80179bc:	f1ba 0f00 	cmp.w	sl, #0
 80179c0:	d114      	bne.n	80179ec <_strtod_l+0xb54>
 80179c2:	eeb1 7b48 	vneg.f64	d7, d8
 80179c6:	ec53 2b17 	vmov	r2, r3, d7
 80179ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80179cc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80179d0:	1a0b      	subs	r3, r1, r0
 80179d2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80179d6:	ec43 2b1c 	vmov	d12, r2, r3
 80179da:	f001 ff39 	bl	8019850 <__ulp>
 80179de:	ed9d 7b08 	vldr	d7, [sp, #32]
 80179e2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80179e6:	ec59 8b17 	vmov	r8, r9, d7
 80179ea:	e7a8      	b.n	801793e <_strtod_l+0xaa6>
 80179ec:	ec53 2b18 	vmov	r2, r3, d8
 80179f0:	e7eb      	b.n	80179ca <_strtod_l+0xb32>
 80179f2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80179f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179fa:	f57f af63 	bpl.w	80178c4 <_strtod_l+0xa2c>
 80179fe:	e4a1      	b.n	8017344 <_strtod_l+0x4ac>
 8017a00:	2300      	movs	r3, #0
 8017a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017a08:	6013      	str	r3, [r2, #0]
 8017a0a:	f7ff ba8d 	b.w	8016f28 <_strtod_l+0x90>
 8017a0e:	2a65      	cmp	r2, #101	; 0x65
 8017a10:	f43f ab89 	beq.w	8017126 <_strtod_l+0x28e>
 8017a14:	2a45      	cmp	r2, #69	; 0x45
 8017a16:	f43f ab86 	beq.w	8017126 <_strtod_l+0x28e>
 8017a1a:	2101      	movs	r1, #1
 8017a1c:	f7ff bbbe 	b.w	801719c <_strtod_l+0x304>
 8017a20:	ffc00000 	.word	0xffc00000
 8017a24:	41dfffff 	.word	0x41dfffff
 8017a28:	000fffff 	.word	0x000fffff
 8017a2c:	7ff00000 	.word	0x7ff00000
 8017a30:	7fefffff 	.word	0x7fefffff
 8017a34:	3ff00000 	.word	0x3ff00000
 8017a38:	7c9fffff 	.word	0x7c9fffff
 8017a3c:	bff00000 	.word	0xbff00000
 8017a40:	7fe00000 	.word	0x7fe00000

08017a44 <_strtod_r>:
 8017a44:	4b01      	ldr	r3, [pc, #4]	; (8017a4c <_strtod_r+0x8>)
 8017a46:	f7ff ba27 	b.w	8016e98 <_strtod_l>
 8017a4a:	bf00      	nop
 8017a4c:	200000c4 	.word	0x200000c4

08017a50 <strtof>:
 8017a50:	b510      	push	{r4, lr}
 8017a52:	4c1d      	ldr	r4, [pc, #116]	; (8017ac8 <strtof+0x78>)
 8017a54:	4b1d      	ldr	r3, [pc, #116]	; (8017acc <strtof+0x7c>)
 8017a56:	460a      	mov	r2, r1
 8017a58:	4601      	mov	r1, r0
 8017a5a:	6820      	ldr	r0, [r4, #0]
 8017a5c:	f7ff fa1c 	bl	8016e98 <_strtod_l>
 8017a60:	eeb4 0b40 	vcmp.f64	d0, d0
 8017a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a68:	eeb0 7b40 	vmov.f64	d7, d0
 8017a6c:	d70d      	bvc.n	8017a8a <strtof+0x3a>
 8017a6e:	ee17 3a90 	vmov	r3, s15
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	4816      	ldr	r0, [pc, #88]	; (8017ad0 <strtof+0x80>)
 8017a76:	da04      	bge.n	8017a82 <strtof+0x32>
 8017a78:	f7ff f9bc 	bl	8016df4 <nanf>
 8017a7c:	eeb1 0a40 	vneg.f32	s0, s0
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a86:	f7ff b9b5 	b.w	8016df4 <nanf>
 8017a8a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017a8e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8017ad4 <strtof+0x84>
 8017a92:	eeb0 6ac0 	vabs.f32	s12, s0
 8017a96:	eeb4 6a66 	vcmp.f32	s12, s13
 8017a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a9e:	ddef      	ble.n	8017a80 <strtof+0x30>
 8017aa0:	eeb0 7bc7 	vabs.f64	d7, d7
 8017aa4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8017ac0 <strtof+0x70>
 8017aa8:	eeb4 7b46 	vcmp.f64	d7, d6
 8017aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab0:	bfde      	ittt	le
 8017ab2:	6823      	ldrle	r3, [r4, #0]
 8017ab4:	2222      	movle	r2, #34	; 0x22
 8017ab6:	601a      	strle	r2, [r3, #0]
 8017ab8:	e7e2      	b.n	8017a80 <strtof+0x30>
 8017aba:	bf00      	nop
 8017abc:	f3af 8000 	nop.w
 8017ac0:	ffffffff 	.word	0xffffffff
 8017ac4:	7fefffff 	.word	0x7fefffff
 8017ac8:	2000005c 	.word	0x2000005c
 8017acc:	200000c4 	.word	0x200000c4
 8017ad0:	0801dd2b 	.word	0x0801dd2b
 8017ad4:	7f7fffff 	.word	0x7f7fffff

08017ad8 <_strtol_l.isra.0>:
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ade:	d001      	beq.n	8017ae4 <_strtol_l.isra.0+0xc>
 8017ae0:	2b24      	cmp	r3, #36	; 0x24
 8017ae2:	d906      	bls.n	8017af2 <_strtol_l.isra.0+0x1a>
 8017ae4:	f000 feaa 	bl	801883c <__errno>
 8017ae8:	2316      	movs	r3, #22
 8017aea:	6003      	str	r3, [r0, #0]
 8017aec:	2000      	movs	r0, #0
 8017aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017af2:	4f3a      	ldr	r7, [pc, #232]	; (8017bdc <_strtol_l.isra.0+0x104>)
 8017af4:	468e      	mov	lr, r1
 8017af6:	4676      	mov	r6, lr
 8017af8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017afc:	5de5      	ldrb	r5, [r4, r7]
 8017afe:	f015 0508 	ands.w	r5, r5, #8
 8017b02:	d1f8      	bne.n	8017af6 <_strtol_l.isra.0+0x1e>
 8017b04:	2c2d      	cmp	r4, #45	; 0x2d
 8017b06:	d134      	bne.n	8017b72 <_strtol_l.isra.0+0x9a>
 8017b08:	f89e 4000 	ldrb.w	r4, [lr]
 8017b0c:	f04f 0801 	mov.w	r8, #1
 8017b10:	f106 0e02 	add.w	lr, r6, #2
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d05c      	beq.n	8017bd2 <_strtol_l.isra.0+0xfa>
 8017b18:	2b10      	cmp	r3, #16
 8017b1a:	d10c      	bne.n	8017b36 <_strtol_l.isra.0+0x5e>
 8017b1c:	2c30      	cmp	r4, #48	; 0x30
 8017b1e:	d10a      	bne.n	8017b36 <_strtol_l.isra.0+0x5e>
 8017b20:	f89e 4000 	ldrb.w	r4, [lr]
 8017b24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017b28:	2c58      	cmp	r4, #88	; 0x58
 8017b2a:	d14d      	bne.n	8017bc8 <_strtol_l.isra.0+0xf0>
 8017b2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017b30:	2310      	movs	r3, #16
 8017b32:	f10e 0e02 	add.w	lr, lr, #2
 8017b36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017b3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017b3e:	2600      	movs	r6, #0
 8017b40:	fbbc f9f3 	udiv	r9, ip, r3
 8017b44:	4635      	mov	r5, r6
 8017b46:	fb03 ca19 	mls	sl, r3, r9, ip
 8017b4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017b4e:	2f09      	cmp	r7, #9
 8017b50:	d818      	bhi.n	8017b84 <_strtol_l.isra.0+0xac>
 8017b52:	463c      	mov	r4, r7
 8017b54:	42a3      	cmp	r3, r4
 8017b56:	dd24      	ble.n	8017ba2 <_strtol_l.isra.0+0xca>
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	db1f      	blt.n	8017b9c <_strtol_l.isra.0+0xc4>
 8017b5c:	45a9      	cmp	r9, r5
 8017b5e:	d31d      	bcc.n	8017b9c <_strtol_l.isra.0+0xc4>
 8017b60:	d101      	bne.n	8017b66 <_strtol_l.isra.0+0x8e>
 8017b62:	45a2      	cmp	sl, r4
 8017b64:	db1a      	blt.n	8017b9c <_strtol_l.isra.0+0xc4>
 8017b66:	fb05 4503 	mla	r5, r5, r3, r4
 8017b6a:	2601      	movs	r6, #1
 8017b6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017b70:	e7eb      	b.n	8017b4a <_strtol_l.isra.0+0x72>
 8017b72:	2c2b      	cmp	r4, #43	; 0x2b
 8017b74:	bf08      	it	eq
 8017b76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017b7a:	46a8      	mov	r8, r5
 8017b7c:	bf08      	it	eq
 8017b7e:	f106 0e02 	addeq.w	lr, r6, #2
 8017b82:	e7c7      	b.n	8017b14 <_strtol_l.isra.0+0x3c>
 8017b84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017b88:	2f19      	cmp	r7, #25
 8017b8a:	d801      	bhi.n	8017b90 <_strtol_l.isra.0+0xb8>
 8017b8c:	3c37      	subs	r4, #55	; 0x37
 8017b8e:	e7e1      	b.n	8017b54 <_strtol_l.isra.0+0x7c>
 8017b90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017b94:	2f19      	cmp	r7, #25
 8017b96:	d804      	bhi.n	8017ba2 <_strtol_l.isra.0+0xca>
 8017b98:	3c57      	subs	r4, #87	; 0x57
 8017b9a:	e7db      	b.n	8017b54 <_strtol_l.isra.0+0x7c>
 8017b9c:	f04f 36ff 	mov.w	r6, #4294967295
 8017ba0:	e7e4      	b.n	8017b6c <_strtol_l.isra.0+0x94>
 8017ba2:	2e00      	cmp	r6, #0
 8017ba4:	da05      	bge.n	8017bb2 <_strtol_l.isra.0+0xda>
 8017ba6:	2322      	movs	r3, #34	; 0x22
 8017ba8:	6003      	str	r3, [r0, #0]
 8017baa:	4665      	mov	r5, ip
 8017bac:	b942      	cbnz	r2, 8017bc0 <_strtol_l.isra.0+0xe8>
 8017bae:	4628      	mov	r0, r5
 8017bb0:	e79d      	b.n	8017aee <_strtol_l.isra.0+0x16>
 8017bb2:	f1b8 0f00 	cmp.w	r8, #0
 8017bb6:	d000      	beq.n	8017bba <_strtol_l.isra.0+0xe2>
 8017bb8:	426d      	negs	r5, r5
 8017bba:	2a00      	cmp	r2, #0
 8017bbc:	d0f7      	beq.n	8017bae <_strtol_l.isra.0+0xd6>
 8017bbe:	b10e      	cbz	r6, 8017bc4 <_strtol_l.isra.0+0xec>
 8017bc0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017bc4:	6011      	str	r1, [r2, #0]
 8017bc6:	e7f2      	b.n	8017bae <_strtol_l.isra.0+0xd6>
 8017bc8:	2430      	movs	r4, #48	; 0x30
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d1b3      	bne.n	8017b36 <_strtol_l.isra.0+0x5e>
 8017bce:	2308      	movs	r3, #8
 8017bd0:	e7b1      	b.n	8017b36 <_strtol_l.isra.0+0x5e>
 8017bd2:	2c30      	cmp	r4, #48	; 0x30
 8017bd4:	d0a4      	beq.n	8017b20 <_strtol_l.isra.0+0x48>
 8017bd6:	230a      	movs	r3, #10
 8017bd8:	e7ad      	b.n	8017b36 <_strtol_l.isra.0+0x5e>
 8017bda:	bf00      	nop
 8017bdc:	0801daeb 	.word	0x0801daeb

08017be0 <_strtol_r>:
 8017be0:	f7ff bf7a 	b.w	8017ad8 <_strtol_l.isra.0>

08017be4 <__assert_func>:
 8017be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017be6:	4614      	mov	r4, r2
 8017be8:	461a      	mov	r2, r3
 8017bea:	4b09      	ldr	r3, [pc, #36]	; (8017c10 <__assert_func+0x2c>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	4605      	mov	r5, r0
 8017bf0:	68d8      	ldr	r0, [r3, #12]
 8017bf2:	b14c      	cbz	r4, 8017c08 <__assert_func+0x24>
 8017bf4:	4b07      	ldr	r3, [pc, #28]	; (8017c14 <__assert_func+0x30>)
 8017bf6:	9100      	str	r1, [sp, #0]
 8017bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bfc:	4906      	ldr	r1, [pc, #24]	; (8017c18 <__assert_func+0x34>)
 8017bfe:	462b      	mov	r3, r5
 8017c00:	f000 fef8 	bl	80189f4 <fiprintf>
 8017c04:	f002 fc20 	bl	801a448 <abort>
 8017c08:	4b04      	ldr	r3, [pc, #16]	; (8017c1c <__assert_func+0x38>)
 8017c0a:	461c      	mov	r4, r3
 8017c0c:	e7f3      	b.n	8017bf6 <__assert_func+0x12>
 8017c0e:	bf00      	nop
 8017c10:	2000005c 	.word	0x2000005c
 8017c14:	0801dcf0 	.word	0x0801dcf0
 8017c18:	0801dcfd 	.word	0x0801dcfd
 8017c1c:	0801dd2b 	.word	0x0801dd2b

08017c20 <quorem>:
 8017c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	6903      	ldr	r3, [r0, #16]
 8017c26:	690c      	ldr	r4, [r1, #16]
 8017c28:	42a3      	cmp	r3, r4
 8017c2a:	4607      	mov	r7, r0
 8017c2c:	f2c0 8081 	blt.w	8017d32 <quorem+0x112>
 8017c30:	3c01      	subs	r4, #1
 8017c32:	f101 0814 	add.w	r8, r1, #20
 8017c36:	f100 0514 	add.w	r5, r0, #20
 8017c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c3e:	9301      	str	r3, [sp, #4]
 8017c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017c50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017c54:	fbb2 f6f3 	udiv	r6, r2, r3
 8017c58:	d331      	bcc.n	8017cbe <quorem+0x9e>
 8017c5a:	f04f 0e00 	mov.w	lr, #0
 8017c5e:	4640      	mov	r0, r8
 8017c60:	46ac      	mov	ip, r5
 8017c62:	46f2      	mov	sl, lr
 8017c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c68:	b293      	uxth	r3, r2
 8017c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8017c6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017c72:	b29b      	uxth	r3, r3
 8017c74:	ebaa 0303 	sub.w	r3, sl, r3
 8017c78:	0c12      	lsrs	r2, r2, #16
 8017c7a:	f8dc a000 	ldr.w	sl, [ip]
 8017c7e:	fb06 e202 	mla	r2, r6, r2, lr
 8017c82:	fa13 f38a 	uxtah	r3, r3, sl
 8017c86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017c8a:	fa1f fa82 	uxth.w	sl, r2
 8017c8e:	f8dc 2000 	ldr.w	r2, [ip]
 8017c92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017c96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ca0:	4581      	cmp	r9, r0
 8017ca2:	f84c 3b04 	str.w	r3, [ip], #4
 8017ca6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017caa:	d2db      	bcs.n	8017c64 <quorem+0x44>
 8017cac:	f855 300b 	ldr.w	r3, [r5, fp]
 8017cb0:	b92b      	cbnz	r3, 8017cbe <quorem+0x9e>
 8017cb2:	9b01      	ldr	r3, [sp, #4]
 8017cb4:	3b04      	subs	r3, #4
 8017cb6:	429d      	cmp	r5, r3
 8017cb8:	461a      	mov	r2, r3
 8017cba:	d32e      	bcc.n	8017d1a <quorem+0xfa>
 8017cbc:	613c      	str	r4, [r7, #16]
 8017cbe:	4638      	mov	r0, r7
 8017cc0:	f001 fd22 	bl	8019708 <__mcmp>
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	db24      	blt.n	8017d12 <quorem+0xf2>
 8017cc8:	3601      	adds	r6, #1
 8017cca:	4628      	mov	r0, r5
 8017ccc:	f04f 0c00 	mov.w	ip, #0
 8017cd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8017cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8017cd8:	b293      	uxth	r3, r2
 8017cda:	ebac 0303 	sub.w	r3, ip, r3
 8017cde:	0c12      	lsrs	r2, r2, #16
 8017ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8017ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017cf2:	45c1      	cmp	r9, r8
 8017cf4:	f840 3b04 	str.w	r3, [r0], #4
 8017cf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017cfc:	d2e8      	bcs.n	8017cd0 <quorem+0xb0>
 8017cfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d06:	b922      	cbnz	r2, 8017d12 <quorem+0xf2>
 8017d08:	3b04      	subs	r3, #4
 8017d0a:	429d      	cmp	r5, r3
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	d30a      	bcc.n	8017d26 <quorem+0x106>
 8017d10:	613c      	str	r4, [r7, #16]
 8017d12:	4630      	mov	r0, r6
 8017d14:	b003      	add	sp, #12
 8017d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1a:	6812      	ldr	r2, [r2, #0]
 8017d1c:	3b04      	subs	r3, #4
 8017d1e:	2a00      	cmp	r2, #0
 8017d20:	d1cc      	bne.n	8017cbc <quorem+0x9c>
 8017d22:	3c01      	subs	r4, #1
 8017d24:	e7c7      	b.n	8017cb6 <quorem+0x96>
 8017d26:	6812      	ldr	r2, [r2, #0]
 8017d28:	3b04      	subs	r3, #4
 8017d2a:	2a00      	cmp	r2, #0
 8017d2c:	d1f0      	bne.n	8017d10 <quorem+0xf0>
 8017d2e:	3c01      	subs	r4, #1
 8017d30:	e7eb      	b.n	8017d0a <quorem+0xea>
 8017d32:	2000      	movs	r0, #0
 8017d34:	e7ee      	b.n	8017d14 <quorem+0xf4>
	...

08017d38 <_dtoa_r>:
 8017d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3c:	ec59 8b10 	vmov	r8, r9, d0
 8017d40:	b095      	sub	sp, #84	; 0x54
 8017d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017d44:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8017d46:	9107      	str	r1, [sp, #28]
 8017d48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017d4c:	4606      	mov	r6, r0
 8017d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8017d50:	9310      	str	r3, [sp, #64]	; 0x40
 8017d52:	b975      	cbnz	r5, 8017d72 <_dtoa_r+0x3a>
 8017d54:	2010      	movs	r0, #16
 8017d56:	f001 f9f5 	bl	8019144 <malloc>
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8017d5e:	b920      	cbnz	r0, 8017d6a <_dtoa_r+0x32>
 8017d60:	4bab      	ldr	r3, [pc, #684]	; (8018010 <_dtoa_r+0x2d8>)
 8017d62:	21ea      	movs	r1, #234	; 0xea
 8017d64:	48ab      	ldr	r0, [pc, #684]	; (8018014 <_dtoa_r+0x2dc>)
 8017d66:	f7ff ff3d 	bl	8017be4 <__assert_func>
 8017d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d6e:	6005      	str	r5, [r0, #0]
 8017d70:	60c5      	str	r5, [r0, #12]
 8017d72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017d74:	6819      	ldr	r1, [r3, #0]
 8017d76:	b151      	cbz	r1, 8017d8e <_dtoa_r+0x56>
 8017d78:	685a      	ldr	r2, [r3, #4]
 8017d7a:	604a      	str	r2, [r1, #4]
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	4093      	lsls	r3, r2
 8017d80:	608b      	str	r3, [r1, #8]
 8017d82:	4630      	mov	r0, r6
 8017d84:	f001 fa38 	bl	80191f8 <_Bfree>
 8017d88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	601a      	str	r2, [r3, #0]
 8017d8e:	f1b9 0300 	subs.w	r3, r9, #0
 8017d92:	bfbb      	ittet	lt
 8017d94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d98:	9303      	strlt	r3, [sp, #12]
 8017d9a:	2300      	movge	r3, #0
 8017d9c:	2201      	movlt	r2, #1
 8017d9e:	bfac      	ite	ge
 8017da0:	6023      	strge	r3, [r4, #0]
 8017da2:	6022      	strlt	r2, [r4, #0]
 8017da4:	4b9c      	ldr	r3, [pc, #624]	; (8018018 <_dtoa_r+0x2e0>)
 8017da6:	9c03      	ldr	r4, [sp, #12]
 8017da8:	43a3      	bics	r3, r4
 8017daa:	d11a      	bne.n	8017de2 <_dtoa_r+0xaa>
 8017dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8017db2:	6013      	str	r3, [r2, #0]
 8017db4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017db8:	ea53 0308 	orrs.w	r3, r3, r8
 8017dbc:	f000 8512 	beq.w	80187e4 <_dtoa_r+0xaac>
 8017dc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017dc2:	b953      	cbnz	r3, 8017dda <_dtoa_r+0xa2>
 8017dc4:	4b95      	ldr	r3, [pc, #596]	; (801801c <_dtoa_r+0x2e4>)
 8017dc6:	e01f      	b.n	8017e08 <_dtoa_r+0xd0>
 8017dc8:	4b95      	ldr	r3, [pc, #596]	; (8018020 <_dtoa_r+0x2e8>)
 8017dca:	9300      	str	r3, [sp, #0]
 8017dcc:	3308      	adds	r3, #8
 8017dce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017dd0:	6013      	str	r3, [r2, #0]
 8017dd2:	9800      	ldr	r0, [sp, #0]
 8017dd4:	b015      	add	sp, #84	; 0x54
 8017dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dda:	4b90      	ldr	r3, [pc, #576]	; (801801c <_dtoa_r+0x2e4>)
 8017ddc:	9300      	str	r3, [sp, #0]
 8017dde:	3303      	adds	r3, #3
 8017de0:	e7f5      	b.n	8017dce <_dtoa_r+0x96>
 8017de2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017de6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017df2:	d10b      	bne.n	8017e0c <_dtoa_r+0xd4>
 8017df4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017df6:	2301      	movs	r3, #1
 8017df8:	6013      	str	r3, [r2, #0]
 8017dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 84ee 	beq.w	80187de <_dtoa_r+0xaa6>
 8017e02:	4888      	ldr	r0, [pc, #544]	; (8018024 <_dtoa_r+0x2ec>)
 8017e04:	6018      	str	r0, [r3, #0]
 8017e06:	1e43      	subs	r3, r0, #1
 8017e08:	9300      	str	r3, [sp, #0]
 8017e0a:	e7e2      	b.n	8017dd2 <_dtoa_r+0x9a>
 8017e0c:	a913      	add	r1, sp, #76	; 0x4c
 8017e0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017e12:	aa12      	add	r2, sp, #72	; 0x48
 8017e14:	4630      	mov	r0, r6
 8017e16:	f001 fd97 	bl	8019948 <__d2b>
 8017e1a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017e1e:	4605      	mov	r5, r0
 8017e20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017e22:	2900      	cmp	r1, #0
 8017e24:	d047      	beq.n	8017eb6 <_dtoa_r+0x17e>
 8017e26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017e28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017e30:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8017e34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017e38:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017e3c:	2400      	movs	r4, #0
 8017e3e:	ec43 2b16 	vmov	d6, r2, r3
 8017e42:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017e46:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8017ff8 <_dtoa_r+0x2c0>
 8017e4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017e4e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8018000 <_dtoa_r+0x2c8>
 8017e52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017e56:	eeb0 7b46 	vmov.f64	d7, d6
 8017e5a:	ee06 1a90 	vmov	s13, r1
 8017e5e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8017e62:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018008 <_dtoa_r+0x2d0>
 8017e66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017e6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017e6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e76:	ee16 ba90 	vmov	fp, s13
 8017e7a:	9411      	str	r4, [sp, #68]	; 0x44
 8017e7c:	d508      	bpl.n	8017e90 <_dtoa_r+0x158>
 8017e7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017e82:	eeb4 6b47 	vcmp.f64	d6, d7
 8017e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e8a:	bf18      	it	ne
 8017e8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017e90:	f1bb 0f16 	cmp.w	fp, #22
 8017e94:	d832      	bhi.n	8017efc <_dtoa_r+0x1c4>
 8017e96:	4b64      	ldr	r3, [pc, #400]	; (8018028 <_dtoa_r+0x2f0>)
 8017e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017e9c:	ed93 7b00 	vldr	d7, [r3]
 8017ea0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eac:	d501      	bpl.n	8017eb2 <_dtoa_r+0x17a>
 8017eae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	e023      	b.n	8017efe <_dtoa_r+0x1c6>
 8017eb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017eb8:	4401      	add	r1, r0
 8017eba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017ebe:	2b20      	cmp	r3, #32
 8017ec0:	bfc3      	ittte	gt
 8017ec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017ec6:	fa04 f303 	lslgt.w	r3, r4, r3
 8017eca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017ece:	f1c3 0320 	rsble	r3, r3, #32
 8017ed2:	bfc6      	itte	gt
 8017ed4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017ed8:	ea43 0308 	orrgt.w	r3, r3, r8
 8017edc:	fa08 f303 	lslle.w	r3, r8, r3
 8017ee0:	ee07 3a90 	vmov	s15, r3
 8017ee4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017ee8:	3901      	subs	r1, #1
 8017eea:	ed8d 7b00 	vstr	d7, [sp]
 8017eee:	9c01      	ldr	r4, [sp, #4]
 8017ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ef4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017ef8:	2401      	movs	r4, #1
 8017efa:	e7a0      	b.n	8017e3e <_dtoa_r+0x106>
 8017efc:	2301      	movs	r3, #1
 8017efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f00:	1a43      	subs	r3, r0, r1
 8017f02:	1e5a      	subs	r2, r3, #1
 8017f04:	bf45      	ittet	mi
 8017f06:	f1c3 0301 	rsbmi	r3, r3, #1
 8017f0a:	9305      	strmi	r3, [sp, #20]
 8017f0c:	2300      	movpl	r3, #0
 8017f0e:	2300      	movmi	r3, #0
 8017f10:	9206      	str	r2, [sp, #24]
 8017f12:	bf54      	ite	pl
 8017f14:	9305      	strpl	r3, [sp, #20]
 8017f16:	9306      	strmi	r3, [sp, #24]
 8017f18:	f1bb 0f00 	cmp.w	fp, #0
 8017f1c:	db18      	blt.n	8017f50 <_dtoa_r+0x218>
 8017f1e:	9b06      	ldr	r3, [sp, #24]
 8017f20:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8017f24:	445b      	add	r3, fp
 8017f26:	9306      	str	r3, [sp, #24]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	9a07      	ldr	r2, [sp, #28]
 8017f2c:	2a09      	cmp	r2, #9
 8017f2e:	d849      	bhi.n	8017fc4 <_dtoa_r+0x28c>
 8017f30:	2a05      	cmp	r2, #5
 8017f32:	bfc4      	itt	gt
 8017f34:	3a04      	subgt	r2, #4
 8017f36:	9207      	strgt	r2, [sp, #28]
 8017f38:	9a07      	ldr	r2, [sp, #28]
 8017f3a:	f1a2 0202 	sub.w	r2, r2, #2
 8017f3e:	bfcc      	ite	gt
 8017f40:	2400      	movgt	r4, #0
 8017f42:	2401      	movle	r4, #1
 8017f44:	2a03      	cmp	r2, #3
 8017f46:	d848      	bhi.n	8017fda <_dtoa_r+0x2a2>
 8017f48:	e8df f002 	tbb	[pc, r2]
 8017f4c:	3a2c2e0b 	.word	0x3a2c2e0b
 8017f50:	9b05      	ldr	r3, [sp, #20]
 8017f52:	2200      	movs	r2, #0
 8017f54:	eba3 030b 	sub.w	r3, r3, fp
 8017f58:	9305      	str	r3, [sp, #20]
 8017f5a:	920e      	str	r2, [sp, #56]	; 0x38
 8017f5c:	f1cb 0300 	rsb	r3, fp, #0
 8017f60:	e7e3      	b.n	8017f2a <_dtoa_r+0x1f2>
 8017f62:	2200      	movs	r2, #0
 8017f64:	9208      	str	r2, [sp, #32]
 8017f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f68:	2a00      	cmp	r2, #0
 8017f6a:	dc39      	bgt.n	8017fe0 <_dtoa_r+0x2a8>
 8017f6c:	f04f 0a01 	mov.w	sl, #1
 8017f70:	46d1      	mov	r9, sl
 8017f72:	4652      	mov	r2, sl
 8017f74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017f78:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017f7a:	2100      	movs	r1, #0
 8017f7c:	6079      	str	r1, [r7, #4]
 8017f7e:	2004      	movs	r0, #4
 8017f80:	f100 0c14 	add.w	ip, r0, #20
 8017f84:	4594      	cmp	ip, r2
 8017f86:	6879      	ldr	r1, [r7, #4]
 8017f88:	d92f      	bls.n	8017fea <_dtoa_r+0x2b2>
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8017f8e:	f001 f8f3 	bl	8019178 <_Balloc>
 8017f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f94:	9000      	str	r0, [sp, #0]
 8017f96:	4602      	mov	r2, r0
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d149      	bne.n	8018030 <_dtoa_r+0x2f8>
 8017f9c:	4b23      	ldr	r3, [pc, #140]	; (801802c <_dtoa_r+0x2f4>)
 8017f9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017fa2:	e6df      	b.n	8017d64 <_dtoa_r+0x2c>
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	e7dd      	b.n	8017f64 <_dtoa_r+0x22c>
 8017fa8:	2200      	movs	r2, #0
 8017faa:	9208      	str	r2, [sp, #32]
 8017fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fae:	eb0b 0a02 	add.w	sl, fp, r2
 8017fb2:	f10a 0901 	add.w	r9, sl, #1
 8017fb6:	464a      	mov	r2, r9
 8017fb8:	2a01      	cmp	r2, #1
 8017fba:	bfb8      	it	lt
 8017fbc:	2201      	movlt	r2, #1
 8017fbe:	e7db      	b.n	8017f78 <_dtoa_r+0x240>
 8017fc0:	2201      	movs	r2, #1
 8017fc2:	e7f2      	b.n	8017faa <_dtoa_r+0x272>
 8017fc4:	2401      	movs	r4, #1
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8017fd0:	2100      	movs	r1, #0
 8017fd2:	46d1      	mov	r9, sl
 8017fd4:	2212      	movs	r2, #18
 8017fd6:	9109      	str	r1, [sp, #36]	; 0x24
 8017fd8:	e7ce      	b.n	8017f78 <_dtoa_r+0x240>
 8017fda:	2201      	movs	r2, #1
 8017fdc:	9208      	str	r2, [sp, #32]
 8017fde:	e7f5      	b.n	8017fcc <_dtoa_r+0x294>
 8017fe0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8017fe4:	46d1      	mov	r9, sl
 8017fe6:	4652      	mov	r2, sl
 8017fe8:	e7c6      	b.n	8017f78 <_dtoa_r+0x240>
 8017fea:	3101      	adds	r1, #1
 8017fec:	6079      	str	r1, [r7, #4]
 8017fee:	0040      	lsls	r0, r0, #1
 8017ff0:	e7c6      	b.n	8017f80 <_dtoa_r+0x248>
 8017ff2:	bf00      	nop
 8017ff4:	f3af 8000 	nop.w
 8017ff8:	636f4361 	.word	0x636f4361
 8017ffc:	3fd287a7 	.word	0x3fd287a7
 8018000:	8b60c8b3 	.word	0x8b60c8b3
 8018004:	3fc68a28 	.word	0x3fc68a28
 8018008:	509f79fb 	.word	0x509f79fb
 801800c:	3fd34413 	.word	0x3fd34413
 8018010:	0801dc29 	.word	0x0801dc29
 8018014:	0801dd39 	.word	0x0801dd39
 8018018:	7ff00000 	.word	0x7ff00000
 801801c:	0801dd35 	.word	0x0801dd35
 8018020:	0801dd2c 	.word	0x0801dd2c
 8018024:	0801dc01 	.word	0x0801dc01
 8018028:	0801df18 	.word	0x0801df18
 801802c:	0801dd98 	.word	0x0801dd98
 8018030:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018032:	9900      	ldr	r1, [sp, #0]
 8018034:	6011      	str	r1, [r2, #0]
 8018036:	f1b9 0f0e 	cmp.w	r9, #14
 801803a:	d872      	bhi.n	8018122 <_dtoa_r+0x3ea>
 801803c:	2c00      	cmp	r4, #0
 801803e:	d070      	beq.n	8018122 <_dtoa_r+0x3ea>
 8018040:	f1bb 0f00 	cmp.w	fp, #0
 8018044:	f340 80a6 	ble.w	8018194 <_dtoa_r+0x45c>
 8018048:	49ca      	ldr	r1, [pc, #808]	; (8018374 <_dtoa_r+0x63c>)
 801804a:	f00b 020f 	and.w	r2, fp, #15
 801804e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018052:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018056:	ed92 7b00 	vldr	d7, [r2]
 801805a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801805e:	f000 808d 	beq.w	801817c <_dtoa_r+0x444>
 8018062:	4ac5      	ldr	r2, [pc, #788]	; (8018378 <_dtoa_r+0x640>)
 8018064:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8018068:	ed92 6b08 	vldr	d6, [r2, #32]
 801806c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8018070:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018074:	f001 010f 	and.w	r1, r1, #15
 8018078:	2203      	movs	r2, #3
 801807a:	48bf      	ldr	r0, [pc, #764]	; (8018378 <_dtoa_r+0x640>)
 801807c:	2900      	cmp	r1, #0
 801807e:	d17f      	bne.n	8018180 <_dtoa_r+0x448>
 8018080:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018084:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018088:	ed8d 7b02 	vstr	d7, [sp, #8]
 801808c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801808e:	2900      	cmp	r1, #0
 8018090:	f000 80b2 	beq.w	80181f8 <_dtoa_r+0x4c0>
 8018094:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018098:	ed9d 7b02 	vldr	d7, [sp, #8]
 801809c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80180a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a4:	f140 80a8 	bpl.w	80181f8 <_dtoa_r+0x4c0>
 80180a8:	f1b9 0f00 	cmp.w	r9, #0
 80180ac:	f000 80a4 	beq.w	80181f8 <_dtoa_r+0x4c0>
 80180b0:	f1ba 0f00 	cmp.w	sl, #0
 80180b4:	dd31      	ble.n	801811a <_dtoa_r+0x3e2>
 80180b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80180ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80180be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80180c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80180c6:	3201      	adds	r2, #1
 80180c8:	4650      	mov	r0, sl
 80180ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80180ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80180d2:	ee07 2a90 	vmov	s15, r2
 80180d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80180da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80180de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80180e2:	9c03      	ldr	r4, [sp, #12]
 80180e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80180e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80180ec:	2800      	cmp	r0, #0
 80180ee:	f040 8086 	bne.w	80181fe <_dtoa_r+0x4c6>
 80180f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80180f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80180fa:	ec42 1b17 	vmov	d7, r1, r2
 80180fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018106:	f300 8272 	bgt.w	80185ee <_dtoa_r+0x8b6>
 801810a:	eeb1 7b47 	vneg.f64	d7, d7
 801810e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018116:	f100 8267 	bmi.w	80185e8 <_dtoa_r+0x8b0>
 801811a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801811e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018122:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018124:	2a00      	cmp	r2, #0
 8018126:	f2c0 8129 	blt.w	801837c <_dtoa_r+0x644>
 801812a:	f1bb 0f0e 	cmp.w	fp, #14
 801812e:	f300 8125 	bgt.w	801837c <_dtoa_r+0x644>
 8018132:	4b90      	ldr	r3, [pc, #576]	; (8018374 <_dtoa_r+0x63c>)
 8018134:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018138:	ed93 6b00 	vldr	d6, [r3]
 801813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801813e:	2b00      	cmp	r3, #0
 8018140:	f280 80c3 	bge.w	80182ca <_dtoa_r+0x592>
 8018144:	f1b9 0f00 	cmp.w	r9, #0
 8018148:	f300 80bf 	bgt.w	80182ca <_dtoa_r+0x592>
 801814c:	f040 824c 	bne.w	80185e8 <_dtoa_r+0x8b0>
 8018150:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018154:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018158:	ed9d 7b02 	vldr	d7, [sp, #8]
 801815c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018164:	464c      	mov	r4, r9
 8018166:	464f      	mov	r7, r9
 8018168:	f280 8222 	bge.w	80185b0 <_dtoa_r+0x878>
 801816c:	f8dd 8000 	ldr.w	r8, [sp]
 8018170:	2331      	movs	r3, #49	; 0x31
 8018172:	f808 3b01 	strb.w	r3, [r8], #1
 8018176:	f10b 0b01 	add.w	fp, fp, #1
 801817a:	e21e      	b.n	80185ba <_dtoa_r+0x882>
 801817c:	2202      	movs	r2, #2
 801817e:	e77c      	b.n	801807a <_dtoa_r+0x342>
 8018180:	07cc      	lsls	r4, r1, #31
 8018182:	d504      	bpl.n	801818e <_dtoa_r+0x456>
 8018184:	ed90 6b00 	vldr	d6, [r0]
 8018188:	3201      	adds	r2, #1
 801818a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801818e:	1049      	asrs	r1, r1, #1
 8018190:	3008      	adds	r0, #8
 8018192:	e773      	b.n	801807c <_dtoa_r+0x344>
 8018194:	d02e      	beq.n	80181f4 <_dtoa_r+0x4bc>
 8018196:	f1cb 0100 	rsb	r1, fp, #0
 801819a:	4a76      	ldr	r2, [pc, #472]	; (8018374 <_dtoa_r+0x63c>)
 801819c:	f001 000f 	and.w	r0, r1, #15
 80181a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80181a4:	ed92 7b00 	vldr	d7, [r2]
 80181a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80181ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80181b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80181b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80181b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80181bc:	486e      	ldr	r0, [pc, #440]	; (8018378 <_dtoa_r+0x640>)
 80181be:	1109      	asrs	r1, r1, #4
 80181c0:	2400      	movs	r4, #0
 80181c2:	2202      	movs	r2, #2
 80181c4:	b939      	cbnz	r1, 80181d6 <_dtoa_r+0x49e>
 80181c6:	2c00      	cmp	r4, #0
 80181c8:	f43f af60 	beq.w	801808c <_dtoa_r+0x354>
 80181cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80181d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181d4:	e75a      	b.n	801808c <_dtoa_r+0x354>
 80181d6:	07cf      	lsls	r7, r1, #31
 80181d8:	d509      	bpl.n	80181ee <_dtoa_r+0x4b6>
 80181da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80181de:	ed90 7b00 	vldr	d7, [r0]
 80181e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80181e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80181ea:	3201      	adds	r2, #1
 80181ec:	2401      	movs	r4, #1
 80181ee:	1049      	asrs	r1, r1, #1
 80181f0:	3008      	adds	r0, #8
 80181f2:	e7e7      	b.n	80181c4 <_dtoa_r+0x48c>
 80181f4:	2202      	movs	r2, #2
 80181f6:	e749      	b.n	801808c <_dtoa_r+0x354>
 80181f8:	465f      	mov	r7, fp
 80181fa:	4648      	mov	r0, r9
 80181fc:	e765      	b.n	80180ca <_dtoa_r+0x392>
 80181fe:	ec42 1b17 	vmov	d7, r1, r2
 8018202:	4a5c      	ldr	r2, [pc, #368]	; (8018374 <_dtoa_r+0x63c>)
 8018204:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018208:	ed12 4b02 	vldr	d4, [r2, #-8]
 801820c:	9a00      	ldr	r2, [sp, #0]
 801820e:	1814      	adds	r4, r2, r0
 8018210:	9a08      	ldr	r2, [sp, #32]
 8018212:	b352      	cbz	r2, 801826a <_dtoa_r+0x532>
 8018214:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018218:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801821c:	f8dd 8000 	ldr.w	r8, [sp]
 8018220:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018224:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018228:	ee35 7b47 	vsub.f64	d7, d5, d7
 801822c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018230:	ee14 2a90 	vmov	r2, s9
 8018234:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018238:	3230      	adds	r2, #48	; 0x30
 801823a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801823e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018246:	f808 2b01 	strb.w	r2, [r8], #1
 801824a:	d439      	bmi.n	80182c0 <_dtoa_r+0x588>
 801824c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018250:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018258:	d472      	bmi.n	8018340 <_dtoa_r+0x608>
 801825a:	45a0      	cmp	r8, r4
 801825c:	f43f af5d 	beq.w	801811a <_dtoa_r+0x3e2>
 8018260:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018264:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018268:	e7e0      	b.n	801822c <_dtoa_r+0x4f4>
 801826a:	f8dd 8000 	ldr.w	r8, [sp]
 801826e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018272:	4621      	mov	r1, r4
 8018274:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018278:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801827c:	ee14 2a90 	vmov	r2, s9
 8018280:	3230      	adds	r2, #48	; 0x30
 8018282:	f808 2b01 	strb.w	r2, [r8], #1
 8018286:	45a0      	cmp	r8, r4
 8018288:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801828c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018290:	d118      	bne.n	80182c4 <_dtoa_r+0x58c>
 8018292:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018296:	ee37 4b05 	vadd.f64	d4, d7, d5
 801829a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a2:	dc4d      	bgt.n	8018340 <_dtoa_r+0x608>
 80182a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80182a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80182ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182b0:	f57f af33 	bpl.w	801811a <_dtoa_r+0x3e2>
 80182b4:	4688      	mov	r8, r1
 80182b6:	3901      	subs	r1, #1
 80182b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80182bc:	2b30      	cmp	r3, #48	; 0x30
 80182be:	d0f9      	beq.n	80182b4 <_dtoa_r+0x57c>
 80182c0:	46bb      	mov	fp, r7
 80182c2:	e02a      	b.n	801831a <_dtoa_r+0x5e2>
 80182c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80182c8:	e7d6      	b.n	8018278 <_dtoa_r+0x540>
 80182ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80182d2:	f8dd 8000 	ldr.w	r8, [sp]
 80182d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80182da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80182de:	ee15 3a10 	vmov	r3, s10
 80182e2:	3330      	adds	r3, #48	; 0x30
 80182e4:	f808 3b01 	strb.w	r3, [r8], #1
 80182e8:	9b00      	ldr	r3, [sp, #0]
 80182ea:	eba8 0303 	sub.w	r3, r8, r3
 80182ee:	4599      	cmp	r9, r3
 80182f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80182f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80182f8:	d133      	bne.n	8018362 <_dtoa_r+0x62a>
 80182fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80182fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018306:	dc1a      	bgt.n	801833e <_dtoa_r+0x606>
 8018308:	eeb4 7b46 	vcmp.f64	d7, d6
 801830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018310:	d103      	bne.n	801831a <_dtoa_r+0x5e2>
 8018312:	ee15 3a10 	vmov	r3, s10
 8018316:	07d9      	lsls	r1, r3, #31
 8018318:	d411      	bmi.n	801833e <_dtoa_r+0x606>
 801831a:	4629      	mov	r1, r5
 801831c:	4630      	mov	r0, r6
 801831e:	f000 ff6b 	bl	80191f8 <_Bfree>
 8018322:	2300      	movs	r3, #0
 8018324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018326:	f888 3000 	strb.w	r3, [r8]
 801832a:	f10b 0301 	add.w	r3, fp, #1
 801832e:	6013      	str	r3, [r2, #0]
 8018330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018332:	2b00      	cmp	r3, #0
 8018334:	f43f ad4d 	beq.w	8017dd2 <_dtoa_r+0x9a>
 8018338:	f8c3 8000 	str.w	r8, [r3]
 801833c:	e549      	b.n	8017dd2 <_dtoa_r+0x9a>
 801833e:	465f      	mov	r7, fp
 8018340:	4643      	mov	r3, r8
 8018342:	4698      	mov	r8, r3
 8018344:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018348:	2a39      	cmp	r2, #57	; 0x39
 801834a:	d106      	bne.n	801835a <_dtoa_r+0x622>
 801834c:	9a00      	ldr	r2, [sp, #0]
 801834e:	429a      	cmp	r2, r3
 8018350:	d1f7      	bne.n	8018342 <_dtoa_r+0x60a>
 8018352:	9900      	ldr	r1, [sp, #0]
 8018354:	2230      	movs	r2, #48	; 0x30
 8018356:	3701      	adds	r7, #1
 8018358:	700a      	strb	r2, [r1, #0]
 801835a:	781a      	ldrb	r2, [r3, #0]
 801835c:	3201      	adds	r2, #1
 801835e:	701a      	strb	r2, [r3, #0]
 8018360:	e7ae      	b.n	80182c0 <_dtoa_r+0x588>
 8018362:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801836e:	d1b2      	bne.n	80182d6 <_dtoa_r+0x59e>
 8018370:	e7d3      	b.n	801831a <_dtoa_r+0x5e2>
 8018372:	bf00      	nop
 8018374:	0801df18 	.word	0x0801df18
 8018378:	0801def0 	.word	0x0801def0
 801837c:	9908      	ldr	r1, [sp, #32]
 801837e:	2900      	cmp	r1, #0
 8018380:	f000 80d1 	beq.w	8018526 <_dtoa_r+0x7ee>
 8018384:	9907      	ldr	r1, [sp, #28]
 8018386:	2901      	cmp	r1, #1
 8018388:	f300 80b4 	bgt.w	80184f4 <_dtoa_r+0x7bc>
 801838c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801838e:	2900      	cmp	r1, #0
 8018390:	f000 80ac 	beq.w	80184ec <_dtoa_r+0x7b4>
 8018394:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018398:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801839c:	461c      	mov	r4, r3
 801839e:	930a      	str	r3, [sp, #40]	; 0x28
 80183a0:	9b05      	ldr	r3, [sp, #20]
 80183a2:	4413      	add	r3, r2
 80183a4:	9305      	str	r3, [sp, #20]
 80183a6:	9b06      	ldr	r3, [sp, #24]
 80183a8:	2101      	movs	r1, #1
 80183aa:	4413      	add	r3, r2
 80183ac:	4630      	mov	r0, r6
 80183ae:	9306      	str	r3, [sp, #24]
 80183b0:	f001 f828 	bl	8019404 <__i2b>
 80183b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183b6:	4607      	mov	r7, r0
 80183b8:	f1b8 0f00 	cmp.w	r8, #0
 80183bc:	dd0d      	ble.n	80183da <_dtoa_r+0x6a2>
 80183be:	9a06      	ldr	r2, [sp, #24]
 80183c0:	2a00      	cmp	r2, #0
 80183c2:	dd0a      	ble.n	80183da <_dtoa_r+0x6a2>
 80183c4:	4542      	cmp	r2, r8
 80183c6:	9905      	ldr	r1, [sp, #20]
 80183c8:	bfa8      	it	ge
 80183ca:	4642      	movge	r2, r8
 80183cc:	1a89      	subs	r1, r1, r2
 80183ce:	9105      	str	r1, [sp, #20]
 80183d0:	9906      	ldr	r1, [sp, #24]
 80183d2:	eba8 0802 	sub.w	r8, r8, r2
 80183d6:	1a8a      	subs	r2, r1, r2
 80183d8:	9206      	str	r2, [sp, #24]
 80183da:	b303      	cbz	r3, 801841e <_dtoa_r+0x6e6>
 80183dc:	9a08      	ldr	r2, [sp, #32]
 80183de:	2a00      	cmp	r2, #0
 80183e0:	f000 80a6 	beq.w	8018530 <_dtoa_r+0x7f8>
 80183e4:	2c00      	cmp	r4, #0
 80183e6:	dd13      	ble.n	8018410 <_dtoa_r+0x6d8>
 80183e8:	4639      	mov	r1, r7
 80183ea:	4622      	mov	r2, r4
 80183ec:	4630      	mov	r0, r6
 80183ee:	930c      	str	r3, [sp, #48]	; 0x30
 80183f0:	f001 f8c4 	bl	801957c <__pow5mult>
 80183f4:	462a      	mov	r2, r5
 80183f6:	4601      	mov	r1, r0
 80183f8:	4607      	mov	r7, r0
 80183fa:	4630      	mov	r0, r6
 80183fc:	f001 f818 	bl	8019430 <__multiply>
 8018400:	4629      	mov	r1, r5
 8018402:	900a      	str	r0, [sp, #40]	; 0x28
 8018404:	4630      	mov	r0, r6
 8018406:	f000 fef7 	bl	80191f8 <_Bfree>
 801840a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801840c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801840e:	4615      	mov	r5, r2
 8018410:	1b1a      	subs	r2, r3, r4
 8018412:	d004      	beq.n	801841e <_dtoa_r+0x6e6>
 8018414:	4629      	mov	r1, r5
 8018416:	4630      	mov	r0, r6
 8018418:	f001 f8b0 	bl	801957c <__pow5mult>
 801841c:	4605      	mov	r5, r0
 801841e:	2101      	movs	r1, #1
 8018420:	4630      	mov	r0, r6
 8018422:	f000 ffef 	bl	8019404 <__i2b>
 8018426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018428:	2b00      	cmp	r3, #0
 801842a:	4604      	mov	r4, r0
 801842c:	f340 8082 	ble.w	8018534 <_dtoa_r+0x7fc>
 8018430:	461a      	mov	r2, r3
 8018432:	4601      	mov	r1, r0
 8018434:	4630      	mov	r0, r6
 8018436:	f001 f8a1 	bl	801957c <__pow5mult>
 801843a:	9b07      	ldr	r3, [sp, #28]
 801843c:	2b01      	cmp	r3, #1
 801843e:	4604      	mov	r4, r0
 8018440:	dd7b      	ble.n	801853a <_dtoa_r+0x802>
 8018442:	2300      	movs	r3, #0
 8018444:	930a      	str	r3, [sp, #40]	; 0x28
 8018446:	6922      	ldr	r2, [r4, #16]
 8018448:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801844c:	6910      	ldr	r0, [r2, #16]
 801844e:	f000 ff89 	bl	8019364 <__hi0bits>
 8018452:	f1c0 0020 	rsb	r0, r0, #32
 8018456:	9b06      	ldr	r3, [sp, #24]
 8018458:	4418      	add	r0, r3
 801845a:	f010 001f 	ands.w	r0, r0, #31
 801845e:	f000 808d 	beq.w	801857c <_dtoa_r+0x844>
 8018462:	f1c0 0220 	rsb	r2, r0, #32
 8018466:	2a04      	cmp	r2, #4
 8018468:	f340 8086 	ble.w	8018578 <_dtoa_r+0x840>
 801846c:	f1c0 001c 	rsb	r0, r0, #28
 8018470:	9b05      	ldr	r3, [sp, #20]
 8018472:	4403      	add	r3, r0
 8018474:	9305      	str	r3, [sp, #20]
 8018476:	9b06      	ldr	r3, [sp, #24]
 8018478:	4403      	add	r3, r0
 801847a:	4480      	add	r8, r0
 801847c:	9306      	str	r3, [sp, #24]
 801847e:	9b05      	ldr	r3, [sp, #20]
 8018480:	2b00      	cmp	r3, #0
 8018482:	dd05      	ble.n	8018490 <_dtoa_r+0x758>
 8018484:	4629      	mov	r1, r5
 8018486:	461a      	mov	r2, r3
 8018488:	4630      	mov	r0, r6
 801848a:	f001 f8d1 	bl	8019630 <__lshift>
 801848e:	4605      	mov	r5, r0
 8018490:	9b06      	ldr	r3, [sp, #24]
 8018492:	2b00      	cmp	r3, #0
 8018494:	dd05      	ble.n	80184a2 <_dtoa_r+0x76a>
 8018496:	4621      	mov	r1, r4
 8018498:	461a      	mov	r2, r3
 801849a:	4630      	mov	r0, r6
 801849c:	f001 f8c8 	bl	8019630 <__lshift>
 80184a0:	4604      	mov	r4, r0
 80184a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d06b      	beq.n	8018580 <_dtoa_r+0x848>
 80184a8:	4621      	mov	r1, r4
 80184aa:	4628      	mov	r0, r5
 80184ac:	f001 f92c 	bl	8019708 <__mcmp>
 80184b0:	2800      	cmp	r0, #0
 80184b2:	da65      	bge.n	8018580 <_dtoa_r+0x848>
 80184b4:	2300      	movs	r3, #0
 80184b6:	4629      	mov	r1, r5
 80184b8:	220a      	movs	r2, #10
 80184ba:	4630      	mov	r0, r6
 80184bc:	f000 febe 	bl	801923c <__multadd>
 80184c0:	9b08      	ldr	r3, [sp, #32]
 80184c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80184c6:	4605      	mov	r5, r0
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	f000 8192 	beq.w	80187f2 <_dtoa_r+0xaba>
 80184ce:	4639      	mov	r1, r7
 80184d0:	2300      	movs	r3, #0
 80184d2:	220a      	movs	r2, #10
 80184d4:	4630      	mov	r0, r6
 80184d6:	f000 feb1 	bl	801923c <__multadd>
 80184da:	f1ba 0f00 	cmp.w	sl, #0
 80184de:	4607      	mov	r7, r0
 80184e0:	f300 808e 	bgt.w	8018600 <_dtoa_r+0x8c8>
 80184e4:	9b07      	ldr	r3, [sp, #28]
 80184e6:	2b02      	cmp	r3, #2
 80184e8:	dc51      	bgt.n	801858e <_dtoa_r+0x856>
 80184ea:	e089      	b.n	8018600 <_dtoa_r+0x8c8>
 80184ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80184ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80184f2:	e751      	b.n	8018398 <_dtoa_r+0x660>
 80184f4:	f109 34ff 	add.w	r4, r9, #4294967295
 80184f8:	42a3      	cmp	r3, r4
 80184fa:	bfbf      	itttt	lt
 80184fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80184fe:	1ae3      	sublt	r3, r4, r3
 8018500:	18d2      	addlt	r2, r2, r3
 8018502:	4613      	movlt	r3, r2
 8018504:	bfb7      	itett	lt
 8018506:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018508:	1b1c      	subge	r4, r3, r4
 801850a:	4623      	movlt	r3, r4
 801850c:	2400      	movlt	r4, #0
 801850e:	f1b9 0f00 	cmp.w	r9, #0
 8018512:	bfb5      	itete	lt
 8018514:	9a05      	ldrlt	r2, [sp, #20]
 8018516:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801851a:	eba2 0809 	sublt.w	r8, r2, r9
 801851e:	464a      	movge	r2, r9
 8018520:	bfb8      	it	lt
 8018522:	2200      	movlt	r2, #0
 8018524:	e73b      	b.n	801839e <_dtoa_r+0x666>
 8018526:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801852a:	9f08      	ldr	r7, [sp, #32]
 801852c:	461c      	mov	r4, r3
 801852e:	e743      	b.n	80183b8 <_dtoa_r+0x680>
 8018530:	461a      	mov	r2, r3
 8018532:	e76f      	b.n	8018414 <_dtoa_r+0x6dc>
 8018534:	9b07      	ldr	r3, [sp, #28]
 8018536:	2b01      	cmp	r3, #1
 8018538:	dc18      	bgt.n	801856c <_dtoa_r+0x834>
 801853a:	9b02      	ldr	r3, [sp, #8]
 801853c:	b9b3      	cbnz	r3, 801856c <_dtoa_r+0x834>
 801853e:	9b03      	ldr	r3, [sp, #12]
 8018540:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018544:	b9a2      	cbnz	r2, 8018570 <_dtoa_r+0x838>
 8018546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801854a:	0d12      	lsrs	r2, r2, #20
 801854c:	0512      	lsls	r2, r2, #20
 801854e:	b18a      	cbz	r2, 8018574 <_dtoa_r+0x83c>
 8018550:	9b05      	ldr	r3, [sp, #20]
 8018552:	3301      	adds	r3, #1
 8018554:	9305      	str	r3, [sp, #20]
 8018556:	9b06      	ldr	r3, [sp, #24]
 8018558:	3301      	adds	r3, #1
 801855a:	9306      	str	r3, [sp, #24]
 801855c:	2301      	movs	r3, #1
 801855e:	930a      	str	r3, [sp, #40]	; 0x28
 8018560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018562:	2b00      	cmp	r3, #0
 8018564:	f47f af6f 	bne.w	8018446 <_dtoa_r+0x70e>
 8018568:	2001      	movs	r0, #1
 801856a:	e774      	b.n	8018456 <_dtoa_r+0x71e>
 801856c:	2300      	movs	r3, #0
 801856e:	e7f6      	b.n	801855e <_dtoa_r+0x826>
 8018570:	9b02      	ldr	r3, [sp, #8]
 8018572:	e7f4      	b.n	801855e <_dtoa_r+0x826>
 8018574:	920a      	str	r2, [sp, #40]	; 0x28
 8018576:	e7f3      	b.n	8018560 <_dtoa_r+0x828>
 8018578:	d081      	beq.n	801847e <_dtoa_r+0x746>
 801857a:	4610      	mov	r0, r2
 801857c:	301c      	adds	r0, #28
 801857e:	e777      	b.n	8018470 <_dtoa_r+0x738>
 8018580:	f1b9 0f00 	cmp.w	r9, #0
 8018584:	dc37      	bgt.n	80185f6 <_dtoa_r+0x8be>
 8018586:	9b07      	ldr	r3, [sp, #28]
 8018588:	2b02      	cmp	r3, #2
 801858a:	dd34      	ble.n	80185f6 <_dtoa_r+0x8be>
 801858c:	46ca      	mov	sl, r9
 801858e:	f1ba 0f00 	cmp.w	sl, #0
 8018592:	d10d      	bne.n	80185b0 <_dtoa_r+0x878>
 8018594:	4621      	mov	r1, r4
 8018596:	4653      	mov	r3, sl
 8018598:	2205      	movs	r2, #5
 801859a:	4630      	mov	r0, r6
 801859c:	f000 fe4e 	bl	801923c <__multadd>
 80185a0:	4601      	mov	r1, r0
 80185a2:	4604      	mov	r4, r0
 80185a4:	4628      	mov	r0, r5
 80185a6:	f001 f8af 	bl	8019708 <__mcmp>
 80185aa:	2800      	cmp	r0, #0
 80185ac:	f73f adde 	bgt.w	801816c <_dtoa_r+0x434>
 80185b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b2:	f8dd 8000 	ldr.w	r8, [sp]
 80185b6:	ea6f 0b03 	mvn.w	fp, r3
 80185ba:	f04f 0900 	mov.w	r9, #0
 80185be:	4621      	mov	r1, r4
 80185c0:	4630      	mov	r0, r6
 80185c2:	f000 fe19 	bl	80191f8 <_Bfree>
 80185c6:	2f00      	cmp	r7, #0
 80185c8:	f43f aea7 	beq.w	801831a <_dtoa_r+0x5e2>
 80185cc:	f1b9 0f00 	cmp.w	r9, #0
 80185d0:	d005      	beq.n	80185de <_dtoa_r+0x8a6>
 80185d2:	45b9      	cmp	r9, r7
 80185d4:	d003      	beq.n	80185de <_dtoa_r+0x8a6>
 80185d6:	4649      	mov	r1, r9
 80185d8:	4630      	mov	r0, r6
 80185da:	f000 fe0d 	bl	80191f8 <_Bfree>
 80185de:	4639      	mov	r1, r7
 80185e0:	4630      	mov	r0, r6
 80185e2:	f000 fe09 	bl	80191f8 <_Bfree>
 80185e6:	e698      	b.n	801831a <_dtoa_r+0x5e2>
 80185e8:	2400      	movs	r4, #0
 80185ea:	4627      	mov	r7, r4
 80185ec:	e7e0      	b.n	80185b0 <_dtoa_r+0x878>
 80185ee:	46bb      	mov	fp, r7
 80185f0:	4604      	mov	r4, r0
 80185f2:	4607      	mov	r7, r0
 80185f4:	e5ba      	b.n	801816c <_dtoa_r+0x434>
 80185f6:	9b08      	ldr	r3, [sp, #32]
 80185f8:	46ca      	mov	sl, r9
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f000 8100 	beq.w	8018800 <_dtoa_r+0xac8>
 8018600:	f1b8 0f00 	cmp.w	r8, #0
 8018604:	dd05      	ble.n	8018612 <_dtoa_r+0x8da>
 8018606:	4639      	mov	r1, r7
 8018608:	4642      	mov	r2, r8
 801860a:	4630      	mov	r0, r6
 801860c:	f001 f810 	bl	8019630 <__lshift>
 8018610:	4607      	mov	r7, r0
 8018612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018614:	2b00      	cmp	r3, #0
 8018616:	d05d      	beq.n	80186d4 <_dtoa_r+0x99c>
 8018618:	6879      	ldr	r1, [r7, #4]
 801861a:	4630      	mov	r0, r6
 801861c:	f000 fdac 	bl	8019178 <_Balloc>
 8018620:	4680      	mov	r8, r0
 8018622:	b928      	cbnz	r0, 8018630 <_dtoa_r+0x8f8>
 8018624:	4b82      	ldr	r3, [pc, #520]	; (8018830 <_dtoa_r+0xaf8>)
 8018626:	4602      	mov	r2, r0
 8018628:	f240 21ea 	movw	r1, #746	; 0x2ea
 801862c:	f7ff bb9a 	b.w	8017d64 <_dtoa_r+0x2c>
 8018630:	693a      	ldr	r2, [r7, #16]
 8018632:	3202      	adds	r2, #2
 8018634:	0092      	lsls	r2, r2, #2
 8018636:	f107 010c 	add.w	r1, r7, #12
 801863a:	300c      	adds	r0, #12
 801863c:	f7fd fd0a 	bl	8016054 <memcpy>
 8018640:	2201      	movs	r2, #1
 8018642:	4641      	mov	r1, r8
 8018644:	4630      	mov	r0, r6
 8018646:	f000 fff3 	bl	8019630 <__lshift>
 801864a:	9b00      	ldr	r3, [sp, #0]
 801864c:	3301      	adds	r3, #1
 801864e:	9305      	str	r3, [sp, #20]
 8018650:	9b00      	ldr	r3, [sp, #0]
 8018652:	4453      	add	r3, sl
 8018654:	9309      	str	r3, [sp, #36]	; 0x24
 8018656:	9b02      	ldr	r3, [sp, #8]
 8018658:	f003 0301 	and.w	r3, r3, #1
 801865c:	46b9      	mov	r9, r7
 801865e:	9308      	str	r3, [sp, #32]
 8018660:	4607      	mov	r7, r0
 8018662:	9b05      	ldr	r3, [sp, #20]
 8018664:	4621      	mov	r1, r4
 8018666:	3b01      	subs	r3, #1
 8018668:	4628      	mov	r0, r5
 801866a:	9302      	str	r3, [sp, #8]
 801866c:	f7ff fad8 	bl	8017c20 <quorem>
 8018670:	4603      	mov	r3, r0
 8018672:	3330      	adds	r3, #48	; 0x30
 8018674:	9006      	str	r0, [sp, #24]
 8018676:	4649      	mov	r1, r9
 8018678:	4628      	mov	r0, r5
 801867a:	930a      	str	r3, [sp, #40]	; 0x28
 801867c:	f001 f844 	bl	8019708 <__mcmp>
 8018680:	463a      	mov	r2, r7
 8018682:	4682      	mov	sl, r0
 8018684:	4621      	mov	r1, r4
 8018686:	4630      	mov	r0, r6
 8018688:	f001 f85a 	bl	8019740 <__mdiff>
 801868c:	68c2      	ldr	r2, [r0, #12]
 801868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018690:	4680      	mov	r8, r0
 8018692:	bb0a      	cbnz	r2, 80186d8 <_dtoa_r+0x9a0>
 8018694:	4601      	mov	r1, r0
 8018696:	4628      	mov	r0, r5
 8018698:	f001 f836 	bl	8019708 <__mcmp>
 801869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801869e:	4602      	mov	r2, r0
 80186a0:	4641      	mov	r1, r8
 80186a2:	4630      	mov	r0, r6
 80186a4:	920e      	str	r2, [sp, #56]	; 0x38
 80186a6:	930a      	str	r3, [sp, #40]	; 0x28
 80186a8:	f000 fda6 	bl	80191f8 <_Bfree>
 80186ac:	9b07      	ldr	r3, [sp, #28]
 80186ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80186b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80186b4:	ea43 0102 	orr.w	r1, r3, r2
 80186b8:	9b08      	ldr	r3, [sp, #32]
 80186ba:	430b      	orrs	r3, r1
 80186bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186be:	d10d      	bne.n	80186dc <_dtoa_r+0x9a4>
 80186c0:	2b39      	cmp	r3, #57	; 0x39
 80186c2:	d029      	beq.n	8018718 <_dtoa_r+0x9e0>
 80186c4:	f1ba 0f00 	cmp.w	sl, #0
 80186c8:	dd01      	ble.n	80186ce <_dtoa_r+0x996>
 80186ca:	9b06      	ldr	r3, [sp, #24]
 80186cc:	3331      	adds	r3, #49	; 0x31
 80186ce:	9a02      	ldr	r2, [sp, #8]
 80186d0:	7013      	strb	r3, [r2, #0]
 80186d2:	e774      	b.n	80185be <_dtoa_r+0x886>
 80186d4:	4638      	mov	r0, r7
 80186d6:	e7b8      	b.n	801864a <_dtoa_r+0x912>
 80186d8:	2201      	movs	r2, #1
 80186da:	e7e1      	b.n	80186a0 <_dtoa_r+0x968>
 80186dc:	f1ba 0f00 	cmp.w	sl, #0
 80186e0:	db06      	blt.n	80186f0 <_dtoa_r+0x9b8>
 80186e2:	9907      	ldr	r1, [sp, #28]
 80186e4:	ea41 0a0a 	orr.w	sl, r1, sl
 80186e8:	9908      	ldr	r1, [sp, #32]
 80186ea:	ea5a 0101 	orrs.w	r1, sl, r1
 80186ee:	d120      	bne.n	8018732 <_dtoa_r+0x9fa>
 80186f0:	2a00      	cmp	r2, #0
 80186f2:	ddec      	ble.n	80186ce <_dtoa_r+0x996>
 80186f4:	4629      	mov	r1, r5
 80186f6:	2201      	movs	r2, #1
 80186f8:	4630      	mov	r0, r6
 80186fa:	9305      	str	r3, [sp, #20]
 80186fc:	f000 ff98 	bl	8019630 <__lshift>
 8018700:	4621      	mov	r1, r4
 8018702:	4605      	mov	r5, r0
 8018704:	f001 f800 	bl	8019708 <__mcmp>
 8018708:	2800      	cmp	r0, #0
 801870a:	9b05      	ldr	r3, [sp, #20]
 801870c:	dc02      	bgt.n	8018714 <_dtoa_r+0x9dc>
 801870e:	d1de      	bne.n	80186ce <_dtoa_r+0x996>
 8018710:	07da      	lsls	r2, r3, #31
 8018712:	d5dc      	bpl.n	80186ce <_dtoa_r+0x996>
 8018714:	2b39      	cmp	r3, #57	; 0x39
 8018716:	d1d8      	bne.n	80186ca <_dtoa_r+0x992>
 8018718:	9a02      	ldr	r2, [sp, #8]
 801871a:	2339      	movs	r3, #57	; 0x39
 801871c:	7013      	strb	r3, [r2, #0]
 801871e:	4643      	mov	r3, r8
 8018720:	4698      	mov	r8, r3
 8018722:	3b01      	subs	r3, #1
 8018724:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018728:	2a39      	cmp	r2, #57	; 0x39
 801872a:	d051      	beq.n	80187d0 <_dtoa_r+0xa98>
 801872c:	3201      	adds	r2, #1
 801872e:	701a      	strb	r2, [r3, #0]
 8018730:	e745      	b.n	80185be <_dtoa_r+0x886>
 8018732:	2a00      	cmp	r2, #0
 8018734:	dd03      	ble.n	801873e <_dtoa_r+0xa06>
 8018736:	2b39      	cmp	r3, #57	; 0x39
 8018738:	d0ee      	beq.n	8018718 <_dtoa_r+0x9e0>
 801873a:	3301      	adds	r3, #1
 801873c:	e7c7      	b.n	80186ce <_dtoa_r+0x996>
 801873e:	9a05      	ldr	r2, [sp, #20]
 8018740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018742:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018746:	428a      	cmp	r2, r1
 8018748:	d02b      	beq.n	80187a2 <_dtoa_r+0xa6a>
 801874a:	4629      	mov	r1, r5
 801874c:	2300      	movs	r3, #0
 801874e:	220a      	movs	r2, #10
 8018750:	4630      	mov	r0, r6
 8018752:	f000 fd73 	bl	801923c <__multadd>
 8018756:	45b9      	cmp	r9, r7
 8018758:	4605      	mov	r5, r0
 801875a:	f04f 0300 	mov.w	r3, #0
 801875e:	f04f 020a 	mov.w	r2, #10
 8018762:	4649      	mov	r1, r9
 8018764:	4630      	mov	r0, r6
 8018766:	d107      	bne.n	8018778 <_dtoa_r+0xa40>
 8018768:	f000 fd68 	bl	801923c <__multadd>
 801876c:	4681      	mov	r9, r0
 801876e:	4607      	mov	r7, r0
 8018770:	9b05      	ldr	r3, [sp, #20]
 8018772:	3301      	adds	r3, #1
 8018774:	9305      	str	r3, [sp, #20]
 8018776:	e774      	b.n	8018662 <_dtoa_r+0x92a>
 8018778:	f000 fd60 	bl	801923c <__multadd>
 801877c:	4639      	mov	r1, r7
 801877e:	4681      	mov	r9, r0
 8018780:	2300      	movs	r3, #0
 8018782:	220a      	movs	r2, #10
 8018784:	4630      	mov	r0, r6
 8018786:	f000 fd59 	bl	801923c <__multadd>
 801878a:	4607      	mov	r7, r0
 801878c:	e7f0      	b.n	8018770 <_dtoa_r+0xa38>
 801878e:	f1ba 0f00 	cmp.w	sl, #0
 8018792:	9a00      	ldr	r2, [sp, #0]
 8018794:	bfcc      	ite	gt
 8018796:	46d0      	movgt	r8, sl
 8018798:	f04f 0801 	movle.w	r8, #1
 801879c:	4490      	add	r8, r2
 801879e:	f04f 0900 	mov.w	r9, #0
 80187a2:	4629      	mov	r1, r5
 80187a4:	2201      	movs	r2, #1
 80187a6:	4630      	mov	r0, r6
 80187a8:	9302      	str	r3, [sp, #8]
 80187aa:	f000 ff41 	bl	8019630 <__lshift>
 80187ae:	4621      	mov	r1, r4
 80187b0:	4605      	mov	r5, r0
 80187b2:	f000 ffa9 	bl	8019708 <__mcmp>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	dcb1      	bgt.n	801871e <_dtoa_r+0x9e6>
 80187ba:	d102      	bne.n	80187c2 <_dtoa_r+0xa8a>
 80187bc:	9b02      	ldr	r3, [sp, #8]
 80187be:	07db      	lsls	r3, r3, #31
 80187c0:	d4ad      	bmi.n	801871e <_dtoa_r+0x9e6>
 80187c2:	4643      	mov	r3, r8
 80187c4:	4698      	mov	r8, r3
 80187c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80187ca:	2a30      	cmp	r2, #48	; 0x30
 80187cc:	d0fa      	beq.n	80187c4 <_dtoa_r+0xa8c>
 80187ce:	e6f6      	b.n	80185be <_dtoa_r+0x886>
 80187d0:	9a00      	ldr	r2, [sp, #0]
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d1a4      	bne.n	8018720 <_dtoa_r+0x9e8>
 80187d6:	f10b 0b01 	add.w	fp, fp, #1
 80187da:	2331      	movs	r3, #49	; 0x31
 80187dc:	e778      	b.n	80186d0 <_dtoa_r+0x998>
 80187de:	4b15      	ldr	r3, [pc, #84]	; (8018834 <_dtoa_r+0xafc>)
 80187e0:	f7ff bb12 	b.w	8017e08 <_dtoa_r+0xd0>
 80187e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	f47f aaee 	bne.w	8017dc8 <_dtoa_r+0x90>
 80187ec:	4b12      	ldr	r3, [pc, #72]	; (8018838 <_dtoa_r+0xb00>)
 80187ee:	f7ff bb0b 	b.w	8017e08 <_dtoa_r+0xd0>
 80187f2:	f1ba 0f00 	cmp.w	sl, #0
 80187f6:	dc03      	bgt.n	8018800 <_dtoa_r+0xac8>
 80187f8:	9b07      	ldr	r3, [sp, #28]
 80187fa:	2b02      	cmp	r3, #2
 80187fc:	f73f aec7 	bgt.w	801858e <_dtoa_r+0x856>
 8018800:	f8dd 8000 	ldr.w	r8, [sp]
 8018804:	4621      	mov	r1, r4
 8018806:	4628      	mov	r0, r5
 8018808:	f7ff fa0a 	bl	8017c20 <quorem>
 801880c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018810:	f808 3b01 	strb.w	r3, [r8], #1
 8018814:	9a00      	ldr	r2, [sp, #0]
 8018816:	eba8 0202 	sub.w	r2, r8, r2
 801881a:	4592      	cmp	sl, r2
 801881c:	ddb7      	ble.n	801878e <_dtoa_r+0xa56>
 801881e:	4629      	mov	r1, r5
 8018820:	2300      	movs	r3, #0
 8018822:	220a      	movs	r2, #10
 8018824:	4630      	mov	r0, r6
 8018826:	f000 fd09 	bl	801923c <__multadd>
 801882a:	4605      	mov	r5, r0
 801882c:	e7ea      	b.n	8018804 <_dtoa_r+0xacc>
 801882e:	bf00      	nop
 8018830:	0801dd98 	.word	0x0801dd98
 8018834:	0801dc00 	.word	0x0801dc00
 8018838:	0801dd2c 	.word	0x0801dd2c

0801883c <__errno>:
 801883c:	4b01      	ldr	r3, [pc, #4]	; (8018844 <__errno+0x8>)
 801883e:	6818      	ldr	r0, [r3, #0]
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop
 8018844:	2000005c 	.word	0x2000005c

08018848 <std>:
 8018848:	2300      	movs	r3, #0
 801884a:	b510      	push	{r4, lr}
 801884c:	4604      	mov	r4, r0
 801884e:	e9c0 3300 	strd	r3, r3, [r0]
 8018852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018856:	6083      	str	r3, [r0, #8]
 8018858:	8181      	strh	r1, [r0, #12]
 801885a:	6643      	str	r3, [r0, #100]	; 0x64
 801885c:	81c2      	strh	r2, [r0, #14]
 801885e:	6183      	str	r3, [r0, #24]
 8018860:	4619      	mov	r1, r3
 8018862:	2208      	movs	r2, #8
 8018864:	305c      	adds	r0, #92	; 0x5c
 8018866:	f7fd fc1d 	bl	80160a4 <memset>
 801886a:	4b05      	ldr	r3, [pc, #20]	; (8018880 <std+0x38>)
 801886c:	6263      	str	r3, [r4, #36]	; 0x24
 801886e:	4b05      	ldr	r3, [pc, #20]	; (8018884 <std+0x3c>)
 8018870:	62a3      	str	r3, [r4, #40]	; 0x28
 8018872:	4b05      	ldr	r3, [pc, #20]	; (8018888 <std+0x40>)
 8018874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018876:	4b05      	ldr	r3, [pc, #20]	; (801888c <std+0x44>)
 8018878:	6224      	str	r4, [r4, #32]
 801887a:	6323      	str	r3, [r4, #48]	; 0x30
 801887c:	bd10      	pop	{r4, pc}
 801887e:	bf00      	nop
 8018880:	0801a201 	.word	0x0801a201
 8018884:	0801a223 	.word	0x0801a223
 8018888:	0801a25b 	.word	0x0801a25b
 801888c:	0801a27f 	.word	0x0801a27f

08018890 <_cleanup_r>:
 8018890:	4901      	ldr	r1, [pc, #4]	; (8018898 <_cleanup_r+0x8>)
 8018892:	f000 b8c1 	b.w	8018a18 <_fwalk_reent>
 8018896:	bf00      	nop
 8018898:	0801a585 	.word	0x0801a585

0801889c <__sfmoreglue>:
 801889c:	b570      	push	{r4, r5, r6, lr}
 801889e:	1e4a      	subs	r2, r1, #1
 80188a0:	2568      	movs	r5, #104	; 0x68
 80188a2:	4355      	muls	r5, r2
 80188a4:	460e      	mov	r6, r1
 80188a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80188aa:	f001 f981 	bl	8019bb0 <_malloc_r>
 80188ae:	4604      	mov	r4, r0
 80188b0:	b140      	cbz	r0, 80188c4 <__sfmoreglue+0x28>
 80188b2:	2100      	movs	r1, #0
 80188b4:	e9c0 1600 	strd	r1, r6, [r0]
 80188b8:	300c      	adds	r0, #12
 80188ba:	60a0      	str	r0, [r4, #8]
 80188bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80188c0:	f7fd fbf0 	bl	80160a4 <memset>
 80188c4:	4620      	mov	r0, r4
 80188c6:	bd70      	pop	{r4, r5, r6, pc}

080188c8 <__sfp_lock_acquire>:
 80188c8:	4801      	ldr	r0, [pc, #4]	; (80188d0 <__sfp_lock_acquire+0x8>)
 80188ca:	f000 bc38 	b.w	801913e <__retarget_lock_acquire_recursive>
 80188ce:	bf00      	nop
 80188d0:	20006ec4 	.word	0x20006ec4

080188d4 <__sfp_lock_release>:
 80188d4:	4801      	ldr	r0, [pc, #4]	; (80188dc <__sfp_lock_release+0x8>)
 80188d6:	f000 bc33 	b.w	8019140 <__retarget_lock_release_recursive>
 80188da:	bf00      	nop
 80188dc:	20006ec4 	.word	0x20006ec4

080188e0 <__sinit_lock_acquire>:
 80188e0:	4801      	ldr	r0, [pc, #4]	; (80188e8 <__sinit_lock_acquire+0x8>)
 80188e2:	f000 bc2c 	b.w	801913e <__retarget_lock_acquire_recursive>
 80188e6:	bf00      	nop
 80188e8:	20006ebf 	.word	0x20006ebf

080188ec <__sinit_lock_release>:
 80188ec:	4801      	ldr	r0, [pc, #4]	; (80188f4 <__sinit_lock_release+0x8>)
 80188ee:	f000 bc27 	b.w	8019140 <__retarget_lock_release_recursive>
 80188f2:	bf00      	nop
 80188f4:	20006ebf 	.word	0x20006ebf

080188f8 <__sinit>:
 80188f8:	b510      	push	{r4, lr}
 80188fa:	4604      	mov	r4, r0
 80188fc:	f7ff fff0 	bl	80188e0 <__sinit_lock_acquire>
 8018900:	69a3      	ldr	r3, [r4, #24]
 8018902:	b11b      	cbz	r3, 801890c <__sinit+0x14>
 8018904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018908:	f7ff bff0 	b.w	80188ec <__sinit_lock_release>
 801890c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018910:	6523      	str	r3, [r4, #80]	; 0x50
 8018912:	4b13      	ldr	r3, [pc, #76]	; (8018960 <__sinit+0x68>)
 8018914:	4a13      	ldr	r2, [pc, #76]	; (8018964 <__sinit+0x6c>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	62a2      	str	r2, [r4, #40]	; 0x28
 801891a:	42a3      	cmp	r3, r4
 801891c:	bf04      	itt	eq
 801891e:	2301      	moveq	r3, #1
 8018920:	61a3      	streq	r3, [r4, #24]
 8018922:	4620      	mov	r0, r4
 8018924:	f000 f820 	bl	8018968 <__sfp>
 8018928:	6060      	str	r0, [r4, #4]
 801892a:	4620      	mov	r0, r4
 801892c:	f000 f81c 	bl	8018968 <__sfp>
 8018930:	60a0      	str	r0, [r4, #8]
 8018932:	4620      	mov	r0, r4
 8018934:	f000 f818 	bl	8018968 <__sfp>
 8018938:	2200      	movs	r2, #0
 801893a:	60e0      	str	r0, [r4, #12]
 801893c:	2104      	movs	r1, #4
 801893e:	6860      	ldr	r0, [r4, #4]
 8018940:	f7ff ff82 	bl	8018848 <std>
 8018944:	68a0      	ldr	r0, [r4, #8]
 8018946:	2201      	movs	r2, #1
 8018948:	2109      	movs	r1, #9
 801894a:	f7ff ff7d 	bl	8018848 <std>
 801894e:	68e0      	ldr	r0, [r4, #12]
 8018950:	2202      	movs	r2, #2
 8018952:	2112      	movs	r1, #18
 8018954:	f7ff ff78 	bl	8018848 <std>
 8018958:	2301      	movs	r3, #1
 801895a:	61a3      	str	r3, [r4, #24]
 801895c:	e7d2      	b.n	8018904 <__sinit+0xc>
 801895e:	bf00      	nop
 8018960:	0801dbec 	.word	0x0801dbec
 8018964:	08018891 	.word	0x08018891

08018968 <__sfp>:
 8018968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801896a:	4607      	mov	r7, r0
 801896c:	f7ff ffac 	bl	80188c8 <__sfp_lock_acquire>
 8018970:	4b1e      	ldr	r3, [pc, #120]	; (80189ec <__sfp+0x84>)
 8018972:	681e      	ldr	r6, [r3, #0]
 8018974:	69b3      	ldr	r3, [r6, #24]
 8018976:	b913      	cbnz	r3, 801897e <__sfp+0x16>
 8018978:	4630      	mov	r0, r6
 801897a:	f7ff ffbd 	bl	80188f8 <__sinit>
 801897e:	3648      	adds	r6, #72	; 0x48
 8018980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018984:	3b01      	subs	r3, #1
 8018986:	d503      	bpl.n	8018990 <__sfp+0x28>
 8018988:	6833      	ldr	r3, [r6, #0]
 801898a:	b30b      	cbz	r3, 80189d0 <__sfp+0x68>
 801898c:	6836      	ldr	r6, [r6, #0]
 801898e:	e7f7      	b.n	8018980 <__sfp+0x18>
 8018990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018994:	b9d5      	cbnz	r5, 80189cc <__sfp+0x64>
 8018996:	4b16      	ldr	r3, [pc, #88]	; (80189f0 <__sfp+0x88>)
 8018998:	60e3      	str	r3, [r4, #12]
 801899a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801899e:	6665      	str	r5, [r4, #100]	; 0x64
 80189a0:	f000 fbcc 	bl	801913c <__retarget_lock_init_recursive>
 80189a4:	f7ff ff96 	bl	80188d4 <__sfp_lock_release>
 80189a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80189ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80189b0:	6025      	str	r5, [r4, #0]
 80189b2:	61a5      	str	r5, [r4, #24]
 80189b4:	2208      	movs	r2, #8
 80189b6:	4629      	mov	r1, r5
 80189b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80189bc:	f7fd fb72 	bl	80160a4 <memset>
 80189c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80189c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80189c8:	4620      	mov	r0, r4
 80189ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189cc:	3468      	adds	r4, #104	; 0x68
 80189ce:	e7d9      	b.n	8018984 <__sfp+0x1c>
 80189d0:	2104      	movs	r1, #4
 80189d2:	4638      	mov	r0, r7
 80189d4:	f7ff ff62 	bl	801889c <__sfmoreglue>
 80189d8:	4604      	mov	r4, r0
 80189da:	6030      	str	r0, [r6, #0]
 80189dc:	2800      	cmp	r0, #0
 80189de:	d1d5      	bne.n	801898c <__sfp+0x24>
 80189e0:	f7ff ff78 	bl	80188d4 <__sfp_lock_release>
 80189e4:	230c      	movs	r3, #12
 80189e6:	603b      	str	r3, [r7, #0]
 80189e8:	e7ee      	b.n	80189c8 <__sfp+0x60>
 80189ea:	bf00      	nop
 80189ec:	0801dbec 	.word	0x0801dbec
 80189f0:	ffff0001 	.word	0xffff0001

080189f4 <fiprintf>:
 80189f4:	b40e      	push	{r1, r2, r3}
 80189f6:	b503      	push	{r0, r1, lr}
 80189f8:	4601      	mov	r1, r0
 80189fa:	ab03      	add	r3, sp, #12
 80189fc:	4805      	ldr	r0, [pc, #20]	; (8018a14 <fiprintf+0x20>)
 80189fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a02:	6800      	ldr	r0, [r0, #0]
 8018a04:	9301      	str	r3, [sp, #4]
 8018a06:	f001 fab3 	bl	8019f70 <_vfiprintf_r>
 8018a0a:	b002      	add	sp, #8
 8018a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a10:	b003      	add	sp, #12
 8018a12:	4770      	bx	lr
 8018a14:	2000005c 	.word	0x2000005c

08018a18 <_fwalk_reent>:
 8018a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a1c:	4606      	mov	r6, r0
 8018a1e:	4688      	mov	r8, r1
 8018a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018a24:	2700      	movs	r7, #0
 8018a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8018a2e:	d505      	bpl.n	8018a3c <_fwalk_reent+0x24>
 8018a30:	6824      	ldr	r4, [r4, #0]
 8018a32:	2c00      	cmp	r4, #0
 8018a34:	d1f7      	bne.n	8018a26 <_fwalk_reent+0xe>
 8018a36:	4638      	mov	r0, r7
 8018a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a3c:	89ab      	ldrh	r3, [r5, #12]
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	d907      	bls.n	8018a52 <_fwalk_reent+0x3a>
 8018a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018a46:	3301      	adds	r3, #1
 8018a48:	d003      	beq.n	8018a52 <_fwalk_reent+0x3a>
 8018a4a:	4629      	mov	r1, r5
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	47c0      	blx	r8
 8018a50:	4307      	orrs	r7, r0
 8018a52:	3568      	adds	r5, #104	; 0x68
 8018a54:	e7e9      	b.n	8018a2a <_fwalk_reent+0x12>

08018a56 <rshift>:
 8018a56:	6903      	ldr	r3, [r0, #16]
 8018a58:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a60:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018a64:	f100 0414 	add.w	r4, r0, #20
 8018a68:	dd45      	ble.n	8018af6 <rshift+0xa0>
 8018a6a:	f011 011f 	ands.w	r1, r1, #31
 8018a6e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018a72:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018a76:	d10c      	bne.n	8018a92 <rshift+0x3c>
 8018a78:	f100 0710 	add.w	r7, r0, #16
 8018a7c:	4629      	mov	r1, r5
 8018a7e:	42b1      	cmp	r1, r6
 8018a80:	d334      	bcc.n	8018aec <rshift+0x96>
 8018a82:	1a9b      	subs	r3, r3, r2
 8018a84:	009b      	lsls	r3, r3, #2
 8018a86:	1eea      	subs	r2, r5, #3
 8018a88:	4296      	cmp	r6, r2
 8018a8a:	bf38      	it	cc
 8018a8c:	2300      	movcc	r3, #0
 8018a8e:	4423      	add	r3, r4
 8018a90:	e015      	b.n	8018abe <rshift+0x68>
 8018a92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018a96:	f1c1 0820 	rsb	r8, r1, #32
 8018a9a:	40cf      	lsrs	r7, r1
 8018a9c:	f105 0e04 	add.w	lr, r5, #4
 8018aa0:	46a1      	mov	r9, r4
 8018aa2:	4576      	cmp	r6, lr
 8018aa4:	46f4      	mov	ip, lr
 8018aa6:	d815      	bhi.n	8018ad4 <rshift+0x7e>
 8018aa8:	1a9b      	subs	r3, r3, r2
 8018aaa:	009a      	lsls	r2, r3, #2
 8018aac:	3a04      	subs	r2, #4
 8018aae:	3501      	adds	r5, #1
 8018ab0:	42ae      	cmp	r6, r5
 8018ab2:	bf38      	it	cc
 8018ab4:	2200      	movcc	r2, #0
 8018ab6:	18a3      	adds	r3, r4, r2
 8018ab8:	50a7      	str	r7, [r4, r2]
 8018aba:	b107      	cbz	r7, 8018abe <rshift+0x68>
 8018abc:	3304      	adds	r3, #4
 8018abe:	1b1a      	subs	r2, r3, r4
 8018ac0:	42a3      	cmp	r3, r4
 8018ac2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018ac6:	bf08      	it	eq
 8018ac8:	2300      	moveq	r3, #0
 8018aca:	6102      	str	r2, [r0, #16]
 8018acc:	bf08      	it	eq
 8018ace:	6143      	streq	r3, [r0, #20]
 8018ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad4:	f8dc c000 	ldr.w	ip, [ip]
 8018ad8:	fa0c fc08 	lsl.w	ip, ip, r8
 8018adc:	ea4c 0707 	orr.w	r7, ip, r7
 8018ae0:	f849 7b04 	str.w	r7, [r9], #4
 8018ae4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018ae8:	40cf      	lsrs	r7, r1
 8018aea:	e7da      	b.n	8018aa2 <rshift+0x4c>
 8018aec:	f851 cb04 	ldr.w	ip, [r1], #4
 8018af0:	f847 cf04 	str.w	ip, [r7, #4]!
 8018af4:	e7c3      	b.n	8018a7e <rshift+0x28>
 8018af6:	4623      	mov	r3, r4
 8018af8:	e7e1      	b.n	8018abe <rshift+0x68>

08018afa <__hexdig_fun>:
 8018afa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018afe:	2b09      	cmp	r3, #9
 8018b00:	d802      	bhi.n	8018b08 <__hexdig_fun+0xe>
 8018b02:	3820      	subs	r0, #32
 8018b04:	b2c0      	uxtb	r0, r0
 8018b06:	4770      	bx	lr
 8018b08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018b0c:	2b05      	cmp	r3, #5
 8018b0e:	d801      	bhi.n	8018b14 <__hexdig_fun+0x1a>
 8018b10:	3847      	subs	r0, #71	; 0x47
 8018b12:	e7f7      	b.n	8018b04 <__hexdig_fun+0xa>
 8018b14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018b18:	2b05      	cmp	r3, #5
 8018b1a:	d801      	bhi.n	8018b20 <__hexdig_fun+0x26>
 8018b1c:	3827      	subs	r0, #39	; 0x27
 8018b1e:	e7f1      	b.n	8018b04 <__hexdig_fun+0xa>
 8018b20:	2000      	movs	r0, #0
 8018b22:	4770      	bx	lr

08018b24 <__gethex>:
 8018b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b28:	ed2d 8b02 	vpush	{d8}
 8018b2c:	b089      	sub	sp, #36	; 0x24
 8018b2e:	ee08 0a10 	vmov	s16, r0
 8018b32:	9304      	str	r3, [sp, #16]
 8018b34:	4bbc      	ldr	r3, [pc, #752]	; (8018e28 <__gethex+0x304>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	9301      	str	r3, [sp, #4]
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	468b      	mov	fp, r1
 8018b3e:	4690      	mov	r8, r2
 8018b40:	f7e7 fb7e 	bl	8000240 <strlen>
 8018b44:	9b01      	ldr	r3, [sp, #4]
 8018b46:	f8db 2000 	ldr.w	r2, [fp]
 8018b4a:	4403      	add	r3, r0
 8018b4c:	4682      	mov	sl, r0
 8018b4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018b52:	9305      	str	r3, [sp, #20]
 8018b54:	1c93      	adds	r3, r2, #2
 8018b56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018b5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018b5e:	32fe      	adds	r2, #254	; 0xfe
 8018b60:	18d1      	adds	r1, r2, r3
 8018b62:	461f      	mov	r7, r3
 8018b64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018b68:	9100      	str	r1, [sp, #0]
 8018b6a:	2830      	cmp	r0, #48	; 0x30
 8018b6c:	d0f8      	beq.n	8018b60 <__gethex+0x3c>
 8018b6e:	f7ff ffc4 	bl	8018afa <__hexdig_fun>
 8018b72:	4604      	mov	r4, r0
 8018b74:	2800      	cmp	r0, #0
 8018b76:	d13a      	bne.n	8018bee <__gethex+0xca>
 8018b78:	9901      	ldr	r1, [sp, #4]
 8018b7a:	4652      	mov	r2, sl
 8018b7c:	4638      	mov	r0, r7
 8018b7e:	f7fe f95f 	bl	8016e40 <strncmp>
 8018b82:	4605      	mov	r5, r0
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d168      	bne.n	8018c5a <__gethex+0x136>
 8018b88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018b8c:	eb07 060a 	add.w	r6, r7, sl
 8018b90:	f7ff ffb3 	bl	8018afa <__hexdig_fun>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d062      	beq.n	8018c5e <__gethex+0x13a>
 8018b98:	4633      	mov	r3, r6
 8018b9a:	7818      	ldrb	r0, [r3, #0]
 8018b9c:	2830      	cmp	r0, #48	; 0x30
 8018b9e:	461f      	mov	r7, r3
 8018ba0:	f103 0301 	add.w	r3, r3, #1
 8018ba4:	d0f9      	beq.n	8018b9a <__gethex+0x76>
 8018ba6:	f7ff ffa8 	bl	8018afa <__hexdig_fun>
 8018baa:	2301      	movs	r3, #1
 8018bac:	fab0 f480 	clz	r4, r0
 8018bb0:	0964      	lsrs	r4, r4, #5
 8018bb2:	4635      	mov	r5, r6
 8018bb4:	9300      	str	r3, [sp, #0]
 8018bb6:	463a      	mov	r2, r7
 8018bb8:	4616      	mov	r6, r2
 8018bba:	3201      	adds	r2, #1
 8018bbc:	7830      	ldrb	r0, [r6, #0]
 8018bbe:	f7ff ff9c 	bl	8018afa <__hexdig_fun>
 8018bc2:	2800      	cmp	r0, #0
 8018bc4:	d1f8      	bne.n	8018bb8 <__gethex+0x94>
 8018bc6:	9901      	ldr	r1, [sp, #4]
 8018bc8:	4652      	mov	r2, sl
 8018bca:	4630      	mov	r0, r6
 8018bcc:	f7fe f938 	bl	8016e40 <strncmp>
 8018bd0:	b980      	cbnz	r0, 8018bf4 <__gethex+0xd0>
 8018bd2:	b94d      	cbnz	r5, 8018be8 <__gethex+0xc4>
 8018bd4:	eb06 050a 	add.w	r5, r6, sl
 8018bd8:	462a      	mov	r2, r5
 8018bda:	4616      	mov	r6, r2
 8018bdc:	3201      	adds	r2, #1
 8018bde:	7830      	ldrb	r0, [r6, #0]
 8018be0:	f7ff ff8b 	bl	8018afa <__hexdig_fun>
 8018be4:	2800      	cmp	r0, #0
 8018be6:	d1f8      	bne.n	8018bda <__gethex+0xb6>
 8018be8:	1bad      	subs	r5, r5, r6
 8018bea:	00ad      	lsls	r5, r5, #2
 8018bec:	e004      	b.n	8018bf8 <__gethex+0xd4>
 8018bee:	2400      	movs	r4, #0
 8018bf0:	4625      	mov	r5, r4
 8018bf2:	e7e0      	b.n	8018bb6 <__gethex+0x92>
 8018bf4:	2d00      	cmp	r5, #0
 8018bf6:	d1f7      	bne.n	8018be8 <__gethex+0xc4>
 8018bf8:	7833      	ldrb	r3, [r6, #0]
 8018bfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018bfe:	2b50      	cmp	r3, #80	; 0x50
 8018c00:	d13b      	bne.n	8018c7a <__gethex+0x156>
 8018c02:	7873      	ldrb	r3, [r6, #1]
 8018c04:	2b2b      	cmp	r3, #43	; 0x2b
 8018c06:	d02c      	beq.n	8018c62 <__gethex+0x13e>
 8018c08:	2b2d      	cmp	r3, #45	; 0x2d
 8018c0a:	d02e      	beq.n	8018c6a <__gethex+0x146>
 8018c0c:	1c71      	adds	r1, r6, #1
 8018c0e:	f04f 0900 	mov.w	r9, #0
 8018c12:	7808      	ldrb	r0, [r1, #0]
 8018c14:	f7ff ff71 	bl	8018afa <__hexdig_fun>
 8018c18:	1e43      	subs	r3, r0, #1
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	2b18      	cmp	r3, #24
 8018c1e:	d82c      	bhi.n	8018c7a <__gethex+0x156>
 8018c20:	f1a0 0210 	sub.w	r2, r0, #16
 8018c24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018c28:	f7ff ff67 	bl	8018afa <__hexdig_fun>
 8018c2c:	1e43      	subs	r3, r0, #1
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	2b18      	cmp	r3, #24
 8018c32:	d91d      	bls.n	8018c70 <__gethex+0x14c>
 8018c34:	f1b9 0f00 	cmp.w	r9, #0
 8018c38:	d000      	beq.n	8018c3c <__gethex+0x118>
 8018c3a:	4252      	negs	r2, r2
 8018c3c:	4415      	add	r5, r2
 8018c3e:	f8cb 1000 	str.w	r1, [fp]
 8018c42:	b1e4      	cbz	r4, 8018c7e <__gethex+0x15a>
 8018c44:	9b00      	ldr	r3, [sp, #0]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	bf14      	ite	ne
 8018c4a:	2700      	movne	r7, #0
 8018c4c:	2706      	moveq	r7, #6
 8018c4e:	4638      	mov	r0, r7
 8018c50:	b009      	add	sp, #36	; 0x24
 8018c52:	ecbd 8b02 	vpop	{d8}
 8018c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c5a:	463e      	mov	r6, r7
 8018c5c:	4625      	mov	r5, r4
 8018c5e:	2401      	movs	r4, #1
 8018c60:	e7ca      	b.n	8018bf8 <__gethex+0xd4>
 8018c62:	f04f 0900 	mov.w	r9, #0
 8018c66:	1cb1      	adds	r1, r6, #2
 8018c68:	e7d3      	b.n	8018c12 <__gethex+0xee>
 8018c6a:	f04f 0901 	mov.w	r9, #1
 8018c6e:	e7fa      	b.n	8018c66 <__gethex+0x142>
 8018c70:	230a      	movs	r3, #10
 8018c72:	fb03 0202 	mla	r2, r3, r2, r0
 8018c76:	3a10      	subs	r2, #16
 8018c78:	e7d4      	b.n	8018c24 <__gethex+0x100>
 8018c7a:	4631      	mov	r1, r6
 8018c7c:	e7df      	b.n	8018c3e <__gethex+0x11a>
 8018c7e:	1bf3      	subs	r3, r6, r7
 8018c80:	3b01      	subs	r3, #1
 8018c82:	4621      	mov	r1, r4
 8018c84:	2b07      	cmp	r3, #7
 8018c86:	dc0b      	bgt.n	8018ca0 <__gethex+0x17c>
 8018c88:	ee18 0a10 	vmov	r0, s16
 8018c8c:	f000 fa74 	bl	8019178 <_Balloc>
 8018c90:	4604      	mov	r4, r0
 8018c92:	b940      	cbnz	r0, 8018ca6 <__gethex+0x182>
 8018c94:	4b65      	ldr	r3, [pc, #404]	; (8018e2c <__gethex+0x308>)
 8018c96:	4602      	mov	r2, r0
 8018c98:	21de      	movs	r1, #222	; 0xde
 8018c9a:	4865      	ldr	r0, [pc, #404]	; (8018e30 <__gethex+0x30c>)
 8018c9c:	f7fe ffa2 	bl	8017be4 <__assert_func>
 8018ca0:	3101      	adds	r1, #1
 8018ca2:	105b      	asrs	r3, r3, #1
 8018ca4:	e7ee      	b.n	8018c84 <__gethex+0x160>
 8018ca6:	f100 0914 	add.w	r9, r0, #20
 8018caa:	f04f 0b00 	mov.w	fp, #0
 8018cae:	f1ca 0301 	rsb	r3, sl, #1
 8018cb2:	f8cd 9008 	str.w	r9, [sp, #8]
 8018cb6:	f8cd b000 	str.w	fp, [sp]
 8018cba:	9306      	str	r3, [sp, #24]
 8018cbc:	42b7      	cmp	r7, r6
 8018cbe:	d340      	bcc.n	8018d42 <__gethex+0x21e>
 8018cc0:	9802      	ldr	r0, [sp, #8]
 8018cc2:	9b00      	ldr	r3, [sp, #0]
 8018cc4:	f840 3b04 	str.w	r3, [r0], #4
 8018cc8:	eba0 0009 	sub.w	r0, r0, r9
 8018ccc:	1080      	asrs	r0, r0, #2
 8018cce:	0146      	lsls	r6, r0, #5
 8018cd0:	6120      	str	r0, [r4, #16]
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f000 fb46 	bl	8019364 <__hi0bits>
 8018cd8:	1a30      	subs	r0, r6, r0
 8018cda:	f8d8 6000 	ldr.w	r6, [r8]
 8018cde:	42b0      	cmp	r0, r6
 8018ce0:	dd63      	ble.n	8018daa <__gethex+0x286>
 8018ce2:	1b87      	subs	r7, r0, r6
 8018ce4:	4639      	mov	r1, r7
 8018ce6:	4620      	mov	r0, r4
 8018ce8:	f000 fee1 	bl	8019aae <__any_on>
 8018cec:	4682      	mov	sl, r0
 8018cee:	b1a8      	cbz	r0, 8018d1c <__gethex+0x1f8>
 8018cf0:	1e7b      	subs	r3, r7, #1
 8018cf2:	1159      	asrs	r1, r3, #5
 8018cf4:	f003 021f 	and.w	r2, r3, #31
 8018cf8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018cfc:	f04f 0a01 	mov.w	sl, #1
 8018d00:	fa0a f202 	lsl.w	r2, sl, r2
 8018d04:	420a      	tst	r2, r1
 8018d06:	d009      	beq.n	8018d1c <__gethex+0x1f8>
 8018d08:	4553      	cmp	r3, sl
 8018d0a:	dd05      	ble.n	8018d18 <__gethex+0x1f4>
 8018d0c:	1eb9      	subs	r1, r7, #2
 8018d0e:	4620      	mov	r0, r4
 8018d10:	f000 fecd 	bl	8019aae <__any_on>
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d145      	bne.n	8018da4 <__gethex+0x280>
 8018d18:	f04f 0a02 	mov.w	sl, #2
 8018d1c:	4639      	mov	r1, r7
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f7ff fe99 	bl	8018a56 <rshift>
 8018d24:	443d      	add	r5, r7
 8018d26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d2a:	42ab      	cmp	r3, r5
 8018d2c:	da4c      	bge.n	8018dc8 <__gethex+0x2a4>
 8018d2e:	ee18 0a10 	vmov	r0, s16
 8018d32:	4621      	mov	r1, r4
 8018d34:	f000 fa60 	bl	80191f8 <_Bfree>
 8018d38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	6013      	str	r3, [r2, #0]
 8018d3e:	27a3      	movs	r7, #163	; 0xa3
 8018d40:	e785      	b.n	8018c4e <__gethex+0x12a>
 8018d42:	1e73      	subs	r3, r6, #1
 8018d44:	9a05      	ldr	r2, [sp, #20]
 8018d46:	9303      	str	r3, [sp, #12]
 8018d48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018d4c:	4293      	cmp	r3, r2
 8018d4e:	d019      	beq.n	8018d84 <__gethex+0x260>
 8018d50:	f1bb 0f20 	cmp.w	fp, #32
 8018d54:	d107      	bne.n	8018d66 <__gethex+0x242>
 8018d56:	9b02      	ldr	r3, [sp, #8]
 8018d58:	9a00      	ldr	r2, [sp, #0]
 8018d5a:	f843 2b04 	str.w	r2, [r3], #4
 8018d5e:	9302      	str	r3, [sp, #8]
 8018d60:	2300      	movs	r3, #0
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	469b      	mov	fp, r3
 8018d66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018d6a:	f7ff fec6 	bl	8018afa <__hexdig_fun>
 8018d6e:	9b00      	ldr	r3, [sp, #0]
 8018d70:	f000 000f 	and.w	r0, r0, #15
 8018d74:	fa00 f00b 	lsl.w	r0, r0, fp
 8018d78:	4303      	orrs	r3, r0
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	f10b 0b04 	add.w	fp, fp, #4
 8018d80:	9b03      	ldr	r3, [sp, #12]
 8018d82:	e00d      	b.n	8018da0 <__gethex+0x27c>
 8018d84:	9b03      	ldr	r3, [sp, #12]
 8018d86:	9a06      	ldr	r2, [sp, #24]
 8018d88:	4413      	add	r3, r2
 8018d8a:	42bb      	cmp	r3, r7
 8018d8c:	d3e0      	bcc.n	8018d50 <__gethex+0x22c>
 8018d8e:	4618      	mov	r0, r3
 8018d90:	9901      	ldr	r1, [sp, #4]
 8018d92:	9307      	str	r3, [sp, #28]
 8018d94:	4652      	mov	r2, sl
 8018d96:	f7fe f853 	bl	8016e40 <strncmp>
 8018d9a:	9b07      	ldr	r3, [sp, #28]
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	d1d7      	bne.n	8018d50 <__gethex+0x22c>
 8018da0:	461e      	mov	r6, r3
 8018da2:	e78b      	b.n	8018cbc <__gethex+0x198>
 8018da4:	f04f 0a03 	mov.w	sl, #3
 8018da8:	e7b8      	b.n	8018d1c <__gethex+0x1f8>
 8018daa:	da0a      	bge.n	8018dc2 <__gethex+0x29e>
 8018dac:	1a37      	subs	r7, r6, r0
 8018dae:	4621      	mov	r1, r4
 8018db0:	ee18 0a10 	vmov	r0, s16
 8018db4:	463a      	mov	r2, r7
 8018db6:	f000 fc3b 	bl	8019630 <__lshift>
 8018dba:	1bed      	subs	r5, r5, r7
 8018dbc:	4604      	mov	r4, r0
 8018dbe:	f100 0914 	add.w	r9, r0, #20
 8018dc2:	f04f 0a00 	mov.w	sl, #0
 8018dc6:	e7ae      	b.n	8018d26 <__gethex+0x202>
 8018dc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018dcc:	42a8      	cmp	r0, r5
 8018dce:	dd72      	ble.n	8018eb6 <__gethex+0x392>
 8018dd0:	1b45      	subs	r5, r0, r5
 8018dd2:	42ae      	cmp	r6, r5
 8018dd4:	dc36      	bgt.n	8018e44 <__gethex+0x320>
 8018dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018dda:	2b02      	cmp	r3, #2
 8018ddc:	d02a      	beq.n	8018e34 <__gethex+0x310>
 8018dde:	2b03      	cmp	r3, #3
 8018de0:	d02c      	beq.n	8018e3c <__gethex+0x318>
 8018de2:	2b01      	cmp	r3, #1
 8018de4:	d115      	bne.n	8018e12 <__gethex+0x2ee>
 8018de6:	42ae      	cmp	r6, r5
 8018de8:	d113      	bne.n	8018e12 <__gethex+0x2ee>
 8018dea:	2e01      	cmp	r6, #1
 8018dec:	d10b      	bne.n	8018e06 <__gethex+0x2e2>
 8018dee:	9a04      	ldr	r2, [sp, #16]
 8018df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018df4:	6013      	str	r3, [r2, #0]
 8018df6:	2301      	movs	r3, #1
 8018df8:	6123      	str	r3, [r4, #16]
 8018dfa:	f8c9 3000 	str.w	r3, [r9]
 8018dfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018e00:	2762      	movs	r7, #98	; 0x62
 8018e02:	601c      	str	r4, [r3, #0]
 8018e04:	e723      	b.n	8018c4e <__gethex+0x12a>
 8018e06:	1e71      	subs	r1, r6, #1
 8018e08:	4620      	mov	r0, r4
 8018e0a:	f000 fe50 	bl	8019aae <__any_on>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d1ed      	bne.n	8018dee <__gethex+0x2ca>
 8018e12:	ee18 0a10 	vmov	r0, s16
 8018e16:	4621      	mov	r1, r4
 8018e18:	f000 f9ee 	bl	80191f8 <_Bfree>
 8018e1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018e1e:	2300      	movs	r3, #0
 8018e20:	6013      	str	r3, [r2, #0]
 8018e22:	2750      	movs	r7, #80	; 0x50
 8018e24:	e713      	b.n	8018c4e <__gethex+0x12a>
 8018e26:	bf00      	nop
 8018e28:	0801de78 	.word	0x0801de78
 8018e2c:	0801dd98 	.word	0x0801dd98
 8018e30:	0801de0c 	.word	0x0801de0c
 8018e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d1eb      	bne.n	8018e12 <__gethex+0x2ee>
 8018e3a:	e7d8      	b.n	8018dee <__gethex+0x2ca>
 8018e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d1d5      	bne.n	8018dee <__gethex+0x2ca>
 8018e42:	e7e6      	b.n	8018e12 <__gethex+0x2ee>
 8018e44:	1e6f      	subs	r7, r5, #1
 8018e46:	f1ba 0f00 	cmp.w	sl, #0
 8018e4a:	d131      	bne.n	8018eb0 <__gethex+0x38c>
 8018e4c:	b127      	cbz	r7, 8018e58 <__gethex+0x334>
 8018e4e:	4639      	mov	r1, r7
 8018e50:	4620      	mov	r0, r4
 8018e52:	f000 fe2c 	bl	8019aae <__any_on>
 8018e56:	4682      	mov	sl, r0
 8018e58:	117b      	asrs	r3, r7, #5
 8018e5a:	2101      	movs	r1, #1
 8018e5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018e60:	f007 071f 	and.w	r7, r7, #31
 8018e64:	fa01 f707 	lsl.w	r7, r1, r7
 8018e68:	421f      	tst	r7, r3
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	bf18      	it	ne
 8018e70:	f04a 0a02 	orrne.w	sl, sl, #2
 8018e74:	1b76      	subs	r6, r6, r5
 8018e76:	f7ff fdee 	bl	8018a56 <rshift>
 8018e7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018e7e:	2702      	movs	r7, #2
 8018e80:	f1ba 0f00 	cmp.w	sl, #0
 8018e84:	d048      	beq.n	8018f18 <__gethex+0x3f4>
 8018e86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e8a:	2b02      	cmp	r3, #2
 8018e8c:	d015      	beq.n	8018eba <__gethex+0x396>
 8018e8e:	2b03      	cmp	r3, #3
 8018e90:	d017      	beq.n	8018ec2 <__gethex+0x39e>
 8018e92:	2b01      	cmp	r3, #1
 8018e94:	d109      	bne.n	8018eaa <__gethex+0x386>
 8018e96:	f01a 0f02 	tst.w	sl, #2
 8018e9a:	d006      	beq.n	8018eaa <__gethex+0x386>
 8018e9c:	f8d9 0000 	ldr.w	r0, [r9]
 8018ea0:	ea4a 0a00 	orr.w	sl, sl, r0
 8018ea4:	f01a 0f01 	tst.w	sl, #1
 8018ea8:	d10e      	bne.n	8018ec8 <__gethex+0x3a4>
 8018eaa:	f047 0710 	orr.w	r7, r7, #16
 8018eae:	e033      	b.n	8018f18 <__gethex+0x3f4>
 8018eb0:	f04f 0a01 	mov.w	sl, #1
 8018eb4:	e7d0      	b.n	8018e58 <__gethex+0x334>
 8018eb6:	2701      	movs	r7, #1
 8018eb8:	e7e2      	b.n	8018e80 <__gethex+0x35c>
 8018eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ebc:	f1c3 0301 	rsb	r3, r3, #1
 8018ec0:	9315      	str	r3, [sp, #84]	; 0x54
 8018ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d0f0      	beq.n	8018eaa <__gethex+0x386>
 8018ec8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018ecc:	f104 0314 	add.w	r3, r4, #20
 8018ed0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018ed4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018ed8:	f04f 0c00 	mov.w	ip, #0
 8018edc:	4618      	mov	r0, r3
 8018ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018ee6:	d01c      	beq.n	8018f22 <__gethex+0x3fe>
 8018ee8:	3201      	adds	r2, #1
 8018eea:	6002      	str	r2, [r0, #0]
 8018eec:	2f02      	cmp	r7, #2
 8018eee:	f104 0314 	add.w	r3, r4, #20
 8018ef2:	d13f      	bne.n	8018f74 <__gethex+0x450>
 8018ef4:	f8d8 2000 	ldr.w	r2, [r8]
 8018ef8:	3a01      	subs	r2, #1
 8018efa:	42b2      	cmp	r2, r6
 8018efc:	d10a      	bne.n	8018f14 <__gethex+0x3f0>
 8018efe:	1171      	asrs	r1, r6, #5
 8018f00:	2201      	movs	r2, #1
 8018f02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018f06:	f006 061f 	and.w	r6, r6, #31
 8018f0a:	fa02 f606 	lsl.w	r6, r2, r6
 8018f0e:	421e      	tst	r6, r3
 8018f10:	bf18      	it	ne
 8018f12:	4617      	movne	r7, r2
 8018f14:	f047 0720 	orr.w	r7, r7, #32
 8018f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f1a:	601c      	str	r4, [r3, #0]
 8018f1c:	9b04      	ldr	r3, [sp, #16]
 8018f1e:	601d      	str	r5, [r3, #0]
 8018f20:	e695      	b.n	8018c4e <__gethex+0x12a>
 8018f22:	4299      	cmp	r1, r3
 8018f24:	f843 cc04 	str.w	ip, [r3, #-4]
 8018f28:	d8d8      	bhi.n	8018edc <__gethex+0x3b8>
 8018f2a:	68a3      	ldr	r3, [r4, #8]
 8018f2c:	459b      	cmp	fp, r3
 8018f2e:	db19      	blt.n	8018f64 <__gethex+0x440>
 8018f30:	6861      	ldr	r1, [r4, #4]
 8018f32:	ee18 0a10 	vmov	r0, s16
 8018f36:	3101      	adds	r1, #1
 8018f38:	f000 f91e 	bl	8019178 <_Balloc>
 8018f3c:	4681      	mov	r9, r0
 8018f3e:	b918      	cbnz	r0, 8018f48 <__gethex+0x424>
 8018f40:	4b1a      	ldr	r3, [pc, #104]	; (8018fac <__gethex+0x488>)
 8018f42:	4602      	mov	r2, r0
 8018f44:	2184      	movs	r1, #132	; 0x84
 8018f46:	e6a8      	b.n	8018c9a <__gethex+0x176>
 8018f48:	6922      	ldr	r2, [r4, #16]
 8018f4a:	3202      	adds	r2, #2
 8018f4c:	f104 010c 	add.w	r1, r4, #12
 8018f50:	0092      	lsls	r2, r2, #2
 8018f52:	300c      	adds	r0, #12
 8018f54:	f7fd f87e 	bl	8016054 <memcpy>
 8018f58:	4621      	mov	r1, r4
 8018f5a:	ee18 0a10 	vmov	r0, s16
 8018f5e:	f000 f94b 	bl	80191f8 <_Bfree>
 8018f62:	464c      	mov	r4, r9
 8018f64:	6923      	ldr	r3, [r4, #16]
 8018f66:	1c5a      	adds	r2, r3, #1
 8018f68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018f6c:	6122      	str	r2, [r4, #16]
 8018f6e:	2201      	movs	r2, #1
 8018f70:	615a      	str	r2, [r3, #20]
 8018f72:	e7bb      	b.n	8018eec <__gethex+0x3c8>
 8018f74:	6922      	ldr	r2, [r4, #16]
 8018f76:	455a      	cmp	r2, fp
 8018f78:	dd0b      	ble.n	8018f92 <__gethex+0x46e>
 8018f7a:	2101      	movs	r1, #1
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	f7ff fd6a 	bl	8018a56 <rshift>
 8018f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f86:	3501      	adds	r5, #1
 8018f88:	42ab      	cmp	r3, r5
 8018f8a:	f6ff aed0 	blt.w	8018d2e <__gethex+0x20a>
 8018f8e:	2701      	movs	r7, #1
 8018f90:	e7c0      	b.n	8018f14 <__gethex+0x3f0>
 8018f92:	f016 061f 	ands.w	r6, r6, #31
 8018f96:	d0fa      	beq.n	8018f8e <__gethex+0x46a>
 8018f98:	449a      	add	sl, r3
 8018f9a:	f1c6 0620 	rsb	r6, r6, #32
 8018f9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018fa2:	f000 f9df 	bl	8019364 <__hi0bits>
 8018fa6:	42b0      	cmp	r0, r6
 8018fa8:	dbe7      	blt.n	8018f7a <__gethex+0x456>
 8018faa:	e7f0      	b.n	8018f8e <__gethex+0x46a>
 8018fac:	0801dd98 	.word	0x0801dd98

08018fb0 <L_shift>:
 8018fb0:	f1c2 0208 	rsb	r2, r2, #8
 8018fb4:	0092      	lsls	r2, r2, #2
 8018fb6:	b570      	push	{r4, r5, r6, lr}
 8018fb8:	f1c2 0620 	rsb	r6, r2, #32
 8018fbc:	6843      	ldr	r3, [r0, #4]
 8018fbe:	6804      	ldr	r4, [r0, #0]
 8018fc0:	fa03 f506 	lsl.w	r5, r3, r6
 8018fc4:	432c      	orrs	r4, r5
 8018fc6:	40d3      	lsrs	r3, r2
 8018fc8:	6004      	str	r4, [r0, #0]
 8018fca:	f840 3f04 	str.w	r3, [r0, #4]!
 8018fce:	4288      	cmp	r0, r1
 8018fd0:	d3f4      	bcc.n	8018fbc <L_shift+0xc>
 8018fd2:	bd70      	pop	{r4, r5, r6, pc}

08018fd4 <__match>:
 8018fd4:	b530      	push	{r4, r5, lr}
 8018fd6:	6803      	ldr	r3, [r0, #0]
 8018fd8:	3301      	adds	r3, #1
 8018fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018fde:	b914      	cbnz	r4, 8018fe6 <__match+0x12>
 8018fe0:	6003      	str	r3, [r0, #0]
 8018fe2:	2001      	movs	r0, #1
 8018fe4:	bd30      	pop	{r4, r5, pc}
 8018fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018fee:	2d19      	cmp	r5, #25
 8018ff0:	bf98      	it	ls
 8018ff2:	3220      	addls	r2, #32
 8018ff4:	42a2      	cmp	r2, r4
 8018ff6:	d0f0      	beq.n	8018fda <__match+0x6>
 8018ff8:	2000      	movs	r0, #0
 8018ffa:	e7f3      	b.n	8018fe4 <__match+0x10>

08018ffc <__hexnan>:
 8018ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019000:	680b      	ldr	r3, [r1, #0]
 8019002:	6801      	ldr	r1, [r0, #0]
 8019004:	115e      	asrs	r6, r3, #5
 8019006:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801900a:	f013 031f 	ands.w	r3, r3, #31
 801900e:	b087      	sub	sp, #28
 8019010:	bf18      	it	ne
 8019012:	3604      	addne	r6, #4
 8019014:	2500      	movs	r5, #0
 8019016:	1f37      	subs	r7, r6, #4
 8019018:	4682      	mov	sl, r0
 801901a:	4690      	mov	r8, r2
 801901c:	9301      	str	r3, [sp, #4]
 801901e:	f846 5c04 	str.w	r5, [r6, #-4]
 8019022:	46b9      	mov	r9, r7
 8019024:	463c      	mov	r4, r7
 8019026:	9502      	str	r5, [sp, #8]
 8019028:	46ab      	mov	fp, r5
 801902a:	784a      	ldrb	r2, [r1, #1]
 801902c:	1c4b      	adds	r3, r1, #1
 801902e:	9303      	str	r3, [sp, #12]
 8019030:	b342      	cbz	r2, 8019084 <__hexnan+0x88>
 8019032:	4610      	mov	r0, r2
 8019034:	9105      	str	r1, [sp, #20]
 8019036:	9204      	str	r2, [sp, #16]
 8019038:	f7ff fd5f 	bl	8018afa <__hexdig_fun>
 801903c:	2800      	cmp	r0, #0
 801903e:	d14f      	bne.n	80190e0 <__hexnan+0xe4>
 8019040:	9a04      	ldr	r2, [sp, #16]
 8019042:	9905      	ldr	r1, [sp, #20]
 8019044:	2a20      	cmp	r2, #32
 8019046:	d818      	bhi.n	801907a <__hexnan+0x7e>
 8019048:	9b02      	ldr	r3, [sp, #8]
 801904a:	459b      	cmp	fp, r3
 801904c:	dd13      	ble.n	8019076 <__hexnan+0x7a>
 801904e:	454c      	cmp	r4, r9
 8019050:	d206      	bcs.n	8019060 <__hexnan+0x64>
 8019052:	2d07      	cmp	r5, #7
 8019054:	dc04      	bgt.n	8019060 <__hexnan+0x64>
 8019056:	462a      	mov	r2, r5
 8019058:	4649      	mov	r1, r9
 801905a:	4620      	mov	r0, r4
 801905c:	f7ff ffa8 	bl	8018fb0 <L_shift>
 8019060:	4544      	cmp	r4, r8
 8019062:	d950      	bls.n	8019106 <__hexnan+0x10a>
 8019064:	2300      	movs	r3, #0
 8019066:	f1a4 0904 	sub.w	r9, r4, #4
 801906a:	f844 3c04 	str.w	r3, [r4, #-4]
 801906e:	f8cd b008 	str.w	fp, [sp, #8]
 8019072:	464c      	mov	r4, r9
 8019074:	461d      	mov	r5, r3
 8019076:	9903      	ldr	r1, [sp, #12]
 8019078:	e7d7      	b.n	801902a <__hexnan+0x2e>
 801907a:	2a29      	cmp	r2, #41	; 0x29
 801907c:	d156      	bne.n	801912c <__hexnan+0x130>
 801907e:	3102      	adds	r1, #2
 8019080:	f8ca 1000 	str.w	r1, [sl]
 8019084:	f1bb 0f00 	cmp.w	fp, #0
 8019088:	d050      	beq.n	801912c <__hexnan+0x130>
 801908a:	454c      	cmp	r4, r9
 801908c:	d206      	bcs.n	801909c <__hexnan+0xa0>
 801908e:	2d07      	cmp	r5, #7
 8019090:	dc04      	bgt.n	801909c <__hexnan+0xa0>
 8019092:	462a      	mov	r2, r5
 8019094:	4649      	mov	r1, r9
 8019096:	4620      	mov	r0, r4
 8019098:	f7ff ff8a 	bl	8018fb0 <L_shift>
 801909c:	4544      	cmp	r4, r8
 801909e:	d934      	bls.n	801910a <__hexnan+0x10e>
 80190a0:	f1a8 0204 	sub.w	r2, r8, #4
 80190a4:	4623      	mov	r3, r4
 80190a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80190aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80190ae:	429f      	cmp	r7, r3
 80190b0:	d2f9      	bcs.n	80190a6 <__hexnan+0xaa>
 80190b2:	1b3b      	subs	r3, r7, r4
 80190b4:	f023 0303 	bic.w	r3, r3, #3
 80190b8:	3304      	adds	r3, #4
 80190ba:	3401      	adds	r4, #1
 80190bc:	3e03      	subs	r6, #3
 80190be:	42b4      	cmp	r4, r6
 80190c0:	bf88      	it	hi
 80190c2:	2304      	movhi	r3, #4
 80190c4:	4443      	add	r3, r8
 80190c6:	2200      	movs	r2, #0
 80190c8:	f843 2b04 	str.w	r2, [r3], #4
 80190cc:	429f      	cmp	r7, r3
 80190ce:	d2fb      	bcs.n	80190c8 <__hexnan+0xcc>
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	b91b      	cbnz	r3, 80190dc <__hexnan+0xe0>
 80190d4:	4547      	cmp	r7, r8
 80190d6:	d127      	bne.n	8019128 <__hexnan+0x12c>
 80190d8:	2301      	movs	r3, #1
 80190da:	603b      	str	r3, [r7, #0]
 80190dc:	2005      	movs	r0, #5
 80190de:	e026      	b.n	801912e <__hexnan+0x132>
 80190e0:	3501      	adds	r5, #1
 80190e2:	2d08      	cmp	r5, #8
 80190e4:	f10b 0b01 	add.w	fp, fp, #1
 80190e8:	dd06      	ble.n	80190f8 <__hexnan+0xfc>
 80190ea:	4544      	cmp	r4, r8
 80190ec:	d9c3      	bls.n	8019076 <__hexnan+0x7a>
 80190ee:	2300      	movs	r3, #0
 80190f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80190f4:	2501      	movs	r5, #1
 80190f6:	3c04      	subs	r4, #4
 80190f8:	6822      	ldr	r2, [r4, #0]
 80190fa:	f000 000f 	and.w	r0, r0, #15
 80190fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019102:	6022      	str	r2, [r4, #0]
 8019104:	e7b7      	b.n	8019076 <__hexnan+0x7a>
 8019106:	2508      	movs	r5, #8
 8019108:	e7b5      	b.n	8019076 <__hexnan+0x7a>
 801910a:	9b01      	ldr	r3, [sp, #4]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d0df      	beq.n	80190d0 <__hexnan+0xd4>
 8019110:	f04f 32ff 	mov.w	r2, #4294967295
 8019114:	f1c3 0320 	rsb	r3, r3, #32
 8019118:	fa22 f303 	lsr.w	r3, r2, r3
 801911c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019120:	401a      	ands	r2, r3
 8019122:	f846 2c04 	str.w	r2, [r6, #-4]
 8019126:	e7d3      	b.n	80190d0 <__hexnan+0xd4>
 8019128:	3f04      	subs	r7, #4
 801912a:	e7d1      	b.n	80190d0 <__hexnan+0xd4>
 801912c:	2004      	movs	r0, #4
 801912e:	b007      	add	sp, #28
 8019130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019134 <_localeconv_r>:
 8019134:	4800      	ldr	r0, [pc, #0]	; (8019138 <_localeconv_r+0x4>)
 8019136:	4770      	bx	lr
 8019138:	200001b4 	.word	0x200001b4

0801913c <__retarget_lock_init_recursive>:
 801913c:	4770      	bx	lr

0801913e <__retarget_lock_acquire_recursive>:
 801913e:	4770      	bx	lr

08019140 <__retarget_lock_release_recursive>:
 8019140:	4770      	bx	lr
	...

08019144 <malloc>:
 8019144:	4b02      	ldr	r3, [pc, #8]	; (8019150 <malloc+0xc>)
 8019146:	4601      	mov	r1, r0
 8019148:	6818      	ldr	r0, [r3, #0]
 801914a:	f000 bd31 	b.w	8019bb0 <_malloc_r>
 801914e:	bf00      	nop
 8019150:	2000005c 	.word	0x2000005c

08019154 <__ascii_mbtowc>:
 8019154:	b082      	sub	sp, #8
 8019156:	b901      	cbnz	r1, 801915a <__ascii_mbtowc+0x6>
 8019158:	a901      	add	r1, sp, #4
 801915a:	b142      	cbz	r2, 801916e <__ascii_mbtowc+0x1a>
 801915c:	b14b      	cbz	r3, 8019172 <__ascii_mbtowc+0x1e>
 801915e:	7813      	ldrb	r3, [r2, #0]
 8019160:	600b      	str	r3, [r1, #0]
 8019162:	7812      	ldrb	r2, [r2, #0]
 8019164:	1e10      	subs	r0, r2, #0
 8019166:	bf18      	it	ne
 8019168:	2001      	movne	r0, #1
 801916a:	b002      	add	sp, #8
 801916c:	4770      	bx	lr
 801916e:	4610      	mov	r0, r2
 8019170:	e7fb      	b.n	801916a <__ascii_mbtowc+0x16>
 8019172:	f06f 0001 	mvn.w	r0, #1
 8019176:	e7f8      	b.n	801916a <__ascii_mbtowc+0x16>

08019178 <_Balloc>:
 8019178:	b570      	push	{r4, r5, r6, lr}
 801917a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801917c:	4604      	mov	r4, r0
 801917e:	460d      	mov	r5, r1
 8019180:	b976      	cbnz	r6, 80191a0 <_Balloc+0x28>
 8019182:	2010      	movs	r0, #16
 8019184:	f7ff ffde 	bl	8019144 <malloc>
 8019188:	4602      	mov	r2, r0
 801918a:	6260      	str	r0, [r4, #36]	; 0x24
 801918c:	b920      	cbnz	r0, 8019198 <_Balloc+0x20>
 801918e:	4b18      	ldr	r3, [pc, #96]	; (80191f0 <_Balloc+0x78>)
 8019190:	4818      	ldr	r0, [pc, #96]	; (80191f4 <_Balloc+0x7c>)
 8019192:	2166      	movs	r1, #102	; 0x66
 8019194:	f7fe fd26 	bl	8017be4 <__assert_func>
 8019198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801919c:	6006      	str	r6, [r0, #0]
 801919e:	60c6      	str	r6, [r0, #12]
 80191a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80191a2:	68f3      	ldr	r3, [r6, #12]
 80191a4:	b183      	cbz	r3, 80191c8 <_Balloc+0x50>
 80191a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191a8:	68db      	ldr	r3, [r3, #12]
 80191aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191ae:	b9b8      	cbnz	r0, 80191e0 <_Balloc+0x68>
 80191b0:	2101      	movs	r1, #1
 80191b2:	fa01 f605 	lsl.w	r6, r1, r5
 80191b6:	1d72      	adds	r2, r6, #5
 80191b8:	0092      	lsls	r2, r2, #2
 80191ba:	4620      	mov	r0, r4
 80191bc:	f000 fc98 	bl	8019af0 <_calloc_r>
 80191c0:	b160      	cbz	r0, 80191dc <_Balloc+0x64>
 80191c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80191c6:	e00e      	b.n	80191e6 <_Balloc+0x6e>
 80191c8:	2221      	movs	r2, #33	; 0x21
 80191ca:	2104      	movs	r1, #4
 80191cc:	4620      	mov	r0, r4
 80191ce:	f000 fc8f 	bl	8019af0 <_calloc_r>
 80191d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191d4:	60f0      	str	r0, [r6, #12]
 80191d6:	68db      	ldr	r3, [r3, #12]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d1e4      	bne.n	80191a6 <_Balloc+0x2e>
 80191dc:	2000      	movs	r0, #0
 80191de:	bd70      	pop	{r4, r5, r6, pc}
 80191e0:	6802      	ldr	r2, [r0, #0]
 80191e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80191e6:	2300      	movs	r3, #0
 80191e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80191ec:	e7f7      	b.n	80191de <_Balloc+0x66>
 80191ee:	bf00      	nop
 80191f0:	0801dc29 	.word	0x0801dc29
 80191f4:	0801de8c 	.word	0x0801de8c

080191f8 <_Bfree>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80191fc:	4605      	mov	r5, r0
 80191fe:	460c      	mov	r4, r1
 8019200:	b976      	cbnz	r6, 8019220 <_Bfree+0x28>
 8019202:	2010      	movs	r0, #16
 8019204:	f7ff ff9e 	bl	8019144 <malloc>
 8019208:	4602      	mov	r2, r0
 801920a:	6268      	str	r0, [r5, #36]	; 0x24
 801920c:	b920      	cbnz	r0, 8019218 <_Bfree+0x20>
 801920e:	4b09      	ldr	r3, [pc, #36]	; (8019234 <_Bfree+0x3c>)
 8019210:	4809      	ldr	r0, [pc, #36]	; (8019238 <_Bfree+0x40>)
 8019212:	218a      	movs	r1, #138	; 0x8a
 8019214:	f7fe fce6 	bl	8017be4 <__assert_func>
 8019218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801921c:	6006      	str	r6, [r0, #0]
 801921e:	60c6      	str	r6, [r0, #12]
 8019220:	b13c      	cbz	r4, 8019232 <_Bfree+0x3a>
 8019222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019224:	6862      	ldr	r2, [r4, #4]
 8019226:	68db      	ldr	r3, [r3, #12]
 8019228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801922c:	6021      	str	r1, [r4, #0]
 801922e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019232:	bd70      	pop	{r4, r5, r6, pc}
 8019234:	0801dc29 	.word	0x0801dc29
 8019238:	0801de8c 	.word	0x0801de8c

0801923c <__multadd>:
 801923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019240:	690e      	ldr	r6, [r1, #16]
 8019242:	4607      	mov	r7, r0
 8019244:	4698      	mov	r8, r3
 8019246:	460c      	mov	r4, r1
 8019248:	f101 0014 	add.w	r0, r1, #20
 801924c:	2300      	movs	r3, #0
 801924e:	6805      	ldr	r5, [r0, #0]
 8019250:	b2a9      	uxth	r1, r5
 8019252:	fb02 8101 	mla	r1, r2, r1, r8
 8019256:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801925a:	0c2d      	lsrs	r5, r5, #16
 801925c:	fb02 c505 	mla	r5, r2, r5, ip
 8019260:	b289      	uxth	r1, r1
 8019262:	3301      	adds	r3, #1
 8019264:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019268:	429e      	cmp	r6, r3
 801926a:	f840 1b04 	str.w	r1, [r0], #4
 801926e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019272:	dcec      	bgt.n	801924e <__multadd+0x12>
 8019274:	f1b8 0f00 	cmp.w	r8, #0
 8019278:	d022      	beq.n	80192c0 <__multadd+0x84>
 801927a:	68a3      	ldr	r3, [r4, #8]
 801927c:	42b3      	cmp	r3, r6
 801927e:	dc19      	bgt.n	80192b4 <__multadd+0x78>
 8019280:	6861      	ldr	r1, [r4, #4]
 8019282:	4638      	mov	r0, r7
 8019284:	3101      	adds	r1, #1
 8019286:	f7ff ff77 	bl	8019178 <_Balloc>
 801928a:	4605      	mov	r5, r0
 801928c:	b928      	cbnz	r0, 801929a <__multadd+0x5e>
 801928e:	4602      	mov	r2, r0
 8019290:	4b0d      	ldr	r3, [pc, #52]	; (80192c8 <__multadd+0x8c>)
 8019292:	480e      	ldr	r0, [pc, #56]	; (80192cc <__multadd+0x90>)
 8019294:	21b5      	movs	r1, #181	; 0xb5
 8019296:	f7fe fca5 	bl	8017be4 <__assert_func>
 801929a:	6922      	ldr	r2, [r4, #16]
 801929c:	3202      	adds	r2, #2
 801929e:	f104 010c 	add.w	r1, r4, #12
 80192a2:	0092      	lsls	r2, r2, #2
 80192a4:	300c      	adds	r0, #12
 80192a6:	f7fc fed5 	bl	8016054 <memcpy>
 80192aa:	4621      	mov	r1, r4
 80192ac:	4638      	mov	r0, r7
 80192ae:	f7ff ffa3 	bl	80191f8 <_Bfree>
 80192b2:	462c      	mov	r4, r5
 80192b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80192b8:	3601      	adds	r6, #1
 80192ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80192be:	6126      	str	r6, [r4, #16]
 80192c0:	4620      	mov	r0, r4
 80192c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c6:	bf00      	nop
 80192c8:	0801dd98 	.word	0x0801dd98
 80192cc:	0801de8c 	.word	0x0801de8c

080192d0 <__s2b>:
 80192d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192d4:	460c      	mov	r4, r1
 80192d6:	4615      	mov	r5, r2
 80192d8:	461f      	mov	r7, r3
 80192da:	2209      	movs	r2, #9
 80192dc:	3308      	adds	r3, #8
 80192de:	4606      	mov	r6, r0
 80192e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80192e4:	2100      	movs	r1, #0
 80192e6:	2201      	movs	r2, #1
 80192e8:	429a      	cmp	r2, r3
 80192ea:	db09      	blt.n	8019300 <__s2b+0x30>
 80192ec:	4630      	mov	r0, r6
 80192ee:	f7ff ff43 	bl	8019178 <_Balloc>
 80192f2:	b940      	cbnz	r0, 8019306 <__s2b+0x36>
 80192f4:	4602      	mov	r2, r0
 80192f6:	4b19      	ldr	r3, [pc, #100]	; (801935c <__s2b+0x8c>)
 80192f8:	4819      	ldr	r0, [pc, #100]	; (8019360 <__s2b+0x90>)
 80192fa:	21ce      	movs	r1, #206	; 0xce
 80192fc:	f7fe fc72 	bl	8017be4 <__assert_func>
 8019300:	0052      	lsls	r2, r2, #1
 8019302:	3101      	adds	r1, #1
 8019304:	e7f0      	b.n	80192e8 <__s2b+0x18>
 8019306:	9b08      	ldr	r3, [sp, #32]
 8019308:	6143      	str	r3, [r0, #20]
 801930a:	2d09      	cmp	r5, #9
 801930c:	f04f 0301 	mov.w	r3, #1
 8019310:	6103      	str	r3, [r0, #16]
 8019312:	dd16      	ble.n	8019342 <__s2b+0x72>
 8019314:	f104 0909 	add.w	r9, r4, #9
 8019318:	46c8      	mov	r8, r9
 801931a:	442c      	add	r4, r5
 801931c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019320:	4601      	mov	r1, r0
 8019322:	3b30      	subs	r3, #48	; 0x30
 8019324:	220a      	movs	r2, #10
 8019326:	4630      	mov	r0, r6
 8019328:	f7ff ff88 	bl	801923c <__multadd>
 801932c:	45a0      	cmp	r8, r4
 801932e:	d1f5      	bne.n	801931c <__s2b+0x4c>
 8019330:	f1a5 0408 	sub.w	r4, r5, #8
 8019334:	444c      	add	r4, r9
 8019336:	1b2d      	subs	r5, r5, r4
 8019338:	1963      	adds	r3, r4, r5
 801933a:	42bb      	cmp	r3, r7
 801933c:	db04      	blt.n	8019348 <__s2b+0x78>
 801933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019342:	340a      	adds	r4, #10
 8019344:	2509      	movs	r5, #9
 8019346:	e7f6      	b.n	8019336 <__s2b+0x66>
 8019348:	f814 3b01 	ldrb.w	r3, [r4], #1
 801934c:	4601      	mov	r1, r0
 801934e:	3b30      	subs	r3, #48	; 0x30
 8019350:	220a      	movs	r2, #10
 8019352:	4630      	mov	r0, r6
 8019354:	f7ff ff72 	bl	801923c <__multadd>
 8019358:	e7ee      	b.n	8019338 <__s2b+0x68>
 801935a:	bf00      	nop
 801935c:	0801dd98 	.word	0x0801dd98
 8019360:	0801de8c 	.word	0x0801de8c

08019364 <__hi0bits>:
 8019364:	0c03      	lsrs	r3, r0, #16
 8019366:	041b      	lsls	r3, r3, #16
 8019368:	b9d3      	cbnz	r3, 80193a0 <__hi0bits+0x3c>
 801936a:	0400      	lsls	r0, r0, #16
 801936c:	2310      	movs	r3, #16
 801936e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019372:	bf04      	itt	eq
 8019374:	0200      	lsleq	r0, r0, #8
 8019376:	3308      	addeq	r3, #8
 8019378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801937c:	bf04      	itt	eq
 801937e:	0100      	lsleq	r0, r0, #4
 8019380:	3304      	addeq	r3, #4
 8019382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019386:	bf04      	itt	eq
 8019388:	0080      	lsleq	r0, r0, #2
 801938a:	3302      	addeq	r3, #2
 801938c:	2800      	cmp	r0, #0
 801938e:	db05      	blt.n	801939c <__hi0bits+0x38>
 8019390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019394:	f103 0301 	add.w	r3, r3, #1
 8019398:	bf08      	it	eq
 801939a:	2320      	moveq	r3, #32
 801939c:	4618      	mov	r0, r3
 801939e:	4770      	bx	lr
 80193a0:	2300      	movs	r3, #0
 80193a2:	e7e4      	b.n	801936e <__hi0bits+0xa>

080193a4 <__lo0bits>:
 80193a4:	6803      	ldr	r3, [r0, #0]
 80193a6:	f013 0207 	ands.w	r2, r3, #7
 80193aa:	4601      	mov	r1, r0
 80193ac:	d00b      	beq.n	80193c6 <__lo0bits+0x22>
 80193ae:	07da      	lsls	r2, r3, #31
 80193b0:	d424      	bmi.n	80193fc <__lo0bits+0x58>
 80193b2:	0798      	lsls	r0, r3, #30
 80193b4:	bf49      	itett	mi
 80193b6:	085b      	lsrmi	r3, r3, #1
 80193b8:	089b      	lsrpl	r3, r3, #2
 80193ba:	2001      	movmi	r0, #1
 80193bc:	600b      	strmi	r3, [r1, #0]
 80193be:	bf5c      	itt	pl
 80193c0:	600b      	strpl	r3, [r1, #0]
 80193c2:	2002      	movpl	r0, #2
 80193c4:	4770      	bx	lr
 80193c6:	b298      	uxth	r0, r3
 80193c8:	b9b0      	cbnz	r0, 80193f8 <__lo0bits+0x54>
 80193ca:	0c1b      	lsrs	r3, r3, #16
 80193cc:	2010      	movs	r0, #16
 80193ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80193d2:	bf04      	itt	eq
 80193d4:	0a1b      	lsreq	r3, r3, #8
 80193d6:	3008      	addeq	r0, #8
 80193d8:	071a      	lsls	r2, r3, #28
 80193da:	bf04      	itt	eq
 80193dc:	091b      	lsreq	r3, r3, #4
 80193de:	3004      	addeq	r0, #4
 80193e0:	079a      	lsls	r2, r3, #30
 80193e2:	bf04      	itt	eq
 80193e4:	089b      	lsreq	r3, r3, #2
 80193e6:	3002      	addeq	r0, #2
 80193e8:	07da      	lsls	r2, r3, #31
 80193ea:	d403      	bmi.n	80193f4 <__lo0bits+0x50>
 80193ec:	085b      	lsrs	r3, r3, #1
 80193ee:	f100 0001 	add.w	r0, r0, #1
 80193f2:	d005      	beq.n	8019400 <__lo0bits+0x5c>
 80193f4:	600b      	str	r3, [r1, #0]
 80193f6:	4770      	bx	lr
 80193f8:	4610      	mov	r0, r2
 80193fa:	e7e8      	b.n	80193ce <__lo0bits+0x2a>
 80193fc:	2000      	movs	r0, #0
 80193fe:	4770      	bx	lr
 8019400:	2020      	movs	r0, #32
 8019402:	4770      	bx	lr

08019404 <__i2b>:
 8019404:	b510      	push	{r4, lr}
 8019406:	460c      	mov	r4, r1
 8019408:	2101      	movs	r1, #1
 801940a:	f7ff feb5 	bl	8019178 <_Balloc>
 801940e:	4602      	mov	r2, r0
 8019410:	b928      	cbnz	r0, 801941e <__i2b+0x1a>
 8019412:	4b05      	ldr	r3, [pc, #20]	; (8019428 <__i2b+0x24>)
 8019414:	4805      	ldr	r0, [pc, #20]	; (801942c <__i2b+0x28>)
 8019416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801941a:	f7fe fbe3 	bl	8017be4 <__assert_func>
 801941e:	2301      	movs	r3, #1
 8019420:	6144      	str	r4, [r0, #20]
 8019422:	6103      	str	r3, [r0, #16]
 8019424:	bd10      	pop	{r4, pc}
 8019426:	bf00      	nop
 8019428:	0801dd98 	.word	0x0801dd98
 801942c:	0801de8c 	.word	0x0801de8c

08019430 <__multiply>:
 8019430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019434:	4614      	mov	r4, r2
 8019436:	690a      	ldr	r2, [r1, #16]
 8019438:	6923      	ldr	r3, [r4, #16]
 801943a:	429a      	cmp	r2, r3
 801943c:	bfb8      	it	lt
 801943e:	460b      	movlt	r3, r1
 8019440:	460d      	mov	r5, r1
 8019442:	bfbc      	itt	lt
 8019444:	4625      	movlt	r5, r4
 8019446:	461c      	movlt	r4, r3
 8019448:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801944c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019450:	68ab      	ldr	r3, [r5, #8]
 8019452:	6869      	ldr	r1, [r5, #4]
 8019454:	eb0a 0709 	add.w	r7, sl, r9
 8019458:	42bb      	cmp	r3, r7
 801945a:	b085      	sub	sp, #20
 801945c:	bfb8      	it	lt
 801945e:	3101      	addlt	r1, #1
 8019460:	f7ff fe8a 	bl	8019178 <_Balloc>
 8019464:	b930      	cbnz	r0, 8019474 <__multiply+0x44>
 8019466:	4602      	mov	r2, r0
 8019468:	4b42      	ldr	r3, [pc, #264]	; (8019574 <__multiply+0x144>)
 801946a:	4843      	ldr	r0, [pc, #268]	; (8019578 <__multiply+0x148>)
 801946c:	f240 115d 	movw	r1, #349	; 0x15d
 8019470:	f7fe fbb8 	bl	8017be4 <__assert_func>
 8019474:	f100 0614 	add.w	r6, r0, #20
 8019478:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801947c:	4633      	mov	r3, r6
 801947e:	2200      	movs	r2, #0
 8019480:	4543      	cmp	r3, r8
 8019482:	d31e      	bcc.n	80194c2 <__multiply+0x92>
 8019484:	f105 0c14 	add.w	ip, r5, #20
 8019488:	f104 0314 	add.w	r3, r4, #20
 801948c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019490:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019494:	9202      	str	r2, [sp, #8]
 8019496:	ebac 0205 	sub.w	r2, ip, r5
 801949a:	3a15      	subs	r2, #21
 801949c:	f022 0203 	bic.w	r2, r2, #3
 80194a0:	3204      	adds	r2, #4
 80194a2:	f105 0115 	add.w	r1, r5, #21
 80194a6:	458c      	cmp	ip, r1
 80194a8:	bf38      	it	cc
 80194aa:	2204      	movcc	r2, #4
 80194ac:	9201      	str	r2, [sp, #4]
 80194ae:	9a02      	ldr	r2, [sp, #8]
 80194b0:	9303      	str	r3, [sp, #12]
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d808      	bhi.n	80194c8 <__multiply+0x98>
 80194b6:	2f00      	cmp	r7, #0
 80194b8:	dc55      	bgt.n	8019566 <__multiply+0x136>
 80194ba:	6107      	str	r7, [r0, #16]
 80194bc:	b005      	add	sp, #20
 80194be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c2:	f843 2b04 	str.w	r2, [r3], #4
 80194c6:	e7db      	b.n	8019480 <__multiply+0x50>
 80194c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80194cc:	f1ba 0f00 	cmp.w	sl, #0
 80194d0:	d020      	beq.n	8019514 <__multiply+0xe4>
 80194d2:	f105 0e14 	add.w	lr, r5, #20
 80194d6:	46b1      	mov	r9, r6
 80194d8:	2200      	movs	r2, #0
 80194da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80194de:	f8d9 b000 	ldr.w	fp, [r9]
 80194e2:	b2a1      	uxth	r1, r4
 80194e4:	fa1f fb8b 	uxth.w	fp, fp
 80194e8:	fb0a b101 	mla	r1, sl, r1, fp
 80194ec:	4411      	add	r1, r2
 80194ee:	f8d9 2000 	ldr.w	r2, [r9]
 80194f2:	0c24      	lsrs	r4, r4, #16
 80194f4:	0c12      	lsrs	r2, r2, #16
 80194f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80194fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80194fe:	b289      	uxth	r1, r1
 8019500:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019504:	45f4      	cmp	ip, lr
 8019506:	f849 1b04 	str.w	r1, [r9], #4
 801950a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801950e:	d8e4      	bhi.n	80194da <__multiply+0xaa>
 8019510:	9901      	ldr	r1, [sp, #4]
 8019512:	5072      	str	r2, [r6, r1]
 8019514:	9a03      	ldr	r2, [sp, #12]
 8019516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801951a:	3304      	adds	r3, #4
 801951c:	f1b9 0f00 	cmp.w	r9, #0
 8019520:	d01f      	beq.n	8019562 <__multiply+0x132>
 8019522:	6834      	ldr	r4, [r6, #0]
 8019524:	f105 0114 	add.w	r1, r5, #20
 8019528:	46b6      	mov	lr, r6
 801952a:	f04f 0a00 	mov.w	sl, #0
 801952e:	880a      	ldrh	r2, [r1, #0]
 8019530:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019534:	fb09 b202 	mla	r2, r9, r2, fp
 8019538:	4492      	add	sl, r2
 801953a:	b2a4      	uxth	r4, r4
 801953c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019540:	f84e 4b04 	str.w	r4, [lr], #4
 8019544:	f851 4b04 	ldr.w	r4, [r1], #4
 8019548:	f8be 2000 	ldrh.w	r2, [lr]
 801954c:	0c24      	lsrs	r4, r4, #16
 801954e:	fb09 2404 	mla	r4, r9, r4, r2
 8019552:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019556:	458c      	cmp	ip, r1
 8019558:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801955c:	d8e7      	bhi.n	801952e <__multiply+0xfe>
 801955e:	9a01      	ldr	r2, [sp, #4]
 8019560:	50b4      	str	r4, [r6, r2]
 8019562:	3604      	adds	r6, #4
 8019564:	e7a3      	b.n	80194ae <__multiply+0x7e>
 8019566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801956a:	2b00      	cmp	r3, #0
 801956c:	d1a5      	bne.n	80194ba <__multiply+0x8a>
 801956e:	3f01      	subs	r7, #1
 8019570:	e7a1      	b.n	80194b6 <__multiply+0x86>
 8019572:	bf00      	nop
 8019574:	0801dd98 	.word	0x0801dd98
 8019578:	0801de8c 	.word	0x0801de8c

0801957c <__pow5mult>:
 801957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019580:	4615      	mov	r5, r2
 8019582:	f012 0203 	ands.w	r2, r2, #3
 8019586:	4606      	mov	r6, r0
 8019588:	460f      	mov	r7, r1
 801958a:	d007      	beq.n	801959c <__pow5mult+0x20>
 801958c:	4c25      	ldr	r4, [pc, #148]	; (8019624 <__pow5mult+0xa8>)
 801958e:	3a01      	subs	r2, #1
 8019590:	2300      	movs	r3, #0
 8019592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019596:	f7ff fe51 	bl	801923c <__multadd>
 801959a:	4607      	mov	r7, r0
 801959c:	10ad      	asrs	r5, r5, #2
 801959e:	d03d      	beq.n	801961c <__pow5mult+0xa0>
 80195a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195a2:	b97c      	cbnz	r4, 80195c4 <__pow5mult+0x48>
 80195a4:	2010      	movs	r0, #16
 80195a6:	f7ff fdcd 	bl	8019144 <malloc>
 80195aa:	4602      	mov	r2, r0
 80195ac:	6270      	str	r0, [r6, #36]	; 0x24
 80195ae:	b928      	cbnz	r0, 80195bc <__pow5mult+0x40>
 80195b0:	4b1d      	ldr	r3, [pc, #116]	; (8019628 <__pow5mult+0xac>)
 80195b2:	481e      	ldr	r0, [pc, #120]	; (801962c <__pow5mult+0xb0>)
 80195b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80195b8:	f7fe fb14 	bl	8017be4 <__assert_func>
 80195bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80195c0:	6004      	str	r4, [r0, #0]
 80195c2:	60c4      	str	r4, [r0, #12]
 80195c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80195c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80195cc:	b94c      	cbnz	r4, 80195e2 <__pow5mult+0x66>
 80195ce:	f240 2171 	movw	r1, #625	; 0x271
 80195d2:	4630      	mov	r0, r6
 80195d4:	f7ff ff16 	bl	8019404 <__i2b>
 80195d8:	2300      	movs	r3, #0
 80195da:	f8c8 0008 	str.w	r0, [r8, #8]
 80195de:	4604      	mov	r4, r0
 80195e0:	6003      	str	r3, [r0, #0]
 80195e2:	f04f 0900 	mov.w	r9, #0
 80195e6:	07eb      	lsls	r3, r5, #31
 80195e8:	d50a      	bpl.n	8019600 <__pow5mult+0x84>
 80195ea:	4639      	mov	r1, r7
 80195ec:	4622      	mov	r2, r4
 80195ee:	4630      	mov	r0, r6
 80195f0:	f7ff ff1e 	bl	8019430 <__multiply>
 80195f4:	4639      	mov	r1, r7
 80195f6:	4680      	mov	r8, r0
 80195f8:	4630      	mov	r0, r6
 80195fa:	f7ff fdfd 	bl	80191f8 <_Bfree>
 80195fe:	4647      	mov	r7, r8
 8019600:	106d      	asrs	r5, r5, #1
 8019602:	d00b      	beq.n	801961c <__pow5mult+0xa0>
 8019604:	6820      	ldr	r0, [r4, #0]
 8019606:	b938      	cbnz	r0, 8019618 <__pow5mult+0x9c>
 8019608:	4622      	mov	r2, r4
 801960a:	4621      	mov	r1, r4
 801960c:	4630      	mov	r0, r6
 801960e:	f7ff ff0f 	bl	8019430 <__multiply>
 8019612:	6020      	str	r0, [r4, #0]
 8019614:	f8c0 9000 	str.w	r9, [r0]
 8019618:	4604      	mov	r4, r0
 801961a:	e7e4      	b.n	80195e6 <__pow5mult+0x6a>
 801961c:	4638      	mov	r0, r7
 801961e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019622:	bf00      	nop
 8019624:	0801dfe0 	.word	0x0801dfe0
 8019628:	0801dc29 	.word	0x0801dc29
 801962c:	0801de8c 	.word	0x0801de8c

08019630 <__lshift>:
 8019630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019634:	460c      	mov	r4, r1
 8019636:	6849      	ldr	r1, [r1, #4]
 8019638:	6923      	ldr	r3, [r4, #16]
 801963a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801963e:	68a3      	ldr	r3, [r4, #8]
 8019640:	4607      	mov	r7, r0
 8019642:	4691      	mov	r9, r2
 8019644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019648:	f108 0601 	add.w	r6, r8, #1
 801964c:	42b3      	cmp	r3, r6
 801964e:	db0b      	blt.n	8019668 <__lshift+0x38>
 8019650:	4638      	mov	r0, r7
 8019652:	f7ff fd91 	bl	8019178 <_Balloc>
 8019656:	4605      	mov	r5, r0
 8019658:	b948      	cbnz	r0, 801966e <__lshift+0x3e>
 801965a:	4602      	mov	r2, r0
 801965c:	4b28      	ldr	r3, [pc, #160]	; (8019700 <__lshift+0xd0>)
 801965e:	4829      	ldr	r0, [pc, #164]	; (8019704 <__lshift+0xd4>)
 8019660:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019664:	f7fe fabe 	bl	8017be4 <__assert_func>
 8019668:	3101      	adds	r1, #1
 801966a:	005b      	lsls	r3, r3, #1
 801966c:	e7ee      	b.n	801964c <__lshift+0x1c>
 801966e:	2300      	movs	r3, #0
 8019670:	f100 0114 	add.w	r1, r0, #20
 8019674:	f100 0210 	add.w	r2, r0, #16
 8019678:	4618      	mov	r0, r3
 801967a:	4553      	cmp	r3, sl
 801967c:	db33      	blt.n	80196e6 <__lshift+0xb6>
 801967e:	6920      	ldr	r0, [r4, #16]
 8019680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019684:	f104 0314 	add.w	r3, r4, #20
 8019688:	f019 091f 	ands.w	r9, r9, #31
 801968c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019694:	d02b      	beq.n	80196ee <__lshift+0xbe>
 8019696:	f1c9 0e20 	rsb	lr, r9, #32
 801969a:	468a      	mov	sl, r1
 801969c:	2200      	movs	r2, #0
 801969e:	6818      	ldr	r0, [r3, #0]
 80196a0:	fa00 f009 	lsl.w	r0, r0, r9
 80196a4:	4302      	orrs	r2, r0
 80196a6:	f84a 2b04 	str.w	r2, [sl], #4
 80196aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80196ae:	459c      	cmp	ip, r3
 80196b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80196b4:	d8f3      	bhi.n	801969e <__lshift+0x6e>
 80196b6:	ebac 0304 	sub.w	r3, ip, r4
 80196ba:	3b15      	subs	r3, #21
 80196bc:	f023 0303 	bic.w	r3, r3, #3
 80196c0:	3304      	adds	r3, #4
 80196c2:	f104 0015 	add.w	r0, r4, #21
 80196c6:	4584      	cmp	ip, r0
 80196c8:	bf38      	it	cc
 80196ca:	2304      	movcc	r3, #4
 80196cc:	50ca      	str	r2, [r1, r3]
 80196ce:	b10a      	cbz	r2, 80196d4 <__lshift+0xa4>
 80196d0:	f108 0602 	add.w	r6, r8, #2
 80196d4:	3e01      	subs	r6, #1
 80196d6:	4638      	mov	r0, r7
 80196d8:	612e      	str	r6, [r5, #16]
 80196da:	4621      	mov	r1, r4
 80196dc:	f7ff fd8c 	bl	80191f8 <_Bfree>
 80196e0:	4628      	mov	r0, r5
 80196e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80196ea:	3301      	adds	r3, #1
 80196ec:	e7c5      	b.n	801967a <__lshift+0x4a>
 80196ee:	3904      	subs	r1, #4
 80196f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80196f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80196f8:	459c      	cmp	ip, r3
 80196fa:	d8f9      	bhi.n	80196f0 <__lshift+0xc0>
 80196fc:	e7ea      	b.n	80196d4 <__lshift+0xa4>
 80196fe:	bf00      	nop
 8019700:	0801dd98 	.word	0x0801dd98
 8019704:	0801de8c 	.word	0x0801de8c

08019708 <__mcmp>:
 8019708:	b530      	push	{r4, r5, lr}
 801970a:	6902      	ldr	r2, [r0, #16]
 801970c:	690c      	ldr	r4, [r1, #16]
 801970e:	1b12      	subs	r2, r2, r4
 8019710:	d10e      	bne.n	8019730 <__mcmp+0x28>
 8019712:	f100 0314 	add.w	r3, r0, #20
 8019716:	3114      	adds	r1, #20
 8019718:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801971c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019720:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019724:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019728:	42a5      	cmp	r5, r4
 801972a:	d003      	beq.n	8019734 <__mcmp+0x2c>
 801972c:	d305      	bcc.n	801973a <__mcmp+0x32>
 801972e:	2201      	movs	r2, #1
 8019730:	4610      	mov	r0, r2
 8019732:	bd30      	pop	{r4, r5, pc}
 8019734:	4283      	cmp	r3, r0
 8019736:	d3f3      	bcc.n	8019720 <__mcmp+0x18>
 8019738:	e7fa      	b.n	8019730 <__mcmp+0x28>
 801973a:	f04f 32ff 	mov.w	r2, #4294967295
 801973e:	e7f7      	b.n	8019730 <__mcmp+0x28>

08019740 <__mdiff>:
 8019740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019744:	460c      	mov	r4, r1
 8019746:	4606      	mov	r6, r0
 8019748:	4611      	mov	r1, r2
 801974a:	4620      	mov	r0, r4
 801974c:	4617      	mov	r7, r2
 801974e:	f7ff ffdb 	bl	8019708 <__mcmp>
 8019752:	1e05      	subs	r5, r0, #0
 8019754:	d110      	bne.n	8019778 <__mdiff+0x38>
 8019756:	4629      	mov	r1, r5
 8019758:	4630      	mov	r0, r6
 801975a:	f7ff fd0d 	bl	8019178 <_Balloc>
 801975e:	b930      	cbnz	r0, 801976e <__mdiff+0x2e>
 8019760:	4b39      	ldr	r3, [pc, #228]	; (8019848 <__mdiff+0x108>)
 8019762:	4602      	mov	r2, r0
 8019764:	f240 2132 	movw	r1, #562	; 0x232
 8019768:	4838      	ldr	r0, [pc, #224]	; (801984c <__mdiff+0x10c>)
 801976a:	f7fe fa3b 	bl	8017be4 <__assert_func>
 801976e:	2301      	movs	r3, #1
 8019770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019778:	bfa4      	itt	ge
 801977a:	463b      	movge	r3, r7
 801977c:	4627      	movge	r7, r4
 801977e:	4630      	mov	r0, r6
 8019780:	6879      	ldr	r1, [r7, #4]
 8019782:	bfa6      	itte	ge
 8019784:	461c      	movge	r4, r3
 8019786:	2500      	movge	r5, #0
 8019788:	2501      	movlt	r5, #1
 801978a:	f7ff fcf5 	bl	8019178 <_Balloc>
 801978e:	b920      	cbnz	r0, 801979a <__mdiff+0x5a>
 8019790:	4b2d      	ldr	r3, [pc, #180]	; (8019848 <__mdiff+0x108>)
 8019792:	4602      	mov	r2, r0
 8019794:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019798:	e7e6      	b.n	8019768 <__mdiff+0x28>
 801979a:	693e      	ldr	r6, [r7, #16]
 801979c:	60c5      	str	r5, [r0, #12]
 801979e:	6925      	ldr	r5, [r4, #16]
 80197a0:	f107 0114 	add.w	r1, r7, #20
 80197a4:	f104 0914 	add.w	r9, r4, #20
 80197a8:	f100 0e14 	add.w	lr, r0, #20
 80197ac:	f107 0210 	add.w	r2, r7, #16
 80197b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80197b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80197b8:	46f2      	mov	sl, lr
 80197ba:	2700      	movs	r7, #0
 80197bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80197c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80197c4:	fa1f f883 	uxth.w	r8, r3
 80197c8:	fa17 f78b 	uxtah	r7, r7, fp
 80197cc:	0c1b      	lsrs	r3, r3, #16
 80197ce:	eba7 0808 	sub.w	r8, r7, r8
 80197d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80197d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80197da:	fa1f f888 	uxth.w	r8, r8
 80197de:	141f      	asrs	r7, r3, #16
 80197e0:	454d      	cmp	r5, r9
 80197e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80197e6:	f84a 3b04 	str.w	r3, [sl], #4
 80197ea:	d8e7      	bhi.n	80197bc <__mdiff+0x7c>
 80197ec:	1b2b      	subs	r3, r5, r4
 80197ee:	3b15      	subs	r3, #21
 80197f0:	f023 0303 	bic.w	r3, r3, #3
 80197f4:	3304      	adds	r3, #4
 80197f6:	3415      	adds	r4, #21
 80197f8:	42a5      	cmp	r5, r4
 80197fa:	bf38      	it	cc
 80197fc:	2304      	movcc	r3, #4
 80197fe:	4419      	add	r1, r3
 8019800:	4473      	add	r3, lr
 8019802:	469e      	mov	lr, r3
 8019804:	460d      	mov	r5, r1
 8019806:	4565      	cmp	r5, ip
 8019808:	d30e      	bcc.n	8019828 <__mdiff+0xe8>
 801980a:	f10c 0203 	add.w	r2, ip, #3
 801980e:	1a52      	subs	r2, r2, r1
 8019810:	f022 0203 	bic.w	r2, r2, #3
 8019814:	3903      	subs	r1, #3
 8019816:	458c      	cmp	ip, r1
 8019818:	bf38      	it	cc
 801981a:	2200      	movcc	r2, #0
 801981c:	441a      	add	r2, r3
 801981e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019822:	b17b      	cbz	r3, 8019844 <__mdiff+0x104>
 8019824:	6106      	str	r6, [r0, #16]
 8019826:	e7a5      	b.n	8019774 <__mdiff+0x34>
 8019828:	f855 8b04 	ldr.w	r8, [r5], #4
 801982c:	fa17 f488 	uxtah	r4, r7, r8
 8019830:	1422      	asrs	r2, r4, #16
 8019832:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019836:	b2a4      	uxth	r4, r4
 8019838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801983c:	f84e 4b04 	str.w	r4, [lr], #4
 8019840:	1417      	asrs	r7, r2, #16
 8019842:	e7e0      	b.n	8019806 <__mdiff+0xc6>
 8019844:	3e01      	subs	r6, #1
 8019846:	e7ea      	b.n	801981e <__mdiff+0xde>
 8019848:	0801dd98 	.word	0x0801dd98
 801984c:	0801de8c 	.word	0x0801de8c

08019850 <__ulp>:
 8019850:	b082      	sub	sp, #8
 8019852:	ed8d 0b00 	vstr	d0, [sp]
 8019856:	9b01      	ldr	r3, [sp, #4]
 8019858:	4912      	ldr	r1, [pc, #72]	; (80198a4 <__ulp+0x54>)
 801985a:	4019      	ands	r1, r3
 801985c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019860:	2900      	cmp	r1, #0
 8019862:	dd05      	ble.n	8019870 <__ulp+0x20>
 8019864:	2200      	movs	r2, #0
 8019866:	460b      	mov	r3, r1
 8019868:	ec43 2b10 	vmov	d0, r2, r3
 801986c:	b002      	add	sp, #8
 801986e:	4770      	bx	lr
 8019870:	4249      	negs	r1, r1
 8019872:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019876:	ea4f 5021 	mov.w	r0, r1, asr #20
 801987a:	f04f 0200 	mov.w	r2, #0
 801987e:	f04f 0300 	mov.w	r3, #0
 8019882:	da04      	bge.n	801988e <__ulp+0x3e>
 8019884:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019888:	fa41 f300 	asr.w	r3, r1, r0
 801988c:	e7ec      	b.n	8019868 <__ulp+0x18>
 801988e:	f1a0 0114 	sub.w	r1, r0, #20
 8019892:	291e      	cmp	r1, #30
 8019894:	bfda      	itte	le
 8019896:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801989a:	fa20 f101 	lsrle.w	r1, r0, r1
 801989e:	2101      	movgt	r1, #1
 80198a0:	460a      	mov	r2, r1
 80198a2:	e7e1      	b.n	8019868 <__ulp+0x18>
 80198a4:	7ff00000 	.word	0x7ff00000

080198a8 <__b2d>:
 80198a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198aa:	6905      	ldr	r5, [r0, #16]
 80198ac:	f100 0714 	add.w	r7, r0, #20
 80198b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80198b4:	1f2e      	subs	r6, r5, #4
 80198b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80198ba:	4620      	mov	r0, r4
 80198bc:	f7ff fd52 	bl	8019364 <__hi0bits>
 80198c0:	f1c0 0320 	rsb	r3, r0, #32
 80198c4:	280a      	cmp	r0, #10
 80198c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019944 <__b2d+0x9c>
 80198ca:	600b      	str	r3, [r1, #0]
 80198cc:	dc14      	bgt.n	80198f8 <__b2d+0x50>
 80198ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80198d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80198d6:	42b7      	cmp	r7, r6
 80198d8:	ea41 030c 	orr.w	r3, r1, ip
 80198dc:	bf34      	ite	cc
 80198de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198e2:	2100      	movcs	r1, #0
 80198e4:	3015      	adds	r0, #21
 80198e6:	fa04 f000 	lsl.w	r0, r4, r0
 80198ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80198ee:	ea40 0201 	orr.w	r2, r0, r1
 80198f2:	ec43 2b10 	vmov	d0, r2, r3
 80198f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198f8:	42b7      	cmp	r7, r6
 80198fa:	bf3a      	itte	cc
 80198fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019900:	f1a5 0608 	subcc.w	r6, r5, #8
 8019904:	2100      	movcs	r1, #0
 8019906:	380b      	subs	r0, #11
 8019908:	d017      	beq.n	801993a <__b2d+0x92>
 801990a:	f1c0 0c20 	rsb	ip, r0, #32
 801990e:	fa04 f500 	lsl.w	r5, r4, r0
 8019912:	42be      	cmp	r6, r7
 8019914:	fa21 f40c 	lsr.w	r4, r1, ip
 8019918:	ea45 0504 	orr.w	r5, r5, r4
 801991c:	bf8c      	ite	hi
 801991e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019922:	2400      	movls	r4, #0
 8019924:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019928:	fa01 f000 	lsl.w	r0, r1, r0
 801992c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019930:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019934:	ea40 0204 	orr.w	r2, r0, r4
 8019938:	e7db      	b.n	80198f2 <__b2d+0x4a>
 801993a:	ea44 030c 	orr.w	r3, r4, ip
 801993e:	460a      	mov	r2, r1
 8019940:	e7d7      	b.n	80198f2 <__b2d+0x4a>
 8019942:	bf00      	nop
 8019944:	3ff00000 	.word	0x3ff00000

08019948 <__d2b>:
 8019948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801994c:	4689      	mov	r9, r1
 801994e:	2101      	movs	r1, #1
 8019950:	ec57 6b10 	vmov	r6, r7, d0
 8019954:	4690      	mov	r8, r2
 8019956:	f7ff fc0f 	bl	8019178 <_Balloc>
 801995a:	4604      	mov	r4, r0
 801995c:	b930      	cbnz	r0, 801996c <__d2b+0x24>
 801995e:	4602      	mov	r2, r0
 8019960:	4b25      	ldr	r3, [pc, #148]	; (80199f8 <__d2b+0xb0>)
 8019962:	4826      	ldr	r0, [pc, #152]	; (80199fc <__d2b+0xb4>)
 8019964:	f240 310a 	movw	r1, #778	; 0x30a
 8019968:	f7fe f93c 	bl	8017be4 <__assert_func>
 801996c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019974:	bb35      	cbnz	r5, 80199c4 <__d2b+0x7c>
 8019976:	2e00      	cmp	r6, #0
 8019978:	9301      	str	r3, [sp, #4]
 801997a:	d028      	beq.n	80199ce <__d2b+0x86>
 801997c:	4668      	mov	r0, sp
 801997e:	9600      	str	r6, [sp, #0]
 8019980:	f7ff fd10 	bl	80193a4 <__lo0bits>
 8019984:	9900      	ldr	r1, [sp, #0]
 8019986:	b300      	cbz	r0, 80199ca <__d2b+0x82>
 8019988:	9a01      	ldr	r2, [sp, #4]
 801998a:	f1c0 0320 	rsb	r3, r0, #32
 801998e:	fa02 f303 	lsl.w	r3, r2, r3
 8019992:	430b      	orrs	r3, r1
 8019994:	40c2      	lsrs	r2, r0
 8019996:	6163      	str	r3, [r4, #20]
 8019998:	9201      	str	r2, [sp, #4]
 801999a:	9b01      	ldr	r3, [sp, #4]
 801999c:	61a3      	str	r3, [r4, #24]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	bf14      	ite	ne
 80199a2:	2202      	movne	r2, #2
 80199a4:	2201      	moveq	r2, #1
 80199a6:	6122      	str	r2, [r4, #16]
 80199a8:	b1d5      	cbz	r5, 80199e0 <__d2b+0x98>
 80199aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80199ae:	4405      	add	r5, r0
 80199b0:	f8c9 5000 	str.w	r5, [r9]
 80199b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80199b8:	f8c8 0000 	str.w	r0, [r8]
 80199bc:	4620      	mov	r0, r4
 80199be:	b003      	add	sp, #12
 80199c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199c8:	e7d5      	b.n	8019976 <__d2b+0x2e>
 80199ca:	6161      	str	r1, [r4, #20]
 80199cc:	e7e5      	b.n	801999a <__d2b+0x52>
 80199ce:	a801      	add	r0, sp, #4
 80199d0:	f7ff fce8 	bl	80193a4 <__lo0bits>
 80199d4:	9b01      	ldr	r3, [sp, #4]
 80199d6:	6163      	str	r3, [r4, #20]
 80199d8:	2201      	movs	r2, #1
 80199da:	6122      	str	r2, [r4, #16]
 80199dc:	3020      	adds	r0, #32
 80199de:	e7e3      	b.n	80199a8 <__d2b+0x60>
 80199e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80199e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80199e8:	f8c9 0000 	str.w	r0, [r9]
 80199ec:	6918      	ldr	r0, [r3, #16]
 80199ee:	f7ff fcb9 	bl	8019364 <__hi0bits>
 80199f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80199f6:	e7df      	b.n	80199b8 <__d2b+0x70>
 80199f8:	0801dd98 	.word	0x0801dd98
 80199fc:	0801de8c 	.word	0x0801de8c

08019a00 <__ratio>:
 8019a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a04:	468a      	mov	sl, r1
 8019a06:	4669      	mov	r1, sp
 8019a08:	4683      	mov	fp, r0
 8019a0a:	f7ff ff4d 	bl	80198a8 <__b2d>
 8019a0e:	a901      	add	r1, sp, #4
 8019a10:	4650      	mov	r0, sl
 8019a12:	ec59 8b10 	vmov	r8, r9, d0
 8019a16:	ee10 6a10 	vmov	r6, s0
 8019a1a:	f7ff ff45 	bl	80198a8 <__b2d>
 8019a1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019a22:	f8da 2010 	ldr.w	r2, [sl, #16]
 8019a26:	eba3 0c02 	sub.w	ip, r3, r2
 8019a2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a2e:	1a9b      	subs	r3, r3, r2
 8019a30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019a34:	ec55 4b10 	vmov	r4, r5, d0
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	ee10 0a10 	vmov	r0, s0
 8019a3e:	bfce      	itee	gt
 8019a40:	464a      	movgt	r2, r9
 8019a42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019a46:	462a      	movle	r2, r5
 8019a48:	464f      	mov	r7, r9
 8019a4a:	4629      	mov	r1, r5
 8019a4c:	bfcc      	ite	gt
 8019a4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019a52:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019a56:	ec47 6b17 	vmov	d7, r6, r7
 8019a5a:	ec41 0b16 	vmov	d6, r0, r1
 8019a5e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8019a62:	b003      	add	sp, #12
 8019a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a68 <__copybits>:
 8019a68:	3901      	subs	r1, #1
 8019a6a:	b570      	push	{r4, r5, r6, lr}
 8019a6c:	1149      	asrs	r1, r1, #5
 8019a6e:	6914      	ldr	r4, [r2, #16]
 8019a70:	3101      	adds	r1, #1
 8019a72:	f102 0314 	add.w	r3, r2, #20
 8019a76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a7e:	1f05      	subs	r5, r0, #4
 8019a80:	42a3      	cmp	r3, r4
 8019a82:	d30c      	bcc.n	8019a9e <__copybits+0x36>
 8019a84:	1aa3      	subs	r3, r4, r2
 8019a86:	3b11      	subs	r3, #17
 8019a88:	f023 0303 	bic.w	r3, r3, #3
 8019a8c:	3211      	adds	r2, #17
 8019a8e:	42a2      	cmp	r2, r4
 8019a90:	bf88      	it	hi
 8019a92:	2300      	movhi	r3, #0
 8019a94:	4418      	add	r0, r3
 8019a96:	2300      	movs	r3, #0
 8019a98:	4288      	cmp	r0, r1
 8019a9a:	d305      	bcc.n	8019aa8 <__copybits+0x40>
 8019a9c:	bd70      	pop	{r4, r5, r6, pc}
 8019a9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019aa2:	f845 6f04 	str.w	r6, [r5, #4]!
 8019aa6:	e7eb      	b.n	8019a80 <__copybits+0x18>
 8019aa8:	f840 3b04 	str.w	r3, [r0], #4
 8019aac:	e7f4      	b.n	8019a98 <__copybits+0x30>

08019aae <__any_on>:
 8019aae:	f100 0214 	add.w	r2, r0, #20
 8019ab2:	6900      	ldr	r0, [r0, #16]
 8019ab4:	114b      	asrs	r3, r1, #5
 8019ab6:	4298      	cmp	r0, r3
 8019ab8:	b510      	push	{r4, lr}
 8019aba:	db11      	blt.n	8019ae0 <__any_on+0x32>
 8019abc:	dd0a      	ble.n	8019ad4 <__any_on+0x26>
 8019abe:	f011 011f 	ands.w	r1, r1, #31
 8019ac2:	d007      	beq.n	8019ad4 <__any_on+0x26>
 8019ac4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019ac8:	fa24 f001 	lsr.w	r0, r4, r1
 8019acc:	fa00 f101 	lsl.w	r1, r0, r1
 8019ad0:	428c      	cmp	r4, r1
 8019ad2:	d10b      	bne.n	8019aec <__any_on+0x3e>
 8019ad4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ad8:	4293      	cmp	r3, r2
 8019ada:	d803      	bhi.n	8019ae4 <__any_on+0x36>
 8019adc:	2000      	movs	r0, #0
 8019ade:	bd10      	pop	{r4, pc}
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	e7f7      	b.n	8019ad4 <__any_on+0x26>
 8019ae4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019ae8:	2900      	cmp	r1, #0
 8019aea:	d0f5      	beq.n	8019ad8 <__any_on+0x2a>
 8019aec:	2001      	movs	r0, #1
 8019aee:	e7f6      	b.n	8019ade <__any_on+0x30>

08019af0 <_calloc_r>:
 8019af0:	b513      	push	{r0, r1, r4, lr}
 8019af2:	434a      	muls	r2, r1
 8019af4:	4611      	mov	r1, r2
 8019af6:	9201      	str	r2, [sp, #4]
 8019af8:	f000 f85a 	bl	8019bb0 <_malloc_r>
 8019afc:	4604      	mov	r4, r0
 8019afe:	b118      	cbz	r0, 8019b08 <_calloc_r+0x18>
 8019b00:	9a01      	ldr	r2, [sp, #4]
 8019b02:	2100      	movs	r1, #0
 8019b04:	f7fc face 	bl	80160a4 <memset>
 8019b08:	4620      	mov	r0, r4
 8019b0a:	b002      	add	sp, #8
 8019b0c:	bd10      	pop	{r4, pc}
	...

08019b10 <_free_r>:
 8019b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b12:	2900      	cmp	r1, #0
 8019b14:	d048      	beq.n	8019ba8 <_free_r+0x98>
 8019b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b1a:	9001      	str	r0, [sp, #4]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8019b22:	bfb8      	it	lt
 8019b24:	18e4      	addlt	r4, r4, r3
 8019b26:	f000 fddf 	bl	801a6e8 <__malloc_lock>
 8019b2a:	4a20      	ldr	r2, [pc, #128]	; (8019bac <_free_r+0x9c>)
 8019b2c:	9801      	ldr	r0, [sp, #4]
 8019b2e:	6813      	ldr	r3, [r2, #0]
 8019b30:	4615      	mov	r5, r2
 8019b32:	b933      	cbnz	r3, 8019b42 <_free_r+0x32>
 8019b34:	6063      	str	r3, [r4, #4]
 8019b36:	6014      	str	r4, [r2, #0]
 8019b38:	b003      	add	sp, #12
 8019b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b3e:	f000 bdd9 	b.w	801a6f4 <__malloc_unlock>
 8019b42:	42a3      	cmp	r3, r4
 8019b44:	d90b      	bls.n	8019b5e <_free_r+0x4e>
 8019b46:	6821      	ldr	r1, [r4, #0]
 8019b48:	1862      	adds	r2, r4, r1
 8019b4a:	4293      	cmp	r3, r2
 8019b4c:	bf04      	itt	eq
 8019b4e:	681a      	ldreq	r2, [r3, #0]
 8019b50:	685b      	ldreq	r3, [r3, #4]
 8019b52:	6063      	str	r3, [r4, #4]
 8019b54:	bf04      	itt	eq
 8019b56:	1852      	addeq	r2, r2, r1
 8019b58:	6022      	streq	r2, [r4, #0]
 8019b5a:	602c      	str	r4, [r5, #0]
 8019b5c:	e7ec      	b.n	8019b38 <_free_r+0x28>
 8019b5e:	461a      	mov	r2, r3
 8019b60:	685b      	ldr	r3, [r3, #4]
 8019b62:	b10b      	cbz	r3, 8019b68 <_free_r+0x58>
 8019b64:	42a3      	cmp	r3, r4
 8019b66:	d9fa      	bls.n	8019b5e <_free_r+0x4e>
 8019b68:	6811      	ldr	r1, [r2, #0]
 8019b6a:	1855      	adds	r5, r2, r1
 8019b6c:	42a5      	cmp	r5, r4
 8019b6e:	d10b      	bne.n	8019b88 <_free_r+0x78>
 8019b70:	6824      	ldr	r4, [r4, #0]
 8019b72:	4421      	add	r1, r4
 8019b74:	1854      	adds	r4, r2, r1
 8019b76:	42a3      	cmp	r3, r4
 8019b78:	6011      	str	r1, [r2, #0]
 8019b7a:	d1dd      	bne.n	8019b38 <_free_r+0x28>
 8019b7c:	681c      	ldr	r4, [r3, #0]
 8019b7e:	685b      	ldr	r3, [r3, #4]
 8019b80:	6053      	str	r3, [r2, #4]
 8019b82:	4421      	add	r1, r4
 8019b84:	6011      	str	r1, [r2, #0]
 8019b86:	e7d7      	b.n	8019b38 <_free_r+0x28>
 8019b88:	d902      	bls.n	8019b90 <_free_r+0x80>
 8019b8a:	230c      	movs	r3, #12
 8019b8c:	6003      	str	r3, [r0, #0]
 8019b8e:	e7d3      	b.n	8019b38 <_free_r+0x28>
 8019b90:	6825      	ldr	r5, [r4, #0]
 8019b92:	1961      	adds	r1, r4, r5
 8019b94:	428b      	cmp	r3, r1
 8019b96:	bf04      	itt	eq
 8019b98:	6819      	ldreq	r1, [r3, #0]
 8019b9a:	685b      	ldreq	r3, [r3, #4]
 8019b9c:	6063      	str	r3, [r4, #4]
 8019b9e:	bf04      	itt	eq
 8019ba0:	1949      	addeq	r1, r1, r5
 8019ba2:	6021      	streq	r1, [r4, #0]
 8019ba4:	6054      	str	r4, [r2, #4]
 8019ba6:	e7c7      	b.n	8019b38 <_free_r+0x28>
 8019ba8:	b003      	add	sp, #12
 8019baa:	bd30      	pop	{r4, r5, pc}
 8019bac:	20000488 	.word	0x20000488

08019bb0 <_malloc_r>:
 8019bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb2:	1ccd      	adds	r5, r1, #3
 8019bb4:	f025 0503 	bic.w	r5, r5, #3
 8019bb8:	3508      	adds	r5, #8
 8019bba:	2d0c      	cmp	r5, #12
 8019bbc:	bf38      	it	cc
 8019bbe:	250c      	movcc	r5, #12
 8019bc0:	2d00      	cmp	r5, #0
 8019bc2:	4606      	mov	r6, r0
 8019bc4:	db01      	blt.n	8019bca <_malloc_r+0x1a>
 8019bc6:	42a9      	cmp	r1, r5
 8019bc8:	d903      	bls.n	8019bd2 <_malloc_r+0x22>
 8019bca:	230c      	movs	r3, #12
 8019bcc:	6033      	str	r3, [r6, #0]
 8019bce:	2000      	movs	r0, #0
 8019bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd2:	f000 fd89 	bl	801a6e8 <__malloc_lock>
 8019bd6:	4921      	ldr	r1, [pc, #132]	; (8019c5c <_malloc_r+0xac>)
 8019bd8:	680a      	ldr	r2, [r1, #0]
 8019bda:	4614      	mov	r4, r2
 8019bdc:	b99c      	cbnz	r4, 8019c06 <_malloc_r+0x56>
 8019bde:	4f20      	ldr	r7, [pc, #128]	; (8019c60 <_malloc_r+0xb0>)
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	b923      	cbnz	r3, 8019bee <_malloc_r+0x3e>
 8019be4:	4621      	mov	r1, r4
 8019be6:	4630      	mov	r0, r6
 8019be8:	f000 fafa 	bl	801a1e0 <_sbrk_r>
 8019bec:	6038      	str	r0, [r7, #0]
 8019bee:	4629      	mov	r1, r5
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	f000 faf5 	bl	801a1e0 <_sbrk_r>
 8019bf6:	1c43      	adds	r3, r0, #1
 8019bf8:	d123      	bne.n	8019c42 <_malloc_r+0x92>
 8019bfa:	230c      	movs	r3, #12
 8019bfc:	6033      	str	r3, [r6, #0]
 8019bfe:	4630      	mov	r0, r6
 8019c00:	f000 fd78 	bl	801a6f4 <__malloc_unlock>
 8019c04:	e7e3      	b.n	8019bce <_malloc_r+0x1e>
 8019c06:	6823      	ldr	r3, [r4, #0]
 8019c08:	1b5b      	subs	r3, r3, r5
 8019c0a:	d417      	bmi.n	8019c3c <_malloc_r+0x8c>
 8019c0c:	2b0b      	cmp	r3, #11
 8019c0e:	d903      	bls.n	8019c18 <_malloc_r+0x68>
 8019c10:	6023      	str	r3, [r4, #0]
 8019c12:	441c      	add	r4, r3
 8019c14:	6025      	str	r5, [r4, #0]
 8019c16:	e004      	b.n	8019c22 <_malloc_r+0x72>
 8019c18:	6863      	ldr	r3, [r4, #4]
 8019c1a:	42a2      	cmp	r2, r4
 8019c1c:	bf0c      	ite	eq
 8019c1e:	600b      	streq	r3, [r1, #0]
 8019c20:	6053      	strne	r3, [r2, #4]
 8019c22:	4630      	mov	r0, r6
 8019c24:	f000 fd66 	bl	801a6f4 <__malloc_unlock>
 8019c28:	f104 000b 	add.w	r0, r4, #11
 8019c2c:	1d23      	adds	r3, r4, #4
 8019c2e:	f020 0007 	bic.w	r0, r0, #7
 8019c32:	1ac2      	subs	r2, r0, r3
 8019c34:	d0cc      	beq.n	8019bd0 <_malloc_r+0x20>
 8019c36:	1a1b      	subs	r3, r3, r0
 8019c38:	50a3      	str	r3, [r4, r2]
 8019c3a:	e7c9      	b.n	8019bd0 <_malloc_r+0x20>
 8019c3c:	4622      	mov	r2, r4
 8019c3e:	6864      	ldr	r4, [r4, #4]
 8019c40:	e7cc      	b.n	8019bdc <_malloc_r+0x2c>
 8019c42:	1cc4      	adds	r4, r0, #3
 8019c44:	f024 0403 	bic.w	r4, r4, #3
 8019c48:	42a0      	cmp	r0, r4
 8019c4a:	d0e3      	beq.n	8019c14 <_malloc_r+0x64>
 8019c4c:	1a21      	subs	r1, r4, r0
 8019c4e:	4630      	mov	r0, r6
 8019c50:	f000 fac6 	bl	801a1e0 <_sbrk_r>
 8019c54:	3001      	adds	r0, #1
 8019c56:	d1dd      	bne.n	8019c14 <_malloc_r+0x64>
 8019c58:	e7cf      	b.n	8019bfa <_malloc_r+0x4a>
 8019c5a:	bf00      	nop
 8019c5c:	20000488 	.word	0x20000488
 8019c60:	2000048c 	.word	0x2000048c

08019c64 <__ssputs_r>:
 8019c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c68:	688e      	ldr	r6, [r1, #8]
 8019c6a:	429e      	cmp	r6, r3
 8019c6c:	4682      	mov	sl, r0
 8019c6e:	460c      	mov	r4, r1
 8019c70:	4690      	mov	r8, r2
 8019c72:	461f      	mov	r7, r3
 8019c74:	d838      	bhi.n	8019ce8 <__ssputs_r+0x84>
 8019c76:	898a      	ldrh	r2, [r1, #12]
 8019c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c7c:	d032      	beq.n	8019ce4 <__ssputs_r+0x80>
 8019c7e:	6825      	ldr	r5, [r4, #0]
 8019c80:	6909      	ldr	r1, [r1, #16]
 8019c82:	eba5 0901 	sub.w	r9, r5, r1
 8019c86:	6965      	ldr	r5, [r4, #20]
 8019c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c90:	3301      	adds	r3, #1
 8019c92:	444b      	add	r3, r9
 8019c94:	106d      	asrs	r5, r5, #1
 8019c96:	429d      	cmp	r5, r3
 8019c98:	bf38      	it	cc
 8019c9a:	461d      	movcc	r5, r3
 8019c9c:	0553      	lsls	r3, r2, #21
 8019c9e:	d531      	bpl.n	8019d04 <__ssputs_r+0xa0>
 8019ca0:	4629      	mov	r1, r5
 8019ca2:	f7ff ff85 	bl	8019bb0 <_malloc_r>
 8019ca6:	4606      	mov	r6, r0
 8019ca8:	b950      	cbnz	r0, 8019cc0 <__ssputs_r+0x5c>
 8019caa:	230c      	movs	r3, #12
 8019cac:	f8ca 3000 	str.w	r3, [sl]
 8019cb0:	89a3      	ldrh	r3, [r4, #12]
 8019cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cb6:	81a3      	strh	r3, [r4, #12]
 8019cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cc0:	6921      	ldr	r1, [r4, #16]
 8019cc2:	464a      	mov	r2, r9
 8019cc4:	f7fc f9c6 	bl	8016054 <memcpy>
 8019cc8:	89a3      	ldrh	r3, [r4, #12]
 8019cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cd2:	81a3      	strh	r3, [r4, #12]
 8019cd4:	6126      	str	r6, [r4, #16]
 8019cd6:	6165      	str	r5, [r4, #20]
 8019cd8:	444e      	add	r6, r9
 8019cda:	eba5 0509 	sub.w	r5, r5, r9
 8019cde:	6026      	str	r6, [r4, #0]
 8019ce0:	60a5      	str	r5, [r4, #8]
 8019ce2:	463e      	mov	r6, r7
 8019ce4:	42be      	cmp	r6, r7
 8019ce6:	d900      	bls.n	8019cea <__ssputs_r+0x86>
 8019ce8:	463e      	mov	r6, r7
 8019cea:	4632      	mov	r2, r6
 8019cec:	6820      	ldr	r0, [r4, #0]
 8019cee:	4641      	mov	r1, r8
 8019cf0:	f7fc f9be 	bl	8016070 <memmove>
 8019cf4:	68a3      	ldr	r3, [r4, #8]
 8019cf6:	6822      	ldr	r2, [r4, #0]
 8019cf8:	1b9b      	subs	r3, r3, r6
 8019cfa:	4432      	add	r2, r6
 8019cfc:	60a3      	str	r3, [r4, #8]
 8019cfe:	6022      	str	r2, [r4, #0]
 8019d00:	2000      	movs	r0, #0
 8019d02:	e7db      	b.n	8019cbc <__ssputs_r+0x58>
 8019d04:	462a      	mov	r2, r5
 8019d06:	f000 fcfb 	bl	801a700 <_realloc_r>
 8019d0a:	4606      	mov	r6, r0
 8019d0c:	2800      	cmp	r0, #0
 8019d0e:	d1e1      	bne.n	8019cd4 <__ssputs_r+0x70>
 8019d10:	6921      	ldr	r1, [r4, #16]
 8019d12:	4650      	mov	r0, sl
 8019d14:	f7ff fefc 	bl	8019b10 <_free_r>
 8019d18:	e7c7      	b.n	8019caa <__ssputs_r+0x46>
	...

08019d1c <_svfiprintf_r>:
 8019d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d20:	4698      	mov	r8, r3
 8019d22:	898b      	ldrh	r3, [r1, #12]
 8019d24:	061b      	lsls	r3, r3, #24
 8019d26:	b09d      	sub	sp, #116	; 0x74
 8019d28:	4607      	mov	r7, r0
 8019d2a:	460d      	mov	r5, r1
 8019d2c:	4614      	mov	r4, r2
 8019d2e:	d50e      	bpl.n	8019d4e <_svfiprintf_r+0x32>
 8019d30:	690b      	ldr	r3, [r1, #16]
 8019d32:	b963      	cbnz	r3, 8019d4e <_svfiprintf_r+0x32>
 8019d34:	2140      	movs	r1, #64	; 0x40
 8019d36:	f7ff ff3b 	bl	8019bb0 <_malloc_r>
 8019d3a:	6028      	str	r0, [r5, #0]
 8019d3c:	6128      	str	r0, [r5, #16]
 8019d3e:	b920      	cbnz	r0, 8019d4a <_svfiprintf_r+0x2e>
 8019d40:	230c      	movs	r3, #12
 8019d42:	603b      	str	r3, [r7, #0]
 8019d44:	f04f 30ff 	mov.w	r0, #4294967295
 8019d48:	e0d1      	b.n	8019eee <_svfiprintf_r+0x1d2>
 8019d4a:	2340      	movs	r3, #64	; 0x40
 8019d4c:	616b      	str	r3, [r5, #20]
 8019d4e:	2300      	movs	r3, #0
 8019d50:	9309      	str	r3, [sp, #36]	; 0x24
 8019d52:	2320      	movs	r3, #32
 8019d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d5c:	2330      	movs	r3, #48	; 0x30
 8019d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019f08 <_svfiprintf_r+0x1ec>
 8019d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d66:	f04f 0901 	mov.w	r9, #1
 8019d6a:	4623      	mov	r3, r4
 8019d6c:	469a      	mov	sl, r3
 8019d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d72:	b10a      	cbz	r2, 8019d78 <_svfiprintf_r+0x5c>
 8019d74:	2a25      	cmp	r2, #37	; 0x25
 8019d76:	d1f9      	bne.n	8019d6c <_svfiprintf_r+0x50>
 8019d78:	ebba 0b04 	subs.w	fp, sl, r4
 8019d7c:	d00b      	beq.n	8019d96 <_svfiprintf_r+0x7a>
 8019d7e:	465b      	mov	r3, fp
 8019d80:	4622      	mov	r2, r4
 8019d82:	4629      	mov	r1, r5
 8019d84:	4638      	mov	r0, r7
 8019d86:	f7ff ff6d 	bl	8019c64 <__ssputs_r>
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	f000 80aa 	beq.w	8019ee4 <_svfiprintf_r+0x1c8>
 8019d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d92:	445a      	add	r2, fp
 8019d94:	9209      	str	r2, [sp, #36]	; 0x24
 8019d96:	f89a 3000 	ldrb.w	r3, [sl]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	f000 80a2 	beq.w	8019ee4 <_svfiprintf_r+0x1c8>
 8019da0:	2300      	movs	r3, #0
 8019da2:	f04f 32ff 	mov.w	r2, #4294967295
 8019da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019daa:	f10a 0a01 	add.w	sl, sl, #1
 8019dae:	9304      	str	r3, [sp, #16]
 8019db0:	9307      	str	r3, [sp, #28]
 8019db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019db6:	931a      	str	r3, [sp, #104]	; 0x68
 8019db8:	4654      	mov	r4, sl
 8019dba:	2205      	movs	r2, #5
 8019dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dc0:	4851      	ldr	r0, [pc, #324]	; (8019f08 <_svfiprintf_r+0x1ec>)
 8019dc2:	f7e6 fa45 	bl	8000250 <memchr>
 8019dc6:	9a04      	ldr	r2, [sp, #16]
 8019dc8:	b9d8      	cbnz	r0, 8019e02 <_svfiprintf_r+0xe6>
 8019dca:	06d0      	lsls	r0, r2, #27
 8019dcc:	bf44      	itt	mi
 8019dce:	2320      	movmi	r3, #32
 8019dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dd4:	0711      	lsls	r1, r2, #28
 8019dd6:	bf44      	itt	mi
 8019dd8:	232b      	movmi	r3, #43	; 0x2b
 8019dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dde:	f89a 3000 	ldrb.w	r3, [sl]
 8019de2:	2b2a      	cmp	r3, #42	; 0x2a
 8019de4:	d015      	beq.n	8019e12 <_svfiprintf_r+0xf6>
 8019de6:	9a07      	ldr	r2, [sp, #28]
 8019de8:	4654      	mov	r4, sl
 8019dea:	2000      	movs	r0, #0
 8019dec:	f04f 0c0a 	mov.w	ip, #10
 8019df0:	4621      	mov	r1, r4
 8019df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019df6:	3b30      	subs	r3, #48	; 0x30
 8019df8:	2b09      	cmp	r3, #9
 8019dfa:	d94e      	bls.n	8019e9a <_svfiprintf_r+0x17e>
 8019dfc:	b1b0      	cbz	r0, 8019e2c <_svfiprintf_r+0x110>
 8019dfe:	9207      	str	r2, [sp, #28]
 8019e00:	e014      	b.n	8019e2c <_svfiprintf_r+0x110>
 8019e02:	eba0 0308 	sub.w	r3, r0, r8
 8019e06:	fa09 f303 	lsl.w	r3, r9, r3
 8019e0a:	4313      	orrs	r3, r2
 8019e0c:	9304      	str	r3, [sp, #16]
 8019e0e:	46a2      	mov	sl, r4
 8019e10:	e7d2      	b.n	8019db8 <_svfiprintf_r+0x9c>
 8019e12:	9b03      	ldr	r3, [sp, #12]
 8019e14:	1d19      	adds	r1, r3, #4
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	9103      	str	r1, [sp, #12]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	bfbb      	ittet	lt
 8019e1e:	425b      	neglt	r3, r3
 8019e20:	f042 0202 	orrlt.w	r2, r2, #2
 8019e24:	9307      	strge	r3, [sp, #28]
 8019e26:	9307      	strlt	r3, [sp, #28]
 8019e28:	bfb8      	it	lt
 8019e2a:	9204      	strlt	r2, [sp, #16]
 8019e2c:	7823      	ldrb	r3, [r4, #0]
 8019e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8019e30:	d10c      	bne.n	8019e4c <_svfiprintf_r+0x130>
 8019e32:	7863      	ldrb	r3, [r4, #1]
 8019e34:	2b2a      	cmp	r3, #42	; 0x2a
 8019e36:	d135      	bne.n	8019ea4 <_svfiprintf_r+0x188>
 8019e38:	9b03      	ldr	r3, [sp, #12]
 8019e3a:	1d1a      	adds	r2, r3, #4
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	9203      	str	r2, [sp, #12]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	bfb8      	it	lt
 8019e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e48:	3402      	adds	r4, #2
 8019e4a:	9305      	str	r3, [sp, #20]
 8019e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019f18 <_svfiprintf_r+0x1fc>
 8019e50:	7821      	ldrb	r1, [r4, #0]
 8019e52:	2203      	movs	r2, #3
 8019e54:	4650      	mov	r0, sl
 8019e56:	f7e6 f9fb 	bl	8000250 <memchr>
 8019e5a:	b140      	cbz	r0, 8019e6e <_svfiprintf_r+0x152>
 8019e5c:	2340      	movs	r3, #64	; 0x40
 8019e5e:	eba0 000a 	sub.w	r0, r0, sl
 8019e62:	fa03 f000 	lsl.w	r0, r3, r0
 8019e66:	9b04      	ldr	r3, [sp, #16]
 8019e68:	4303      	orrs	r3, r0
 8019e6a:	3401      	adds	r4, #1
 8019e6c:	9304      	str	r3, [sp, #16]
 8019e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e72:	4826      	ldr	r0, [pc, #152]	; (8019f0c <_svfiprintf_r+0x1f0>)
 8019e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e78:	2206      	movs	r2, #6
 8019e7a:	f7e6 f9e9 	bl	8000250 <memchr>
 8019e7e:	2800      	cmp	r0, #0
 8019e80:	d038      	beq.n	8019ef4 <_svfiprintf_r+0x1d8>
 8019e82:	4b23      	ldr	r3, [pc, #140]	; (8019f10 <_svfiprintf_r+0x1f4>)
 8019e84:	bb1b      	cbnz	r3, 8019ece <_svfiprintf_r+0x1b2>
 8019e86:	9b03      	ldr	r3, [sp, #12]
 8019e88:	3307      	adds	r3, #7
 8019e8a:	f023 0307 	bic.w	r3, r3, #7
 8019e8e:	3308      	adds	r3, #8
 8019e90:	9303      	str	r3, [sp, #12]
 8019e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e94:	4433      	add	r3, r6
 8019e96:	9309      	str	r3, [sp, #36]	; 0x24
 8019e98:	e767      	b.n	8019d6a <_svfiprintf_r+0x4e>
 8019e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e9e:	460c      	mov	r4, r1
 8019ea0:	2001      	movs	r0, #1
 8019ea2:	e7a5      	b.n	8019df0 <_svfiprintf_r+0xd4>
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	3401      	adds	r4, #1
 8019ea8:	9305      	str	r3, [sp, #20]
 8019eaa:	4619      	mov	r1, r3
 8019eac:	f04f 0c0a 	mov.w	ip, #10
 8019eb0:	4620      	mov	r0, r4
 8019eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019eb6:	3a30      	subs	r2, #48	; 0x30
 8019eb8:	2a09      	cmp	r2, #9
 8019eba:	d903      	bls.n	8019ec4 <_svfiprintf_r+0x1a8>
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d0c5      	beq.n	8019e4c <_svfiprintf_r+0x130>
 8019ec0:	9105      	str	r1, [sp, #20]
 8019ec2:	e7c3      	b.n	8019e4c <_svfiprintf_r+0x130>
 8019ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ec8:	4604      	mov	r4, r0
 8019eca:	2301      	movs	r3, #1
 8019ecc:	e7f0      	b.n	8019eb0 <_svfiprintf_r+0x194>
 8019ece:	ab03      	add	r3, sp, #12
 8019ed0:	9300      	str	r3, [sp, #0]
 8019ed2:	462a      	mov	r2, r5
 8019ed4:	4b0f      	ldr	r3, [pc, #60]	; (8019f14 <_svfiprintf_r+0x1f8>)
 8019ed6:	a904      	add	r1, sp, #16
 8019ed8:	4638      	mov	r0, r7
 8019eda:	f7fc f97d 	bl	80161d8 <_printf_float>
 8019ede:	1c42      	adds	r2, r0, #1
 8019ee0:	4606      	mov	r6, r0
 8019ee2:	d1d6      	bne.n	8019e92 <_svfiprintf_r+0x176>
 8019ee4:	89ab      	ldrh	r3, [r5, #12]
 8019ee6:	065b      	lsls	r3, r3, #25
 8019ee8:	f53f af2c 	bmi.w	8019d44 <_svfiprintf_r+0x28>
 8019eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eee:	b01d      	add	sp, #116	; 0x74
 8019ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef4:	ab03      	add	r3, sp, #12
 8019ef6:	9300      	str	r3, [sp, #0]
 8019ef8:	462a      	mov	r2, r5
 8019efa:	4b06      	ldr	r3, [pc, #24]	; (8019f14 <_svfiprintf_r+0x1f8>)
 8019efc:	a904      	add	r1, sp, #16
 8019efe:	4638      	mov	r0, r7
 8019f00:	f7fc fbf6 	bl	80166f0 <_printf_i>
 8019f04:	e7eb      	b.n	8019ede <_svfiprintf_r+0x1c2>
 8019f06:	bf00      	nop
 8019f08:	0801dfec 	.word	0x0801dfec
 8019f0c:	0801dff6 	.word	0x0801dff6
 8019f10:	080161d9 	.word	0x080161d9
 8019f14:	08019c65 	.word	0x08019c65
 8019f18:	0801dff2 	.word	0x0801dff2

08019f1c <__sfputc_r>:
 8019f1c:	6893      	ldr	r3, [r2, #8]
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	b410      	push	{r4}
 8019f24:	6093      	str	r3, [r2, #8]
 8019f26:	da08      	bge.n	8019f3a <__sfputc_r+0x1e>
 8019f28:	6994      	ldr	r4, [r2, #24]
 8019f2a:	42a3      	cmp	r3, r4
 8019f2c:	db01      	blt.n	8019f32 <__sfputc_r+0x16>
 8019f2e:	290a      	cmp	r1, #10
 8019f30:	d103      	bne.n	8019f3a <__sfputc_r+0x1e>
 8019f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f36:	f000 b9a7 	b.w	801a288 <__swbuf_r>
 8019f3a:	6813      	ldr	r3, [r2, #0]
 8019f3c:	1c58      	adds	r0, r3, #1
 8019f3e:	6010      	str	r0, [r2, #0]
 8019f40:	7019      	strb	r1, [r3, #0]
 8019f42:	4608      	mov	r0, r1
 8019f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f48:	4770      	bx	lr

08019f4a <__sfputs_r>:
 8019f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f4c:	4606      	mov	r6, r0
 8019f4e:	460f      	mov	r7, r1
 8019f50:	4614      	mov	r4, r2
 8019f52:	18d5      	adds	r5, r2, r3
 8019f54:	42ac      	cmp	r4, r5
 8019f56:	d101      	bne.n	8019f5c <__sfputs_r+0x12>
 8019f58:	2000      	movs	r0, #0
 8019f5a:	e007      	b.n	8019f6c <__sfputs_r+0x22>
 8019f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f60:	463a      	mov	r2, r7
 8019f62:	4630      	mov	r0, r6
 8019f64:	f7ff ffda 	bl	8019f1c <__sfputc_r>
 8019f68:	1c43      	adds	r3, r0, #1
 8019f6a:	d1f3      	bne.n	8019f54 <__sfputs_r+0xa>
 8019f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f70 <_vfiprintf_r>:
 8019f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f74:	460d      	mov	r5, r1
 8019f76:	b09d      	sub	sp, #116	; 0x74
 8019f78:	4614      	mov	r4, r2
 8019f7a:	4698      	mov	r8, r3
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	b118      	cbz	r0, 8019f88 <_vfiprintf_r+0x18>
 8019f80:	6983      	ldr	r3, [r0, #24]
 8019f82:	b90b      	cbnz	r3, 8019f88 <_vfiprintf_r+0x18>
 8019f84:	f7fe fcb8 	bl	80188f8 <__sinit>
 8019f88:	4b89      	ldr	r3, [pc, #548]	; (801a1b0 <_vfiprintf_r+0x240>)
 8019f8a:	429d      	cmp	r5, r3
 8019f8c:	d11b      	bne.n	8019fc6 <_vfiprintf_r+0x56>
 8019f8e:	6875      	ldr	r5, [r6, #4]
 8019f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f92:	07d9      	lsls	r1, r3, #31
 8019f94:	d405      	bmi.n	8019fa2 <_vfiprintf_r+0x32>
 8019f96:	89ab      	ldrh	r3, [r5, #12]
 8019f98:	059a      	lsls	r2, r3, #22
 8019f9a:	d402      	bmi.n	8019fa2 <_vfiprintf_r+0x32>
 8019f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f9e:	f7ff f8ce 	bl	801913e <__retarget_lock_acquire_recursive>
 8019fa2:	89ab      	ldrh	r3, [r5, #12]
 8019fa4:	071b      	lsls	r3, r3, #28
 8019fa6:	d501      	bpl.n	8019fac <_vfiprintf_r+0x3c>
 8019fa8:	692b      	ldr	r3, [r5, #16]
 8019faa:	b9eb      	cbnz	r3, 8019fe8 <_vfiprintf_r+0x78>
 8019fac:	4629      	mov	r1, r5
 8019fae:	4630      	mov	r0, r6
 8019fb0:	f000 f9dc 	bl	801a36c <__swsetup_r>
 8019fb4:	b1c0      	cbz	r0, 8019fe8 <_vfiprintf_r+0x78>
 8019fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fb8:	07dc      	lsls	r4, r3, #31
 8019fba:	d50e      	bpl.n	8019fda <_vfiprintf_r+0x6a>
 8019fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc0:	b01d      	add	sp, #116	; 0x74
 8019fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc6:	4b7b      	ldr	r3, [pc, #492]	; (801a1b4 <_vfiprintf_r+0x244>)
 8019fc8:	429d      	cmp	r5, r3
 8019fca:	d101      	bne.n	8019fd0 <_vfiprintf_r+0x60>
 8019fcc:	68b5      	ldr	r5, [r6, #8]
 8019fce:	e7df      	b.n	8019f90 <_vfiprintf_r+0x20>
 8019fd0:	4b79      	ldr	r3, [pc, #484]	; (801a1b8 <_vfiprintf_r+0x248>)
 8019fd2:	429d      	cmp	r5, r3
 8019fd4:	bf08      	it	eq
 8019fd6:	68f5      	ldreq	r5, [r6, #12]
 8019fd8:	e7da      	b.n	8019f90 <_vfiprintf_r+0x20>
 8019fda:	89ab      	ldrh	r3, [r5, #12]
 8019fdc:	0598      	lsls	r0, r3, #22
 8019fde:	d4ed      	bmi.n	8019fbc <_vfiprintf_r+0x4c>
 8019fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fe2:	f7ff f8ad 	bl	8019140 <__retarget_lock_release_recursive>
 8019fe6:	e7e9      	b.n	8019fbc <_vfiprintf_r+0x4c>
 8019fe8:	2300      	movs	r3, #0
 8019fea:	9309      	str	r3, [sp, #36]	; 0x24
 8019fec:	2320      	movs	r3, #32
 8019fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ff6:	2330      	movs	r3, #48	; 0x30
 8019ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a1bc <_vfiprintf_r+0x24c>
 8019ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a000:	f04f 0901 	mov.w	r9, #1
 801a004:	4623      	mov	r3, r4
 801a006:	469a      	mov	sl, r3
 801a008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a00c:	b10a      	cbz	r2, 801a012 <_vfiprintf_r+0xa2>
 801a00e:	2a25      	cmp	r2, #37	; 0x25
 801a010:	d1f9      	bne.n	801a006 <_vfiprintf_r+0x96>
 801a012:	ebba 0b04 	subs.w	fp, sl, r4
 801a016:	d00b      	beq.n	801a030 <_vfiprintf_r+0xc0>
 801a018:	465b      	mov	r3, fp
 801a01a:	4622      	mov	r2, r4
 801a01c:	4629      	mov	r1, r5
 801a01e:	4630      	mov	r0, r6
 801a020:	f7ff ff93 	bl	8019f4a <__sfputs_r>
 801a024:	3001      	adds	r0, #1
 801a026:	f000 80aa 	beq.w	801a17e <_vfiprintf_r+0x20e>
 801a02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a02c:	445a      	add	r2, fp
 801a02e:	9209      	str	r2, [sp, #36]	; 0x24
 801a030:	f89a 3000 	ldrb.w	r3, [sl]
 801a034:	2b00      	cmp	r3, #0
 801a036:	f000 80a2 	beq.w	801a17e <_vfiprintf_r+0x20e>
 801a03a:	2300      	movs	r3, #0
 801a03c:	f04f 32ff 	mov.w	r2, #4294967295
 801a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a044:	f10a 0a01 	add.w	sl, sl, #1
 801a048:	9304      	str	r3, [sp, #16]
 801a04a:	9307      	str	r3, [sp, #28]
 801a04c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a050:	931a      	str	r3, [sp, #104]	; 0x68
 801a052:	4654      	mov	r4, sl
 801a054:	2205      	movs	r2, #5
 801a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a05a:	4858      	ldr	r0, [pc, #352]	; (801a1bc <_vfiprintf_r+0x24c>)
 801a05c:	f7e6 f8f8 	bl	8000250 <memchr>
 801a060:	9a04      	ldr	r2, [sp, #16]
 801a062:	b9d8      	cbnz	r0, 801a09c <_vfiprintf_r+0x12c>
 801a064:	06d1      	lsls	r1, r2, #27
 801a066:	bf44      	itt	mi
 801a068:	2320      	movmi	r3, #32
 801a06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a06e:	0713      	lsls	r3, r2, #28
 801a070:	bf44      	itt	mi
 801a072:	232b      	movmi	r3, #43	; 0x2b
 801a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a078:	f89a 3000 	ldrb.w	r3, [sl]
 801a07c:	2b2a      	cmp	r3, #42	; 0x2a
 801a07e:	d015      	beq.n	801a0ac <_vfiprintf_r+0x13c>
 801a080:	9a07      	ldr	r2, [sp, #28]
 801a082:	4654      	mov	r4, sl
 801a084:	2000      	movs	r0, #0
 801a086:	f04f 0c0a 	mov.w	ip, #10
 801a08a:	4621      	mov	r1, r4
 801a08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a090:	3b30      	subs	r3, #48	; 0x30
 801a092:	2b09      	cmp	r3, #9
 801a094:	d94e      	bls.n	801a134 <_vfiprintf_r+0x1c4>
 801a096:	b1b0      	cbz	r0, 801a0c6 <_vfiprintf_r+0x156>
 801a098:	9207      	str	r2, [sp, #28]
 801a09a:	e014      	b.n	801a0c6 <_vfiprintf_r+0x156>
 801a09c:	eba0 0308 	sub.w	r3, r0, r8
 801a0a0:	fa09 f303 	lsl.w	r3, r9, r3
 801a0a4:	4313      	orrs	r3, r2
 801a0a6:	9304      	str	r3, [sp, #16]
 801a0a8:	46a2      	mov	sl, r4
 801a0aa:	e7d2      	b.n	801a052 <_vfiprintf_r+0xe2>
 801a0ac:	9b03      	ldr	r3, [sp, #12]
 801a0ae:	1d19      	adds	r1, r3, #4
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	9103      	str	r1, [sp, #12]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	bfbb      	ittet	lt
 801a0b8:	425b      	neglt	r3, r3
 801a0ba:	f042 0202 	orrlt.w	r2, r2, #2
 801a0be:	9307      	strge	r3, [sp, #28]
 801a0c0:	9307      	strlt	r3, [sp, #28]
 801a0c2:	bfb8      	it	lt
 801a0c4:	9204      	strlt	r2, [sp, #16]
 801a0c6:	7823      	ldrb	r3, [r4, #0]
 801a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 801a0ca:	d10c      	bne.n	801a0e6 <_vfiprintf_r+0x176>
 801a0cc:	7863      	ldrb	r3, [r4, #1]
 801a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 801a0d0:	d135      	bne.n	801a13e <_vfiprintf_r+0x1ce>
 801a0d2:	9b03      	ldr	r3, [sp, #12]
 801a0d4:	1d1a      	adds	r2, r3, #4
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	9203      	str	r2, [sp, #12]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	bfb8      	it	lt
 801a0de:	f04f 33ff 	movlt.w	r3, #4294967295
 801a0e2:	3402      	adds	r4, #2
 801a0e4:	9305      	str	r3, [sp, #20]
 801a0e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a1cc <_vfiprintf_r+0x25c>
 801a0ea:	7821      	ldrb	r1, [r4, #0]
 801a0ec:	2203      	movs	r2, #3
 801a0ee:	4650      	mov	r0, sl
 801a0f0:	f7e6 f8ae 	bl	8000250 <memchr>
 801a0f4:	b140      	cbz	r0, 801a108 <_vfiprintf_r+0x198>
 801a0f6:	2340      	movs	r3, #64	; 0x40
 801a0f8:	eba0 000a 	sub.w	r0, r0, sl
 801a0fc:	fa03 f000 	lsl.w	r0, r3, r0
 801a100:	9b04      	ldr	r3, [sp, #16]
 801a102:	4303      	orrs	r3, r0
 801a104:	3401      	adds	r4, #1
 801a106:	9304      	str	r3, [sp, #16]
 801a108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a10c:	482c      	ldr	r0, [pc, #176]	; (801a1c0 <_vfiprintf_r+0x250>)
 801a10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a112:	2206      	movs	r2, #6
 801a114:	f7e6 f89c 	bl	8000250 <memchr>
 801a118:	2800      	cmp	r0, #0
 801a11a:	d03f      	beq.n	801a19c <_vfiprintf_r+0x22c>
 801a11c:	4b29      	ldr	r3, [pc, #164]	; (801a1c4 <_vfiprintf_r+0x254>)
 801a11e:	bb1b      	cbnz	r3, 801a168 <_vfiprintf_r+0x1f8>
 801a120:	9b03      	ldr	r3, [sp, #12]
 801a122:	3307      	adds	r3, #7
 801a124:	f023 0307 	bic.w	r3, r3, #7
 801a128:	3308      	adds	r3, #8
 801a12a:	9303      	str	r3, [sp, #12]
 801a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a12e:	443b      	add	r3, r7
 801a130:	9309      	str	r3, [sp, #36]	; 0x24
 801a132:	e767      	b.n	801a004 <_vfiprintf_r+0x94>
 801a134:	fb0c 3202 	mla	r2, ip, r2, r3
 801a138:	460c      	mov	r4, r1
 801a13a:	2001      	movs	r0, #1
 801a13c:	e7a5      	b.n	801a08a <_vfiprintf_r+0x11a>
 801a13e:	2300      	movs	r3, #0
 801a140:	3401      	adds	r4, #1
 801a142:	9305      	str	r3, [sp, #20]
 801a144:	4619      	mov	r1, r3
 801a146:	f04f 0c0a 	mov.w	ip, #10
 801a14a:	4620      	mov	r0, r4
 801a14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a150:	3a30      	subs	r2, #48	; 0x30
 801a152:	2a09      	cmp	r2, #9
 801a154:	d903      	bls.n	801a15e <_vfiprintf_r+0x1ee>
 801a156:	2b00      	cmp	r3, #0
 801a158:	d0c5      	beq.n	801a0e6 <_vfiprintf_r+0x176>
 801a15a:	9105      	str	r1, [sp, #20]
 801a15c:	e7c3      	b.n	801a0e6 <_vfiprintf_r+0x176>
 801a15e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a162:	4604      	mov	r4, r0
 801a164:	2301      	movs	r3, #1
 801a166:	e7f0      	b.n	801a14a <_vfiprintf_r+0x1da>
 801a168:	ab03      	add	r3, sp, #12
 801a16a:	9300      	str	r3, [sp, #0]
 801a16c:	462a      	mov	r2, r5
 801a16e:	4b16      	ldr	r3, [pc, #88]	; (801a1c8 <_vfiprintf_r+0x258>)
 801a170:	a904      	add	r1, sp, #16
 801a172:	4630      	mov	r0, r6
 801a174:	f7fc f830 	bl	80161d8 <_printf_float>
 801a178:	4607      	mov	r7, r0
 801a17a:	1c78      	adds	r0, r7, #1
 801a17c:	d1d6      	bne.n	801a12c <_vfiprintf_r+0x1bc>
 801a17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a180:	07d9      	lsls	r1, r3, #31
 801a182:	d405      	bmi.n	801a190 <_vfiprintf_r+0x220>
 801a184:	89ab      	ldrh	r3, [r5, #12]
 801a186:	059a      	lsls	r2, r3, #22
 801a188:	d402      	bmi.n	801a190 <_vfiprintf_r+0x220>
 801a18a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a18c:	f7fe ffd8 	bl	8019140 <__retarget_lock_release_recursive>
 801a190:	89ab      	ldrh	r3, [r5, #12]
 801a192:	065b      	lsls	r3, r3, #25
 801a194:	f53f af12 	bmi.w	8019fbc <_vfiprintf_r+0x4c>
 801a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a19a:	e711      	b.n	8019fc0 <_vfiprintf_r+0x50>
 801a19c:	ab03      	add	r3, sp, #12
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	462a      	mov	r2, r5
 801a1a2:	4b09      	ldr	r3, [pc, #36]	; (801a1c8 <_vfiprintf_r+0x258>)
 801a1a4:	a904      	add	r1, sp, #16
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	f7fc faa2 	bl	80166f0 <_printf_i>
 801a1ac:	e7e4      	b.n	801a178 <_vfiprintf_r+0x208>
 801a1ae:	bf00      	nop
 801a1b0:	0801ddcc 	.word	0x0801ddcc
 801a1b4:	0801ddec 	.word	0x0801ddec
 801a1b8:	0801ddac 	.word	0x0801ddac
 801a1bc:	0801dfec 	.word	0x0801dfec
 801a1c0:	0801dff6 	.word	0x0801dff6
 801a1c4:	080161d9 	.word	0x080161d9
 801a1c8:	08019f4b 	.word	0x08019f4b
 801a1cc:	0801dff2 	.word	0x0801dff2

0801a1d0 <nan>:
 801a1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a1d8 <nan+0x8>
 801a1d4:	4770      	bx	lr
 801a1d6:	bf00      	nop
 801a1d8:	00000000 	.word	0x00000000
 801a1dc:	7ff80000 	.word	0x7ff80000

0801a1e0 <_sbrk_r>:
 801a1e0:	b538      	push	{r3, r4, r5, lr}
 801a1e2:	4d06      	ldr	r5, [pc, #24]	; (801a1fc <_sbrk_r+0x1c>)
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	4608      	mov	r0, r1
 801a1ea:	602b      	str	r3, [r5, #0]
 801a1ec:	f7e9 fd42 	bl	8003c74 <_sbrk>
 801a1f0:	1c43      	adds	r3, r0, #1
 801a1f2:	d102      	bne.n	801a1fa <_sbrk_r+0x1a>
 801a1f4:	682b      	ldr	r3, [r5, #0]
 801a1f6:	b103      	cbz	r3, 801a1fa <_sbrk_r+0x1a>
 801a1f8:	6023      	str	r3, [r4, #0]
 801a1fa:	bd38      	pop	{r3, r4, r5, pc}
 801a1fc:	20006eb8 	.word	0x20006eb8

0801a200 <__sread>:
 801a200:	b510      	push	{r4, lr}
 801a202:	460c      	mov	r4, r1
 801a204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a208:	f000 faa0 	bl	801a74c <_read_r>
 801a20c:	2800      	cmp	r0, #0
 801a20e:	bfab      	itete	ge
 801a210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a212:	89a3      	ldrhlt	r3, [r4, #12]
 801a214:	181b      	addge	r3, r3, r0
 801a216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a21a:	bfac      	ite	ge
 801a21c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a21e:	81a3      	strhlt	r3, [r4, #12]
 801a220:	bd10      	pop	{r4, pc}

0801a222 <__swrite>:
 801a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a226:	461f      	mov	r7, r3
 801a228:	898b      	ldrh	r3, [r1, #12]
 801a22a:	05db      	lsls	r3, r3, #23
 801a22c:	4605      	mov	r5, r0
 801a22e:	460c      	mov	r4, r1
 801a230:	4616      	mov	r6, r2
 801a232:	d505      	bpl.n	801a240 <__swrite+0x1e>
 801a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a238:	2302      	movs	r3, #2
 801a23a:	2200      	movs	r2, #0
 801a23c:	f000 f9de 	bl	801a5fc <_lseek_r>
 801a240:	89a3      	ldrh	r3, [r4, #12]
 801a242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a24a:	81a3      	strh	r3, [r4, #12]
 801a24c:	4632      	mov	r2, r6
 801a24e:	463b      	mov	r3, r7
 801a250:	4628      	mov	r0, r5
 801a252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a256:	f000 b877 	b.w	801a348 <_write_r>

0801a25a <__sseek>:
 801a25a:	b510      	push	{r4, lr}
 801a25c:	460c      	mov	r4, r1
 801a25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a262:	f000 f9cb 	bl	801a5fc <_lseek_r>
 801a266:	1c43      	adds	r3, r0, #1
 801a268:	89a3      	ldrh	r3, [r4, #12]
 801a26a:	bf15      	itete	ne
 801a26c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a276:	81a3      	strheq	r3, [r4, #12]
 801a278:	bf18      	it	ne
 801a27a:	81a3      	strhne	r3, [r4, #12]
 801a27c:	bd10      	pop	{r4, pc}

0801a27e <__sclose>:
 801a27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a282:	f000 b8e9 	b.w	801a458 <_close_r>
	...

0801a288 <__swbuf_r>:
 801a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a28a:	460e      	mov	r6, r1
 801a28c:	4614      	mov	r4, r2
 801a28e:	4605      	mov	r5, r0
 801a290:	b118      	cbz	r0, 801a29a <__swbuf_r+0x12>
 801a292:	6983      	ldr	r3, [r0, #24]
 801a294:	b90b      	cbnz	r3, 801a29a <__swbuf_r+0x12>
 801a296:	f7fe fb2f 	bl	80188f8 <__sinit>
 801a29a:	4b21      	ldr	r3, [pc, #132]	; (801a320 <__swbuf_r+0x98>)
 801a29c:	429c      	cmp	r4, r3
 801a29e:	d12b      	bne.n	801a2f8 <__swbuf_r+0x70>
 801a2a0:	686c      	ldr	r4, [r5, #4]
 801a2a2:	69a3      	ldr	r3, [r4, #24]
 801a2a4:	60a3      	str	r3, [r4, #8]
 801a2a6:	89a3      	ldrh	r3, [r4, #12]
 801a2a8:	071a      	lsls	r2, r3, #28
 801a2aa:	d52f      	bpl.n	801a30c <__swbuf_r+0x84>
 801a2ac:	6923      	ldr	r3, [r4, #16]
 801a2ae:	b36b      	cbz	r3, 801a30c <__swbuf_r+0x84>
 801a2b0:	6923      	ldr	r3, [r4, #16]
 801a2b2:	6820      	ldr	r0, [r4, #0]
 801a2b4:	1ac0      	subs	r0, r0, r3
 801a2b6:	6963      	ldr	r3, [r4, #20]
 801a2b8:	b2f6      	uxtb	r6, r6
 801a2ba:	4283      	cmp	r3, r0
 801a2bc:	4637      	mov	r7, r6
 801a2be:	dc04      	bgt.n	801a2ca <__swbuf_r+0x42>
 801a2c0:	4621      	mov	r1, r4
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	f000 f95e 	bl	801a584 <_fflush_r>
 801a2c8:	bb30      	cbnz	r0, 801a318 <__swbuf_r+0x90>
 801a2ca:	68a3      	ldr	r3, [r4, #8]
 801a2cc:	3b01      	subs	r3, #1
 801a2ce:	60a3      	str	r3, [r4, #8]
 801a2d0:	6823      	ldr	r3, [r4, #0]
 801a2d2:	1c5a      	adds	r2, r3, #1
 801a2d4:	6022      	str	r2, [r4, #0]
 801a2d6:	701e      	strb	r6, [r3, #0]
 801a2d8:	6963      	ldr	r3, [r4, #20]
 801a2da:	3001      	adds	r0, #1
 801a2dc:	4283      	cmp	r3, r0
 801a2de:	d004      	beq.n	801a2ea <__swbuf_r+0x62>
 801a2e0:	89a3      	ldrh	r3, [r4, #12]
 801a2e2:	07db      	lsls	r3, r3, #31
 801a2e4:	d506      	bpl.n	801a2f4 <__swbuf_r+0x6c>
 801a2e6:	2e0a      	cmp	r6, #10
 801a2e8:	d104      	bne.n	801a2f4 <__swbuf_r+0x6c>
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	f000 f949 	bl	801a584 <_fflush_r>
 801a2f2:	b988      	cbnz	r0, 801a318 <__swbuf_r+0x90>
 801a2f4:	4638      	mov	r0, r7
 801a2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2f8:	4b0a      	ldr	r3, [pc, #40]	; (801a324 <__swbuf_r+0x9c>)
 801a2fa:	429c      	cmp	r4, r3
 801a2fc:	d101      	bne.n	801a302 <__swbuf_r+0x7a>
 801a2fe:	68ac      	ldr	r4, [r5, #8]
 801a300:	e7cf      	b.n	801a2a2 <__swbuf_r+0x1a>
 801a302:	4b09      	ldr	r3, [pc, #36]	; (801a328 <__swbuf_r+0xa0>)
 801a304:	429c      	cmp	r4, r3
 801a306:	bf08      	it	eq
 801a308:	68ec      	ldreq	r4, [r5, #12]
 801a30a:	e7ca      	b.n	801a2a2 <__swbuf_r+0x1a>
 801a30c:	4621      	mov	r1, r4
 801a30e:	4628      	mov	r0, r5
 801a310:	f000 f82c 	bl	801a36c <__swsetup_r>
 801a314:	2800      	cmp	r0, #0
 801a316:	d0cb      	beq.n	801a2b0 <__swbuf_r+0x28>
 801a318:	f04f 37ff 	mov.w	r7, #4294967295
 801a31c:	e7ea      	b.n	801a2f4 <__swbuf_r+0x6c>
 801a31e:	bf00      	nop
 801a320:	0801ddcc 	.word	0x0801ddcc
 801a324:	0801ddec 	.word	0x0801ddec
 801a328:	0801ddac 	.word	0x0801ddac

0801a32c <__ascii_wctomb>:
 801a32c:	b149      	cbz	r1, 801a342 <__ascii_wctomb+0x16>
 801a32e:	2aff      	cmp	r2, #255	; 0xff
 801a330:	bf85      	ittet	hi
 801a332:	238a      	movhi	r3, #138	; 0x8a
 801a334:	6003      	strhi	r3, [r0, #0]
 801a336:	700a      	strbls	r2, [r1, #0]
 801a338:	f04f 30ff 	movhi.w	r0, #4294967295
 801a33c:	bf98      	it	ls
 801a33e:	2001      	movls	r0, #1
 801a340:	4770      	bx	lr
 801a342:	4608      	mov	r0, r1
 801a344:	4770      	bx	lr
	...

0801a348 <_write_r>:
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4d07      	ldr	r5, [pc, #28]	; (801a368 <_write_r+0x20>)
 801a34c:	4604      	mov	r4, r0
 801a34e:	4608      	mov	r0, r1
 801a350:	4611      	mov	r1, r2
 801a352:	2200      	movs	r2, #0
 801a354:	602a      	str	r2, [r5, #0]
 801a356:	461a      	mov	r2, r3
 801a358:	f7e9 fc3b 	bl	8003bd2 <_write>
 801a35c:	1c43      	adds	r3, r0, #1
 801a35e:	d102      	bne.n	801a366 <_write_r+0x1e>
 801a360:	682b      	ldr	r3, [r5, #0]
 801a362:	b103      	cbz	r3, 801a366 <_write_r+0x1e>
 801a364:	6023      	str	r3, [r4, #0]
 801a366:	bd38      	pop	{r3, r4, r5, pc}
 801a368:	20006eb8 	.word	0x20006eb8

0801a36c <__swsetup_r>:
 801a36c:	4b32      	ldr	r3, [pc, #200]	; (801a438 <__swsetup_r+0xcc>)
 801a36e:	b570      	push	{r4, r5, r6, lr}
 801a370:	681d      	ldr	r5, [r3, #0]
 801a372:	4606      	mov	r6, r0
 801a374:	460c      	mov	r4, r1
 801a376:	b125      	cbz	r5, 801a382 <__swsetup_r+0x16>
 801a378:	69ab      	ldr	r3, [r5, #24]
 801a37a:	b913      	cbnz	r3, 801a382 <__swsetup_r+0x16>
 801a37c:	4628      	mov	r0, r5
 801a37e:	f7fe fabb 	bl	80188f8 <__sinit>
 801a382:	4b2e      	ldr	r3, [pc, #184]	; (801a43c <__swsetup_r+0xd0>)
 801a384:	429c      	cmp	r4, r3
 801a386:	d10f      	bne.n	801a3a8 <__swsetup_r+0x3c>
 801a388:	686c      	ldr	r4, [r5, #4]
 801a38a:	89a3      	ldrh	r3, [r4, #12]
 801a38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a390:	0719      	lsls	r1, r3, #28
 801a392:	d42c      	bmi.n	801a3ee <__swsetup_r+0x82>
 801a394:	06dd      	lsls	r5, r3, #27
 801a396:	d411      	bmi.n	801a3bc <__swsetup_r+0x50>
 801a398:	2309      	movs	r3, #9
 801a39a:	6033      	str	r3, [r6, #0]
 801a39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a3a0:	81a3      	strh	r3, [r4, #12]
 801a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3a6:	e03e      	b.n	801a426 <__swsetup_r+0xba>
 801a3a8:	4b25      	ldr	r3, [pc, #148]	; (801a440 <__swsetup_r+0xd4>)
 801a3aa:	429c      	cmp	r4, r3
 801a3ac:	d101      	bne.n	801a3b2 <__swsetup_r+0x46>
 801a3ae:	68ac      	ldr	r4, [r5, #8]
 801a3b0:	e7eb      	b.n	801a38a <__swsetup_r+0x1e>
 801a3b2:	4b24      	ldr	r3, [pc, #144]	; (801a444 <__swsetup_r+0xd8>)
 801a3b4:	429c      	cmp	r4, r3
 801a3b6:	bf08      	it	eq
 801a3b8:	68ec      	ldreq	r4, [r5, #12]
 801a3ba:	e7e6      	b.n	801a38a <__swsetup_r+0x1e>
 801a3bc:	0758      	lsls	r0, r3, #29
 801a3be:	d512      	bpl.n	801a3e6 <__swsetup_r+0x7a>
 801a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3c2:	b141      	cbz	r1, 801a3d6 <__swsetup_r+0x6a>
 801a3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3c8:	4299      	cmp	r1, r3
 801a3ca:	d002      	beq.n	801a3d2 <__swsetup_r+0x66>
 801a3cc:	4630      	mov	r0, r6
 801a3ce:	f7ff fb9f 	bl	8019b10 <_free_r>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	6363      	str	r3, [r4, #52]	; 0x34
 801a3d6:	89a3      	ldrh	r3, [r4, #12]
 801a3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3dc:	81a3      	strh	r3, [r4, #12]
 801a3de:	2300      	movs	r3, #0
 801a3e0:	6063      	str	r3, [r4, #4]
 801a3e2:	6923      	ldr	r3, [r4, #16]
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	89a3      	ldrh	r3, [r4, #12]
 801a3e8:	f043 0308 	orr.w	r3, r3, #8
 801a3ec:	81a3      	strh	r3, [r4, #12]
 801a3ee:	6923      	ldr	r3, [r4, #16]
 801a3f0:	b94b      	cbnz	r3, 801a406 <__swsetup_r+0x9a>
 801a3f2:	89a3      	ldrh	r3, [r4, #12]
 801a3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3fc:	d003      	beq.n	801a406 <__swsetup_r+0x9a>
 801a3fe:	4621      	mov	r1, r4
 801a400:	4630      	mov	r0, r6
 801a402:	f000 f931 	bl	801a668 <__smakebuf_r>
 801a406:	89a0      	ldrh	r0, [r4, #12]
 801a408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a40c:	f010 0301 	ands.w	r3, r0, #1
 801a410:	d00a      	beq.n	801a428 <__swsetup_r+0xbc>
 801a412:	2300      	movs	r3, #0
 801a414:	60a3      	str	r3, [r4, #8]
 801a416:	6963      	ldr	r3, [r4, #20]
 801a418:	425b      	negs	r3, r3
 801a41a:	61a3      	str	r3, [r4, #24]
 801a41c:	6923      	ldr	r3, [r4, #16]
 801a41e:	b943      	cbnz	r3, 801a432 <__swsetup_r+0xc6>
 801a420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a424:	d1ba      	bne.n	801a39c <__swsetup_r+0x30>
 801a426:	bd70      	pop	{r4, r5, r6, pc}
 801a428:	0781      	lsls	r1, r0, #30
 801a42a:	bf58      	it	pl
 801a42c:	6963      	ldrpl	r3, [r4, #20]
 801a42e:	60a3      	str	r3, [r4, #8]
 801a430:	e7f4      	b.n	801a41c <__swsetup_r+0xb0>
 801a432:	2000      	movs	r0, #0
 801a434:	e7f7      	b.n	801a426 <__swsetup_r+0xba>
 801a436:	bf00      	nop
 801a438:	2000005c 	.word	0x2000005c
 801a43c:	0801ddcc 	.word	0x0801ddcc
 801a440:	0801ddec 	.word	0x0801ddec
 801a444:	0801ddac 	.word	0x0801ddac

0801a448 <abort>:
 801a448:	b508      	push	{r3, lr}
 801a44a:	2006      	movs	r0, #6
 801a44c:	f000 f9b8 	bl	801a7c0 <raise>
 801a450:	2001      	movs	r0, #1
 801a452:	f7e9 fb97 	bl	8003b84 <_exit>
	...

0801a458 <_close_r>:
 801a458:	b538      	push	{r3, r4, r5, lr}
 801a45a:	4d06      	ldr	r5, [pc, #24]	; (801a474 <_close_r+0x1c>)
 801a45c:	2300      	movs	r3, #0
 801a45e:	4604      	mov	r4, r0
 801a460:	4608      	mov	r0, r1
 801a462:	602b      	str	r3, [r5, #0]
 801a464:	f7e9 fbd1 	bl	8003c0a <_close>
 801a468:	1c43      	adds	r3, r0, #1
 801a46a:	d102      	bne.n	801a472 <_close_r+0x1a>
 801a46c:	682b      	ldr	r3, [r5, #0]
 801a46e:	b103      	cbz	r3, 801a472 <_close_r+0x1a>
 801a470:	6023      	str	r3, [r4, #0]
 801a472:	bd38      	pop	{r3, r4, r5, pc}
 801a474:	20006eb8 	.word	0x20006eb8

0801a478 <__sflush_r>:
 801a478:	898a      	ldrh	r2, [r1, #12]
 801a47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a47e:	4605      	mov	r5, r0
 801a480:	0710      	lsls	r0, r2, #28
 801a482:	460c      	mov	r4, r1
 801a484:	d458      	bmi.n	801a538 <__sflush_r+0xc0>
 801a486:	684b      	ldr	r3, [r1, #4]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	dc05      	bgt.n	801a498 <__sflush_r+0x20>
 801a48c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a48e:	2b00      	cmp	r3, #0
 801a490:	dc02      	bgt.n	801a498 <__sflush_r+0x20>
 801a492:	2000      	movs	r0, #0
 801a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a49a:	2e00      	cmp	r6, #0
 801a49c:	d0f9      	beq.n	801a492 <__sflush_r+0x1a>
 801a49e:	2300      	movs	r3, #0
 801a4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a4a4:	682f      	ldr	r7, [r5, #0]
 801a4a6:	602b      	str	r3, [r5, #0]
 801a4a8:	d032      	beq.n	801a510 <__sflush_r+0x98>
 801a4aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a4ac:	89a3      	ldrh	r3, [r4, #12]
 801a4ae:	075a      	lsls	r2, r3, #29
 801a4b0:	d505      	bpl.n	801a4be <__sflush_r+0x46>
 801a4b2:	6863      	ldr	r3, [r4, #4]
 801a4b4:	1ac0      	subs	r0, r0, r3
 801a4b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a4b8:	b10b      	cbz	r3, 801a4be <__sflush_r+0x46>
 801a4ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a4bc:	1ac0      	subs	r0, r0, r3
 801a4be:	2300      	movs	r3, #0
 801a4c0:	4602      	mov	r2, r0
 801a4c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a4c4:	6a21      	ldr	r1, [r4, #32]
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	47b0      	blx	r6
 801a4ca:	1c43      	adds	r3, r0, #1
 801a4cc:	89a3      	ldrh	r3, [r4, #12]
 801a4ce:	d106      	bne.n	801a4de <__sflush_r+0x66>
 801a4d0:	6829      	ldr	r1, [r5, #0]
 801a4d2:	291d      	cmp	r1, #29
 801a4d4:	d82c      	bhi.n	801a530 <__sflush_r+0xb8>
 801a4d6:	4a2a      	ldr	r2, [pc, #168]	; (801a580 <__sflush_r+0x108>)
 801a4d8:	40ca      	lsrs	r2, r1
 801a4da:	07d6      	lsls	r6, r2, #31
 801a4dc:	d528      	bpl.n	801a530 <__sflush_r+0xb8>
 801a4de:	2200      	movs	r2, #0
 801a4e0:	6062      	str	r2, [r4, #4]
 801a4e2:	04d9      	lsls	r1, r3, #19
 801a4e4:	6922      	ldr	r2, [r4, #16]
 801a4e6:	6022      	str	r2, [r4, #0]
 801a4e8:	d504      	bpl.n	801a4f4 <__sflush_r+0x7c>
 801a4ea:	1c42      	adds	r2, r0, #1
 801a4ec:	d101      	bne.n	801a4f2 <__sflush_r+0x7a>
 801a4ee:	682b      	ldr	r3, [r5, #0]
 801a4f0:	b903      	cbnz	r3, 801a4f4 <__sflush_r+0x7c>
 801a4f2:	6560      	str	r0, [r4, #84]	; 0x54
 801a4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a4f6:	602f      	str	r7, [r5, #0]
 801a4f8:	2900      	cmp	r1, #0
 801a4fa:	d0ca      	beq.n	801a492 <__sflush_r+0x1a>
 801a4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a500:	4299      	cmp	r1, r3
 801a502:	d002      	beq.n	801a50a <__sflush_r+0x92>
 801a504:	4628      	mov	r0, r5
 801a506:	f7ff fb03 	bl	8019b10 <_free_r>
 801a50a:	2000      	movs	r0, #0
 801a50c:	6360      	str	r0, [r4, #52]	; 0x34
 801a50e:	e7c1      	b.n	801a494 <__sflush_r+0x1c>
 801a510:	6a21      	ldr	r1, [r4, #32]
 801a512:	2301      	movs	r3, #1
 801a514:	4628      	mov	r0, r5
 801a516:	47b0      	blx	r6
 801a518:	1c41      	adds	r1, r0, #1
 801a51a:	d1c7      	bne.n	801a4ac <__sflush_r+0x34>
 801a51c:	682b      	ldr	r3, [r5, #0]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d0c4      	beq.n	801a4ac <__sflush_r+0x34>
 801a522:	2b1d      	cmp	r3, #29
 801a524:	d001      	beq.n	801a52a <__sflush_r+0xb2>
 801a526:	2b16      	cmp	r3, #22
 801a528:	d101      	bne.n	801a52e <__sflush_r+0xb6>
 801a52a:	602f      	str	r7, [r5, #0]
 801a52c:	e7b1      	b.n	801a492 <__sflush_r+0x1a>
 801a52e:	89a3      	ldrh	r3, [r4, #12]
 801a530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a534:	81a3      	strh	r3, [r4, #12]
 801a536:	e7ad      	b.n	801a494 <__sflush_r+0x1c>
 801a538:	690f      	ldr	r7, [r1, #16]
 801a53a:	2f00      	cmp	r7, #0
 801a53c:	d0a9      	beq.n	801a492 <__sflush_r+0x1a>
 801a53e:	0793      	lsls	r3, r2, #30
 801a540:	680e      	ldr	r6, [r1, #0]
 801a542:	bf08      	it	eq
 801a544:	694b      	ldreq	r3, [r1, #20]
 801a546:	600f      	str	r7, [r1, #0]
 801a548:	bf18      	it	ne
 801a54a:	2300      	movne	r3, #0
 801a54c:	eba6 0807 	sub.w	r8, r6, r7
 801a550:	608b      	str	r3, [r1, #8]
 801a552:	f1b8 0f00 	cmp.w	r8, #0
 801a556:	dd9c      	ble.n	801a492 <__sflush_r+0x1a>
 801a558:	6a21      	ldr	r1, [r4, #32]
 801a55a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a55c:	4643      	mov	r3, r8
 801a55e:	463a      	mov	r2, r7
 801a560:	4628      	mov	r0, r5
 801a562:	47b0      	blx	r6
 801a564:	2800      	cmp	r0, #0
 801a566:	dc06      	bgt.n	801a576 <__sflush_r+0xfe>
 801a568:	89a3      	ldrh	r3, [r4, #12]
 801a56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a56e:	81a3      	strh	r3, [r4, #12]
 801a570:	f04f 30ff 	mov.w	r0, #4294967295
 801a574:	e78e      	b.n	801a494 <__sflush_r+0x1c>
 801a576:	4407      	add	r7, r0
 801a578:	eba8 0800 	sub.w	r8, r8, r0
 801a57c:	e7e9      	b.n	801a552 <__sflush_r+0xda>
 801a57e:	bf00      	nop
 801a580:	20400001 	.word	0x20400001

0801a584 <_fflush_r>:
 801a584:	b538      	push	{r3, r4, r5, lr}
 801a586:	690b      	ldr	r3, [r1, #16]
 801a588:	4605      	mov	r5, r0
 801a58a:	460c      	mov	r4, r1
 801a58c:	b913      	cbnz	r3, 801a594 <_fflush_r+0x10>
 801a58e:	2500      	movs	r5, #0
 801a590:	4628      	mov	r0, r5
 801a592:	bd38      	pop	{r3, r4, r5, pc}
 801a594:	b118      	cbz	r0, 801a59e <_fflush_r+0x1a>
 801a596:	6983      	ldr	r3, [r0, #24]
 801a598:	b90b      	cbnz	r3, 801a59e <_fflush_r+0x1a>
 801a59a:	f7fe f9ad 	bl	80188f8 <__sinit>
 801a59e:	4b14      	ldr	r3, [pc, #80]	; (801a5f0 <_fflush_r+0x6c>)
 801a5a0:	429c      	cmp	r4, r3
 801a5a2:	d11b      	bne.n	801a5dc <_fflush_r+0x58>
 801a5a4:	686c      	ldr	r4, [r5, #4]
 801a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d0ef      	beq.n	801a58e <_fflush_r+0xa>
 801a5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a5b0:	07d0      	lsls	r0, r2, #31
 801a5b2:	d404      	bmi.n	801a5be <_fflush_r+0x3a>
 801a5b4:	0599      	lsls	r1, r3, #22
 801a5b6:	d402      	bmi.n	801a5be <_fflush_r+0x3a>
 801a5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5ba:	f7fe fdc0 	bl	801913e <__retarget_lock_acquire_recursive>
 801a5be:	4628      	mov	r0, r5
 801a5c0:	4621      	mov	r1, r4
 801a5c2:	f7ff ff59 	bl	801a478 <__sflush_r>
 801a5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a5c8:	07da      	lsls	r2, r3, #31
 801a5ca:	4605      	mov	r5, r0
 801a5cc:	d4e0      	bmi.n	801a590 <_fflush_r+0xc>
 801a5ce:	89a3      	ldrh	r3, [r4, #12]
 801a5d0:	059b      	lsls	r3, r3, #22
 801a5d2:	d4dd      	bmi.n	801a590 <_fflush_r+0xc>
 801a5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5d6:	f7fe fdb3 	bl	8019140 <__retarget_lock_release_recursive>
 801a5da:	e7d9      	b.n	801a590 <_fflush_r+0xc>
 801a5dc:	4b05      	ldr	r3, [pc, #20]	; (801a5f4 <_fflush_r+0x70>)
 801a5de:	429c      	cmp	r4, r3
 801a5e0:	d101      	bne.n	801a5e6 <_fflush_r+0x62>
 801a5e2:	68ac      	ldr	r4, [r5, #8]
 801a5e4:	e7df      	b.n	801a5a6 <_fflush_r+0x22>
 801a5e6:	4b04      	ldr	r3, [pc, #16]	; (801a5f8 <_fflush_r+0x74>)
 801a5e8:	429c      	cmp	r4, r3
 801a5ea:	bf08      	it	eq
 801a5ec:	68ec      	ldreq	r4, [r5, #12]
 801a5ee:	e7da      	b.n	801a5a6 <_fflush_r+0x22>
 801a5f0:	0801ddcc 	.word	0x0801ddcc
 801a5f4:	0801ddec 	.word	0x0801ddec
 801a5f8:	0801ddac 	.word	0x0801ddac

0801a5fc <_lseek_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	4d07      	ldr	r5, [pc, #28]	; (801a61c <_lseek_r+0x20>)
 801a600:	4604      	mov	r4, r0
 801a602:	4608      	mov	r0, r1
 801a604:	4611      	mov	r1, r2
 801a606:	2200      	movs	r2, #0
 801a608:	602a      	str	r2, [r5, #0]
 801a60a:	461a      	mov	r2, r3
 801a60c:	f7e9 fb24 	bl	8003c58 <_lseek>
 801a610:	1c43      	adds	r3, r0, #1
 801a612:	d102      	bne.n	801a61a <_lseek_r+0x1e>
 801a614:	682b      	ldr	r3, [r5, #0]
 801a616:	b103      	cbz	r3, 801a61a <_lseek_r+0x1e>
 801a618:	6023      	str	r3, [r4, #0]
 801a61a:	bd38      	pop	{r3, r4, r5, pc}
 801a61c:	20006eb8 	.word	0x20006eb8

0801a620 <__swhatbuf_r>:
 801a620:	b570      	push	{r4, r5, r6, lr}
 801a622:	460e      	mov	r6, r1
 801a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a628:	2900      	cmp	r1, #0
 801a62a:	b096      	sub	sp, #88	; 0x58
 801a62c:	4614      	mov	r4, r2
 801a62e:	461d      	mov	r5, r3
 801a630:	da07      	bge.n	801a642 <__swhatbuf_r+0x22>
 801a632:	2300      	movs	r3, #0
 801a634:	602b      	str	r3, [r5, #0]
 801a636:	89b3      	ldrh	r3, [r6, #12]
 801a638:	061a      	lsls	r2, r3, #24
 801a63a:	d410      	bmi.n	801a65e <__swhatbuf_r+0x3e>
 801a63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a640:	e00e      	b.n	801a660 <__swhatbuf_r+0x40>
 801a642:	466a      	mov	r2, sp
 801a644:	f000 f8d8 	bl	801a7f8 <_fstat_r>
 801a648:	2800      	cmp	r0, #0
 801a64a:	dbf2      	blt.n	801a632 <__swhatbuf_r+0x12>
 801a64c:	9a01      	ldr	r2, [sp, #4]
 801a64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a656:	425a      	negs	r2, r3
 801a658:	415a      	adcs	r2, r3
 801a65a:	602a      	str	r2, [r5, #0]
 801a65c:	e7ee      	b.n	801a63c <__swhatbuf_r+0x1c>
 801a65e:	2340      	movs	r3, #64	; 0x40
 801a660:	2000      	movs	r0, #0
 801a662:	6023      	str	r3, [r4, #0]
 801a664:	b016      	add	sp, #88	; 0x58
 801a666:	bd70      	pop	{r4, r5, r6, pc}

0801a668 <__smakebuf_r>:
 801a668:	898b      	ldrh	r3, [r1, #12]
 801a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a66c:	079d      	lsls	r5, r3, #30
 801a66e:	4606      	mov	r6, r0
 801a670:	460c      	mov	r4, r1
 801a672:	d507      	bpl.n	801a684 <__smakebuf_r+0x1c>
 801a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a678:	6023      	str	r3, [r4, #0]
 801a67a:	6123      	str	r3, [r4, #16]
 801a67c:	2301      	movs	r3, #1
 801a67e:	6163      	str	r3, [r4, #20]
 801a680:	b002      	add	sp, #8
 801a682:	bd70      	pop	{r4, r5, r6, pc}
 801a684:	ab01      	add	r3, sp, #4
 801a686:	466a      	mov	r2, sp
 801a688:	f7ff ffca 	bl	801a620 <__swhatbuf_r>
 801a68c:	9900      	ldr	r1, [sp, #0]
 801a68e:	4605      	mov	r5, r0
 801a690:	4630      	mov	r0, r6
 801a692:	f7ff fa8d 	bl	8019bb0 <_malloc_r>
 801a696:	b948      	cbnz	r0, 801a6ac <__smakebuf_r+0x44>
 801a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a69c:	059a      	lsls	r2, r3, #22
 801a69e:	d4ef      	bmi.n	801a680 <__smakebuf_r+0x18>
 801a6a0:	f023 0303 	bic.w	r3, r3, #3
 801a6a4:	f043 0302 	orr.w	r3, r3, #2
 801a6a8:	81a3      	strh	r3, [r4, #12]
 801a6aa:	e7e3      	b.n	801a674 <__smakebuf_r+0xc>
 801a6ac:	4b0d      	ldr	r3, [pc, #52]	; (801a6e4 <__smakebuf_r+0x7c>)
 801a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 801a6b0:	89a3      	ldrh	r3, [r4, #12]
 801a6b2:	6020      	str	r0, [r4, #0]
 801a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6b8:	81a3      	strh	r3, [r4, #12]
 801a6ba:	9b00      	ldr	r3, [sp, #0]
 801a6bc:	6163      	str	r3, [r4, #20]
 801a6be:	9b01      	ldr	r3, [sp, #4]
 801a6c0:	6120      	str	r0, [r4, #16]
 801a6c2:	b15b      	cbz	r3, 801a6dc <__smakebuf_r+0x74>
 801a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	f000 f8a7 	bl	801a81c <_isatty_r>
 801a6ce:	b128      	cbz	r0, 801a6dc <__smakebuf_r+0x74>
 801a6d0:	89a3      	ldrh	r3, [r4, #12]
 801a6d2:	f023 0303 	bic.w	r3, r3, #3
 801a6d6:	f043 0301 	orr.w	r3, r3, #1
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	89a0      	ldrh	r0, [r4, #12]
 801a6de:	4305      	orrs	r5, r0
 801a6e0:	81a5      	strh	r5, [r4, #12]
 801a6e2:	e7cd      	b.n	801a680 <__smakebuf_r+0x18>
 801a6e4:	08018891 	.word	0x08018891

0801a6e8 <__malloc_lock>:
 801a6e8:	4801      	ldr	r0, [pc, #4]	; (801a6f0 <__malloc_lock+0x8>)
 801a6ea:	f7fe bd28 	b.w	801913e <__retarget_lock_acquire_recursive>
 801a6ee:	bf00      	nop
 801a6f0:	20006ec0 	.word	0x20006ec0

0801a6f4 <__malloc_unlock>:
 801a6f4:	4801      	ldr	r0, [pc, #4]	; (801a6fc <__malloc_unlock+0x8>)
 801a6f6:	f7fe bd23 	b.w	8019140 <__retarget_lock_release_recursive>
 801a6fa:	bf00      	nop
 801a6fc:	20006ec0 	.word	0x20006ec0

0801a700 <_realloc_r>:
 801a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a702:	4607      	mov	r7, r0
 801a704:	4614      	mov	r4, r2
 801a706:	460e      	mov	r6, r1
 801a708:	b921      	cbnz	r1, 801a714 <_realloc_r+0x14>
 801a70a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a70e:	4611      	mov	r1, r2
 801a710:	f7ff ba4e 	b.w	8019bb0 <_malloc_r>
 801a714:	b922      	cbnz	r2, 801a720 <_realloc_r+0x20>
 801a716:	f7ff f9fb 	bl	8019b10 <_free_r>
 801a71a:	4625      	mov	r5, r4
 801a71c:	4628      	mov	r0, r5
 801a71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a720:	f000 f88c 	bl	801a83c <_malloc_usable_size_r>
 801a724:	42a0      	cmp	r0, r4
 801a726:	d20f      	bcs.n	801a748 <_realloc_r+0x48>
 801a728:	4621      	mov	r1, r4
 801a72a:	4638      	mov	r0, r7
 801a72c:	f7ff fa40 	bl	8019bb0 <_malloc_r>
 801a730:	4605      	mov	r5, r0
 801a732:	2800      	cmp	r0, #0
 801a734:	d0f2      	beq.n	801a71c <_realloc_r+0x1c>
 801a736:	4631      	mov	r1, r6
 801a738:	4622      	mov	r2, r4
 801a73a:	f7fb fc8b 	bl	8016054 <memcpy>
 801a73e:	4631      	mov	r1, r6
 801a740:	4638      	mov	r0, r7
 801a742:	f7ff f9e5 	bl	8019b10 <_free_r>
 801a746:	e7e9      	b.n	801a71c <_realloc_r+0x1c>
 801a748:	4635      	mov	r5, r6
 801a74a:	e7e7      	b.n	801a71c <_realloc_r+0x1c>

0801a74c <_read_r>:
 801a74c:	b538      	push	{r3, r4, r5, lr}
 801a74e:	4d07      	ldr	r5, [pc, #28]	; (801a76c <_read_r+0x20>)
 801a750:	4604      	mov	r4, r0
 801a752:	4608      	mov	r0, r1
 801a754:	4611      	mov	r1, r2
 801a756:	2200      	movs	r2, #0
 801a758:	602a      	str	r2, [r5, #0]
 801a75a:	461a      	mov	r2, r3
 801a75c:	f7e9 fa1c 	bl	8003b98 <_read>
 801a760:	1c43      	adds	r3, r0, #1
 801a762:	d102      	bne.n	801a76a <_read_r+0x1e>
 801a764:	682b      	ldr	r3, [r5, #0]
 801a766:	b103      	cbz	r3, 801a76a <_read_r+0x1e>
 801a768:	6023      	str	r3, [r4, #0]
 801a76a:	bd38      	pop	{r3, r4, r5, pc}
 801a76c:	20006eb8 	.word	0x20006eb8

0801a770 <_raise_r>:
 801a770:	291f      	cmp	r1, #31
 801a772:	b538      	push	{r3, r4, r5, lr}
 801a774:	4604      	mov	r4, r0
 801a776:	460d      	mov	r5, r1
 801a778:	d904      	bls.n	801a784 <_raise_r+0x14>
 801a77a:	2316      	movs	r3, #22
 801a77c:	6003      	str	r3, [r0, #0]
 801a77e:	f04f 30ff 	mov.w	r0, #4294967295
 801a782:	bd38      	pop	{r3, r4, r5, pc}
 801a784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a786:	b112      	cbz	r2, 801a78e <_raise_r+0x1e>
 801a788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a78c:	b94b      	cbnz	r3, 801a7a2 <_raise_r+0x32>
 801a78e:	4620      	mov	r0, r4
 801a790:	f000 f830 	bl	801a7f4 <_getpid_r>
 801a794:	462a      	mov	r2, r5
 801a796:	4601      	mov	r1, r0
 801a798:	4620      	mov	r0, r4
 801a79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a79e:	f000 b817 	b.w	801a7d0 <_kill_r>
 801a7a2:	2b01      	cmp	r3, #1
 801a7a4:	d00a      	beq.n	801a7bc <_raise_r+0x4c>
 801a7a6:	1c59      	adds	r1, r3, #1
 801a7a8:	d103      	bne.n	801a7b2 <_raise_r+0x42>
 801a7aa:	2316      	movs	r3, #22
 801a7ac:	6003      	str	r3, [r0, #0]
 801a7ae:	2001      	movs	r0, #1
 801a7b0:	e7e7      	b.n	801a782 <_raise_r+0x12>
 801a7b2:	2400      	movs	r4, #0
 801a7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a7b8:	4628      	mov	r0, r5
 801a7ba:	4798      	blx	r3
 801a7bc:	2000      	movs	r0, #0
 801a7be:	e7e0      	b.n	801a782 <_raise_r+0x12>

0801a7c0 <raise>:
 801a7c0:	4b02      	ldr	r3, [pc, #8]	; (801a7cc <raise+0xc>)
 801a7c2:	4601      	mov	r1, r0
 801a7c4:	6818      	ldr	r0, [r3, #0]
 801a7c6:	f7ff bfd3 	b.w	801a770 <_raise_r>
 801a7ca:	bf00      	nop
 801a7cc:	2000005c 	.word	0x2000005c

0801a7d0 <_kill_r>:
 801a7d0:	b538      	push	{r3, r4, r5, lr}
 801a7d2:	4d07      	ldr	r5, [pc, #28]	; (801a7f0 <_kill_r+0x20>)
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	4608      	mov	r0, r1
 801a7da:	4611      	mov	r1, r2
 801a7dc:	602b      	str	r3, [r5, #0]
 801a7de:	f7e9 f9bf 	bl	8003b60 <_kill>
 801a7e2:	1c43      	adds	r3, r0, #1
 801a7e4:	d102      	bne.n	801a7ec <_kill_r+0x1c>
 801a7e6:	682b      	ldr	r3, [r5, #0]
 801a7e8:	b103      	cbz	r3, 801a7ec <_kill_r+0x1c>
 801a7ea:	6023      	str	r3, [r4, #0]
 801a7ec:	bd38      	pop	{r3, r4, r5, pc}
 801a7ee:	bf00      	nop
 801a7f0:	20006eb8 	.word	0x20006eb8

0801a7f4 <_getpid_r>:
 801a7f4:	f7e9 b9ac 	b.w	8003b50 <_getpid>

0801a7f8 <_fstat_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	4d07      	ldr	r5, [pc, #28]	; (801a818 <_fstat_r+0x20>)
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	4604      	mov	r4, r0
 801a800:	4608      	mov	r0, r1
 801a802:	4611      	mov	r1, r2
 801a804:	602b      	str	r3, [r5, #0]
 801a806:	f7e9 fa0c 	bl	8003c22 <_fstat>
 801a80a:	1c43      	adds	r3, r0, #1
 801a80c:	d102      	bne.n	801a814 <_fstat_r+0x1c>
 801a80e:	682b      	ldr	r3, [r5, #0]
 801a810:	b103      	cbz	r3, 801a814 <_fstat_r+0x1c>
 801a812:	6023      	str	r3, [r4, #0]
 801a814:	bd38      	pop	{r3, r4, r5, pc}
 801a816:	bf00      	nop
 801a818:	20006eb8 	.word	0x20006eb8

0801a81c <_isatty_r>:
 801a81c:	b538      	push	{r3, r4, r5, lr}
 801a81e:	4d06      	ldr	r5, [pc, #24]	; (801a838 <_isatty_r+0x1c>)
 801a820:	2300      	movs	r3, #0
 801a822:	4604      	mov	r4, r0
 801a824:	4608      	mov	r0, r1
 801a826:	602b      	str	r3, [r5, #0]
 801a828:	f7e9 fa0b 	bl	8003c42 <_isatty>
 801a82c:	1c43      	adds	r3, r0, #1
 801a82e:	d102      	bne.n	801a836 <_isatty_r+0x1a>
 801a830:	682b      	ldr	r3, [r5, #0]
 801a832:	b103      	cbz	r3, 801a836 <_isatty_r+0x1a>
 801a834:	6023      	str	r3, [r4, #0]
 801a836:	bd38      	pop	{r3, r4, r5, pc}
 801a838:	20006eb8 	.word	0x20006eb8

0801a83c <_malloc_usable_size_r>:
 801a83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a840:	1f18      	subs	r0, r3, #4
 801a842:	2b00      	cmp	r3, #0
 801a844:	bfbc      	itt	lt
 801a846:	580b      	ldrlt	r3, [r1, r0]
 801a848:	18c0      	addlt	r0, r0, r3
 801a84a:	4770      	bx	lr
 801a84c:	0000      	movs	r0, r0
	...

0801a850 <exp>:
 801a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a854:	b087      	sub	sp, #28
 801a856:	ed8d 0b00 	vstr	d0, [sp]
 801a85a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a85e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 801a862:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801a866:	18f7      	adds	r7, r6, r3
 801a868:	2f3e      	cmp	r7, #62	; 0x3e
 801a86a:	d929      	bls.n	801a8c0 <exp+0x70>
 801a86c:	2f00      	cmp	r7, #0
 801a86e:	da08      	bge.n	801a882 <exp+0x32>
 801a870:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a874:	ed9d 7b00 	vldr	d7, [sp]
 801a878:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a87c:	b007      	add	sp, #28
 801a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a882:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801a886:	d91a      	bls.n	801a8be <exp+0x6e>
 801a888:	4b65      	ldr	r3, [pc, #404]	; (801aa20 <exp+0x1d0>)
 801a88a:	2200      	movs	r2, #0
 801a88c:	4299      	cmp	r1, r3
 801a88e:	bf08      	it	eq
 801a890:	4290      	cmpeq	r0, r2
 801a892:	f000 80b6 	beq.w	801aa02 <exp+0x1b2>
 801a896:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801a89a:	429e      	cmp	r6, r3
 801a89c:	d0e8      	beq.n	801a870 <exp+0x20>
 801a89e:	2800      	cmp	r0, #0
 801a8a0:	f171 0300 	sbcs.w	r3, r1, #0
 801a8a4:	f04f 0000 	mov.w	r0, #0
 801a8a8:	da04      	bge.n	801a8b4 <exp+0x64>
 801a8aa:	b007      	add	sp, #28
 801a8ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8b0:	f000 b8da 	b.w	801aa68 <__math_uflow>
 801a8b4:	b007      	add	sp, #28
 801a8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8ba:	f000 b8dd 	b.w	801aa78 <__math_oflow>
 801a8be:	2600      	movs	r6, #0
 801a8c0:	4858      	ldr	r0, [pc, #352]	; (801aa24 <exp+0x1d4>)
 801a8c2:	ed9d 3b00 	vldr	d3, [sp]
 801a8c6:	ed90 6b02 	vldr	d6, [r0, #8]
 801a8ca:	ed90 7b00 	vldr	d7, [r0]
 801a8ce:	eeb0 4b46 	vmov.f64	d4, d6
 801a8d2:	eea7 4b03 	vfma.f64	d4, d7, d3
 801a8d6:	ee34 7b46 	vsub.f64	d7, d4, d6
 801a8da:	ed90 6b04 	vldr	d6, [r0, #16]
 801a8de:	ee14 ca10 	vmov	ip, s8
 801a8e2:	eeb0 4b43 	vmov.f64	d4, d3
 801a8e6:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 801a8ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 801a8ee:	eeb0 6b44 	vmov.f64	d6, d4
 801a8f2:	ed90 4b06 	vldr	d4, [r0, #24]
 801a8f6:	1849      	adds	r1, r1, r1
 801a8f8:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 801a8fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a900:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a904:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 801a908:	ee26 2b06 	vmul.f64	d2, d6, d6
 801a90c:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 801a910:	ed90 4b08 	vldr	d4, [r0, #32]
 801a914:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a918:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 801a91c:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a920:	eea4 7b02 	vfma.f64	d7, d4, d2
 801a924:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 801a928:	ee22 2b02 	vmul.f64	d2, d2, d2
 801a92c:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 801a930:	2700      	movs	r7, #0
 801a932:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 801a936:	eb17 0a08 	adds.w	sl, r7, r8
 801a93a:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a93e:	eb4e 0b09 	adc.w	fp, lr, r9
 801a942:	eea2 7b04 	vfma.f64	d7, d2, d4
 801a946:	2e00      	cmp	r6, #0
 801a948:	d156      	bne.n	801a9f8 <exp+0x1a8>
 801a94a:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 801a94e:	4631      	mov	r1, r6
 801a950:	ea50 0301 	orrs.w	r3, r0, r1
 801a954:	d113      	bne.n	801a97e <exp+0x12e>
 801a956:	4a34      	ldr	r2, [pc, #208]	; (801aa28 <exp+0x1d8>)
 801a958:	eb1a 0407 	adds.w	r4, sl, r7
 801a95c:	eb4b 0502 	adc.w	r5, fp, r2
 801a960:	ec45 4b10 	vmov	d0, r4, r5
 801a964:	ec45 4b16 	vmov	d6, r4, r5
 801a968:	eea7 0b06 	vfma.f64	d0, d7, d6
 801a96c:	ed9f 7b26 	vldr	d7, [pc, #152]	; 801aa08 <exp+0x1b8>
 801a970:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a974:	b007      	add	sp, #28
 801a976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a97a:	f000 b891 	b.w	801aaa0 <__math_check_oflow>
 801a97e:	4a2b      	ldr	r2, [pc, #172]	; (801aa2c <exp+0x1dc>)
 801a980:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801a984:	2100      	movs	r1, #0
 801a986:	eb1a 0301 	adds.w	r3, sl, r1
 801a98a:	ee05 3a10 	vmov	s10, r3
 801a98e:	eb4b 0302 	adc.w	r3, fp, r2
 801a992:	ee05 3a90 	vmov	s11, r3
 801a996:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a99a:	ee35 6b07 	vadd.f64	d6, d5, d7
 801a99e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9a6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801aa10 <exp+0x1c0>
 801a9aa:	d51e      	bpl.n	801a9ea <exp+0x19a>
 801a9ac:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a9b0:	ee36 3b04 	vadd.f64	d3, d6, d4
 801a9b4:	ee35 7b07 	vadd.f64	d7, d5, d7
 801a9b8:	ee34 5b43 	vsub.f64	d5, d4, d3
 801a9bc:	ee35 6b06 	vadd.f64	d6, d5, d6
 801a9c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a9c4:	ee36 6b03 	vadd.f64	d6, d6, d3
 801a9c8:	ee36 6b44 	vsub.f64	d6, d6, d4
 801a9cc:	eeb5 6b40 	vcmp.f64	d6, #0.0
 801a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9d4:	d101      	bne.n	801a9da <exp+0x18a>
 801a9d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 801aa18 <exp+0x1c8>
 801a9da:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a9de:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9e2:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a9e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a9ea:	ee26 0b00 	vmul.f64	d0, d6, d0
 801a9ee:	b007      	add	sp, #28
 801a9f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f4:	f000 b848 	b.w	801aa88 <__math_check_uflow>
 801a9f8:	ec4b ab10 	vmov	d0, sl, fp
 801a9fc:	eea7 0b00 	vfma.f64	d0, d7, d0
 801aa00:	e73c      	b.n	801a87c <exp+0x2c>
 801aa02:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801aa18 <exp+0x1c8>
 801aa06:	e739      	b.n	801a87c <exp+0x2c>
 801aa08:	00000000 	.word	0x00000000
 801aa0c:	7f000000 	.word	0x7f000000
 801aa10:	00000000 	.word	0x00000000
 801aa14:	00100000 	.word	0x00100000
	...
 801aa20:	fff00000 	.word	0xfff00000
 801aa24:	0801e000 	.word	0x0801e000
 801aa28:	c0f00000 	.word	0xc0f00000
 801aa2c:	3fe00000 	.word	0x3fe00000

0801aa30 <with_errno>:
 801aa30:	b513      	push	{r0, r1, r4, lr}
 801aa32:	4604      	mov	r4, r0
 801aa34:	ed8d 0b00 	vstr	d0, [sp]
 801aa38:	f7fd ff00 	bl	801883c <__errno>
 801aa3c:	ed9d 0b00 	vldr	d0, [sp]
 801aa40:	6004      	str	r4, [r0, #0]
 801aa42:	b002      	add	sp, #8
 801aa44:	bd10      	pop	{r4, pc}

0801aa46 <xflow>:
 801aa46:	b082      	sub	sp, #8
 801aa48:	b158      	cbz	r0, 801aa62 <xflow+0x1c>
 801aa4a:	eeb1 7b40 	vneg.f64	d7, d0
 801aa4e:	ed8d 7b00 	vstr	d7, [sp]
 801aa52:	ed9d 7b00 	vldr	d7, [sp]
 801aa56:	2022      	movs	r0, #34	; 0x22
 801aa58:	ee20 0b07 	vmul.f64	d0, d0, d7
 801aa5c:	b002      	add	sp, #8
 801aa5e:	f7ff bfe7 	b.w	801aa30 <with_errno>
 801aa62:	eeb0 7b40 	vmov.f64	d7, d0
 801aa66:	e7f2      	b.n	801aa4e <xflow+0x8>

0801aa68 <__math_uflow>:
 801aa68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801aa70 <__math_uflow+0x8>
 801aa6c:	f7ff bfeb 	b.w	801aa46 <xflow>
 801aa70:	00000000 	.word	0x00000000
 801aa74:	10000000 	.word	0x10000000

0801aa78 <__math_oflow>:
 801aa78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801aa80 <__math_oflow+0x8>
 801aa7c:	f7ff bfe3 	b.w	801aa46 <xflow>
 801aa80:	00000000 	.word	0x00000000
 801aa84:	70000000 	.word	0x70000000

0801aa88 <__math_check_uflow>:
 801aa88:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801aa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa90:	d102      	bne.n	801aa98 <__math_check_uflow+0x10>
 801aa92:	2022      	movs	r0, #34	; 0x22
 801aa94:	f7ff bfcc 	b.w	801aa30 <with_errno>
 801aa98:	4770      	bx	lr
 801aa9a:	0000      	movs	r0, r0
 801aa9c:	0000      	movs	r0, r0
	...

0801aaa0 <__math_check_oflow>:
 801aaa0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801aac0 <__math_check_oflow+0x20>
 801aaa4:	eeb0 7bc0 	vabs.f64	d7, d0
 801aaa8:	eeb4 7b46 	vcmp.f64	d7, d6
 801aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab0:	dd02      	ble.n	801aab8 <__math_check_oflow+0x18>
 801aab2:	2022      	movs	r0, #34	; 0x22
 801aab4:	f7ff bfbc 	b.w	801aa30 <with_errno>
 801aab8:	4770      	bx	lr
 801aaba:	bf00      	nop
 801aabc:	f3af 8000 	nop.w
 801aac0:	ffffffff 	.word	0xffffffff
 801aac4:	7fefffff 	.word	0x7fefffff

0801aac8 <sqrt>:
 801aac8:	b508      	push	{r3, lr}
 801aaca:	ed2d 8b04 	vpush	{d8-d9}
 801aace:	eeb0 8b40 	vmov.f64	d8, d0
 801aad2:	f000 f823 	bl	801ab1c <__ieee754_sqrt>
 801aad6:	4b10      	ldr	r3, [pc, #64]	; (801ab18 <sqrt+0x50>)
 801aad8:	f993 3000 	ldrsb.w	r3, [r3]
 801aadc:	3301      	adds	r3, #1
 801aade:	d011      	beq.n	801ab04 <sqrt+0x3c>
 801aae0:	eeb4 8b48 	vcmp.f64	d8, d8
 801aae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae8:	d60c      	bvs.n	801ab04 <sqrt+0x3c>
 801aaea:	ed9f 9b09 	vldr	d9, [pc, #36]	; 801ab10 <sqrt+0x48>
 801aaee:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801aaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaf6:	d505      	bpl.n	801ab04 <sqrt+0x3c>
 801aaf8:	f7fd fea0 	bl	801883c <__errno>
 801aafc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801ab00:	2321      	movs	r3, #33	; 0x21
 801ab02:	6003      	str	r3, [r0, #0]
 801ab04:	ecbd 8b04 	vpop	{d8-d9}
 801ab08:	bd08      	pop	{r3, pc}
 801ab0a:	bf00      	nop
 801ab0c:	f3af 8000 	nop.w
	...
 801ab18:	20000230 	.word	0x20000230

0801ab1c <__ieee754_sqrt>:
 801ab1c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ab20:	4770      	bx	lr
	...

0801ab24 <_init>:
 801ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab26:	bf00      	nop
 801ab28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab2a:	bc08      	pop	{r3}
 801ab2c:	469e      	mov	lr, r3
 801ab2e:	4770      	bx	lr

0801ab30 <_fini>:
 801ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab32:	bf00      	nop
 801ab34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab36:	bc08      	pop	{r3}
 801ab38:	469e      	mov	lr, r3
 801ab3a:	4770      	bx	lr
